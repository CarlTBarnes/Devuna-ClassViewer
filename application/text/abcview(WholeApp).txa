[APPLICATION]
VERSION 34
TODO ABC ToDo
HLP 'abcview.hlp'
PROCEDURE _main
[COMMON]
FROM ABC
MODIFIED '2011/04/30' ' 9:31:28'
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('ErrorManager', 'ErrorStatusManager', 'FileManager:', |
  'FuzzyMatcher', 'INIManager', 'RelationManager:', 'Translator')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('ErrorClass')
WHEN  ('ErrorStatusManager') ('ErrorStatusClass')
WHEN  ('FuzzyMatcher') ('FuzzyClass')
WHEN  ('INIManager') ('INIClass')
WHEN  ('Translator') ('TranslatorClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%ProgramAuthor DEFAULT  ('Randy Rogers')
%Repository DEFAULT  ('')
%ProgramIcon DEFAULT  ('abcview.ico')
%MessageDescription LONG  (1)
%GlobalExternal LONG  (0)
%ExternalSource DEFAULT  ('Dynamic Link Library (DLL)')
%GenerateEmbedComments LONG  (0)
%INIType DEFAULT  ('NVD_INI')
%INIFile DEFAULT  ('Program Name.INI')
%ININame DEFAULT  ('')
%INIProgramIniLocation DEFAULT  ('CSIDLDIR')
%INICSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%CSIDLCompanyDir DEFAULT  ('ClassViewer')
%CSIDLProductDir DEFAULT  ('')
%CSIDLCreate LONG  (1)
%INIInAppDirectory LONG  (0)
%REGRoot DEFAULT  ('REG_CLASSES_ROOT')
%DisableINISaveWindow LONG  (0)
%PreserveVars MULTI LONG  ()
%PreserveVar DEPEND %PreserveVars DEFAULT TIMES 0

%EnableRunTimeTranslator LONG  (0)
%FuzzyMatchingEnabled LONG  (1)
%IgnoreCase LONG  (1)
%WordOnly LONG  (0)
%ButtonMarginsCompatibility LONG  (0)
%UseDefaultXPManifest LONG  (0)
%GenerateXPManifest LONG  (1)
%LinkGenerateXPManifest LONG  (1)
%AddVistaXPManifest LONG  (1)
%VistaManifestExecutionLevel DEFAULT  ('asInvoker')
%VistaManifestUIAccess LONG  (0)
%NoThemedControlsDependency LONG  (0)
%VistaManifestdpiAware LONG  (1)
%VistaManifestDependentAssembly MULTI LONG  ()
%VistaManifestDependentAssemblyName DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyVersion DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyType DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyPublicKeyToken DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyLanguage DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyProcessorArchitecture DEPEND %VistaManifestDependentAssembly LONG TIMES 0

%W7ManifestVista LONG  (0)
%W7ManifestW7 LONG  (1)
%W7ManifestW8 LONG  (1)
%W7ManifestW81 LONG  (1)
%W7ManifestW10 LONG  (1)
%ForceMakeTransparentXPManifest LONG  (1)
%ForceMakeColorXPManifest LONG  (0)
%ForceSHEETNoTheme LONG  (0)
%ExtUIXPMenuEnableGlobal LONG  (1)
%ExtUIXPMenuColorTypeGlobal DEFAULT  ('XPLunaBlueLight')
%ExtUIXPMenuDisableImageBar LONG  (0)
%ExtUIXPMenuEnableRuntime LONG  (0)
%ExtUIXPMenuRuntimeVar DEFAULT  ('glo:hwnd_main')
%ExtUIXPMenuColorLeftGlobal LONG  (16706781)
%ExtUIXPMenuColorRightGlobal LONG  (14854529)
%ExtUIXPMenuColorSelectionBarLeftGlobal LONG  (16706781)
%ExtUIXPMenuColorSelectionBarRightGlobal LONG  (14854529)
%ExtUIXPMenuSelVertical LONG  (1)
%ExtUIXPMenuColorSelectionBorderGlobal LONG  (8388608)
%ExtUIXPMenuColorHotLeftGlobal LONG  (16706781)
%ExtUIXPMenuColorHotRightGlobal LONG  (14854529)
%ExtUIXPMenuColorSelectedLeftGlobal LONG  (16706781)
%ExtUIXPMenuColorSelectedRightGlobal LONG  (14854529)
%ExtUIXPMenuColorNormalBarLeftGlobal LONG  (16777215)
%ExtUIXPMenuColorNormalBarRightGlobal LONG  (16115425)
%ExtUIXPMenuColorItemBackgroundGlobal LONG  (-2147483644)
%ExtUIXPMenuColorNormalText LONG  (0)
%ExtUIXPMenuColorSelectedText LONG  (16777215)
%ExtUIXPMenuColorHotText LONG  (16777215)
%ExtUIXPMenuFlat LONG  (1)
%ExtUIXPMenuShowImageBar LONG  (0)
%ExtUIXPMenuSeparator3D LONG  (1)
%ExtUIXPMenuSeparatorFull LONG  (0)
%ExtUIXPMenuVerticalLine LONG  (1)
%ExtUIMDITabGlobal DEFAULT  ('DISABLE')
%ExtUIMDITabStyleGlobal DEFAULT  ('Default')
%ExtUITabStyleGlobal DEFAULT  ('Default')
%WindowEnableEnhanceFocus LONG  (0)
%SelectedText LONG  (1)
%SelectedRadio LONG  (1)
%SelectedSpin LONG  (1)
%SelectedCheck LONG  (1)
%SelectedDropList LONG  (1)
%SelectedList LONG  (1)
%SelectedDisplayChangeColor LONG  (1)
%SelectedColor LONG  (65535)
%SelectedStyle LONG  (1)
%SelectedRequired LONG  (0)
%SelectedRequiredColor LONG  (65535)
%SelectedDisplayBox LONG  (1)
%SelectedDisplayBoxFillColor LONG  (65535)
%SelectedDisplayBoxBorderColor LONG  (0)
%SelectedDisplayBoxBorderSize DEFAULT  ('2')
%SelectedRequiredBox LONG  (0)
%SelectedRequiredDisplayBoxFillColor LONG  (255)
%SelectedRequiredDisplayBoxBorderColor LONG  (0)
%SelectedCaret LONG  (1)
%SelectedCaretColor LONG  (8421504)
%SelectedCaretCharacter DEFAULT  ('»')
%SelectedCaretCharacterSeparation DEFAULT  ('8')
%ExcludeSelectedDropList LONG  (1)
%EnableOSK DEFAULT  ('OFF')
%GlobalUseEnterInsteadTab LONG  (0)
%GlobalUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalUseEnterInsteadTabEnable DEFAULT  ('Enable')
%GlobalUseEnterInsteadTabEnableValue DEFAULT  ('True')
%GlobalInterLine DEFAULT  ('0')
%GlobalEnableAutoSizeColumn LONG  (0)
%GlobalEnableListFormatManager LONG  (0)
%GlobalUserFieldListFormatManager DEFAULT  ('1')
%TableOrigin DEFAULT  ('Application')
%FileEquate DEFAULT  ('LFM_CFile')
%ConfigFilePRE DEFAULT  ('CFG')
%ConfigFileOEM LONG  (0)
%ConfigFileTHREAD LONG  (1)
%ConfigFileENCRYPT LONG  (0)
%ConfigFilePASSWORD DEFAULT  ('')
%FormatNameSize DEFAULT  ('30')
%FormatBufferSize DEFAULT  ('5120')
%VariableBufferSize DEFAULT  ('2048')
%ConfigFilePath DEFAULT  ('')
%UseConfigFileName DEFAULT  ('Default')
%ConfigFileNAME DEFAULT  ('Formats.FDB')
%ColonCounter DEFAULT  ('')
%WrongSymbol DEFAULT  ('')
%DictionaryTableOrigin FILE  ()
%GlobalLFMSortOrderMenuText DEFAULT  ('SortOrder')
%GlobalEnableRebase LONG  (0)
%RBDMethod DEFAULT  ('Specify manually')
%RBDImageBase DEFAULT  ('10000000')
%DefaultGenerate LONG  (0)
%DefaultRILogout LONG  (1)
%LockRecoverTime DEFAULT  ('10')
%DefaultThreaded DEFAULT  ('Use File Setting')
%DefaultCreate DEFAULT  ('Use File Setting')
%DefaultExternal DEFAULT  ('None External')
%DefaultLocalExternal LONG  (0)
%DefaultExternalSource DEFAULT  ('')
%DefaultExternalAPP LONG  (0)
%DefaultExport LONG  (0)
%DefaultOpenMode DEFAULT  ('Share')
%DefaultUserAccess DEFAULT  ('Read/Write')
%DefaultOtherAccess DEFAULT  ('Deny None')
%DefaultLazyOpen LONG  (1)
%GeneratePropDataPath LONG  (0)
%PropDataPathLocation DEFAULT  ('CSIDLLIKEINI')
%DataPathCSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%DataPathCSIDLCompanyDir DEFAULT  ('')
%DataPathCSIDLProductDir DEFAULT  ('')
%DataPathCSIDLCreate LONG  (0)
%DataPathOtherDirectory DEFAULT  ('')
%DataPathOtherDirectoryCreate LONG  (0)
%OverrideGenerate DEPEND %File LONG TIMES 0

%OverrideRILogout DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('YES')
WHEN  ('ErrorStatusManager') ('YES')
WHEN  ('FuzzyMatcher') ('YES')
WHEN  ('INIManager') ('YES')
WHEN  ('Translator') ('YES')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('GlobalErrors')
WHEN  ('ErrorStatusManager') ('GlobalErrorsStatus')
WHEN  ('FuzzyMatcher') ('FuzzyMatcher')
WHEN  ('INIManager') ('INIMgr')
WHEN  ('Translator') ('Translator')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('ADOBlob')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (0)
WHEN  ('ErrorStatusManager') (0)
WHEN  ('FuzzyMatcher') (0)
WHEN  ('INIManager') (0)
WHEN  ('Translator') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('FuzzyMatcher')TIMES 0
WHEN  ('INIManager')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('FuzzyMatcher')TIMES 0
WHEN  ('INIManager')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%OverrideThreaded DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideCreate DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideExternal DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLocalExternal DEPEND %File LONG TIMES 0

%OverrideExternalSource DEPEND %File DEFAULT TIMES 0

%OverrideExternalAPP DEPEND %File LONG TIMES 0

%OverrideExport DEPEND %File LONG TIMES 0

%FileDeclarationMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use User Options')

%FileDeclarationType DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationThread DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationBindable DEPEND %File LONG TIMES 1
WHEN  ('') (1)

%FileDeclarationName DEPEND %File DEFAULT TIMES 0

%FileDeclarationOver DEPEND %File DEFAULT TIMES 0

%OverrideOpenMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideUserAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideOtherAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLazyOpen DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideDoNotAssertOnCloseMisuse DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%StandardExternalModule DEPEND %Module LONG TIMES 72
WHEN  ('') (1)
WHEN  ('abcview.clw') (1)
WHEN  ('abcview001.clw') (1)
WHEN  ('abcview002.clw') (1)
WHEN  ('abcview003.clw') (1)
WHEN  ('abcview004.clw') (1)
WHEN  ('abcview005.clw') (1)
WHEN  ('abcview006.clw') (1)
WHEN  ('abcview007.clw') (1)
WHEN  ('abcview008.clw') (1)
WHEN  ('abcview009.clw') (1)
WHEN  ('abcview010.clw') (1)
WHEN  ('abcview011.clw') (1)
WHEN  ('abcview012.clw') (1)
WHEN  ('abcview013.clw') (1)
WHEN  ('abcview014.clw') (1)
WHEN  ('abcview015.clw') (1)
WHEN  ('abcview016.clw') (1)
WHEN  ('abcview017.clw') (1)
WHEN  ('abcview018.clw') (1)
WHEN  ('abcview019.clw') (1)
WHEN  ('abcview020.clw') (1)
WHEN  ('abcview021.clw') (1)
WHEN  ('abcview022.clw') (1)
WHEN  ('abcview023.clw') (1)
WHEN  ('abcview024.clw') (1)
WHEN  ('abcview025.clw') (1)
WHEN  ('abcview026.clw') (1)
WHEN  ('abcview027.clw') (1)
WHEN  ('abcview028.clw') (1)
WHEN  ('abcview029.clw') (1)
WHEN  ('abcview030.clw') (1)
WHEN  ('abcview031.clw') (1)
WHEN  ('abcview032.clw') (1)
WHEN  ('abcview033.clw') (1)
WHEN  ('abcview034.clw') (1)
WHEN  ('abcview035.clw') (1)
WHEN  ('abcview036.clw') (1)
WHEN  ('abcview037.clw') (1)
WHEN  ('abcview038.clw') (1)
WHEN  ('abcview039.clw') (1)
WHEN  ('abcview040.clw') (1)
WHEN  ('abcview041.clw') (1)
WHEN  ('abcview042.clw') (1)
WHEN  ('abcview043.clw') (1)
WHEN  ('abcview044.clw') (1)
WHEN  ('abcview045.clw') (1)
WHEN  ('abcview046.clw') (1)
WHEN  ('abcview047.clw') (1)
WHEN  ('abcview048.clw') (1)
WHEN  ('abcview049.clw') (1)
WHEN  ('abcview050.clw') (1)
WHEN  ('abcview051.clw') (1)
WHEN  ('abcview052.clw') (1)
WHEN  ('abcview053.clw') (1)
WHEN  ('abcview054.clw') (1)
WHEN  ('abcview055.clw') (1)
WHEN  ('abcview056.clw') (1)
WHEN  ('abcview057.clw') (1)
WHEN  ('abcview058.clw') (1)
WHEN  ('abcview059.clw') (1)
WHEN  ('abcview060.clw') (1)
WHEN  ('abcview061.clw') (1)
WHEN  ('abcview062.clw') (1)
WHEN  ('abcview063.clw') (1)
WHEN  ('abcview064.clw') (1)
WHEN  ('abcview065.clw') (1)
WHEN  ('abcview066.clw') (1)
WHEN  ('abcview067.clw') (1)
WHEN  ('abcview068.clw') (1)
WHEN  ('abcview069.clw') (1)
WHEN  ('abcview070.clw') (1)

%NoGenerateGlobals LONG  (0)
%WindowManagerType DEFAULT  ('WindowManager')
%ResetOnGainFocus LONG  (0)
%AutoToolbar LONG  (1)
%AutoRefresh LONG  (1)
%ImageClass DEFAULT  ('ImageManager')
%ErrorStatusManagerType DEFAULT  ('ErrorStatusClass')
%ErrorManagerType DEFAULT  ('ErrorClass')
%DefaultErrorCategory DEFAULT  ('ABC')
%AllowSelectCopy LONG  (0)
%StoreErrorHistory LONG  (0)
%LimitStoredHistory LONG  (0)
%ErrorHistoryThreshold DEFAULT  ('300')
%HistoryViewTrigger DEFAULT  ('Level:Fatal')
%PopupClass DEFAULT  ('PopupClass')
%SelectFileClass DEFAULT  ('SelectFileClass')
%ResizerType DEFAULT  ('WindowResizeClass')
%ResizerDeFaultFindParents LONG  (1)
%ResizerDefaultOptimizeMoves LONG  (1)
%ResizerDefaultOptimizeRedraws LONG  (1)
%INIClass DEFAULT  ('INIClass')
%RunTimeTranslatorType DEFAULT  ('TranslatorClass')
%ExtractionFilename DEFAULT  ('')
%TranslationGroups MULTI LONG  ()
%TranslationFile DEPEND %TranslationGroups DEFAULT TIMES 0

%TranslationGroup DEPEND %TranslationGroups DEFAULT TIMES 0

%CalendarManagerType DEFAULT  ('CalendarClass')
%GlobalChangeColor LONG  (0)
%GlobalColorSunday LONG  (255)
%GlobalColorSaturday LONG  (255)
%GlobalColorHoliday LONG  (32768)
%GlobalColorOther LONG  (0)
%GlobalSelectOnClose DEFAULT  ('Select')
%GlobalUseABCClasess LONG  (1)
%FileManagerType DEFAULT  ('FileManager')
%ViewManagerType DEFAULT  ('ViewManager')
%RelationManagerType DEFAULT  ('RelationManager')
%BrowserType DEFAULT  ('BrowseClass')
%ActiveInvisible LONG  (0)
%AllowUnfilled LONG  (0)
%RetainRow LONG  (1)
%FileDropManagerType DEFAULT  ('FileDropClass')
%FileDropComboManagerType DEFAULT  ('FileDropComboClass')
%FormVCRManagerType DEFAULT  ('FormVCRClass')
%BrowseEIPManagerType DEFAULT  ('BrowseEIPManager')
%EditInPlaceInterface DEFAULT  ('Original')
%EditInPlaceType DEFAULT  ('EditEntryClass')
%EditInPlaceEntryType DEFAULT  ('EditEntryClass')
%EditInPlaceTextType DEFAULT  ('EditTextClass')
%EditInPlaceCheckType DEFAULT  ('EditCheckClass')
%EditInPlaceSpinType DEFAULT  ('EditSpinClass')
%EditInPlaceDropListType DEFAULT  ('EditDropListClass')
%EditInPlaceDropComboType DEFAULT  ('EditDropComboClass')
%EditInPlaceColorType DEFAULT  ('EditColorClass')
%EditInPlaceFileType DEFAULT  ('EditFileClass')
%EditInPlaceFontType DEFAULT  ('EditFontClass')
%EditInPlaceMultiSelectType DEFAULT  ('EditMultiSelectClass')
%EditInPlaceCalendarType DEFAULT  ('EditCalendarClass')
%EditInPlaceLookupType DEFAULT  ('EditLookupClass')
%EditInPlaceOtherType DEFAULT  ('EditEntryClass')
%QBEFormType DEFAULT  ('QueryFormClass')
%QBEFormVisualType DEFAULT  ('QueryFormVisual')
%QBEListType DEFAULT  ('QueryListClass')
%QBEListVisualType DEFAULT  ('QueryListVisual')
%StepManagerType DEFAULT  ('StepClass')
%StepManagerLongType DEFAULT  ('StepLongClass')
%StepManagerRealType DEFAULT  ('StepRealClass')
%StepManagerStringType DEFAULT  ('StepStringClass')
%StepManagerCustomType DEFAULT  ('StepCustomClass')
%StepLocatorType DEFAULT  ('StepLocatorClass')
%EntryLocatorType DEFAULT  ('EntryLocatorClass')
%IncrementalLocatorType DEFAULT  ('IncrementalLocatorClass')
%FilteredLocatorType DEFAULT  ('FilterLocatorClass')
%FuzzyMatcherClass DEFAULT  ('FuzzyClass')
%GridClass DEFAULT  ('GridClass')
%SidebarClass DEFAULT  ('SidebarClass')
%ProcessType DEFAULT  ('ProcessClass')
%PrintPreviewType DEFAULT  ('PrintPreviewClass')
%ReportManagerType DEFAULT  ('ReportManager')
%ReportTargetSelectorManagerType DEFAULT  ('ReportTargetSelectorClass')
%BreakManagerType DEFAULT  ('BreakManagerClass')
%AsciiViewerClass DEFAULT  ('AsciiViewerClass')
%AsciiSearchClass DEFAULT  ('AsciiSearchClass')
%AsciiPrintClass DEFAULT  ('AsciiPrintClass')
%AsciiFileManagerType DEFAULT  ('AsciiFileClass')
%ToolbarClass DEFAULT  ('ToolbarClass')
%ToolbarListBoxType DEFAULT  ('ToolbarListboxClass')
%ToolbarRelTreeType DEFAULT  ('ToolbarReltreeClass')
%ToolbarUpdateClassType DEFAULT  ('ToolbarUpdateClass')
%ToolbarFormVCRType DEFAULT  ('ToolbarFormVCRClass')
%OverrideAbcSettings LONG  (0)
%AbcSourceLocation DEFAULT  ('LINK')
%AbcLibraryName DEFAULT  ('')
%AppTemplateFamily DEFAULT  ('ABC')
%CWTemplateVersion DEFAULT  ('v10.0')
%ABCVersion DEFAULT  ('10000')
%WindowFrameDragging LONG  (1)
%INIActive LONG  (0)
%GlobalUseDefaultFileManager LONG  (1)
%GlobalFileManagerClass DEFAULT  ('')
%GlobalUseDefaultRelationManager LONG  (1)
%GlobalRelationManagerClass DEFAULT  ('')
%OverrideUseDefaultFileManager DEPEND %File LONG TIMES 0

%OverrideFileManagerClass DEPEND %File DEFAULT TIMES 0

%OverrideUseDefaultRelationManager DEPEND %File LONG TIMES 0

%OverrideRelationManagerClass DEPEND %File DEFAULT TIMES 0

%EnableExceptionMessage LONG  (0)
[ADDITION]
NAME KCR KCR_ProjectAdditions
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_ProjectAdditions (Devuna)')
%TplDescription DEFAULT  ('Add Resources to Project')
%ProjectAddition MULTI DEFAULT  ('class.ico', 'DELETE.ICO', 'edit.ico', 'Clsdfold.ico', |
  'new.ico', 'OPENFOLD.ICO', 'VCRDOWN.ICO', 'intrface.ico', 'nointrfc.ico', 'pfolder.ico', |
  'property.ico', 'mfolder.ico', 'method.ico', 'structyp.ico', 'sfolder.ico', 'efolder.ico', |
  'equate.ico', 'global.ico', 'data.ico', 'note.ico', 'newnote.ico')
[ADDITION]
NAME KCR KCR_Win32
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_Win32 (Devuna)')
%TplDescription DEFAULT  ('Add Win32 and C Library prototypes and equates')
%IncludeEquates LONG  (1)
%IncludeMap LONG  (1)
[ADDITION]
NAME KCR KCR_ApplicationHelp
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ApplicationHelp (Devuna)')
%TplDescription DEFAULT  ('Add KCR_SetWindowHelp Template')
[ADDITION]
NAME ABC cwHHGlobal
[INSTANCE]
INSTANCE 5
[PROMPTS]
%cwHHgFileName DEFAULT  ('ABCVIEW.CHM')
%cwHHappendHTM LONG  (0)
%cwHHUseHelpButton LONG  (0)
%cwHHGlobalAltTrapKey DEFAULT  ('')
%cwHHUseHelpIndex LONG  (0)
%cwHHUseHelpSearch LONG  (0)
%cwHHUseHelpHowTo LONG  (0)
[ADDITION]
NAME iQXML_Parser_Writer iQXML_Global
[INSTANCE]
INSTANCE 2
[PROMPTS]
%iQNoGlobals LONG  (0)
%iQIncludeError LONG  (0)
%iQErrorCheckOptions DEFAULT  ('Use Standard Clarion Message Box')
%IOErrorMessageText DEFAULT  ('')
%IOErrorMessageTitle DEFAULT  ('')
%GlobalDataExternal LONG  (0)
%IQDLL LONG  (1)
[ADDITION]
NAME ClassViewer UseLocalIni
[INSTANCE]
INSTANCE 3
[PERSIST]
%SaveCreateLocalMap DEFAULT  ('1')
%GenerationCompleted DEPEND %Module DEFAULT TIMES 71
WHEN  ('abcview.clw') ('1')
WHEN  ('abcview001.clw') ('1')
WHEN  ('abcview002.clw') ('1')
WHEN  ('abcview003.clw') ('1')
WHEN  ('abcview004.clw') ('1')
WHEN  ('abcview005.clw') ('1')
WHEN  ('abcview006.clw') ('1')
WHEN  ('abcview007.clw') ('1')
WHEN  ('abcview008.clw') ('1')
WHEN  ('abcview009.clw') ('1')
WHEN  ('abcview010.clw') ('1')
WHEN  ('abcview011.clw') ('1')
WHEN  ('abcview012.clw') ('1')
WHEN  ('abcview013.clw') ('1')
WHEN  ('abcview014.clw') ('1')
WHEN  ('abcview015.clw') ('1')
WHEN  ('abcview016.clw') ('1')
WHEN  ('abcview017.clw') ('1')
WHEN  ('abcview018.clw') ('1')
WHEN  ('abcview019.clw') ('1')
WHEN  ('abcview020.clw') ('1')
WHEN  ('abcview021.clw') ('1')
WHEN  ('abcview022.clw') ('1')
WHEN  ('abcview023.clw') ('1')
WHEN  ('abcview024.clw') ('1')
WHEN  ('abcview025.clw') ('1')
WHEN  ('abcview026.clw') ('1')
WHEN  ('abcview027.clw') ('1')
WHEN  ('abcview028.clw') ('1')
WHEN  ('abcview029.clw') ('1')
WHEN  ('abcview030.clw') ('1')
WHEN  ('abcview031.clw') ('1')
WHEN  ('abcview032.clw') ('1')
WHEN  ('abcview033.clw') ('1')
WHEN  ('abcview034.clw') ('1')
WHEN  ('abcview035.clw') ('1')
WHEN  ('abcview036.clw') ('1')
WHEN  ('abcview037.clw') ('1')
WHEN  ('abcview038.clw') ('1')
WHEN  ('abcview039.clw') ('1')
WHEN  ('abcview040.clw') ('1')
WHEN  ('abcview041.clw') ('1')
WHEN  ('abcview042.clw') ('1')
WHEN  ('abcview043.clw') ('1')
WHEN  ('abcview044.clw') ('1')
WHEN  ('abcview045.clw') ('1')
WHEN  ('abcview046.clw') ('1')
WHEN  ('abcview047.clw') ('1')
WHEN  ('abcview048.clw') ('1')
WHEN  ('abcview049.clw') ('1')
WHEN  ('abcview050.clw') ('1')
WHEN  ('abcview051.clw') ('1')
WHEN  ('abcview052.clw') ('1')
WHEN  ('abcview053.clw') ('1')
WHEN  ('abcview054.clw') ('1')
WHEN  ('abcview055.clw') ('1')
WHEN  ('abcview056.clw') ('1')
WHEN  ('abcview057.clw') ('1')
WHEN  ('abcview058.clw') ('1')
WHEN  ('abcview059.clw') ('1')
WHEN  ('abcview060.clw') ('1')
WHEN  ('abcview061.clw') ('1')
WHEN  ('abcview062.clw') ('1')
WHEN  ('abcview063.clw') ('1')
WHEN  ('abcview064.clw') ('1')
WHEN  ('abcview065.clw') ('1')
WHEN  ('abcview066.clw') ('1')
WHEN  ('abcview067.clw') ('1')
WHEN  ('abcview068.clw') ('1')
WHEN  ('abcview069.clw') ('1')
WHEN  ('abcview070.clw') ('1')

%LastTarget32 DEFAULT  ('1')
%LastProgramExtension DEFAULT  ('EXE')
%LastApplicationDebug DEFAULT  ('')
%LastApplicationLocalLibrary DEFAULT  ('')
[PROJECT]
-- NAMESPACE ClarionDefaultNamespace
#system win32 exe
#model clarion dll
#set RELEASE = on
#pragma link_option(icon=>abcview.ico)
#pragma define(_ABCDllMode_=>0) -- GENERATED
#pragma define(_ABCLinkMode_=>1) -- GENERATED
#pragma define(_SCIDllMode_=>0) -- GENERATED
#pragma define(_SCILinkMode_=>1) -- GENERATED
#compile "abcview.clw" -- GENERATED
#compile "abcview001.clw" -- GENERATED
#compile "abcview002.clw" -- GENERATED
#compile "abcview003.clw" -- GENERATED
#compile "abcview004.clw" -- GENERATED
#compile "abcview005.clw" -- GENERATED
#compile "abcview006.clw" -- GENERATED
#compile "abcview007.clw" -- GENERATED
#compile "abcview008.clw" -- GENERATED
#compile "abcview009.clw" -- GENERATED
#compile "abcview010.clw" -- GENERATED
#compile "abcview011.clw" -- GENERATED
#compile "abcview012.clw" -- GENERATED
#compile "abcview013.clw" -- GENERATED
#compile "abcview014.clw" -- GENERATED
#compile "abcview015.clw" -- GENERATED
#compile "abcview016.clw" -- GENERATED
#compile "abcview017.clw" -- GENERATED
#compile "abcview018.clw" -- GENERATED
#compile "abcview019.clw" -- GENERATED
#compile "abcview020.clw" -- GENERATED
#compile "abcview021.clw" -- GENERATED
#compile "abcview022.clw" -- GENERATED
#compile "abcview023.clw" -- GENERATED
#compile "abcview024.clw" -- GENERATED
#compile "abcview025.clw" -- GENERATED
#compile "abcview026.clw" -- GENERATED
#compile "abcview027.clw" -- GENERATED
#compile "abcview028.clw" -- GENERATED
#compile "abcview029.clw" -- GENERATED
#compile "abcview030.clw" -- GENERATED
#compile "abcview031.clw" -- GENERATED
#compile "abcview032.clw" -- GENERATED
#compile "abcview033.clw" -- GENERATED
#compile "abcview034.clw" -- GENERATED
#compile "abcview035.clw" -- GENERATED
#compile "abcview036.clw" -- GENERATED
#compile "abcview037.clw" -- GENERATED
#compile "abcview038.clw" -- GENERATED
#compile "abcview039.clw" -- GENERATED
#compile "abcview040.clw" -- GENERATED
#compile "abcview041.clw" -- GENERATED
#compile "abcview042.clw" -- GENERATED
#compile "abcview043.clw" -- GENERATED
#compile "abcview044.clw" -- GENERATED
#compile "abcview045.clw" -- GENERATED
#compile "abcview046.clw" -- GENERATED
#compile "abcview047.clw" -- GENERATED
#compile "abcview048.clw" -- GENERATED
#compile "abcview049.clw" -- GENERATED
#compile "abcview050.clw" -- GENERATED
#compile "abcview051.clw" -- GENERATED
#compile "abcview052.clw" -- GENERATED
#compile "abcview053.clw" -- GENERATED
#compile "abcview054.clw" -- GENERATED
#compile "abcview055.clw" -- GENERATED
#compile "abcview056.clw" -- GENERATED
#compile "abcview057.clw" -- GENERATED
#compile "abcview058.clw" -- GENERATED
#compile "abcview059.clw" -- GENERATED
#compile "abcview060.clw" -- GENERATED
#compile "abcview061.clw" -- GENERATED
#compile "abcview062.clw" -- GENERATED
#compile "abcview063.clw" -- GENERATED
#compile "abcview064.clw" -- GENERATED
#compile "abcview065.clw" -- GENERATED
#compile "abcview066.clw" -- GENERATED
#compile "abcview067.clw" -- GENERATED
#compile "abcview068.clw" -- GENERATED
#compile "abcview069.clw" -- GENERATED
#compile "abcview070.clw" -- GENERATED
#compile "TTUTILLIB.C" -- GENERATED
#compile "abcview_BC0.CLW" -- GENERATED
#compile "ABCVIEW_BC.CLW" -- GENERATED
#pragma link("C%V%asc%X%%L%.lib") -- GENERATED
#pragma link("C%V%dos%X%%L%.lib") -- GENERATED
#link "abcview.EXE"
[PROGRAM]
[COMMON]
FROM ABC ABC
MODIFIED '2017/07/02' ' 9:05:06'
[DATA]
[SCREENCONTROLS]
! PROMPT('glo : Version:'),USE(?glo:Version:Prompt)
! ENTRY(@s13),USE(glo:Version)
[REPORTCONTROLS]
! STRING(@s13),USE(glo:Version)
glo:Version              CSTRING(14)
!!> GUID('f8380b8d-8e14-475f-bca0-3f7e40e5c157'),INITIAL('2017.07.03<0,0,0>'),PROMPT('glo : Version:'),HEADER('glo : Version'),PICTURE(@s13),TYPEMODE(INS)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:hwnd_main)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:hwnd_main)
glo:hwnd_main            LONG
!!> GUID('097d3d06-f182-4074-bb23-c6f7b7a2b7a0'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:lMainThread)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lMainThread)
glo:lMainThread          LONG
!!> GUID('ff860db0-a9f8-42b6-aed4-4678c777c9f2'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:lLoadingThread)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lLoadingThread)
glo:lLoadingThread       LONG
!!> GUID('40a0198d-9e03-4d6c-8eb8-77f36b79084a'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('glo : b Refresh All:'),USE(?glo:bRefreshAll:Prompt)
! ENTRY(@n3),USE(glo:bRefreshAll)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bRefreshAll)
glo:bRefreshAll          BYTE
!!> GUID('ea653094-5a3f-46cf-b9cd-ad795c190ec4'),PROMPT('glo : b Refresh All:'),HEADER('glo : b Refresh All'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('sz Ini Filename:'),USE(?szIniFilename:Prompt)
! TEXT,USE(szIniFilename)
[REPORTCONTROLS]
! TEXT,USE(szIniFilename)
szIniFilename            CSTRING(256)
!!> GUID('6baee79d-575a-4a8a-a85b-d73647589fa5'),PROMPT('sz Ini Filename:'),HEADER('sz Ini Filename'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(szRoot)
[REPORTCONTROLS]
! TEXT,USE(szRoot)
szRoot                   CSTRING(256),THREAD,AUTO
!!> GUID('1b5ebd5b-5944-4d1a-9276-e65191fa9ba0'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(szShared)
[REPORTCONTROLS]
! TEXT,USE(szShared)
szShared                 CSTRING(256),THREAD,AUTO
!!> GUID('d82bf465-fd88-4e5a-9fa3-34907f665b28'),PROMPT('sz Root:'),HEADER('sz Root'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(szAsciiFilename)
[REPORTCONTROLS]
! TEXT,USE(szAsciiFilename)
szAsciiFilename          CSTRING(256),THREAD,AUTO
!!> GUID('3daffca9-1d2c-45d9-825f-6b1c3c021745'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(glo:szRedFilePath)
[REPORTCONTROLS]
! TEXT,USE(glo:szRedFilePath)
glo:szRedFilePath        CSTRING(256),THREAD,AUTO
!!> GUID('0bed6336-c0d0-4e5d-bd18-fd2a63b239cd'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(glo:szCurrentDir)
[REPORTCONTROLS]
! TEXT,USE(glo:szCurrentDir)
glo:szCurrentDir         CSTRING(256),THREAD,AUTO
!!> GUID('8ce5195d-7d64-4ea3-8f63-7687f74b11b7'),PROMPT('glo : sz Current Dir:'),HEADER('glo : sz Current Dir'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('glo : b Current View:'),USE(?glo:bCurrentView:Prompt)
! ENTRY(@n3),USE(glo:bCurrentView)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bCurrentView)
glo:bCurrentView         BYTE
!!> GUID('29c17f6f-8741-4dab-9286-802f1bd21042'),INITIAL('1'),PROMPT('glo : b Current View:'),HEADER('glo : b Current View'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:lModuleColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lModuleColor)
glo:lModuleColor         LONG
!!> GUID('544800a9-b274-46e3-823b-208bcd6133cd'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('glo : l Private Color:'),USE(?glo:lPrivateColor:Prompt)
! ENTRY(@n-14),USE(glo:lPrivateColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lPrivateColor),RIGHT(1)
glo:lPrivateColor        LONG
!!> GUID('fc084f5a-4b78-477b-bf5a-5933ecdfc641'),INITIAL('COLOR:RED'),PROMPT('glo : l Private Color:'),HEADER('glo : l Private Color'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : l Protected Color:'),USE(?glo:lProtectedColor:Prompt)
! ENTRY(@n-14),USE(glo:lProtectedColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lProtectedColor),RIGHT(1)
glo:lProtectedColor      LONG
!!> GUID('84f89d24-ad3c-4545-b949-96a507dda5e6'),INITIAL('COLOR:MAROON'),PROMPT('glo : l Protected Color:'),HEADER('glo : l Protected Color'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : l Virtual Color:'),USE(?glo:lVirtualColor:Prompt)
! ENTRY(@n-14),USE(glo:lVirtualColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lVirtualColor),RIGHT(1)
glo:lVirtualColor        LONG
!!> GUID('c8210ffb-e627-4cd9-921b-3d235d52dc6a'),INITIAL('COLOR:FUSCHIA'),PROMPT('glo : l Virtual Color:'),HEADER('glo : l Virtual Color'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : l Selected Back:'),USE(?glo:lSelectedBack:Prompt)
! ENTRY(@n-14),USE(glo:lSelectedBack),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lSelectedBack),RIGHT(1)
glo:lSelectedBack        LONG
!!> GUID('97519976-f46e-4fe5-8b95-e877cc91a7f0'),INITIAL('COLOR:NAVY'),PROMPT('glo : l Selected Back:'),HEADER('glo : l Selected Back'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:lSelectedFore)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lSelectedFore)
glo:lSelectedFore        LONG
!!> GUID('f080b589-1c1a-4458-908d-a309ca800b98'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('&Note Color:'),USE(?glo:lNoteColor:Prompt)
! ENTRY(@n-14),USE(glo:lNoteColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lNoteColor),RIGHT(1)
glo:lNoteColor           LONG
!!> GUID('86d5f557-5119-4b95-8689-f215f184b77a'),PROMPT('&Note Color:'),HEADER('Note Color'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : l Highlight Color 1:'),USE(?glo:lHighlightColor1:Prompt)
! ENTRY(@n-14),USE(glo:lHighlightColor1),RIGHT(1),MSG('used by AsciiViewer to highlight the initial source line we jumped to'),TIP('used by AsciiViewer to highlight the initial source line we jumped to')
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lHighlightColor1),RIGHT(1)
glo:lHighlightColor1     LONG !used by AsciiViewer to highlight the initial source line we jumped to
!!> GUID('adad6d75-34ba-4641-92f0-ebc5ae5ce359'),PROMPT('glo : l Highlight Color 1:'),HEADER('glo : l Highlight Color 1'),MESSAGE('used by AsciiViewer to highlight the initial source line we jumped to'),TOOLTIP('used by AsciiViewer to highlight the initial source line we jumped to'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : l Highlight Color 2:'),USE(?glo:lHighlightColor2:Prompt)
! ENTRY(@n-14),USE(glo:lHighlightColor2),RIGHT(1),MSG('used by AsciiViewer to highlight othe calls to same method'),TIP('used by AsciiViewer to highlight othe calls to same method')
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lHighlightColor2),RIGHT(1)
glo:lHighlightColor2     LONG !used by AsciiViewer to highlight othe calls to same method
!!> GUID('7ed28b05-8289-4e00-9533-e341d3835adf'),PROMPT('glo : l Highlight Color 2:'),HEADER('glo : l Highlight Color 2'),MESSAGE('used by AsciiViewer to highlight othe calls to same method'),TOOLTIP('used by AsciiViewer to highlight othe calls to same method'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('&Hyperlink Color:'),USE(?glo:lHyperlinkColor:Prompt)
! ENTRY(@n-14),USE(glo:lHyperlinkColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lHyperlinkColor),RIGHT(1)
glo:lHyperlinkColor      LONG
!!> GUID('2f658245-5e95-4f00-8d80-27b1d2bff41c'),PROMPT('&Hyperlink Color:'),HEADER('Hyperlink Color'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! OPTION('Clarion Version'),AT(,,50,60),USE(glo:bClarionVersion),BOXED
! RADIO('Clarion 5'),USE(?glo:bClarionVersion:Radio1)
! RADIO('Clarion 5  Enterprise Edition'),USE(?glo:bClarionVersion:Radio2)
! RADIO('Clarion 5.5'),USE(?glo:bClarionVersion:Radio3)
! RADIO('Clarion 5.5  Enterprise Edition<129,129>'),USE(?glo:bClarionVersion:Radio4)
! END
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bClarionVersion)
glo:bClarionVersion      BYTE
!!> GUID('63e4d942-26e3-4b6d-9231-b0460761ee91'),VALID(INLIST('Clarion 5|Clarion 5  Enterprise Edition|Clarion 5.5|Clarion 5.5  Enterprise Edition<081H,081H>')),INITIAL('2'),PROMPT('Clarion Version:'),HEADER('Clarion Version'),PICTURE(@n3)
[SCREENCONTROLS]
! OPTION('glo : b ABCO nly'),AT(,,50,36),USE(glo:bABCOnly),BOXED,MSG('1=ABC, 2=NonABC, 3=Both'),TIP('1=ABC, 2=NonABC, 3=Both')
! RADIO('All Classes'),USE(?glo:bABCOnly:Radio1),VALUE('0')
! RADIO('ABC Classes'),USE(?glo:bABCOnly:Radio2),VALUE('1')
! END
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bABCOnly)
glo:bABCOnly             BYTE
!!> GUID('c3e91217-0039-4df6-9cfa-be2fe0cb950d'),VALID(NOCHECKS('All Classes|ABC Classes')),INITIAL('TRUE'),PROMPT('glo : b ABCO nly:'),HEADER('glo : b ABCO nly'),MESSAGE('1=ABC, 2=NonABC, 3=Both'),TOOLTIP('1=ABC, 2=NonABC, 3=Both'),PICTURE(@n3),VALUES('0|1')
[SCREENCONTROLS]
! ENTRY(@n3),USE(glo:bShowModule)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bShowModule)
glo:bShowModule          BYTE
!!> GUID('d5460314-0b40-48f1-94bb-912392fafb16'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK('Show &Private Attributes'),USE(glo:bShowPrivate)
[REPORTCONTROLS]
! CHECK('Show &Private Attributes'),USE(glo:bShowPrivate)
glo:bShowPrivate         BYTE
!!> GUID('c62be1a3-e90e-4918-9878-9aa096b8ebf7'),VALID(BOOLEAN),PROMPT('Show &Private Attributes:'),HEADER('glo : b Show Private'),PICTURE(@n1)
[SCREENCONTROLS]
! CHECK('Show P&rotected Attributes'),USE(glo:bShowProtected)
[REPORTCONTROLS]
! CHECK('Show P&rotected Attributes'),USE(glo:bShowProtected)
glo:bShowProtected       BYTE
!!> GUID('d5973289-26e1-4fac-8b66-9cfcdbf1b5cb'),VALID(BOOLEAN),PROMPT('Show P&rotected Attributes:'),HEADER('glo : b Show Protected'),PICTURE(@n1)
[SCREENCONTROLS]
! CHECK('Show Tips'),USE(glo:bShowTips)
[REPORTCONTROLS]
! CHECK('Show Tips'),USE(glo:bShowTips)
glo:bShowTips            BYTE
!!> GUID('13e90d5e-23f7-4258-8bc0-2009a7dc4500'),VALID(BOOLEAN),INITIAL('1'),PROMPT('Show Tips:'),HEADER('Show Tips'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('O&paque Check Box:'),USE(?glo:bOpaqueCheckBox:Prompt)
! ENTRY(@n3),USE(glo:bOpaqueCheckBox),TIP('Use opaque check boxes.<13,10>Check this option if you are using XP Manifest files<13,10>a' &|
!   'nd the check boxes look like big black squares.')
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bOpaqueCheckBox)
glo:bOpaqueCheckBox      BYTE
!!> GUID('954cecc3-0f90-450a-928b-beba5adf46bd'),PROMPT('O&paque Check Box:'),HEADER('Opaque Check Box'),TOOLTIP('Use opaque check boxes.<0DH,0AH>Check this option if you are using XP Manifest files<0DH,0AH>and the check boxes look like big black squares.'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('glo : b Force Edit:'),USE(?glo:bForceEdit:Prompt)
! ENTRY(@n3),USE(glo:bForceEdit)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bForceEdit)
glo:bForceEdit           BYTE
!!> GUID('4535f432-fea4-4517-ac1a-ac02c5811298'),PROMPT('glo : b Force Edit:'),HEADER('glo : b Force Edit'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('glo : b Use Association:'),USE(?glo:bUseAssociation:Prompt)
! ENTRY(@n3),USE(glo:bUseAssociation)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bUseAssociation)
glo:bUseAssociation      BYTE
!!> GUID('c8e7f26f-122f-4b82-93dd-6faf33a1919c'),PROMPT('glo : b Use Association:'),HEADER('glo : b Use Association'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('&Editor Command:'),USE(?glo:szEditorCommand:Prompt)
! TEXT,USE(glo:szEditorCommand),MSG('File Editor Command Line'),TIP('File Editor Command Line')
[REPORTCONTROLS]
! TEXT,USE(glo:szEditorCommand)
glo:szEditorCommand      CSTRING(256) !File Editor Command Line
!!> GUID('09edb17b-373f-4000-b8ed-59bff28d3eca'),PROMPT('&Editor Command:'),HEADER('Editor Command'),MESSAGE('File Editor Command Line'),TOOLTIP('File Editor Command Line'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Background:'),USE(?glo:Background:Prompt)
! LIST,USE(glo:Background),DROP(5),FROM('Color|#1|Wallpaper|#2|None|#3')
[REPORTCONTROLS]
! STRING(@n3),USE(glo:Background)
glo:Background           BYTE
!!> GUID('374b4461-56eb-4b16-bc1d-23497d2caa83'),VALID(NOCHECKS('Color|Wallpaper|None')),INITIAL('2'),PROMPT('Background:'),HEADER('Background'),PICTURE(@n3),VALUES('1|2|3')
[SCREENCONTROLS]
! PROMPT('glo : Color 1:'),USE(?glo:Color1:Prompt)
! ENTRY(@n-14),USE(glo:Color1),RIGHT(1),MSG('Background Color 1'),TIP('Background Color 1')
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:Color1),RIGHT(1)
glo:Color1               LONG !Background Color 1
!!> GUID('e214208f-0933-4812-8c59-79d0664f9cfd'),PROMPT('glo : Color 1:'),HEADER('glo : Color 1'),MESSAGE('Background Color 1'),TOOLTIP('Background Color 1'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Color 2:'),USE(?glo:Color2:Prompt)
! ENTRY(@n-14),USE(glo:Color2),RIGHT(1),MSG('Background Color 2'),TIP('Background Color 2')
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:Color2),RIGHT(1)
glo:Color2               LONG !Background Color 2
!!> GUID('46551c9c-6388-4d9d-8e6c-0851448a91c7'),PROMPT('glo : Color 2:'),HEADER('glo : Color 2'),MESSAGE('Background Color 2'),TOOLTIP('Background Color 2'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Wallpaper 1:'),USE(?glo:szWallpaper1:Prompt)
! ENTRY(@s255),USE(glo:szWallpaper1)
[REPORTCONTROLS]
! TEXT,USE(glo:szWallpaper1)
glo:szWallpaper1         CSTRING(256)
!!> GUID('78334130-5231-4593-8afc-fe554974e38b'),PROMPT('Wallpaper 1:'),HEADER('Wallpaper 1'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Wallpaper 2:'),USE(?glo:szWallpaper2:Prompt)
! ENTRY(@s255),USE(glo:szWallpaper2)
[REPORTCONTROLS]
! TEXT,USE(glo:szWallpaper2)
glo:szWallpaper2         CSTRING(256)
!!> GUID('38791e7b-18ad-4dba-a7d0-8452dd6f7335'),PROMPT('Wallpaper 2:'),HEADER('Wallpaper 2'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('glo : Tiled 1'),USE(glo:Tiled1)
[REPORTCONTROLS]
! CHECK('glo : Tiled 1'),USE(glo:Tiled1)
glo:Tiled1               BYTE
!!> GUID('9aa0d9ab-f2e3-41cd-bba5-65be7f391827'),VALID(BOOLEAN),PROMPT('glo : Tiled 1:'),HEADER('glo : Tiled 1'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK('glo : Tiled 2'),USE(glo:Tiled2)
[REPORTCONTROLS]
! CHECK('glo : Tiled 2'),USE(glo:Tiled2)
glo:Tiled2               BYTE
!!> GUID('62d0acbf-3d62-4138-b808-4242d4918e6a'),VALID(BOOLEAN),PROMPT('glo : Tiled 2:'),HEADER('glo : Tiled 2'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s31),USE(glo:Typeface)
[REPORTCONTROLS]
! STRING(@s31),USE(glo:Typeface)
glo:Typeface             STRING(31)
!!> GUID('2de71de3-a913-4fe5-bb00-f7180b829841'),PICTURE(@s31)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:FontSize)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:FontSize)
glo:FontSize             LONG
!!> GUID('a1ba647c-68e9-431f-9247-a5407c5c9846'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:FontColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:FontColor)
glo:FontColor            LONG
!!> GUID('5f138f40-27f0-4114-beec-5888b4304639'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(glo:FontStyle)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:FontStyle)
glo:FontStyle            LONG
!!> GUID('40ab1c3f-de04-43b7-a2f4-0a3200c4da63'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('glo : l Line Num:'),USE(?glo:lLineNum:Prompt)
! ENTRY(@n-14),USE(glo:lLineNum),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:lLineNum),RIGHT(1)
glo:lLineNum             LONG
!!> GUID('2c57edbc-2475-45ab-bfec-035fa71f5432'),PROMPT('glo : l Line Num:'),HEADER('glo : l Line Num'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@s63),USE(glo:szCategory)
[REPORTCONTROLS]
! STRING(@s63),USE(glo:szCategory)
glo:szCategory           CSTRING(64)
!!> GUID('30affad7-224f-4e38-9541-69a6de4c383e'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('glo : sz Category Choice:'),USE(?glo:szCategoryChoice:Prompt)
! ENTRY(@s63),USE(glo:szCategoryChoice)
[REPORTCONTROLS]
! STRING(@s63),USE(glo:szCategoryChoice)
glo:szCategoryChoice     CSTRING(64)
!!> GUID('a600202a-36f8-4cdf-b64c-4707185a8787'),PROMPT('glo : sz Category Choice:'),HEADER('glo : sz Category Choice'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('glo : Category Drop Count:'),USE(?glo:CategoryDropCount:Prompt)
! ENTRY(@n3),USE(glo:CategoryDropCount)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:CategoryDropCount)
glo:CategoryDropCount    BYTE
!!> GUID('334f3771-ad51-4498-aa6b-ef82e55f002a'),INITIAL('10'),PROMPT('glo : Category Drop Count:'),HEADER('glo : Category Drop Count'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! ENTRY(@n3),USE(glo:bDetailLevel),TIP('Select Detail Level')
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bDetailLevel)
glo:bDetailLevel         BYTE
!!> GUID('e6a2d6fa-790d-4194-aa05-06b880733347'),TOOLTIP('Select Detail Level'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('glo : sz Parent Class Name:'),USE(?glo:szParentClassName:Prompt)
! ENTRY(@s63),USE(glo:szParentClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(glo:szParentClassName)
glo:szParentClassName    CSTRING(64)
!!> GUID('959a0020-8215-462a-82d0-771c43854565'),PROMPT('glo : sz Parent Class Name:'),HEADER('glo : sz Parent Class Name'),PICTURE(@s63)
[SCREENCONTROLS]
! CHECK(' Auto Expand'),USE(glo:bAutoExpand),MSG('Automatically expand the selected object.'),TIP('Automatically expand the selected object.')
[REPORTCONTROLS]
! CHECK(' Auto Expand'),USE(glo:bAutoExpand)
glo:bAutoExpand          BYTE !Automatically expand the selected object.
!!> GUID('cf47de99-b8b2-4f4b-a23e-77ea2ac803b0'),VALID(BOOLEAN),PROMPT(' Auto Expand'),HEADER('Auto Expand'),MESSAGE('Automatically expand the selected object.'),TOOLTIP('Automatically expand the selected object.'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('glo : s Current Cursor:'),USE(?glo:sCurrentCursor:Prompt)
! ENTRY(@s4),USE(glo:sCurrentCursor)
[REPORTCONTROLS]
! STRING(@s4),USE(glo:sCurrentCursor)
glo:sCurrentCursor       STRING(4)
!!> GUID('b75572b8-589b-48db-9503-e41d64a34f38'),PROMPT('glo : s Current Cursor:'),HEADER('glo : s Current Cursor'),PICTURE(@s4)
[SCREENCONTROLS]
! PROMPT('glo : b Use HTMLH elp:'),USE(?glo:bUseHTMLHelp:Prompt)
! ENTRY(@n3),USE(glo:bUseHTMLHelp)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bUseHTMLHelp)
glo:bUseHTMLHelp         BYTE
!!> GUID('426ee2db-83a2-4c54-9720-f161763216c4'),PROMPT('glo : b Use HTMLH elp:'),HEADER('glo : b Use HTMLH elp'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('XML Style Sheet:'),USE(?glo:szXmlStyleSheet:Prompt)
! TEXT,USE(glo:szXmlStyleSheet)
[REPORTCONTROLS]
! TEXT,USE(glo:szXmlStyleSheet)
glo:szXmlStyleSheet      CSTRING(256)
!!> GUID('e8b53372-a8ec-475a-a1e5-dba4bada55f1'),PROMPT('XML Style Sheet:'),HEADER('XML Style Sheet'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s20),USE(glo:ViewerStyles)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:ViewerStyles)
glo:ViewerStyles         LIKE(COLORGROUPTYPE)
!!> GUID('ca38a4af-a3f8-4098-b9c5-cc0af564bc0d'),PICTURE(@s20)
[SCREENCONTROLS]
! PROMPT('glo : b Enum Sort:'),USE(?glo:bEnumSort:Prompt)
! ENTRY(@n3),USE(glo:bEnumSort),MSG('0 = Alphabetical,  1 = Canonical'),TIP('0 = Alphabetical,  1 = Canonical')
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bEnumSort)
glo:bEnumSort            BYTE !0 = Alphabetical,  1 = Canonical
!!> GUID('0de37bd7-a830-4244-a902-914238df7157'),PROMPT('glo : b Enum Sort:'),HEADER('glo : b Enum Sort'),MESSAGE('0 = Alphabetical,  1 = Canonical'),TOOLTIP('0 = Alphabetical,  1 = Canonical'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' Show Sparse Trees'),USE(glo:bShowSparseTrees),MSG('Show direct lineage if set otherwise show the whole family'),TIP('Show direct lineage in tree if set <13,10>otherwise show the whole family')
[REPORTCONTROLS]
! CHECK(' Show Sparse Trees'),USE(glo:bShowSparseTrees)
glo:bShowSparseTrees     BYTE !Show direcet lineage if set otherwise show the whole family
!!> GUID('62390a10-cadf-4c66-b47f-c0db0fdc70d7'),VALID(BOOLEAN),PROMPT(' Show Sparse Trees:'),HEADER(' Show Sparse Trees'),MESSAGE('Show direct lineage if set otherwise show the whole family'),TOOLTIP('Show direct lineage in tree if set <0DH,0AH>otherwise show the whole family'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(glo:bMaxMRU)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bMaxMRU)
glo:bMaxMRU              BYTE
!!> GUID('b986ef2b-8bce-4e30-821d-31b22be9a86f'),PROMPT('glo : b Max MRU:'),HEADER('glo : b Max MRU'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('glo : Layout:'),USE(?glo:Layout:Prompt)
! ENTRY(@n3),USE(glo:Layout)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:Layout)
glo:Layout               BYTE
!!> GUID('40bc69e9-9d0e-4731-b2e9-b3c25eb51ec0'),PROMPT('glo : Layout:'),HEADER('glo : Layout'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(ExtraModuleQ)
[REPORTCONTROLS]
! STRING(@s255),USE(ExtraModuleQ)
ExtraModuleQ             QUEUE,PRE(ExtraQ) !Queue of Module Names
!!> GUID('4f5b4c7c-fa27-4a60-b626-5b3f40fad78c'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ExtraQ:szModuleName)
[REPORTCONTROLS]
! STRING(@s63),USE(ExtraQ:szModuleName)
szModuleName               CSTRING(64)
!!> GUID('284734f4-1235-4407-b2ba-f6f2187abbdb'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(ExtraQ:szModulePath)
[REPORTCONTROLS]
! TEXT,USE(ExtraQ:szModulePath)
szModulePath               CSTRING(256)
!!> GUID('b65c3632-7157-4b84-9b51-b0670a6a7d04'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('b Clarion Version:'),USE(?ExtraQ:bClarionVersion:Prompt)
! ENTRY(@n3),USE(ExtraQ:bClarionVersion)
[REPORTCONTROLS]
! STRING(@n3),USE(ExtraQ:bClarionVersion)
bClarionVersion            BYTE
!!> GUID('212a7414-0d47-4a94-82a8-d85ec7f21ed5'),PROMPT('b Clarion Version:'),HEADER('b Clarion Version'),PICTURE(@n3)
                         END
!!> GUID('b641d621-3f9a-4f89-b7a8-ad59c6e5c7ce')
[SCREENCONTROLS]
! PROMPT('Module Q:'),USE(?ModuleQ:Prompt)
! ENTRY(@s1),USE(ModuleQ),MSG('Queue of Module Names'),TIP('Queue of Module Names')
[REPORTCONTROLS]
! STRING(@s1),USE(ModuleQ)
ModuleQ                  QUEUE,PRE(ModuleQ) !Queue of Module Names
!!> GUID('872c80eb-a9c8-44b9-9ef7-9f37d3b231c1'),PROMPT('Module Q:'),HEADER('Module Q'),MESSAGE('Queue of Module Names'),TOOLTIP('Queue of Module Names'),PICTURE(@s1)
[SCREENCONTROLS]
! TEXT,USE(ModuleQ:szModulePath)
[REPORTCONTROLS]
! TEXT,USE(ModuleQ:szModulePath)
szModulePath               CSTRING(256)
!!> GUID('02709983-7e9c-41fa-a0b2-90aa3e01accc'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ModuleQ:szModuleName)
[REPORTCONTROLS]
! STRING(@s63),USE(ModuleQ:szModuleName)
szModuleName               CSTRING(64)
!!> GUID('ea566ceb-3cd5-4c2f-8675-a4641ce18e3f'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(ModuleQ:lModuleId)
[REPORTCONTROLS]
! STRING(@n-14),USE(ModuleQ:lModuleId)
lModuleId                  LONG
!!> GUID('8b93ab7b-45e5-4f83-a392-f66ebd25961f'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('l Date:'),USE(?ModuleQ:lDate:Prompt)
! ENTRY(@n-14),USE(ModuleQ:lDate),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ModuleQ:lDate),RIGHT(1)
lDate                      LONG
!!> GUID('296b770e-2c4d-40ac-89b1-7e19e3710ee5'),PROMPT('l Date:'),HEADER('l Date'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Time:'),USE(?ModuleQ:lTime:Prompt)
! ENTRY(@n-14),USE(ModuleQ:lTime),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ModuleQ:lTime),RIGHT(1)
lTime                      LONG
!!> GUID('e4b03a75-4971-47bf-9da1-b69f3893c88b'),PROMPT('l Time:'),HEADER('l Time'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
                         END
!!> GUID('1455be97-f036-49b0-ab65-e730375efab6')
[SCREENCONTROLS]
! ENTRY(@s255),USE(ClassQ)
[REPORTCONTROLS]
! STRING(@s255),USE(ClassQ)
ClassQ                   QUEUE,PRE(ClassQ)
!!> GUID('a303fac0-e3bd-46e1-949c-ed2036b7f08a'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ClassQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('215a99a1-5bce-479a-8ccd-b30ac621a8a9'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ClassQ:szParentClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassQ:szParentClassName)
szParentClassName          CSTRING(64)
!!> GUID('42b07782-431f-41a4-a069-2e9d8776d945'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(ClassQ:lIncludeId)
[REPORTCONTROLS]
! STRING(@n-14),USE(ClassQ:lIncludeId)
lIncludeId                 LONG
!!> GUID('aa336530-f270-4448-925d-98a7d70fc0f5'),PROMPT('l Include Id:'),HEADER('l Include Id'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(ClassQ:lModuleId)
[REPORTCONTROLS]
! STRING(@n-14),USE(ClassQ:lModuleId)
lModuleId                  LONG
!!> GUID('f6f1e37a-c7bb-47e5-a944-6b27098e5186'),PROMPT('l Module Id:'),HEADER('l Module Id'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('b Is ABC:'),USE(?ClassQ:bIsABC:Prompt)
! ENTRY(@n3),USE(ClassQ:bIsABC)
[REPORTCONTROLS]
! STRING(@n3),USE(ClassQ:bIsABC)
bIsABC                     BYTE
!!> GUID('dcb1002d-7c25-478c-b1a8-07b7592d3f3d'),PROMPT('b Is ABC:'),HEADER('b Is ABC'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('l Line Num:'),USE(?ClassQ:lLineNum:Prompt)
! ENTRY(@n-14),USE(ClassQ:lLineNum),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ClassQ:lLineNum),RIGHT(1)
lLineNum                   LONG
!!> GUID('e959fdac-064f-4007-84d6-431d597995be'),PROMPT('l Line Num:'),HEADER('l Line Num'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(ClassQ:lClassID)
[REPORTCONTROLS]
! STRING(@n-14),USE(ClassQ:lClassID)
lClassID                   LONG
!!> GUID('9a581c23-e80c-449b-8957-d133c62fa478'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ClassQ:szParentClassSort)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassQ:szParentClassSort)
szParentClassSort          CSTRING(64)
!!> GUID('6286a091-bd2d-4981-9ef8-87d9a105e230'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ClassQ:szClassSort)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassQ:szClassSort)
szClassSort                CSTRING(64)
!!> GUID('fdf86b9b-dd98-45f2-abd6-085de7e397d7'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('b Private:'),USE(?ClassQ:bPrivate:Prompt)
! ENTRY(@n3),USE(ClassQ:bPrivate)
[REPORTCONTROLS]
! STRING(@n3),USE(ClassQ:bPrivate)
bPrivate                   BYTE
!!> GUID('f77c0c6e-a6d2-4a79-8683-f278529194e0'),PROMPT('b Private:'),HEADER('b Private'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Interface:'),USE(?ClassQ:bInterface:Prompt)
! ENTRY(@n3),USE(ClassQ:bInterface),MSG('True if an Interface Definition'),TIP('True if an Interface Definition')
[REPORTCONTROLS]
! STRING(@n3),USE(ClassQ:bInterface)
bInterface                 BYTE !True if an Interface Definition
!!> GUID('98b505c6-b539-436f-b77b-e288c365025e'),PROMPT('b Interface:'),HEADER('b Interface'),MESSAGE('True if an Interface Definition'),TOOLTIP('True if an Interface Definition'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Modified:'),USE(?ClassQ:bModified:Prompt)
! ENTRY(@n3),USE(ClassQ:bModified)
[REPORTCONTROLS]
! STRING(@n3),USE(ClassQ:bModified)
bModified                  BYTE
!!> GUID('ea1500b9-c971-482c-b948-ae84cbcc7fa2'),PROMPT('b Modified:'),HEADER('b Modified'),PICTURE(@n3)
                         END
!!> GUID('ba3a91bf-ec81-40d7-8782-c0811d39cc12')
[SCREENCONTROLS]
! PROMPT('Class Name Q:'),USE(?ClassNameQ:Prompt)
! ENTRY(@s132),USE(ClassNameQ)
[REPORTCONTROLS]
! STRING(@s132),USE(ClassNameQ)
ClassNameQ               QUEUE,PRE(ClassNameQ)
!!> GUID('efa03023-13ed-4a22-8b71-d7756d19b919'),PROMPT('Class Name Q:'),HEADER('Class Name Q'),PICTURE(@s132)
[SCREENCONTROLS]
! PROMPT('sz Class Name:'),USE(?ClassNameQ:szClassName:Prompt)
! ENTRY(@s63),USE(ClassNameQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassNameQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('4d75287a-02ef-456c-891b-d6c9db9b6d41'),PROMPT('sz Class Name:'),HEADER('sz Class Name'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('l Style:'),USE(?ClassNameQ:lStyle:Prompt)
! ENTRY(@n-14),USE(ClassNameQ:lStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ClassNameQ:lStyle),RIGHT(1)
lStyle                     LONG
!!> GUID('3579422c-a8ed-453a-a7bd-fa4e40dd7bc6'),PROMPT('l Style:'),HEADER('l Style'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Sort Name:'),USE(?ClassNameQ:szSortName:Prompt)
! ENTRY(@s63),USE(ClassNameQ:szSortName)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassNameQ:szSortName)
szSortName                 CSTRING(64)
!!> GUID('a57041f2-7ab6-4e58-84df-e18bacce5867'),PROMPT('sz Sort Name:'),HEADER('sz Sort Name'),PICTURE(@s63)
                         END
!!> GUID('fec4b9f0-f6d3-4dad-9b64-ca0a9110cc11')
[SCREENCONTROLS]
! ENTRY(@s70),USE(PropertyQ)
[REPORTCONTROLS]
! STRING(@s70),USE(PropertyQ)
PropertyQ                QUEUE,PRE(PropertyQ)
!!> GUID('eafe0b56-c49d-4ac4-a8c8-5fff34c460ba'),PICTURE(@s70)
[SCREENCONTROLS]
! ENTRY(@s63),USE(PropertyQ:szPropertyName)
[REPORTCONTROLS]
! STRING(@s63),USE(PropertyQ:szPropertyName)
szPropertyName             CSTRING(64)
!!> GUID('35df6d4c-b159-40df-97e8-809646e99f6c'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(PropertyQ:szDataType)
[REPORTCONTROLS]
! STRING(@s63),USE(PropertyQ:szDataType)
szDataType                 CSTRING(64)
!!> GUID('12b10a9f-75e6-4bbd-902c-b2f1464af4ea'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@n3),USE(PropertyQ:bPrivate)
[REPORTCONTROLS]
! STRING(@n3),USE(PropertyQ:bPrivate)
bPrivate                   BYTE
!!> GUID('103de215-e834-4d37-aebd-de300bcd5359'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(PropertyQ:bProtected)
[REPORTCONTROLS]
! STRING(@n3),USE(PropertyQ:bProtected)
bProtected                 BYTE
!!> GUID('fdd2f2b2-4a17-4cf8-ad33-6f3ab8c6793b'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('l Line Num:'),USE(?PropertyQ:lLineNum:Prompt)
! ENTRY(@n-14),USE(PropertyQ:lLineNum),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(PropertyQ:lLineNum),RIGHT(1)
lLineNum                   LONG
!!> GUID('8e040248-0789-4653-a6e1-9f152e4f2d9e'),PROMPT('l Line Num:'),HEADER('l Line Num'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(PropertyQ:lClassID)
[REPORTCONTROLS]
! STRING(@n-14),USE(PropertyQ:lClassID)
lClassID                   LONG
!!> GUID('3b4994ae-6a3f-4f5b-b150-e951cdb067de'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s63),USE(PropertyQ:szPropertySort)
[REPORTCONTROLS]
! STRING(@s63),USE(PropertyQ:szPropertySort)
szPropertySort             CSTRING(64)
!!> GUID('5e547f66-4e44-4c2d-b0e0-ca4b4259810e'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('b Module:'),USE(?PropertyQ:bModule:Prompt)
! ENTRY(@n3),USE(PropertyQ:bModule),MSG('Private to module'),TIP('Private to module')
[REPORTCONTROLS]
! STRING(@n3),USE(PropertyQ:bModule)
bModule                    BYTE !Private to module
!!> GUID('001b7f81-6091-4738-8d22-1f411c71f9bc'),PROMPT('b Module:'),HEADER('b Module'),MESSAGE('Private to module'),TOOLTIP('Private to module'),PICTURE(@n3)
                         END
!!> GUID('e4ef7d5f-c062-4514-8d0f-cb65790deb11')
[SCREENCONTROLS]
! ENTRY(@s71),USE(MethodQ)
[REPORTCONTROLS]
! STRING(@s71),USE(MethodQ)
MethodQ                  QUEUE,PRE(MethodQ)
!!> GUID('3b2f6eb6-e3c0-4f5f-87f1-b43062a55689'),PICTURE(@s71)
[SCREENCONTROLS]
! ENTRY(@s63),USE(MethodQ:szMethodName)
[REPORTCONTROLS]
! STRING(@s63),USE(MethodQ:szMethodName)
szMethodName               CSTRING(64)
!!> GUID('6757923d-f08b-496a-957c-2c690f660810'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(MethodQ:szPrototype)
[REPORTCONTROLS]
! TEXT,USE(MethodQ:szPrototype)
szPrototype                CSTRING(256)
!!> GUID('d26d2b8c-f366-4aaa-b18d-25be3fc6c250'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MethodQ:bPrivate)
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bPrivate)
bPrivate                   BYTE
!!> GUID('ba6ddd94-8f40-48c4-a807-1d6aefc4aa6b'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MethodQ:bProtected)
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bProtected)
bProtected                 BYTE
!!> GUID('fbad976e-b4ae-47db-b5be-49f894f066f0'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MethodQ:bVirtual)
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bVirtual)
bVirtual                   BYTE
!!> GUID('2c35fefd-8b85-45aa-964a-c93cbc377877'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('l Line Num:'),USE(?MethodQ:lLineNum:Prompt)
! ENTRY(@n-14),USE(MethodQ:lLineNum),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MethodQ:lLineNum),RIGHT(1)
lLineNum                   LONG
!!> GUID('d6e7c60f-6e9b-47e2-8c91-42af3710605d'),PROMPT('l Line Num:'),HEADER('l Line Num'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Source Line:'),USE(?MethodQ:lSourceLine:Prompt)
! ENTRY(@n-14),USE(MethodQ:lSourceLine),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MethodQ:lSourceLine),RIGHT(1)
lSourceLine                LONG
!!> GUID('ad65866c-f373-4dbf-b9ec-9de97e8c8c43'),PROMPT('l Source Line:'),HEADER('l Source Line'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(MethodQ:lClassID)
[REPORTCONTROLS]
! STRING(@n-14),USE(MethodQ:lClassID)
lClassID                   LONG
!!> GUID('89b463d2-89aa-4a57-96dc-4710a2f6a7c9'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s63),USE(MethodQ:szMethodSort)
[REPORTCONTROLS]
! STRING(@s63),USE(MethodQ:szMethodSort)
szMethodSort               CSTRING(64)
!!> GUID('fbb04682-e36d-4875-86cb-c7aa9e3ea0a6'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('b Module:'),USE(?MethodQ:bModule:Prompt)
! ENTRY(@n3),USE(MethodQ:bModule),MSG('Private to Module'),TIP('Private to Module')
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bModule)
bModule                    BYTE !Private to Module
!!> GUID('0be9f191-2ce5-4536-83c2-5b4de69ea74e'),PROMPT('b Module:'),HEADER('b Module'),MESSAGE('Private to Module'),TOOLTIP('Private to Module'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MethodQ:bExtends)
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bExtends)
bExtends                   BYTE
!!> GUID('eec707c3-7555-429d-a1b8-7e4d89d68413'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MethodQ:bFinal)
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bFinal)
bFinal                     BYTE
!!> GUID('fc32eba5-7b1d-4a7b-8684-0956f4da3708'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MethodQ:bProc)
[REPORTCONTROLS]
! STRING(@n3),USE(MethodQ:bProc)
bProc                      BYTE
!!> GUID('3b1a24e2-cfba-4288-9ffc-16f9f694fbf0'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s31),USE(MethodQ:szDLL)
[REPORTCONTROLS]
! STRING(@s31),USE(MethodQ:szDLL)
szDLL                      CSTRING(32)
!!> GUID('9a45af15-b196-4895-8426-98aea544cd33'),PICTURE(@s31)
[SCREENCONTROLS]
! ENTRY(@s63),USE(MethodQ:szExtName)
[REPORTCONTROLS]
! STRING(@s63),USE(MethodQ:szExtName)
szExtName                  CSTRING(64)
!!> GUID('7ded32df-94e7-4a22-b02b-e0dcc1dcbb09'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s6),USE(MethodQ:szCallConv)
[REPORTCONTROLS]
! STRING(@s6),USE(MethodQ:szCallConv)
szCallConv                 CSTRING(7)
!!> GUID('96222232-c4c8-4a31-9d5c-c29b97d5ae67'),PICTURE(@s6)
[SCREENCONTROLS]
! ENTRY(@s63),USE(MethodQ:szReturnType)
[REPORTCONTROLS]
! STRING(@s63),USE(MethodQ:szReturnType)
szReturnType               CSTRING(64)
!!> GUID('667b8ca4-0f68-49d2-bad2-c26b1b9027c1'),PICTURE(@s63)
                         END
!!> GUID('4952d5ae-634b-4813-acf6-4aa5b46f19d2')
[SCREENCONTROLS]
! PROMPT('Struct Name Q:'),USE(?StructNameQ:Prompt)
! ENTRY(@s64),USE(StructNameQ),MSG('Structure Names Q'),TIP('Structure Names Q')
[REPORTCONTROLS]
! STRING(@s64),USE(StructNameQ)
StructNameQ              QUEUE,PRE() !Structure Names Q
!!> GUID('24450b6c-36eb-4751-9be2-09e90bdd0d59'),PROMPT('Struct Name Q:'),HEADER('Struct Name Q'),MESSAGE('Structure Names Q'),TOOLTIP('Structure Names Q'),PICTURE(@s64)
[SCREENCONTROLS]
! PROMPT('sz Structure Name:'),USE(?szStructureName:Prompt)
! ENTRY(@s63),USE(szStructureName),MSG('name of group or queue'),TIP('name of group or queue')
[REPORTCONTROLS]
! STRING(@s63),USE(szStructureName)
szStructureName            CSTRING(64) !name of group or queue
!!> GUID('c6f9f497-59d4-444c-9dbe-10972335190f'),PROMPT('sz Structure Name:'),HEADER('sz Structure Name'),MESSAGE('name of group or queue'),TOOLTIP('name of group or queue'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(szStructureSort)
[REPORTCONTROLS]
! STRING(@s63),USE(szStructureSort)
szStructureSort            CSTRING(64) !name of group or queue
!!> GUID('2ef2cf3a-223b-4949-be31-3b9d8d9c263f'),PICTURE(@s63)
                         END
!!> GUID('5b5c1762-2a3a-42fd-b424-346e3202bfae')
[SCREENCONTROLS]
! ENTRY(@s200),USE(StructureQ)
[REPORTCONTROLS]
! STRING(@s200),USE(StructureQ)
StructureQ               QUEUE,PRE(StructureQ)
!!> GUID('f20ce256-4650-41a2-8aa7-0da1e777c9f6'),PICTURE(@s200)
[SCREENCONTROLS]
! ENTRY(@s63),USE(StructureQ:szStructureName)
[REPORTCONTROLS]
! STRING(@s63),USE(StructureQ:szStructureName)
szStructureName            CSTRING(64) !name of group or queue
!!> GUID('a35e9db5-98b3-4c27-b46d-ba02f3eb007b'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(StructureQ:szDataLabel)
[REPORTCONTROLS]
! STRING(@s63),USE(StructureQ:szDataLabel)
szDataLabel                CSTRING(64) !element label
!!> GUID('4595f1de-01c6-4263-b316-c43bbca85b2f'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(StructureQ:szDataType)
[REPORTCONTROLS]
! STRING(@s63),USE(StructureQ:szDataType)
szDataType                 CSTRING(64) !element data type
!!> GUID('fd38928a-397c-4da8-b366-1faf7c6135a0'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(StructureQ:lModuleId)
[REPORTCONTROLS]
! STRING(@n-14),USE(StructureQ:lModuleId)
lModuleId                  LONG
!!> GUID('4d673f06-ed99-4623-bf26-4bc494db2b4a'),PROMPT('l Module Id:'),HEADER('l Module Id'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(StructureQ:lLineNum)
[REPORTCONTROLS]
! STRING(@n-14),USE(StructureQ:lLineNum)
lLineNum                   LONG
!!> GUID('2a01ff61-d1e5-43d4-b947-5f82c80d267e'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s63),USE(StructureQ:szStructureSort)
[REPORTCONTROLS]
! STRING(@s63),USE(StructureQ:szStructureSort)
szStructureSort            CSTRING(64) !name of group or queue
!!> GUID('1d554b00-10e1-424f-a03e-4f1963b148ce'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('b Private:'),USE(?StructureQ:bPrivate:Prompt)
! ENTRY(@n3),USE(StructureQ:bPrivate)
[REPORTCONTROLS]
! STRING(@n3),USE(StructureQ:bPrivate)
bPrivate                   BYTE
!!> GUID('cd322454-94c1-44a0-888b-cda3a062c90f'),PROMPT('b Private:'),HEADER('b Private'),PICTURE(@n3)
                         END
!!> GUID('aa773449-9413-4aad-9d84-eb69e8a6e836')
[SCREENCONTROLS]
! ENTRY(@s64),USE(EnumNameQ)
[REPORTCONTROLS]
! STRING(@s64),USE(EnumNameQ)
EnumNameQ                QUEUE,PRE() !enumeration data structure Names Q
!!> GUID('12cbafdb-a90f-4148-aa69-eafa350f9486'),PICTURE(@s64)
[SCREENCONTROLS]
! ENTRY(@s63),USE(szEnumName)
[REPORTCONTROLS]
! STRING(@s63),USE(szEnumName)
szEnumName                 CSTRING(64) !label of enumeration data structure
!!> GUID('92723a8a-bb5d-4769-a7f3-49cf3e58e820'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(szEnumSort)
[REPORTCONTROLS]
! STRING(@s63),USE(szEnumSort)
szEnumSort                 CSTRING(64) !label of enumeration data structure
!!> GUID('d07e1cf9-2e70-46e6-a6cd-3ecc1277e3c2'),PICTURE(@s63)
                         END
!!> GUID('ee6d79ae-d3ec-494f-965c-ff327c32e66e')
[SCREENCONTROLS]
! ENTRY(@s76),USE(EnumQ)
[REPORTCONTROLS]
! STRING(@s76),USE(EnumQ)
EnumQ                    QUEUE,PRE(EnumQ)
!!> GUID('e7f4abf8-187c-4a05-9857-2d7be4907161'),PICTURE(@s76)
[SCREENCONTROLS]
! PROMPT('sz Enum Name:'),USE(?EnumQ:szEnumName:Prompt)
! ENTRY(@s63),USE(EnumQ:szEnumName)
[REPORTCONTROLS]
! STRING(@s63),USE(EnumQ:szEnumName)
szEnumName                 CSTRING(64)
!!> GUID('e9a2e902-608d-43e3-8b80-77bd4fd22c0c'),PROMPT('sz Enum Name:'),HEADER('sz Enum Name'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(EnumQ:szEnumPrefix)
[REPORTCONTROLS]
! STRING(@s63),USE(EnumQ:szEnumPrefix)
szEnumPrefix               CSTRING(64) !equate prefix
!!> GUID('d25d8386-561d-418d-a90e-25f49e7c09ee'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(EnumQ:szEnumLabel)
[REPORTCONTROLS]
! STRING(@s63),USE(EnumQ:szEnumLabel)
szEnumLabel                CSTRING(64) !equate label
!!> GUID('2d594540-3dc6-45b9-bc0d-a1e3986c1209'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(EnumQ:szEnumValue)
[REPORTCONTROLS]
! TEXT,USE(EnumQ:szEnumValue)
szEnumValue                CSTRING(256) !equate value
!!> GUID('13b9c30a-9894-4a58-b3e4-dc2a307eba51'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(EnumQ:lModuleId)
[REPORTCONTROLS]
! STRING(@n-14),USE(EnumQ:lModuleId)
lModuleId                  LONG
!!> GUID('65f4c7dd-5856-43a4-8cb0-2b0f098e10c8'),PROMPT('l Module Id:'),HEADER('l Module Id'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(EnumQ:lLineNum)
[REPORTCONTROLS]
! STRING(@n-14),USE(EnumQ:lLineNum)
lLineNum                   LONG
!!> GUID('4278c7fe-03c9-4de3-8886-0e6a1d70ce98'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s63),USE(EnumQ:szEnumSort)
[REPORTCONTROLS]
! STRING(@s63),USE(EnumQ:szEnumSort)
szEnumSort                 CSTRING(64)
!!> GUID('da9bc4b4-c316-44a1-b871-b93597acef20'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('b Is Hex Value:'),USE(?EnumQ:bIsHexValue:Prompt)
! ENTRY(@n3),USE(EnumQ:bIsHexValue),MSG('Value is displayed as hexadecimal'),TIP('Value is displayed as hexadecimal')
[REPORTCONTROLS]
! STRING(@n3),USE(EnumQ:bIsHexValue)
bIsHexValue                BYTE !Value is displayed as hexadecimal
!!> GUID('86697f7f-cb49-4d1a-a424-bdc08e0102ff'),PROMPT('b Is Hex Value:'),HEADER('b Is Hex Value'),MESSAGE('Value is displayed as hexadecimal'),TOOLTIP('Value is displayed as hexadecimal'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Private:'),USE(?EnumQ:bPrivate:Prompt)
! ENTRY(@n3),USE(EnumQ:bPrivate)
[REPORTCONTROLS]
! STRING(@n3),USE(EnumQ:bPrivate)
bPrivate                   BYTE
!!> GUID('57d1cef6-24c1-491c-b2d6-bb3e8579d6f7'),PROMPT('b Private:'),HEADER('b Private'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Is Equate:'),USE(?EnumQ:bIsEquate:Prompt)
! ENTRY(@n3),USE(EnumQ:bIsEquate)
[REPORTCONTROLS]
! STRING(@n3),USE(EnumQ:bIsEquate)
bIsEquate                  BYTE
!!> GUID('09646a7d-16db-4533-af89-1703c77428ea'),PROMPT('b Is Equate:'),HEADER('b Is Equate'),PICTURE(@n3)
                         END
!!> GUID('0662cc24-099e-44c1-ba8e-aa0256168b6f')
[SCREENCONTROLS]
! ENTRY(@s255),USE(TreeQ)
[REPORTCONTROLS]
! STRING(@s255),USE(TreeQ)
TreeQ                    QUEUE,PRE(TreeQ) !Queue declaration
!!> GUID('47a1bdca-73ae-4a16-a639-78b097ee6fc7'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT(''),USE(?TreeQ:sNote:Prompt)
! ENTRY(@s1),USE(TreeQ:sNote)
[REPORTCONTROLS]
! STRING(@s1),USE(TreeQ:sNote)
sNote                      STRING(1)
!!> GUID('4d6ff111-8971-4765-a51e-665ba74c7d2f'),PICTURE(@s1)
[SCREENCONTROLS]
! PROMPT(''),USE(?TreeQ:wNoteIcon:Prompt)
! ENTRY(@n-7),USE(TreeQ:wNoteIcon),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-7),USE(TreeQ:wNoteIcon),RIGHT(1)
wNoteIcon                  SHORT
!!> GUID('fd50922c-672d-426e-ab02-6fcae970449e'),PICTURE(@n-7),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Note Tip:'),USE(?TreeQ:szNoteTip:Prompt)
! TEXT,USE(TreeQ:szNoteTip)
[REPORTCONTROLS]
! TEXT,USE(TreeQ:szNoteTip)
szNoteTip                  CSTRING(256)
!!> GUID('a1baefac-709f-4e70-a6f0-257237443b2d'),PROMPT('sz Note Tip:'),HEADER('sz Note Tip'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(TreeQ:szText)
[REPORTCONTROLS]
! TEXT,USE(TreeQ:szText)
szText                     CSTRING(384)
!!> GUID('2022cd56-2956-40fc-b3d9-f256ec740c59'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(TreeQ:wIcon)
[REPORTCONTROLS]
! STRING(@n-7),USE(TreeQ:wIcon)
wIcon                      SHORT !Entry's icon ID
!!> GUID('09cdbfbb-4f86-4354-891a-982a3e34e841'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(TreeQ:lLevel)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lLevel)
lLevel                     LONG !Tree Level
!!> GUID('18f6261a-ca7b-430a-8009-c4f8da001819'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(TreeQ:lStyle)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lStyle)
lStyle                     LONG
!!> GUID('20016f82-2dbe-427f-a157-9914b114fde1'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('sz Tip Text:'),USE(?TreeQ:szTipText:Prompt)
! TEXT,USE(TreeQ:szTipText)
[REPORTCONTROLS]
! TEXT,USE(TreeQ:szTipText)
szTipText                  CSTRING(256)
!!> GUID('d3c2bcaa-e91a-4f3a-8f1f-81be17dd14f6'),PROMPT('sz Tip Text:'),HEADER('sz Tip Text'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('sz Search:'),USE(?TreeQ:szSearch:Prompt)
! ENTRY(@s63),USE(TreeQ:szSearch)
[REPORTCONTROLS]
! STRING(@s63),USE(TreeQ:szSearch)
szSearch                   CSTRING(64)
!!> GUID('3d235837-9985-4b9f-8e05-b460ed86f912'),PROMPT('sz Search:'),HEADER('sz Search'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('sz Class Name:'),USE(?TreeQ:szClassName:Prompt)
! ENTRY(@s63),USE(TreeQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(TreeQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('1ae57c07-cba4-44af-a8d1-ee15dcefd702'),PROMPT('sz Class Name:'),HEADER('sz Class Name'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('sz Context String:'),USE(?TreeQ:szContextString:Prompt)
! TEXT,USE(TreeQ:szContextString)
[REPORTCONTROLS]
! TEXT,USE(TreeQ:szContextString)
szContextString            CSTRING(256)
!!> GUID('c98f5621-6485-4fa4-be51-de813bbaf3f3'),PROMPT('sz Context String:'),HEADER('sz Context String'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('sz Help File:'),USE(?TreeQ:szHelpFile:Prompt)
! TEXT,USE(TreeQ:szHelpFile)
[REPORTCONTROLS]
! TEXT,USE(TreeQ:szHelpFile)
szHelpFile                 CSTRING(256)
!!> GUID('5c95023c-2e2f-4bb1-be1e-e6c1ba8f9b78'),PROMPT('sz Help File:'),HEADER('sz Help File'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('l Line Num:'),USE(?TreeQ:lLineNum:Prompt)
! ENTRY(@n-14),USE(TreeQ:lLineNum),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lLineNum),RIGHT(1)
lLineNum                   LONG
!!> GUID('8058e263-2a85-4985-8cc9-a34422a93532'),PROMPT('l Line Num:'),HEADER('l Line Num'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Source Line:'),USE(?TreeQ:lSourceLine:Prompt)
! ENTRY(@n-14),USE(TreeQ:lSourceLine),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lSourceLine),RIGHT(1)
lSourceLine                LONG
!!> GUID('dfdf73d1-1bd9-420f-b8c2-5680173c00b9'),PROMPT('l Source Line:'),HEADER('l Source Line'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(TreeQ:lIncludeId)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lIncludeId)
lIncludeId                 LONG
!!> GUID('00cded19-979a-432c-8c73-f94862116f24'),PROMPT('l Include Id:'),HEADER('l Include Id'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(TreeQ:lModuleId)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lModuleId)
lModuleId                  LONG
!!> GUID('5c2029f8-744a-40a4-8850-3cdaf8630b65'),PROMPT('l Module Id:'),HEADER('l Module Id'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('l Occurrance Line:'),USE(?TreeQ:lOccurranceLine:Prompt)
! ENTRY(@n-14),USE(TreeQ:lOccurranceLine),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(TreeQ:lOccurranceLine),RIGHT(1)
lOccurranceLine            LONG
!!> GUID('151fc524-ef06-4517-9a62-eff9f6560d38'),PROMPT('l Occurrance Line:'),HEADER('l Occurrance Line'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Prototype:'),USE(?TreeQ:szPrototype:Prompt)
! TEXT,USE(TreeQ:szPrototype)
[REPORTCONTROLS]
! TEXT,USE(TreeQ:szPrototype)
szPrototype                CSTRING(256)
!!> GUID('a51f546c-fb3f-444d-9761-0ca159038843'),PROMPT('sz Prototype:'),HEADER('sz Prototype'),PICTURE(@s255)
                         END
!!> GUID('5f510bbc-9704-497c-92e9-70c8e85018e7')
[SCREENCONTROLS]
! ENTRY(@s132),USE(CallQ)
[REPORTCONTROLS]
! STRING(@s132),USE(CallQ)
CallQ                    QUEUE,PRE(CallQ)
!!> GUID('933c91a5-8944-44ec-bd7a-ffd0fef71ed1'),PICTURE(@s132)
[SCREENCONTROLS]
! ENTRY(@s63),USE(CallQ:szCallingMethod)
[REPORTCONTROLS]
! STRING(@s63),USE(CallQ:szCallingMethod)
szCallingMethod            CSTRING(64)
!!> GUID('16232cb1-e40c-4ae8-bd07-7eb20350e55c'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(CallQ:szCalledMethod)
[REPORTCONTROLS]
! STRING(@s63),USE(CallQ:szCalledMethod)
szCalledMethod             CSTRING(64)
!!> GUID('94db8235-ad0a-4e25-916b-9952954d981d'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('l Line Num:'),USE(?CallQ:lLineNum:Prompt)
! ENTRY(@n-14),USE(CallQ:lLineNum),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(CallQ:lLineNum),RIGHT(1)
lLineNum                   LONG
!!> GUID('d0894813-7d12-4245-9be7-dec04c84f8e8'),PROMPT('l Line Num:'),HEADER('l Line Num'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
                         END
!!> GUID('30307c62-74cb-444b-897e-c31e79f3ab02')
[SCREENCONTROLS]
! PROMPT('Call Name Q:'),USE(?CallNameQ:Prompt)
! ENTRY(@s137),USE(CallNameQ)
[REPORTCONTROLS]
! STRING(@s137),USE(CallNameQ)
CallNameQ                QUEUE,PRE(CallNameQ)
!!> GUID('c361a2a3-e688-4ddf-8b0e-9b8cbfd3725b'),PROMPT('Call Name Q:'),HEADER('Call Name Q'),PICTURE(@s137)
[SCREENCONTROLS]
! PROMPT('sz Call Name:'),USE(?CallNameQ:szCallName:Prompt)
! ENTRY(@s63),USE(CallNameQ:szCallName)
[REPORTCONTROLS]
! STRING(@s63),USE(CallNameQ:szCallName)
szCallName                 CSTRING(64)
!!> GUID('9f5a4411-4f93-4a1f-8662-b6f70fea3a33'),PROMPT('sz Call Name:'),HEADER('sz Call Name'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('l Level:'),USE(?CallNameQ:lLevel:Prompt)
! ENTRY(@n-14),USE(CallNameQ:lLevel),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(CallNameQ:lLevel),RIGHT(1)
lLevel                     LONG
!!> GUID('09be7083-c4d6-41f0-957e-3265f1d0ef6a'),PROMPT('l Level:'),HEADER('l Level'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Style:'),USE(?CallNameQ:lStyle:Prompt)
! ENTRY(@n-14),USE(CallNameQ:lStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(CallNameQ:lStyle),RIGHT(1)
lStyle                     LONG
!!> GUID('bea626c3-f589-4ce0-a6d7-b3b274b98546'),PROMPT('l Style:'),HEADER('l Style'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Sort Name:'),USE(?CallNameQ:szSortName:Prompt)
! ENTRY(@s63),USE(CallNameQ:szSortName)
[REPORTCONTROLS]
! STRING(@s63),USE(CallNameQ:szSortName)
szSortName                 CSTRING(64)
!!> GUID('6b4102e7-666d-4ee9-9250-c8b3a54b8ba4'),PROMPT('sz Sort Name:'),HEADER('sz Sort Name'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('b Expanded Above:'),USE(?CallNameQ:bExpandedAbove:Prompt)
! ENTRY(@n3),USE(CallNameQ:bExpandedAbove)
[REPORTCONTROLS]
! STRING(@n3),USE(CallNameQ:bExpandedAbove)
bExpandedAbove             BYTE
!!> GUID('401d3cdc-62ed-4760-87ab-e91a1d4ba9bc'),PROMPT('b Expanded Above:'),HEADER('b Expanded Above'),PICTURE(@n3)
                         END
!!> GUID('cbf854d7-b3f7-491b-a5a8-a94ed13192be')
[SCREENCONTROLS]
! PROMPT('sz Class Sort:'),USE(?szClassSort:Prompt)
! ENTRY(@s127),USE(szClassSort)
[REPORTCONTROLS]
! STRING(@s127),USE(szClassSort)
szClassSort              CSTRING(128)
!!> GUID('eec85d92-a8b6-442b-83bf-38c4e21379e0'),PROMPT('sz Class Sort:'),HEADER('sz Class Sort'),PICTURE(@s127)
[SCREENCONTROLS]
! ENTRY(@s128),USE(EquateQ)
[REPORTCONTROLS]
! STRING(@s128),USE(EquateQ)
EquateQ                  QUEUE,PRE(EquateQ)
!!> GUID('45cc5134-502d-4873-ae68-238560106cc8'),PICTURE(@s128)
[SCREENCONTROLS]
! ENTRY(@s63),USE(EquateQ:szLabel)
[REPORTCONTROLS]
! STRING(@s63),USE(EquateQ:szLabel)
szLabel                    CSTRING(64)
!!> GUID('261d6527-7ebe-48b5-98be-75c2901a0dbf'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('sz Value:'),USE(?EquateQ:szValue:Prompt)
! TEXT,USE(EquateQ:szValue)
[REPORTCONTROLS]
! TEXT,USE(EquateQ:szValue)
szValue                    CSTRING(256)
!!> GUID('a2a0ae36-3389-488f-9473-44d089a09068'),PROMPT('sz Value:'),HEADER('sz Value'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(EquateQ:lModuleId)
[REPORTCONTROLS]
! STRING(@n-14),USE(EquateQ:lModuleId)
lModuleId                  LONG
!!> GUID('8a6025c5-e7a6-4792-bc6f-ecc42ddd441f'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n13),USE(EquateQ:lLineNum)
[REPORTCONTROLS]
! STRING(@n13),USE(EquateQ:lLineNum)
lLineNum                   ULONG
!!> GUID('ed2c2665-8992-4bf8-a89b-421a09f187e6'),PICTURE(@n13)
[SCREENCONTROLS]
! PROMPT('b Is Hex Value:'),USE(?EquateQ:bIsHexValue:Prompt)
! ENTRY(@n3),USE(EquateQ:bIsHexValue)
[REPORTCONTROLS]
! STRING(@n3),USE(EquateQ:bIsHexValue)
bIsHexValue                BYTE
!!> GUID('7033eb9d-935d-49cc-bca7-0ca6730760d3'),PROMPT('b Is Hex Value:'),HEADER('b Is Hex Value'),PICTURE(@n3)
                         END
!!> GUID('2bd65dfc-acb9-4e9b-89ee-4935c81d7305')
[SCREENCONTROLS]
! PROMPT('Note Q:'),USE(?NoteQ:Prompt)
! ENTRY(@s255),USE(NoteQ),MSG('User Notes'),TIP('User Notes')
[REPORTCONTROLS]
! STRING(@s255),USE(NoteQ)
NoteQ                    QUEUE,PRE(NoteQ) !User Notes
!!> GUID('1923f8db-c53a-4828-b0b0-921abee8a260'),PROMPT('Note Q:'),HEADER('Note Q'),MESSAGE('User Notes'),TOOLTIP('User Notes'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('b Clarion Version:'),USE(?NoteQ:bClarionVersion:Prompt)
! ENTRY(@n3),USE(NoteQ:bClarionVersion)
[REPORTCONTROLS]
! STRING(@n3),USE(NoteQ:bClarionVersion)
bClarionVersion            BYTE
!!> GUID('e744f02f-4c73-4911-9a16-ac3fee714fd3'),PROMPT('b Clarion Version:'),HEADER('b Clarion Version'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('sz Lookup:'),USE(?NoteQ:szLookup:Prompt)
! TEXT,USE(NoteQ:szLookup)
[REPORTCONTROLS]
! TEXT,USE(NoteQ:szLookup)
szLookup                   CSTRING(384)
!!> GUID('6d5d56a0-ef16-445b-a153-46dd0a9d957b'),PROMPT('sz Lookup:'),HEADER('sz Lookup'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('sz Note:'),USE(?NoteQ:szNote:Prompt)
! TEXT,USE(NoteQ:szNote)
[REPORTCONTROLS]
! TEXT,USE(NoteQ:szNote)
szNote                     CSTRING(2048)
!!> GUID('3119ee2b-bb80-4349-9ae4-ea7f13adb61b'),PROMPT('sz Note:'),HEADER('sz Note'),PICTURE(@s255)
                         END
!!> GUID('6906ab0e-09f9-43c3-9b38-1edc81657fd6')
[SCREENCONTROLS]
! PROMPT('Category Q:'),USE(?CategoryQ:Prompt)
! ENTRY(@s129),USE(CategoryQ),MSG('Class Category Queue'),TIP('Class Category Queue')
[REPORTCONTROLS]
! STRING(@s129),USE(CategoryQ)
CategoryQ                QUEUE,PRE(CategoryQ) !Class Category Queue
!!> GUID('e82e8d01-1f50-49a5-852d-de2b63381350'),PROMPT('Category Q:'),HEADER('Category Q'),MESSAGE('Class Category Queue'),TOOLTIP('Class Category Queue'),PICTURE(@s129)
[SCREENCONTROLS]
! PROMPT('sz Class Name:'),USE(?CategoryQ:szClassName:Prompt)
! ENTRY(@s63),USE(CategoryQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(CategoryQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('8fe567ca-557c-46b7-afd3-cc616a0f70b2'),PROMPT('sz Class Name:'),HEADER('sz Class Name'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('Category:'),USE(?CategoryQ:szCategory:Prompt),TRN
! ENTRY(@s63),USE(CategoryQ:szCategory)
[REPORTCONTROLS]
! STRING(@s63),USE(CategoryQ:szCategory)
szCategory                 CSTRING(64)
!!> GUID('f6afbe43-f7b1-4412-baa1-782150020e56'),PROMPT('Category:'),HEADER('Category'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('Detail Level:'),USE(?CategoryQ:bDetailLevel:Prompt),TRN
! SPIN(@n3),USE(CategoryQ:bDetailLevel),TRN,STEP(1)
[REPORTCONTROLS]
! STRING(@n3),USE(CategoryQ:bDetailLevel)
bDetailLevel               BYTE
!!> GUID('7c79d182-5180-4f13-a249-df93edc561c4'),PROMPT('Detail Level:'),HEADER('Detail Level'),PICTURE(@n3)
                         END
!!> GUID('579845e5-5568-45a9-8939-b285c644cdc0')
[SCREENCONTROLS]
! ENTRY(@s64),USE(OldClassQ)
[REPORTCONTROLS]
! STRING(@s64),USE(OldClassQ)
OldClassQ                QUEUE,PRE(OldClassQ)
!!> GUID('cf4ccdc1-8b65-4140-b9e6-cd5a1787d096'),PICTURE(@s64)
[SCREENCONTROLS]
! ENTRY(@s63),USE(OldClassQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(OldClassQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('f65bc07e-760f-444d-9cad-81b0d6de88a8'),PICTURE(@s63)
                         END
!!> GUID('1e9b6720-acfd-4586-a77d-f5420b658801')
[SCREENCONTROLS]
! ENTRY(@s255),USE(OldMethodQ)
[REPORTCONTROLS]
! STRING(@s255),USE(OldMethodQ)
OldMethodQ               QUEUE,PRE(OldMethodQ)
!!> GUID('a8c4b2ee-50ad-41bd-9d69-af93a3709908'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(OldMethodQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(OldMethodQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('178202dd-e7de-4699-bbf9-3b4f0a837dfc'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(OldMethodQ:szMethodName)
[REPORTCONTROLS]
! STRING(@s63),USE(OldMethodQ:szMethodName)
szMethodName               CSTRING(64)
!!> GUID('eebba0c8-319c-4a23-8bb3-3bfe196d58ef'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(OldMethodQ:szPrototype)
[REPORTCONTROLS]
! TEXT,USE(OldMethodQ:szPrototype)
szPrototype                CSTRING(256)
!!> GUID('15cd7f35-7c4a-4deb-9860-237fce666691'),PICTURE(@s255)
                         END
!!> GUID('32adc1a0-2917-4ebd-b6de-dfa870cb2310')
[SCREENCONTROLS]
! ENTRY(@s255),USE(OldPropertyQ)
[REPORTCONTROLS]
! STRING(@s255),USE(OldPropertyQ)
OldPropertyQ             QUEUE,PRE(OldPropertyQ)
!!> GUID('ad1e2f30-2f13-49ee-9d71-dfb5ef653eee'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(OldPropertyQ:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(OldPropertyQ:szClassName)
szClassName                CSTRING(64)
!!> GUID('510dfc75-9177-4643-9d7b-1866481f26e7'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(OldPropertyQ:szPropertyName)
[REPORTCONTROLS]
! STRING(@s63),USE(OldPropertyQ:szPropertyName)
szPropertyName             CSTRING(64)
!!> GUID('37b1a45e-6075-4574-8095-f40f9960fcd1'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(OldPropertyQ:szPrototype)
[REPORTCONTROLS]
! TEXT,USE(OldPropertyQ:szPrototype)
szPrototype                CSTRING(256)
!!> GUID('02b02ce7-3650-4ee1-b6db-569f185162a2'),PICTURE(@s255)
                         END
!!> GUID('217c70a7-ace5-41c1-b423-031d26fe62d5')
[SCREENCONTROLS]
! ENTRY(@s1),USE(incTemplateQ)
[REPORTCONTROLS]
! STRING(@s1),USE(incTemplateQ)
incTemplateQ             QUEUE(TEMPLATEQTYPE),PRE(incTemplateQ)
!!> GUID('3e3e2b1a-fe2d-4392-becf-2965312ec7ff'),PICTURE(@s1)
                         END
!!> GUID('81c486b2-dac7-4cf6-9cb6-050cb87bfec0')
[SCREENCONTROLS]
! ENTRY(@s1),USE(clwTemplateQ)
[REPORTCONTROLS]
! STRING(@s1),USE(clwTemplateQ)
clwTemplateQ             QUEUE(TEMPLATEQTYPE),PRE(clwTemplateQ)
!!> GUID('cd90841e-434d-482d-b25f-91a807a7479d'),PICTURE(@s1)
                         END
!!> GUID('b221aa97-8f7f-4dd9-83e9-a05459e955d5')
[SCREENCONTROLS]
! ENTRY(@s1),USE(tplTemplateQ)
[REPORTCONTROLS]
! STRING(@s1),USE(tplTemplateQ)
tplTemplateQ             QUEUE(TEMPLATEQTYPE),PRE(tplTemplateQ)
!!> GUID('5157e20e-6abb-420e-9bc9-3f23036da803'),PICTURE(@s1)
                         END
!!> GUID('b47557d6-2ee4-4205-b54d-7f7c260b521d')
[SCREENCONTROLS]
! ENTRY(@s1),USE(FavoritesQ)
[REPORTCONTROLS]
! STRING(@s1),USE(FavoritesQ)
FavoritesQ               QUEUE(FAVORITESQTYPE),PRE(FavoritesQ)
!!> GUID('b4760aa0-2433-4cbe-8e63-404978949862'),PICTURE(@s1)
                         END
!!> GUID('199d7542-218a-4f3e-b63d-f7733eb040c8')
[SCREENCONTROLS]
! ENTRY(@s20),USE(RedirectionQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(RedirectionQueue)
RedirectionQueue         QUEUE,PRE(RedirectionQueue)
!!> GUID('4ea59d6d-23fa-45c6-a918-576dbcfd3100'),PROMPT('Redirection Queue:'),HEADER('Redirection Queue'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s32),USE(RedirectionQueue:Token)
[REPORTCONTROLS]
! STRING(@s32),USE(RedirectionQueue:Token)
Token                      CSTRING(33)
!!> GUID('2d87ebe0-e9f0-410d-b61d-63f82288c7d9'),PROMPT('Token:'),HEADER('Token'),PICTURE(@s32)
[SCREENCONTROLS]
! TEXT,USE(RedirectionQueue:Path)
[REPORTCONTROLS]
! TEXT,USE(RedirectionQueue:Path)
Path                       CSTRING(256)
!!> GUID('7750737e-cca8-4c92-b582-40c22440d069'),PROMPT('Path:'),HEADER('Path'),PICTURE(@s255)
                         END
!!> GUID('b65e6798-fbff-4998-bda9-69cdd08b4044')
Glo:iQErrorMessageText   STRING(128)
!!> GUID('bc34d542-5c75-4bf8-b197-a68d41a43c6a')
[EMBED]
EMBED %BeforeGlobalIncludes
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %AfterGlobalIncludes
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
   INCLUDE('kcrAsciiFileClass.inc'),ONCE
   INCLUDE('XMLClass.inc'),ONCE
   INCLUDE('CSciViewer.inc'),ONCE

TreeStyles            ITEMIZE(1),PRE(STYLE)
NORMAL                  EQUATE
PRIVATE                 EQUATE
PROTECTED               EQUATE
MODULE                  EQUATE
VIRTUAL                 EQUATE
NORMAL_NEW              EQUATE
PRIVATE_NEW             EQUATE
PROTECTED_NEW           EQUATE
MODULE_NEW              EQUATE
VIRTUAL_NEW             EQUATE
NORMAL_HYPERLINK        EQUATE  !Hyperlink's need to remain consecutive
PRIVATE_HYPERLINK       EQUATE  !
PROTECTED_HYPERLINK     EQUATE  !
MODULE_HYPERLINK        EQUATE  !
NORMAL_NEW_HYPERLINK    EQUATE  !
PRIVATE_NEW_HYPERLINK   EQUATE  !
PROTECTED_NEW_HYPERLINK EQUATE  !
MODULE_NEW_HYPERLINK    EQUATE  !Hyperlink's need to remain consecutive
                      END

TreeIcons         ITEMIZE(1),PRE(ICON)
CLASS               EQUATE
NEWCLASS            EQUATE
INTERFACEFOLDER     EQUATE
NEWINTERFACEFOLDER  EQUATE
PROPERTYFOLDER      EQUATE
METHODFOLDER        EQUATE
STRUCTUREFOLDER     EQUATE
EQUATEFOLDER        EQUATE
INTERFACE           EQUATE
PROPERTY            EQUATE
METHOD              EQUATE
STRUCTURE           EQUATE
EQUATE              EQUATE
ENUMFOLDER          EQUATE
NOTE                EQUATE
                  END
CONTRACTIONLEVEL  EQUATE(ICON:PROPERTYFOLDER)

TreeViews         ITEMIZE(1),PRE(VIEW)
CLASSES             EQUATE
STRUCTURES          EQUATE
EQUATES             EQUATE
CALLS               EQUATE
INTERFACES          EQUATE
                  END

ClarionVersions   ITEMIZE(1)
CWVERSION_C2        EQUATE
CWVERSION_C4        EQUATE
CWVERSION_C5        EQUATE
CWVERSION_C5EE      EQUATE
CWVERSION_C55       EQUATE
CWVERSION_C55EE     EQUATE
CWVERSION_C60       EQUATE
CWVERSION_C60EE     EQUATE
CWVERSION_C70       EQUATE
CWVERSION_C80       EQUATE
CWVERSION_C90       EQUATE
CWVERSION_C100      EQUATE
                  END

Msg:DeleteNote    EQUATE(50)
Msg:SaveNote      EQUATE(51)
Msg:QueryRefresh  EQUATE(52)

SEARCHQTYPE       QUEUE,TYPE
szPath               CSTRING(1024)
                  END

MODULEQTYPE       QUEUE,TYPE
szModuleName        CSTRING(64)
szModulePath        CSTRING(256)
bClarionVersion     BYTE
                  END

THREADQTYPE       QUEUE,TYPE
lThreadId           LONG
                  END

CATEGORYQUEUETYPE QUEUE,TYPE
szCategory          CSTRING(64)
                  END

TREEQUEUETYPE     QUEUE,TYPE !Tree Queue Type
sNote                STRING(1)
wNoteIcon            SHORT
szText               CSTRING(384)
wIcon                SHORT
lLevel               LONG
lStyle               LONG
szTipText            CSTRING(256)
szSearch             CSTRING(64)
szClassName          CSTRING(64)
szContextString      CSTRING(256)
szHelpFile           CSTRING(256)
lLineNum             LONG
lSourceLine          LONG
lIncludeId           LONG
lModuleId            LONG
lOccurranceLine      LONG
                   END

TEMPLATEQTYPE      QUEUE,TYPE
szName               CSTRING(61)
szPath               CSTRING(256)
                   END

FAVORITESQTYPE     QUEUE,TYPE
szName               CSTRING(61)
szPath               CSTRING(256)
SequenceNo           BYTE
MenuFeq              LONG
                   END

TOKENQUEUETYPE  QUEUE,TYPE
szPrompt            CSTRING(61)
szType              CSTRING(21)
szPicture           CSTRING(21)
szName              CSTRING(61)
szDefault           CSTRING(256)
szRadioValue        CSTRING(256)
szScope             CSTRING(256)
low                 CSTRING(21)
high                CSTRING(21)
step                CSTRING(21)
bChoice             BYTE
xPos                LONG
yPos                LONG
width               LONG
height              LONG
prompt_xPos         LONG
prompt_yPos         LONG
prompt_width        LONG
prompt_height       LONG
szValue             &CSTRING
nValue              &REAL
PromptFeq           LONG
EntryFeq            LONG
bFree               BYTE
                END

CURSOR:VSPLITBAR    EQUATE('<0FFH,02H,08H,7FH>')

NORMAL_PRIORITY_CLASS   EQUATE(00000020h)
IDLE_PRIORITY_CLASS     EQUATE(00000040h)
HIGH_PRIORITY_CLASS     EQUATE(00000080h)
REALTIME_PRIORITY_CLASS EQUATE(00000100h)

FLOODFILLSURFACE    EQUATE(1)

MIM_MAXHEIGHT       EQUATE(000000001h)
MIM_BACKGROUND      EQUATE(000000002h)
MIM_HELPID          EQUATE(000000004h)
MIM_MENUDATA        EQUATE(000000008h)
MIM_STYLE           EQUATE(000000010h)
MIM_APPLYTOSUBMENUS EQUATE(080000000h)

DI_MASK             EQUATE(00001)
DI_IMAGE            EQUATE(00002)
DI_NORMAL           EQUATE(00003)
DI_COMPAT           EQUATE(00004)
DI_DEFAULTSIZE      EQUATE(00008)
[END]
EMBED %AfterFileDeclarations
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SourceFile          FILE,DRIVER('ASCII'),NAME(szAsciiFilename),PRE(ASC),CREATE,THREAD
Record                RECORD
sText                   STRING(1024)
                      END
                    END


[END]
EMBED %GlobalData
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FileNameQ            QUEUE,PRE(FNQ),THREAD  !queue of source files we have scanned
sFileName              STRING(FILE:MaxFilePath)
                     END

SourceLineQ          QUEUE,PRE(SLQ),THREAD  !queue of source files we have scanned
sFileName              STRING(FILE:MaxFilePath)
sMethodName            STRING(256)
sMethodPrototype       STRING(256)
lSourceLine            LONG
szLineText             CSTRING(1025)
                     END

LineCommentQ          QUEUE,PRE(LCQ),THREAD  !queue of source files we have scanned
sFileName              STRING(FILE:MaxFilePath)
lSourceLine            LONG
szComment              CSTRING(1025)
                     END

DotEndQ              QUEUE,PRE(DEQ),THREAD  !queue of source files we have scanned
sFileName              STRING(FILE:MaxFilePath)
lSourceLine            LONG
                     END

ClassHierarchyQueueType QUEUE,TYPE
szClassName                 LIKE(ClassNameQ.szClassName)
                        END

ClassHierarchyQueue  QUEUE(ClassHierarchyQueueType),PRE(CHQ)
                     END

RedirectionQueueType    QUEUE,TYPE
Token                      CSTRING(33)
Path                       CSTRING(File:MaxFilePath+1)
                        END

ClarionVersionQueueType QUEUE,TYPE
VersionName                STRING(100)
Path                       CSTRING(File:MaxFilePath+1)
IsWindowsVersion           CSTRING(6)
IniFile                    CSTRING(81)
Libsrc                     CSTRING(1024)
RedFile                    CSTRING(81)
SupportsInclude            CSTRING(6)
RedirectionMacros          &RedirectionQueueType
Root                       CSTRING(File:MaxFilePath+1)
RedDir                     CSTRING(File:MaxFilePath+1)
                        END
glo:VersionQ            QUEUE(ClarionVersionQueueType),PRE(VQ)
                        END
glo:StructureQCopy      QUEUE(StructureQ),PRE(SQC)
                        END
[END]
EMBED %GlobalMap
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
INCLUDE('CWUTIL.INC'),ONCE
MODULE('CLIB')
  strtoul(*CSTRING s,*ULONG endptr,SIGNED base),ULONG,RAW,NAME('_strtoul'),PROC
  ultoa(ULONG num,*CSTRING s,SIGNED radix),ULONG,RAW,NAME('_ultoa'),PROC
END
MODULE('win32.lib')
   CreateMutex (<*LONG>,BOOL,<*CSTRING>),HANDLE,RAW, |
                PASCAL,NAME('CreateMutexA'),PROC
   CreateSemaphore(<*SECURITY_ATTRIBUTES lpSemaphoreAttributes>, |
                   LONG lInitialCount, |
                   LONG lMaximumCount, |
                   *CSTRING lpName),   |
                   LONG,RAW,PASCAL,NAME('CreateSemaphoreA')
   FindWindow(<*CSTRING lpClassName>, |
             *CSTRING lpWindowName),|
             UNSIGNED,PASCAL,RAW,NAME('FindWindowA')
   IsIconic(UNSIGNED),BOOL,PASCAL
   CreateBrushIndirect(*LOGBRUSH),UNSIGNED,PASCAL,RAW
   ExtFloodFill(UNSIGNED, SIGNED, SIGNED, ULONG, UNSIGNED),BOOL,PASCAL,PROC
   FrameRect(HDC, *RECT, UNSIGNED),SIGNED,PASCAL,RAW,PROC
   OffsetRect(*RECT, SIGNED, SIGNED),PASCAL,RAW

   GetMenuInfo(UNSIGNED hMenu, *MENUINFO lpmi),BOOL,RAW,PASCAL,PROC
   SetMenuInfo(UNSIGNED hMenu, *MENUINFO lpmi),BOOL,RAW,PASCAL,PROC
   CreatePatternBrush(UNSIGNED hBitmap),UNSIGNED,PASCAL
   FindResource(Unsigned hModule,  | ! Handle to the module whose executable file contains the resource
                Long lpName,       | ! Specifies the name of the resource
                Long lpType        | ! Specifies the resource type
                ),Unsigned,Pascal,Raw,Name('FindResourceA')
   LoadResource(Unsigned hModule,  | ! Handle to the resource to be locked
                Long hResInfo      |
               ),Unsigned,Pascal,Raw ! If the loaded resource is locked, the return value is a pointer to the first byte of the resource; otherwise, it is NULL.
   LockResource(Unsigned hResData),Long,Pascal
END
MODULE('shell32.lib')
   FindExecutable(*CSTRING lpFile, *CSTRING lpDirectory, *CSTRING lpResult),ULONG,RAW,PROC,PASCAL,NAME('FindExecutableA')
   ExtractIconEx(*CSTRING lpszFile, LONG nIconIndex, LONG phIconLarge, LONG phIconSmall, LONG nIcons),LONG,RAW,PROC,PASCAL,NAME('ExtractIconExA')
END
MODULE('User32.lib')
   DestroyIcon(LONG hIcon),LONG,PROC,PASCAL
   DrawIconEx(LONG hdc, LONG xLeft, LONG yTop, LONG hIcon, LONG cxWidth, LONG cyWidth, LONG istepIfAniCur, LONG hbrFlickerFreeDraw, LONG diFlags),LONG,PROC,PASCAL
END
MODULE('shlwapi.lib')
  PathCompactPathEx(*CSTRING pszOut, *CSTRING pszSrc, UNSIGNED cchMax, DWORD dwFlags),BOOL,RAW,PROC,PASCAL,NAME('PathCompactPathExA')
END
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2003/05/27' '12:46:00'
[DATA]
[SCREENCONTROLS]
! ENTRY(@n-14),USE(lMouseX)
[REPORTCONTROLS]
! STRING(@n-14),USE(lMouseX)
lMouseX                  LONG
!!> GUID('bf24c4de-b29c-441a-a1c7-9d46dafae7ca'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(lMouseY)
[REPORTCONTROLS]
! STRING(@n-14),USE(lMouseY)
lMouseY                  LONG
!!> GUID('be45d9ac-0272-4152-8b34-2689092cf3b0'),PICTURE(@n-14)
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME Main
[COMMON]
DESCRIPTION 'Clarion Class Viewer'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:43:53'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('5e356c6b-6480-4d35-8f1f-b77dd81a9652'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(I)
[REPORTCONTROLS]
! STRING(@n-14),USE(I)
I                        LONG
!!> GUID('446fc04f-5147-4d6a-8d60-0468bac9ee90'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(J)
[REPORTCONTROLS]
! STRING(@n-14),USE(J)
J                        LONG
!!> GUID('cbf0cda3-4cef-41ab-ada9-755edcfd3913'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('K:'),USE(?K:Prompt)
! ENTRY(@n-14),USE(K),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(K),RIGHT(1)
K                        LONG
!!> GUID('2e9d90f1-cf27-456f-99a6-49f1261f0e94'),PROMPT('K:'),HEADER('K'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@s20),USE(MyParent)
[REPORTCONTROLS]
! STRING(@s20),USE(MyParent)
MyParent                 LIKE(ClassQ.szClassName)
!!> GUID('4e92b37f-8b3e-4616-908e-4eaa6d565ccd'),PROMPT('My Parent:'),HEADER('My Parent'),PICTURE(@s20)
[SCREENCONTROLS]
! PROMPT('Fld Equ:'),USE(?FldEqu:Prompt)
! ENTRY(@n-14),USE(FldEqu),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(FldEqu),RIGHT(1)
FldEqu                   LONG
!!> GUID('69cde796-3915-4567-97e2-bdcd2f46aff3'),PROMPT('Fld Equ:'),HEADER('Fld Equ'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Class View Datafile:'),USE(?szClassViewDatafile:Prompt)
! TEXT,USE(szClassViewDatafile)
[REPORTCONTROLS]
! TEXT,USE(szClassViewDatafile)
szClassViewDatafile      CSTRING(256)
!!> GUID('cd988bed-8952-48e2-b779-100d684c29da'),INITIAL('ClassView.DAT<0>{242}'),PROMPT('sz Class View Datafile:'),HEADER('sz Class View Datafile'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('l Latch Control:'),USE(?lLatchControl:Prompt)
! ENTRY(@n-14),USE(lLatchControl),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(lLatchControl),RIGHT(1)
lLatchControl            LONG
!!> GUID('27e6242a-0eee-4ce2-82f9-e870add6d34d'),PROMPT('l Latch Control:'),HEADER('l Latch Control'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@s20),USE(sClassTip)
[REPORTCONTROLS]
! STRING(@s20),USE(sClassTip)
sClassTip                CSTRING(21)
!!> GUID('7c5ad54d-592e-4da1-92e1-e11145d7afc8'),INITIAL('View Class Hierarchy'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s15),USE(sStructureTip)
[REPORTCONTROLS]
! STRING(@s15),USE(sStructureTip)
sStructureTip            CSTRING(16)
!!> GUID('4a5db2d6-389d-4edc-bb02-3c215a08610d'),INITIAL('View Structures'),PICTURE(@s15)
[SCREENCONTROLS]
! ENTRY(@s12),USE(sEquateTip)
[REPORTCONTROLS]
! STRING(@s12),USE(sEquateTip)
sEquateTip               CSTRING(13)
!!> GUID('288d1e88-7da3-4379-8ac7-fe8095819513'),INITIAL('View Equates'),PICTURE(@s12)
[SCREENCONTROLS]
! ENTRY(@s21),USE(sOptionsTip)
[REPORTCONTROLS]
! STRING(@s21),USE(sOptionsTip)
sOptionsTip              CSTRING(22)
!!> GUID('00d528a2-d3a6-4202-85b7-0ce503a20dd9'),INITIAL('Edit User Preferences'),PICTURE(@s21)
[SCREENCONTROLS]
! ENTRY(@s254),USE(szSubKey)
[REPORTCONTROLS]
! STRING(@s254),USE(szSubKey)
szSubKey                 CSTRING(255)
!!> GUID('008b539b-0289-4794-9547-c4eedd2eeddf'),PICTURE(@s254)
[SCREENCONTROLS]
! ENTRY(@s254),USE(szValueName)
[REPORTCONTROLS]
! STRING(@s254),USE(szValueName)
szValueName              CSTRING(255)
!!> GUID('33a302fe-610c-47b5-9486-48c521998ba0'),PICTURE(@s254)
[SCREENCONTROLS]
! ENTRY(@s254),USE(szValue)
[REPORTCONTROLS]
! STRING(@s254),USE(szValue)
szValue                  CSTRING(255)
!!> GUID('8257545e-2595-457a-891d-aed7ede97845'),PICTURE(@s254)
[SCREENCONTROLS]
! ENTRY(@n13),USE(hKeyExtension)
[REPORTCONTROLS]
! STRING(@n13),USE(hKeyExtension)
hKeyExtension            ULONG
!!> GUID('ab6bde78-4039-4e46-b47f-60ce07ac32f5'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(pType)
[REPORTCONTROLS]
! STRING(@n13),USE(pType)
pType                    ULONG
!!> GUID('13fc9c95-e025-4712-9811-da704881675d'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(pData)
[REPORTCONTROLS]
! STRING(@n13),USE(pData)
pData                    ULONG
!!> GUID('c2fcda43-18ae-4088-91f8-682f272a9216'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(RetVal)
[REPORTCONTROLS]
! STRING(@n-14),USE(RetVal)
RetVal                   LONG
!!> GUID('e7b69025-afaa-4dfe-a57a-20f8d5b3304b'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('Viewer Thread Q:'),USE(?ViewerThreadQ:Prompt)
! ENTRY(@s1),USE(ViewerThreadQ)
[REPORTCONTROLS]
! STRING(@s1),USE(ViewerThreadQ)
ViewerThreadQ            QUEUE(THREADQTYPE),PRE()
!!> GUID('edbbdbc8-84c7-4f94-b2c2-2f24c4c21677'),PROMPT('Viewer Thread Q:'),HEADER('Viewer Thread Q'),PICTURE(@s1)
                         END
!!> GUID('f20d63bd-c2b4-4035-8348-9cc1db1739e3')
[SCREENCONTROLS]
! ENTRY(@s1),USE(CategoryQueue)
[REPORTCONTROLS]
! STRING(@s1),USE(CategoryQueue)
CategoryQueue            QUEUE(CATEGORYQUEUETYPE),PRE(CategoryQueue)
!!> GUID('191648f8-d5b7-41cb-b52d-94143ed401fb'),PICTURE(@s1)
                         END
!!> GUID('d5e52c24-ce51-43bb-8e49-2593d883ba6f')
[SCREENCONTROLS]
! ENTRY(@n3),USE(bViewClasses)
[REPORTCONTROLS]
! STRING(@n3),USE(bViewClasses)
bViewClasses             BYTE
!!> GUID('75d80cd9-6d2a-4d50-a342-70fb1314febb'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bViewInterfaces)
[REPORTCONTROLS]
! STRING(@n3),USE(bViewInterfaces)
bViewInterfaces          BYTE
!!> GUID('7d7cf22d-0360-4d66-8d51-ec2214721f86'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bViewCallTree)
[REPORTCONTROLS]
! STRING(@n3),USE(bViewCallTree)
bViewCallTree            BYTE
!!> GUID('384813b0-fcc3-46ed-94ed-14e15db939a1'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bViewStructures)
[REPORTCONTROLS]
! STRING(@n3),USE(bViewStructures)
bViewStructures          BYTE
!!> GUID('62c6ba18-b8ce-438f-9617-04ae54bdde8f'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bViewEquates)
[REPORTCONTROLS]
! STRING(@n3),USE(bViewEquates)
bViewEquates             BYTE
!!> GUID('47341eb7-1f6f-4d2c-848f-43cc80e1632b'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s60),USE(szObjectName)
[REPORTCONTROLS]
! STRING(@s60),USE(szObjectName)
szObjectName             CSTRING(61)
!!> GUID('539c6a95-c5e0-417a-9c4d-6eaa1938d1f1'),PICTURE(@s60)
[SCREENCONTROLS]
! PROMPT('History Queue:'),USE(?HistoryQueue:Prompt)
! ENTRY(@s38),USE(HistoryQueue)
[REPORTCONTROLS]
! STRING(@s38),USE(HistoryQueue)
HistoryQueue             QUEUE,PRE(HistoryQueue)
!!> GUID('eafe4c62-0df9-407c-8492-dc39f0595505'),PROMPT('History Queue:'),HEADER('History Queue'),PICTURE(@s38)
[SCREENCONTROLS]
! PROMPT('Object Name:'),USE(?HistoryQueue:ObjectName:Prompt)
! ENTRY(@s30),USE(HistoryQueue:ObjectName)
[REPORTCONTROLS]
! STRING(@s30),USE(HistoryQueue:ObjectName)
ObjectName                 CSTRING(31)
!!> GUID('e87aa535-add7-4ce8-ac2b-9f12f0ba8959'),PROMPT('Object Name:'),HEADER('Object Name'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('Object View:'),USE(?HistoryQueue:ObjectView:Prompt)
! ENTRY(@n3),USE(HistoryQueue:ObjectView)
[REPORTCONTROLS]
! STRING(@n3),USE(HistoryQueue:ObjectView)
ObjectView                 BYTE
!!> GUID('6d3d6136-fa43-47b9-b322-9301a1a31e95'),PROMPT('Object View:'),HEADER('Object View'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('l Object Drop List Pointer:'),USE(?HistoryQueue:lObjectDropListPointer:Prompt)
! ENTRY(@n-14),USE(HistoryQueue:lObjectDropListPointer),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(HistoryQueue:lObjectDropListPointer),RIGHT(1)
lObjectDropListPointer     LONG
!!> GUID('cedf30c5-5ef3-48d3-bcf1-2e58520f95cc'),PROMPT('l Object Drop List Pointer:'),HEADER('l Object Drop List Pointer'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('b Protected:'),USE(?HistoryQueue:bProtected:Prompt)
! ENTRY(@n3),USE(HistoryQueue:bProtected)
[REPORTCONTROLS]
! STRING(@n3),USE(HistoryQueue:bProtected)
bProtected                 BYTE
!!> GUID('346ec21f-01e2-47e4-83dc-45303a846b83'),PROMPT('b Protected:'),HEADER('b Protected'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(HistoryQueue:bModule)
[REPORTCONTROLS]
! STRING(@n3),USE(HistoryQueue:bModule)
bModule                    BYTE
!!> GUID('0ba2ab87-08ee-499c-8e0b-b9ef331244bf'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Private:'),USE(?HistoryQueue:bPrivate:Prompt)
! ENTRY(@n3),USE(HistoryQueue:bPrivate)
[REPORTCONTROLS]
! STRING(@n3),USE(HistoryQueue:bPrivate)
bPrivate                   BYTE
!!> GUID('f194efad-253c-427f-8b26-de879f320022'),PROMPT('b Private:'),HEADER('b Private'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('sz Text:'),USE(?HistoryQueue:szText:Prompt)
! ENTRY(@s20),USE(HistoryQueue:szText)
[REPORTCONTROLS]
! STRING(@s20),USE(HistoryQueue:szText)
szText                     LIKE(TreeQ.szText)
!!> GUID('d371ac0f-7daf-42e5-a921-5d9d3dcf1c76'),PROMPT('sz Text:'),HEADER('sz Text'),PICTURE(@s20)
                         END
!!> GUID('370287a7-7334-4ce3-8915-a12d9f2f281a')
[SCREENCONTROLS]
! PROMPT('l History Pointer:'),USE(?lHistoryPointer:Prompt)
! ENTRY(@n-14),USE(lHistoryPointer),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(lHistoryPointer),RIGHT(1)
lHistoryPointer          LONG
!!> GUID('a4fdce2e-e216-4f65-800f-04212cd2c634'),PROMPT('l History Pointer:'),HEADER('l History Pointer'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('b Hyper Linking:'),USE(?bHyperLinking:Prompt)
! ENTRY(@n3),USE(bHyperLinking)
[REPORTCONTROLS]
! STRING(@n3),USE(bHyperLinking)
bHyperLinking            BYTE
!!> GUID('ddc60c01-3fd0-4018-9a85-2347fd5ede51'),PROMPT('b Hyper Linking:'),HEADER('b Hyper Linking'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('sz Object Type:'),USE(?szObjectType:Prompt)
! ENTRY(@s10),USE(szObjectType)
[REPORTCONTROLS]
! STRING(@s10),USE(szObjectType)
szObjectType             CSTRING(11)
!!> GUID('8d343414-b975-481e-8c97-a2d68ea6b90f'),PROMPT('sz Object Type:'),HEADER('sz Object Type'),PICTURE(@s10)
[SCREENCONTROLS]
! TEXT,USE(szCommandLine)
[REPORTCONTROLS]
! TEXT,USE(szCommandLine)
szCommandLine            CSTRING(256),AUTO
!!> GUID('265b6279-de17-46f1-be7d-f70ff3ac809d'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion100)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion100)
FileClarion100           BYTE
!!> GUID('56de6e5e-a9aa-48e2-bf1d-ebdb1e8361f2'),PROMPT('File Clarion 100:'),HEADER('File Clarion 100'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion90)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion90)
FileClarion90            BYTE
!!> GUID('7abf1b5f-d543-413f-909f-f46e1daa87ca'),PROMPT('File Clarion 80:'),HEADER('File Clarion 80'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),AT(0,0),USE(FileClarion80)
[REPORTCONTROLS]
! STRING(@n3),AT(0,0),USE(FileClarion80)
FileClarion80            BYTE
!!> GUID('ef8f105f-43c6-48ab-9b5a-4b49b2c2f234'),PROMPT('File Clarion 80:'),HEADER('File Clarion 80'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion70)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion70)
FileClarion70            BYTE
!!> GUID('8d30ab06-24c6-49bc-b575-e62f75fae096'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion60EE)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion60EE)
FileClarion60EE          BYTE
!!> GUID('ce9a4542-1466-4e54-8201-9f66efaf39b4'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion60)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion60)
FileClarion60            BYTE
!!> GUID('7400f84b-f150-411c-b689-573d485600d0'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion55EE)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion55EE)
FileClarion55EE          BYTE
!!> GUID('aa3e589f-16a7-4d7f-8170-b48eb78e3ef1'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion55)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion55)
FileClarion55            BYTE
!!> GUID('96572c22-05d3-4c0d-9d8e-ed662a257a14'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion50EE)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion50EE)
FileClarion50EE          BYTE
!!> GUID('87375329-ce51-4cee-960b-0dd8e3b46587'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion50)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion50)
FileClarion50            BYTE
!!> GUID('45dfd5c2-b0ba-441d-891e-9ff52ead3686'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion40)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion40)
FileClarion40            BYTE
!!> GUID('682b58cb-f2fb-4957-8e8a-5bec8f77b0e1'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(FileClarion20)
[REPORTCONTROLS]
! STRING(@n3),USE(FileClarion20)
FileClarion20            BYTE
!!> GUID('7c0191a1-c2a7-4367-941f-4211265322dc'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bTrackMouse)
[REPORTCONTROLS]
! STRING(@n3),USE(bTrackMouse)
bTrackMouse              BYTE
!!> GUID('79ae12fc-b401-4f02-82da-61ff989d8251'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Count:'),USE(?bCount:Prompt)
! ENTRY(@n3),USE(bCount),MSG('Timer Tick Count'),TIP('Timer Tick Count')
[REPORTCONTROLS]
! STRING(@n3),USE(bCount)
bCount                   BYTE !Timer Tick Count
!!> GUID('56140235-a880-47ee-a5e0-8828d6ed9a8d'),PROMPT('b Count:'),HEADER('b Count'),MESSAGE('Timer Tick Count'),TOOLTIP('Timer Tick Count'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Detail New Selection:'),USE(?bDetailNewSelection:Prompt)
! ENTRY(@n3),USE(bDetailNewSelection)
[REPORTCONTROLS]
! STRING(@n3),USE(bDetailNewSelection)
bDetailNewSelection      BYTE
!!> GUID('d2c435a0-225b-4732-9c17-42e73ca90d4d'),PROMPT('b Detail New Selection:'),HEADER('b Detail New Selection'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bCurrentDetailLevel)
[REPORTCONTROLS]
! STRING(@n3),USE(bCurrentDetailLevel)
bCurrentDetailLevel      BYTE
!!> GUID('68a99092-a3a9-4d9b-b696-107f20bf76f6'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Locator Q:'),USE(?LocatorQ:Prompt)
! ENTRY(@s1),USE(LocatorQ)
[REPORTCONTROLS]
! STRING(@s1),USE(LocatorQ)
LocatorQ                 QUEUE,PRE(lq)
!!> GUID('e65014b3-5b4a-4a96-9ce0-ba1b6634b321'),PROMPT('Locator Q:'),HEADER('Locator Q'),PICTURE(@s1)
[SCREENCONTROLS]
! PROMPT('character:'),USE(?lq:character:Prompt)
! ENTRY(@s1),USE(lq:character)
[REPORTCONTROLS]
! STRING(@s1),USE(lq:character)
character                  STRING(1)
!!> GUID('2845531a-3dce-426e-a7f3-5fc25c7661d5'),PROMPT('character:'),HEADER('character'),PICTURE(@s1)
                         END
!!> GUID('5194474a-bc85-4cfc-b0f7-592007f46935')
[SCREENCONTROLS]
! PROMPT('loc : Force Smart Scan:'),USE(?loc:ForceSmartScan:Prompt)
! ENTRY(@n3),USE(loc:ForceSmartScan)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:ForceSmartScan)
loc:ForceSmartScan       BYTE
!!> GUID('7defa91f-f0f1-467d-8203-3388fe41704c'),PROMPT('loc : Force Smart Scan:'),HEADER('loc : Force Smart Scan'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Viewer:'),USE(?Viewer:Prompt)
! ENTRY(@s20),USE(Viewer)
[REPORTCONTROLS]
! STRING(@s20),USE(Viewer)
Viewer                   kcrAsciiViewerClass
!!> GUID('b86096e7-22d7-4492-a42e-eb5602b1ee01'),PROMPT('Viewer:'),HEADER('Viewer'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@n3),USE(ViewerActive)
[REPORTCONTROLS]
! STRING(@n3),USE(ViewerActive)
ViewerActive             BYTE
!!> GUID('117b45db-41a5-462f-ac00-486386349faa'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('l First Favorite Menu Feq:'),USE(?lFirstFavoriteMenuFeq:Prompt)
! ENTRY(@n-14),USE(lFirstFavoriteMenuFeq),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(lFirstFavoriteMenuFeq),RIGHT(1)
lFirstFavoriteMenuFeq    LONG
!!> GUID('9e47aba7-b325-4016-a1a1-0b67d9587189'),PROMPT('l First Favorite Menu Feq:'),HEADER('l First Favorite Menu Feq'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(lLastFavoriteMenuFeq)
[REPORTCONTROLS]
! STRING(@n-14),USE(lLastFavoriteMenuFeq)
lLastFavoriteMenuFeq     LONG
!!> GUID('1f3d0ab2-e14e-4af8-814f-35abc570f047'),PICTURE(@n-14)
[SCREENCONTROLS]
! TEXT,USE(loc:szViewerStyle)
[REPORTCONTROLS]
! TEXT,USE(loc:szViewerStyle)
loc:szViewerStyle        CSTRING(256)
!!> GUID('343a696f-2492-47ff-a210-90e300132b3d'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('loc : sz Ascii Filename:'),USE(?loc:szAsciiFilename:Prompt)
! ENTRY(@s20),USE(loc:szAsciiFilename)
[REPORTCONTROLS]
! STRING(@s20),USE(loc:szAsciiFilename)
loc:szAsciiFilename      LIKE(szAsciiFilename)
!!> GUID('36b3bfe3-4124-4ff9-9a8e-f7aba37a1d6a'),PROMPT('loc : sz Ascii Filename:'),HEADER('loc : sz Ascii Filename'),PICTURE(@s20)
[SCREENCONTROLS]
! PROMPT(''),USE(?loc:ObjectCount:Prompt),TRN,FONT('Tahoma',7,COLOR:Black,FONT:regular,CHARSET:ANSI)
! STRING(@s15),USE(loc:ObjectCount),TRN,FONT('Tahoma',7,COLOR:Black,FONT:regular,CHARSET:ANSI)
[REPORTCONTROLS]
! STRING(@s15),USE(loc:ObjectCount)
loc:ObjectCount          STRING(15)
!!> GUID('5bf8178d-9045-4788-a5aa-5c9a5033f264'),PICTURE(@s15)
[SCREENCONTROLS]
! PROMPT('b Add To Clarion Menu:'),USE(?bAddToClarionMenu:Prompt)
! ENTRY(@n3),USE(bAddToClarionMenu),MSG('Show ''Add to Clarion Menu'' on help menu if true'),TIP('Show ''Add to Clarion Menu'' on help menu if true')
[REPORTCONTROLS]
! STRING(@n3),USE(bAddToClarionMenu)
bAddToClarionMenu        BYTE !Show 'Add to Clarion Menu' on help menu if true
!!> GUID('5cff3e8a-bcd1-4241-952c-223842ca2b34'),PROMPT('b Add To Clarion Menu:'),HEADER('b Add To Clarion Menu'),MESSAGE('Show ''Add to Clarion Menu'' on help menu if true'),TOOLTIP('Show ''Add to Clarion Menu'' on help menu if true'),PICTURE(@n3)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED', 'TakeSelected {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 1
WHEN  ('Default') (1)

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 1
WHEN  (1) ('HasFocus')

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 1
WHEN  (1) ('BYTE')
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 120
WHEN  ('') ('No Special Action')
WHEN  ('?AddClassWizardButton') ('No Special Action')
WHEN  ('?AsciiBox') ('No Special Action')
WHEN  ('?CallTreeButton') ('No Special Action')
WHEN  ('?ClassRegion') ('No Special Action')
WHEN  ('?CloseButton') ('No Special Action')
WHEN  ('?ContractButton') ('No Special Action')
WHEN  ('?EnumeratedEquate:String') ('No Special Action')
WHEN  ('?Enumeration:Image') ('No Special Action')
WHEN  ('?EnumerationBox') ('No Special Action')
WHEN  ('?Equate:Image') ('No Special Action')
WHEN  ('?EquateBox') ('No Special Action')
WHEN  ('?EquateRegion') ('No Special Action')
WHEN  ('?ExpandButton') ('No Special Action')
WHEN  ('?File') ('No Special Action')
WHEN  ('?FileClarion100') ('No Special Action')
WHEN  ('?FileClarion20') ('No Special Action')
WHEN  ('?FileClarion40') ('No Special Action')
WHEN  ('?FileClarion50') ('No Special Action')
WHEN  ('?FileClarion50EE') ('No Special Action')
WHEN  ('?FileClarion55') ('No Special Action')
WHEN  ('?FileClarion55EE') ('No Special Action')
WHEN  ('?FileClarion60') ('No Special Action')
WHEN  ('?FileClarion60EE') ('No Special Action')
WHEN  ('?FileClarion70') ('No Special Action')
WHEN  ('?FileClarion80') ('No Special Action')
WHEN  ('?FileClarion90') ('No Special Action')
WHEN  ('?FileExit') ('No Special Action')
WHEN  ('?FileExportToXML') ('Call a Procedure')
WHEN  ('?FileExporttoXML') ('No Special Action')
WHEN  ('?FileRecent') ('No Special Action')
WHEN  ('?GroupdEquate:String') ('No Special Action')
WHEN  ('?HelpAboutClassViewer') ('Call a Procedure')
WHEN  ('?HelpAddtoClarionMenu') ('No Special Action')
WHEN  ('?HelpButton') ('No Special Action')
WHEN  ('?HelpContents') ('No Special Action')
WHEN  ('?HelpJusttheFAQs') ('No Special Action')
WHEN  ('?HelpMenu') ('No Special Action')
WHEN  ('?HelpOnHelp') ('No Special Action')
WHEN  ('?HelpSearch') ('No Special Action')
WHEN  ('?HistoryList') ('No Special Action')
WHEN  ('?HyperlinkButton') ('No Special Action')
WHEN  ('?Image13') ('No Special Action')
WHEN  ('?InterfaceRegion') ('No Special Action')
WHEN  ('?LoadingString') ('No Special Action')
WHEN  ('?LocatorImage') ('No Special Action')
WHEN  ('?MenuBar') ('No Special Action')
WHEN  ('?ModuleBox') ('No Special Action')
WHEN  ('?NextHyperlink') ('No Special Action')
WHEN  ('?ObjectDropList') ('No Special Action')
WHEN  ('?OptionsButton') ('No Special Action')
WHEN  ('?Panel3') ('No Special Action')
WHEN  ('?Panel4') ('No Special Action')
WHEN  ('?Panel4:3') ('No Special Action')
WHEN  ('?Panel7') ('No Special Action')
WHEN  ('?Panel8') ('No Special Action')
WHEN  ('?PrevHyperlink') ('No Special Action')
WHEN  ('?PrivateBox') ('No Special Action')
WHEN  ('?PrivateString') ('No Special Action')
WHEN  ('?ProcessString') ('No Special Action')
WHEN  ('?ProgressBox') ('No Special Action')
WHEN  ('?ProgressBox:2') ('No Special Action')
WHEN  ('?ProtectedBox') ('No Special Action')
WHEN  ('?ProtectedString') ('No Special Action')
WHEN  ('?RefreshButton') ('No Special Action')
WHEN  ('?SavingString') ('No Special Action')
WHEN  ('?SciControl:Region') ('No Special Action')
WHEN  ('?StructureRegion') ('No Special Action')
WHEN  ('?Tools') ('No Special Action')
WHEN  ('?ToolsAddClassWizard') ('No Special Action')
WHEN  ('?ToolsBrowseDatabase') ('No Special Action')
WHEN  ('?ToolsCalculator') ('Call a Procedure')
WHEN  ('?ToolsClearHistory') ('No Special Action')
WHEN  ('?ToolsFavorites') ('No Special Action')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('Call a Procedure')
WHEN  ('?ToolsFindNotes') ('No Special Action')
WHEN  ('?ToolsOptions') ('No Special Action')
WHEN  ('?ToolsRefreshTree') ('No Special Action')
WHEN  ('?ToolsStatistics') ('Call a Procedure')
WHEN  ('?ToolsXMLExport') ('No Special Action')
WHEN  ('?Tree') ('No Special Action')
WHEN  ('?TreeContract') ('No Special Action')
WHEN  ('?TreeContractBranch') ('No Special Action')
WHEN  ('?TreeExpand') ('No Special Action')
WHEN  ('?TreeExpandBranch') ('No Special Action')
WHEN  ('?TreeExportToXML') ('Call a Procedure')
WHEN  ('?TreeExporttoXML') ('Call a Procedure')
WHEN  ('?TreeList') ('No Special Action')
WHEN  ('?TreeRegion') ('No Special Action')
WHEN  ('?VcrBack') ('No Special Action')
WHEN  ('?VcrBottom') ('No Special Action')
WHEN  ('?VcrFastForward') ('No Special Action')
WHEN  ('?VcrPlay') ('No Special Action')
WHEN  ('?VcrRewind') ('No Special Action')
WHEN  ('?VcrTop') ('No Special Action')
WHEN  ('?VerticalSplitter') ('No Special Action')
WHEN  ('?View') ('No Special Action')
WHEN  ('?ViewHelp') ('No Special Action')
WHEN  ('?ViewNoteButton') ('No Special Action')
WHEN  ('?ViewNotes') ('No Special Action')
WHEN  ('?ViewSource') ('No Special Action')
WHEN  ('?ViewSourceButton') ('No Special Action')
WHEN  ('?VirtualBox') ('No Special Action')
WHEN  ('?VirtualString') ('No Special Action')
WHEN  ('?bViewCallTree') ('No Special Action')
WHEN  ('?bViewClasses') ('No Special Action')
WHEN  ('?bViewEquates') ('No Special Action')
WHEN  ('?bViewInterfaces') ('No Special Action')
WHEN  ('?bViewStructures') ('No Special Action')
WHEN  ('?glo:bDetailLevel') ('No Special Action')
WHEN  ('?glo:bDetailLevel:Prompt') ('No Special Action')
WHEN  ('?glo:bShowModule') ('No Special Action')
WHEN  ('?glo:bShowPrivate') ('No Special Action')
WHEN  ('?glo:bShowProtected') ('No Special Action')
WHEN  ('?glo:bShowSparseTrees') ('No Special Action')
WHEN  ('?glo:szCategory:Prompt') ('No Special Action')
WHEN  ('?glo:szCategoryChoice') ('No Special Action')
WHEN  ('?loc:szAsciiFilename') ('No Special Action')
WHEN  ('?locator') ('No Special Action')
WHEN  ('?sciControl:Region') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 51
WHEN  ('?AddClassWizardButton') ('')
WHEN  ('?CallTreeButton') ('')
WHEN  ('?CloseButton') ('')
WHEN  ('?ContractButton') ('')
WHEN  ('?ExpandButton') ('')
WHEN  ('?FileClarion20') ('')
WHEN  ('?FileClarion40') ('')
WHEN  ('?FileClarion50') ('')
WHEN  ('?FileClarion50EE') ('')
WHEN  ('?FileClarion55') ('')
WHEN  ('?FileClarion55EE') ('')
WHEN  ('?FileClarion60') ('')
WHEN  ('?FileClarion60EE') ('')
WHEN  ('?FileExit') ('')
WHEN  ('?FileExportToXML') ('')
WHEN  ('?FileExporttoXML') ('')
WHEN  ('?HelpAboutClassViewer') ('')
WHEN  ('?HelpAddtoClarionMenu') ('')
WHEN  ('?HelpButton') ('')
WHEN  ('?HelpContents') ('')
WHEN  ('?HelpJusttheFAQs') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?HyperlinkButton') ('')
WHEN  ('?OptionsButton') ('')
WHEN  ('?RefreshButton') ('')
WHEN  ('?ToolsAddClassWizard') ('')
WHEN  ('?ToolsBrowseDatabase') ('')
WHEN  ('?ToolsCalculator') ('')
WHEN  ('?ToolsClearHistory') ('')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('')
WHEN  ('?ToolsFindNotes') ('')
WHEN  ('?ToolsOptions') ('')
WHEN  ('?ToolsRefreshTree') ('')
WHEN  ('?ToolsStatistics') ('')
WHEN  ('?TreeContract') ('')
WHEN  ('?TreeContractBranch') ('')
WHEN  ('?TreeExpand') ('')
WHEN  ('?TreeExpandBranch') ('')
WHEN  ('?TreeExportToXML') ('')
WHEN  ('?TreeExporttoXML') ('')
WHEN  ('?ViewHelp') ('')
WHEN  ('?ViewNoteButton') ('')
WHEN  ('?ViewNotes') ('')
WHEN  ('?ViewSource') ('')
WHEN  ('?ViewSourceButton') ('')
WHEN  ('?bViewCallTree') ('')
WHEN  ('?bViewClasses') ('')
WHEN  ('?bViewEquates') ('')
WHEN  ('?bViewInterfaces') ('')
WHEN  ('?bViewStructures') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 51
WHEN  ('?AddClassWizardButton') ('')
WHEN  ('?CallTreeButton') ('')
WHEN  ('?CloseButton') ('')
WHEN  ('?ContractButton') ('')
WHEN  ('?ExpandButton') ('')
WHEN  ('?FileClarion20') ('')
WHEN  ('?FileClarion40') ('')
WHEN  ('?FileClarion50') ('')
WHEN  ('?FileClarion50EE') ('')
WHEN  ('?FileClarion55') ('')
WHEN  ('?FileClarion55EE') ('')
WHEN  ('?FileClarion60') ('')
WHEN  ('?FileClarion60EE') ('')
WHEN  ('?FileExit') ('')
WHEN  ('?FileExportToXML') ('')
WHEN  ('?FileExporttoXML') ('')
WHEN  ('?HelpAboutClassViewer') ('')
WHEN  ('?HelpAddtoClarionMenu') ('')
WHEN  ('?HelpButton') ('')
WHEN  ('?HelpContents') ('')
WHEN  ('?HelpJusttheFAQs') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?HyperlinkButton') ('')
WHEN  ('?OptionsButton') ('')
WHEN  ('?RefreshButton') ('')
WHEN  ('?ToolsAddClassWizard') ('')
WHEN  ('?ToolsBrowseDatabase') ('')
WHEN  ('?ToolsCalculator') ('')
WHEN  ('?ToolsClearHistory') ('')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('')
WHEN  ('?ToolsFindNotes') ('')
WHEN  ('?ToolsOptions') ('')
WHEN  ('?ToolsRefreshTree') ('')
WHEN  ('?ToolsStatistics') ('')
WHEN  ('?TreeContract') ('')
WHEN  ('?TreeContractBranch') ('')
WHEN  ('?TreeExpand') ('')
WHEN  ('?TreeExpandBranch') ('')
WHEN  ('?TreeExportToXML') ('')
WHEN  ('?TreeExporttoXML') ('')
WHEN  ('?ViewHelp') ('')
WHEN  ('?ViewNoteButton') ('')
WHEN  ('?ViewNotes') ('')
WHEN  ('?ViewSource') ('')
WHEN  ('?ViewSourceButton') ('')
WHEN  ('?bViewCallTree') ('')
WHEN  ('?bViewClasses') ('')
WHEN  ('?bViewEquates') ('')
WHEN  ('?bViewInterfaces') ('')
WHEN  ('?bViewStructures') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 51
WHEN  ('?AddClassWizardButton') ()
WHEN  ('?CallTreeButton') ()
WHEN  ('?CloseButton') ()
WHEN  ('?ContractButton') ()
WHEN  ('?ExpandButton') ()
WHEN  ('?FileClarion20') ()
WHEN  ('?FileClarion40') ()
WHEN  ('?FileClarion50') ()
WHEN  ('?FileClarion50EE') ()
WHEN  ('?FileClarion55') ()
WHEN  ('?FileClarion55EE') ()
WHEN  ('?FileClarion60') ()
WHEN  ('?FileClarion60EE') ()
WHEN  ('?FileExit') ()
WHEN  ('?FileExportToXML') (winExportDatabaseToXML)
WHEN  ('?FileExporttoXML') ()
WHEN  ('?HelpAboutClassViewer') (AboutDevuna)
WHEN  ('?HelpAddtoClarionMenu') ()
WHEN  ('?HelpButton') ()
WHEN  ('?HelpContents') ()
WHEN  ('?HelpJusttheFAQs') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?HyperlinkButton') ()
WHEN  ('?OptionsButton') ()
WHEN  ('?RefreshButton') ()
WHEN  ('?ToolsAddClassWizard') ()
WHEN  ('?ToolsBrowseDatabase') ()
WHEN  ('?ToolsCalculator') (Calculator)
WHEN  ('?ToolsClearHistory') ()
WHEN  ('?ToolsFavoritesAddtoFavorites') (winFavoritesMenu)
WHEN  ('?ToolsFindNotes') ()
WHEN  ('?ToolsOptions') ()
WHEN  ('?ToolsRefreshTree') ()
WHEN  ('?ToolsStatistics') (winShowStatistics)
WHEN  ('?TreeContract') ()
WHEN  ('?TreeContractBranch') ()
WHEN  ('?TreeExpand') ()
WHEN  ('?TreeExpandBranch') ()
WHEN  ('?TreeExportToXML') (srcExportTreeToXML)
WHEN  ('?TreeExporttoXML') (srcExportTreeToXML)
WHEN  ('?ViewHelp') ()
WHEN  ('?ViewNoteButton') ()
WHEN  ('?ViewNotes') ()
WHEN  ('?ViewSource') ()
WHEN  ('?ViewSourceButton') ()
WHEN  ('?bViewCallTree') ()
WHEN  ('?bViewClasses') ()
WHEN  ('?bViewEquates') ()
WHEN  ('?bViewInterfaces') ()
WHEN  ('?bViewStructures') ()

%ButtonThread DEPEND %Control LONG TIMES 51
WHEN  ('?AddClassWizardButton') (0)
WHEN  ('?CallTreeButton') (0)
WHEN  ('?CloseButton') (0)
WHEN  ('?ContractButton') (0)
WHEN  ('?ExpandButton') (0)
WHEN  ('?FileClarion20') (0)
WHEN  ('?FileClarion40') (0)
WHEN  ('?FileClarion50') (0)
WHEN  ('?FileClarion50EE') (0)
WHEN  ('?FileClarion55') (0)
WHEN  ('?FileClarion55EE') (0)
WHEN  ('?FileClarion60') (0)
WHEN  ('?FileClarion60EE') (0)
WHEN  ('?FileExit') (0)
WHEN  ('?FileExportToXML') (0)
WHEN  ('?FileExporttoXML') (0)
WHEN  ('?HelpAboutClassViewer') (0)
WHEN  ('?HelpAddtoClarionMenu') (0)
WHEN  ('?HelpButton') (0)
WHEN  ('?HelpContents') (0)
WHEN  ('?HelpJusttheFAQs') (0)
WHEN  ('?HelpOnHelp') (0)
WHEN  ('?HelpSearch') (0)
WHEN  ('?HyperlinkButton') (0)
WHEN  ('?OptionsButton') (0)
WHEN  ('?RefreshButton') (0)
WHEN  ('?ToolsAddClassWizard') (0)
WHEN  ('?ToolsBrowseDatabase') (0)
WHEN  ('?ToolsCalculator') (1)
WHEN  ('?ToolsClearHistory') (0)
WHEN  ('?ToolsFavoritesAddtoFavorites') (0)
WHEN  ('?ToolsFindNotes') (0)
WHEN  ('?ToolsOptions') (0)
WHEN  ('?ToolsRefreshTree') (0)
WHEN  ('?ToolsStatistics') (0)
WHEN  ('?TreeContract') (0)
WHEN  ('?TreeContractBranch') (0)
WHEN  ('?TreeExpand') (0)
WHEN  ('?TreeExpandBranch') (0)
WHEN  ('?TreeExportToXML') (0)
WHEN  ('?TreeExporttoXML') (0)
WHEN  ('?ViewHelp') (0)
WHEN  ('?ViewNoteButton') (0)
WHEN  ('?ViewNotes') (0)
WHEN  ('?ViewSource') (0)
WHEN  ('?ViewSourceButton') (0)
WHEN  ('?bViewCallTree') (0)
WHEN  ('?bViewClasses') (0)
WHEN  ('?bViewEquates') (0)
WHEN  ('?bViewInterfaces') (0)
WHEN  ('?bViewStructures') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 120
WHEN  ('') ('25000')
WHEN  ('?AddClassWizardButton') ('25000')
WHEN  ('?AsciiBox') ('25000')
WHEN  ('?CallTreeButton') ('25000')
WHEN  ('?ClassRegion') ('25000')
WHEN  ('?CloseButton') ('25000')
WHEN  ('?ContractButton') ('25000')
WHEN  ('?EnumeratedEquate:String') ('25000')
WHEN  ('?Enumeration:Image') ('25000')
WHEN  ('?EnumerationBox') ('25000')
WHEN  ('?Equate:Image') ('25000')
WHEN  ('?EquateBox') ('25000')
WHEN  ('?EquateRegion') ('25000')
WHEN  ('?ExpandButton') ('25000')
WHEN  ('?File') ('25000')
WHEN  ('?FileClarion100') ('25000')
WHEN  ('?FileClarion20') ('25000')
WHEN  ('?FileClarion40') ('25000')
WHEN  ('?FileClarion50') ('25000')
WHEN  ('?FileClarion50EE') ('25000')
WHEN  ('?FileClarion55') ('25000')
WHEN  ('?FileClarion55EE') ('25000')
WHEN  ('?FileClarion60') ('25000')
WHEN  ('?FileClarion60EE') ('25000')
WHEN  ('?FileClarion70') ('25000')
WHEN  ('?FileClarion80') ('25000')
WHEN  ('?FileClarion90') ('25000')
WHEN  ('?FileExit') ('25000')
WHEN  ('?FileExportToXML') ('25000')
WHEN  ('?FileExporttoXML') ('25000')
WHEN  ('?FileRecent') ('25000')
WHEN  ('?GroupdEquate:String') ('25000')
WHEN  ('?HelpAboutClassViewer') ('25000')
WHEN  ('?HelpAddtoClarionMenu') ('25000')
WHEN  ('?HelpButton') ('25000')
WHEN  ('?HelpContents') ('25000')
WHEN  ('?HelpJusttheFAQs') ('25000')
WHEN  ('?HelpMenu') ('25000')
WHEN  ('?HelpOnHelp') ('25000')
WHEN  ('?HelpSearch') ('25000')
WHEN  ('?HistoryList') ('25000')
WHEN  ('?HyperlinkButton') ('25000')
WHEN  ('?Image13') ('25000')
WHEN  ('?InterfaceRegion') ('25000')
WHEN  ('?LoadingString') ('25000')
WHEN  ('?LocatorImage') ('25000')
WHEN  ('?MenuBar') ('25000')
WHEN  ('?ModuleBox') ('25000')
WHEN  ('?NextHyperlink') ('25000')
WHEN  ('?ObjectDropList') ('25000')
WHEN  ('?OptionsButton') ('25000')
WHEN  ('?Panel3') ('25000')
WHEN  ('?Panel4') ('25000')
WHEN  ('?Panel4:3') ('25000')
WHEN  ('?Panel7') ('25000')
WHEN  ('?Panel8') ('25000')
WHEN  ('?PrevHyperlink') ('25000')
WHEN  ('?PrivateBox') ('25000')
WHEN  ('?PrivateString') ('25000')
WHEN  ('?ProcessString') ('25000')
WHEN  ('?ProgressBox') ('25000')
WHEN  ('?ProgressBox:2') ('25000')
WHEN  ('?ProtectedBox') ('25000')
WHEN  ('?ProtectedString') ('25000')
WHEN  ('?RefreshButton') ('25000')
WHEN  ('?SavingString') ('25000')
WHEN  ('?SciControl:Region') ('25000')
WHEN  ('?StructureRegion') ('25000')
WHEN  ('?Tools') ('25000')
WHEN  ('?ToolsAddClassWizard') ('25000')
WHEN  ('?ToolsBrowseDatabase') ('25000')
WHEN  ('?ToolsCalculator') ('25000')
WHEN  ('?ToolsClearHistory') ('25000')
WHEN  ('?ToolsFavorites') ('25000')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('25000')
WHEN  ('?ToolsFindNotes') ('25000')
WHEN  ('?ToolsOptions') ('25000')
WHEN  ('?ToolsRefreshTree') ('25000')
WHEN  ('?ToolsStatistics') ('25000')
WHEN  ('?ToolsXMLExport') ('25000')
WHEN  ('?Tree') ('25000')
WHEN  ('?TreeContract') ('25000')
WHEN  ('?TreeContractBranch') ('25000')
WHEN  ('?TreeExpand') ('25000')
WHEN  ('?TreeExpandBranch') ('25000')
WHEN  ('?TreeExportToXML') ('25000')
WHEN  ('?TreeExporttoXML') ('25000')
WHEN  ('?TreeList') ('25000')
WHEN  ('?TreeRegion') ('25000')
WHEN  ('?VcrBack') ('25000')
WHEN  ('?VcrBottom') ('25000')
WHEN  ('?VcrFastForward') ('25000')
WHEN  ('?VcrPlay') ('25000')
WHEN  ('?VcrRewind') ('25000')
WHEN  ('?VcrTop') ('25000')
WHEN  ('?VerticalSplitter') ('25000')
WHEN  ('?View') ('25000')
WHEN  ('?ViewHelp') ('25000')
WHEN  ('?ViewNoteButton') ('25000')
WHEN  ('?ViewNotes') ('25000')
WHEN  ('?ViewSource') ('25000')
WHEN  ('?ViewSourceButton') ('25000')
WHEN  ('?VirtualBox') ('25000')
WHEN  ('?VirtualString') ('25000')
WHEN  ('?bViewCallTree') ('25000')
WHEN  ('?bViewClasses') ('25000')
WHEN  ('?bViewEquates') ('25000')
WHEN  ('?bViewInterfaces') ('25000')
WHEN  ('?bViewStructures') ('25000')
WHEN  ('?glo:bDetailLevel') ('25000')
WHEN  ('?glo:bDetailLevel:Prompt') ('25000')
WHEN  ('?glo:bShowModule') ('25000')
WHEN  ('?glo:bShowPrivate') ('25000')
WHEN  ('?glo:bShowProtected') ('25000')
WHEN  ('?glo:bShowSparseTrees') ('25000')
WHEN  ('?glo:szCategory:Prompt') ('25000')
WHEN  ('?glo:szCategoryChoice') ('25000')
WHEN  ('?loc:szAsciiFilename') ('25000')
WHEN  ('?locator') ('25000')
WHEN  ('?sciControl:Region') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 51
WHEN  ('?AddClassWizardButton') ('')
WHEN  ('?CallTreeButton') ('')
WHEN  ('?CloseButton') ('')
WHEN  ('?ContractButton') ('')
WHEN  ('?ExpandButton') ('')
WHEN  ('?FileClarion20') ('')
WHEN  ('?FileClarion40') ('')
WHEN  ('?FileClarion50') ('')
WHEN  ('?FileClarion50EE') ('')
WHEN  ('?FileClarion55') ('')
WHEN  ('?FileClarion55EE') ('')
WHEN  ('?FileClarion60') ('')
WHEN  ('?FileClarion60EE') ('')
WHEN  ('?FileExit') ('')
WHEN  ('?FileExportToXML') ('')
WHEN  ('?FileExporttoXML') ('')
WHEN  ('?HelpAboutClassViewer') ('')
WHEN  ('?HelpAddtoClarionMenu') ('')
WHEN  ('?HelpButton') ('')
WHEN  ('?HelpContents') ('')
WHEN  ('?HelpJusttheFAQs') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?HyperlinkButton') ('')
WHEN  ('?OptionsButton') ('')
WHEN  ('?RefreshButton') ('')
WHEN  ('?ToolsAddClassWizard') ('')
WHEN  ('?ToolsBrowseDatabase') ('')
WHEN  ('?ToolsCalculator') ('')
WHEN  ('?ToolsClearHistory') ('')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('FavoritesQ')
WHEN  ('?ToolsFindNotes') ('')
WHEN  ('?ToolsOptions') ('')
WHEN  ('?ToolsRefreshTree') ('')
WHEN  ('?ToolsStatistics') ('')
WHEN  ('?TreeContract') ('')
WHEN  ('?TreeContractBranch') ('')
WHEN  ('?TreeExpand') ('')
WHEN  ('?TreeExpandBranch') ('')
WHEN  ('?TreeExportToXML') ('')
WHEN  ('?TreeExporttoXML') ('')
WHEN  ('?ViewHelp') ('')
WHEN  ('?ViewNoteButton') ('')
WHEN  ('?ViewNotes') ('')
WHEN  ('?ViewSource') ('')
WHEN  ('?ViewSourceButton') ('')
WHEN  ('?bViewCallTree') ('')
WHEN  ('?bViewClasses') ('')
WHEN  ('?bViewEquates') ('')
WHEN  ('?bViewInterfaces') ('')
WHEN  ('?bViewStructures') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 51
WHEN  ('?AddClassWizardButton') ()
WHEN  ('?CallTreeButton') ()
WHEN  ('?CloseButton') ()
WHEN  ('?ContractButton') ()
WHEN  ('?ExpandButton') ()
WHEN  ('?FileClarion20') ()
WHEN  ('?FileClarion40') ()
WHEN  ('?FileClarion50') ()
WHEN  ('?FileClarion50EE') ()
WHEN  ('?FileClarion55') ()
WHEN  ('?FileClarion55EE') ()
WHEN  ('?FileClarion60') ()
WHEN  ('?FileClarion60EE') ()
WHEN  ('?FileExit') ()
WHEN  ('?FileExportToXML') ()
WHEN  ('?FileExporttoXML') ()
WHEN  ('?HelpAboutClassViewer') ()
WHEN  ('?HelpAddtoClarionMenu') ()
WHEN  ('?HelpButton') ()
WHEN  ('?HelpContents') ()
WHEN  ('?HelpJusttheFAQs') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?HyperlinkButton') ()
WHEN  ('?OptionsButton') ()
WHEN  ('?RefreshButton') ()
WHEN  ('?ToolsAddClassWizard') ()
WHEN  ('?ToolsBrowseDatabase') ()
WHEN  ('?ToolsCalculator') ()
WHEN  ('?ToolsClearHistory') ()
WHEN  ('?ToolsFavoritesAddtoFavorites') ()
WHEN  ('?ToolsFindNotes') ()
WHEN  ('?ToolsOptions') ()
WHEN  ('?ToolsRefreshTree') ()
WHEN  ('?ToolsStatistics') ()
WHEN  ('?TreeContract') ()
WHEN  ('?TreeContractBranch') ()
WHEN  ('?TreeExpand') ()
WHEN  ('?TreeExpandBranch') ()
WHEN  ('?TreeExportToXML') ()
WHEN  ('?TreeExporttoXML') ()
WHEN  ('?ViewHelp') ()
WHEN  ('?ViewNoteButton') ()
WHEN  ('?ViewNotes') ()
WHEN  ('?ViewSource') ()
WHEN  ('?ViewSourceButton') ()
WHEN  ('?bViewCallTree') ()
WHEN  ('?bViewClasses') ()
WHEN  ('?bViewEquates') ()
WHEN  ('?bViewInterfaces') ()
WHEN  ('?bViewStructures') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 51
WHEN  ('?AddClassWizardButton') (0)
WHEN  ('?CallTreeButton') (0)
WHEN  ('?CloseButton') (0)
WHEN  ('?ContractButton') (0)
WHEN  ('?ExpandButton') (0)
WHEN  ('?FileClarion20') (0)
WHEN  ('?FileClarion40') (0)
WHEN  ('?FileClarion50') (0)
WHEN  ('?FileClarion50EE') (0)
WHEN  ('?FileClarion55') (0)
WHEN  ('?FileClarion55EE') (0)
WHEN  ('?FileClarion60') (0)
WHEN  ('?FileClarion60EE') (0)
WHEN  ('?FileExit') (0)
WHEN  ('?FileExportToXML') (0)
WHEN  ('?FileExporttoXML') (0)
WHEN  ('?HelpAboutClassViewer') (0)
WHEN  ('?HelpAddtoClarionMenu') (0)
WHEN  ('?HelpButton') (0)
WHEN  ('?HelpContents') (0)
WHEN  ('?HelpJusttheFAQs') (0)
WHEN  ('?HelpOnHelp') (0)
WHEN  ('?HelpSearch') (0)
WHEN  ('?HyperlinkButton') (0)
WHEN  ('?OptionsButton') (0)
WHEN  ('?RefreshButton') (0)
WHEN  ('?ToolsAddClassWizard') (0)
WHEN  ('?ToolsBrowseDatabase') (0)
WHEN  ('?ToolsCalculator') (0)
WHEN  ('?ToolsClearHistory') (0)
WHEN  ('?ToolsFavoritesAddtoFavorites') (0)
WHEN  ('?ToolsFindNotes') (0)
WHEN  ('?ToolsOptions') (0)
WHEN  ('?ToolsRefreshTree') (0)
WHEN  ('?ToolsStatistics') (0)
WHEN  ('?TreeContract') (0)
WHEN  ('?TreeContractBranch') (0)
WHEN  ('?TreeExpand') (0)
WHEN  ('?TreeExpandBranch') (0)
WHEN  ('?TreeExportToXML') (0)
WHEN  ('?TreeExporttoXML') (0)
WHEN  ('?ViewHelp') (0)
WHEN  ('?ViewNoteButton') (0)
WHEN  ('?ViewNotes') (0)
WHEN  ('?ViewSource') (0)
WHEN  ('?ViewSourceButton') (0)
WHEN  ('?bViewCallTree') (0)
WHEN  ('?bViewClasses') (0)
WHEN  ('?bViewEquates') (0)
WHEN  ('?bViewInterfaces') (0)
WHEN  ('?bViewStructures') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 120
WHEN  ('') ('None')
WHEN  ('?AddClassWizardButton') ('None')
WHEN  ('?AsciiBox') ('None')
WHEN  ('?CallTreeButton') ('None')
WHEN  ('?ClassRegion') ('None')
WHEN  ('?CloseButton') ('None')
WHEN  ('?ContractButton') ('None')
WHEN  ('?EnumeratedEquate:String') ('None')
WHEN  ('?Enumeration:Image') ('None')
WHEN  ('?EnumerationBox') ('None')
WHEN  ('?Equate:Image') ('None')
WHEN  ('?EquateBox') ('None')
WHEN  ('?EquateRegion') ('None')
WHEN  ('?ExpandButton') ('None')
WHEN  ('?File') ('None')
WHEN  ('?FileClarion100') ('None')
WHEN  ('?FileClarion20') ('None')
WHEN  ('?FileClarion40') ('None')
WHEN  ('?FileClarion50') ('None')
WHEN  ('?FileClarion50EE') ('None')
WHEN  ('?FileClarion55') ('None')
WHEN  ('?FileClarion55EE') ('None')
WHEN  ('?FileClarion60') ('None')
WHEN  ('?FileClarion60EE') ('None')
WHEN  ('?FileClarion70') ('None')
WHEN  ('?FileClarion80') ('None')
WHEN  ('?FileClarion90') ('None')
WHEN  ('?FileExit') ('None')
WHEN  ('?FileExportToXML') ('None')
WHEN  ('?FileExporttoXML') ('None')
WHEN  ('?FileRecent') ('None')
WHEN  ('?GroupdEquate:String') ('None')
WHEN  ('?HelpAboutClassViewer') ('None')
WHEN  ('?HelpAddtoClarionMenu') ('None')
WHEN  ('?HelpButton') ('None')
WHEN  ('?HelpContents') ('None')
WHEN  ('?HelpJusttheFAQs') ('None')
WHEN  ('?HelpMenu') ('None')
WHEN  ('?HelpOnHelp') ('None')
WHEN  ('?HelpSearch') ('None')
WHEN  ('?HistoryList') ('None')
WHEN  ('?HyperlinkButton') ('None')
WHEN  ('?Image13') ('None')
WHEN  ('?InterfaceRegion') ('None')
WHEN  ('?LoadingString') ('None')
WHEN  ('?LocatorImage') ('None')
WHEN  ('?MenuBar') ('None')
WHEN  ('?ModuleBox') ('None')
WHEN  ('?NextHyperlink') ('None')
WHEN  ('?ObjectDropList') ('None')
WHEN  ('?OptionsButton') ('None')
WHEN  ('?Panel3') ('None')
WHEN  ('?Panel4') ('None')
WHEN  ('?Panel4:3') ('None')
WHEN  ('?Panel7') ('None')
WHEN  ('?Panel8') ('None')
WHEN  ('?PrevHyperlink') ('None')
WHEN  ('?PrivateBox') ('None')
WHEN  ('?PrivateString') ('None')
WHEN  ('?ProcessString') ('None')
WHEN  ('?ProgressBox') ('None')
WHEN  ('?ProgressBox:2') ('None')
WHEN  ('?ProtectedBox') ('None')
WHEN  ('?ProtectedString') ('None')
WHEN  ('?RefreshButton') ('None')
WHEN  ('?SavingString') ('None')
WHEN  ('?SciControl:Region') ('None')
WHEN  ('?StructureRegion') ('None')
WHEN  ('?Tools') ('None')
WHEN  ('?ToolsAddClassWizard') ('None')
WHEN  ('?ToolsBrowseDatabase') ('None')
WHEN  ('?ToolsCalculator') ('None')
WHEN  ('?ToolsClearHistory') ('None')
WHEN  ('?ToolsFavorites') ('None')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('None')
WHEN  ('?ToolsFindNotes') ('None')
WHEN  ('?ToolsOptions') ('None')
WHEN  ('?ToolsRefreshTree') ('None')
WHEN  ('?ToolsStatistics') ('None')
WHEN  ('?ToolsXMLExport') ('None')
WHEN  ('?Tree') ('None')
WHEN  ('?TreeContract') ('None')
WHEN  ('?TreeContractBranch') ('None')
WHEN  ('?TreeExpand') ('None')
WHEN  ('?TreeExpandBranch') ('None')
WHEN  ('?TreeExportToXML') ('None')
WHEN  ('?TreeExporttoXML') ('None')
WHEN  ('?TreeList') ('None')
WHEN  ('?TreeRegion') ('None')
WHEN  ('?VcrBack') ('None')
WHEN  ('?VcrBottom') ('None')
WHEN  ('?VcrFastForward') ('None')
WHEN  ('?VcrPlay') ('None')
WHEN  ('?VcrRewind') ('None')
WHEN  ('?VcrTop') ('None')
WHEN  ('?VerticalSplitter') ('None')
WHEN  ('?View') ('None')
WHEN  ('?ViewHelp') ('None')
WHEN  ('?ViewNoteButton') ('None')
WHEN  ('?ViewNotes') ('None')
WHEN  ('?ViewSource') ('None')
WHEN  ('?ViewSourceButton') ('None')
WHEN  ('?VirtualBox') ('None')
WHEN  ('?VirtualString') ('None')
WHEN  ('?bViewCallTree') ('None')
WHEN  ('?bViewClasses') ('None')
WHEN  ('?bViewEquates') ('None')
WHEN  ('?bViewInterfaces') ('None')
WHEN  ('?bViewStructures') ('None')
WHEN  ('?glo:bDetailLevel') ('None')
WHEN  ('?glo:bDetailLevel:Prompt') ('None')
WHEN  ('?glo:bShowModule') ('None')
WHEN  ('?glo:bShowPrivate') ('None')
WHEN  ('?glo:bShowProtected') ('None')
WHEN  ('?glo:bShowSparseTrees') ('None')
WHEN  ('?glo:szCategory:Prompt') ('None')
WHEN  ('?glo:szCategoryChoice') ('None')
WHEN  ('?loc:szAsciiFilename') ('None')
WHEN  ('?locator') ('None')
WHEN  ('?sciControl:Region') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 51
WHEN  ('?AddClassWizardButton') ('')
WHEN  ('?CallTreeButton') ('')
WHEN  ('?CloseButton') ('')
WHEN  ('?ContractButton') ('')
WHEN  ('?ExpandButton') ('')
WHEN  ('?FileClarion20') ('')
WHEN  ('?FileClarion40') ('')
WHEN  ('?FileClarion50') ('')
WHEN  ('?FileClarion50EE') ('')
WHEN  ('?FileClarion55') ('')
WHEN  ('?FileClarion55EE') ('')
WHEN  ('?FileClarion60') ('')
WHEN  ('?FileClarion60EE') ('')
WHEN  ('?FileExit') ('')
WHEN  ('?FileExportToXML') ('')
WHEN  ('?FileExporttoXML') ('')
WHEN  ('?HelpAboutClassViewer') ('')
WHEN  ('?HelpAddtoClarionMenu') ('')
WHEN  ('?HelpButton') ('')
WHEN  ('?HelpContents') ('')
WHEN  ('?HelpJusttheFAQs') ('')
WHEN  ('?HelpOnHelp') ('')
WHEN  ('?HelpSearch') ('')
WHEN  ('?HyperlinkButton') ('')
WHEN  ('?OptionsButton') ('')
WHEN  ('?RefreshButton') ('')
WHEN  ('?ToolsAddClassWizard') ('')
WHEN  ('?ToolsBrowseDatabase') ('')
WHEN  ('?ToolsCalculator') ('')
WHEN  ('?ToolsClearHistory') ('')
WHEN  ('?ToolsFavoritesAddtoFavorites') ('')
WHEN  ('?ToolsFindNotes') ('')
WHEN  ('?ToolsOptions') ('')
WHEN  ('?ToolsRefreshTree') ('')
WHEN  ('?ToolsStatistics') ('')
WHEN  ('?TreeContract') ('')
WHEN  ('?TreeContractBranch') ('')
WHEN  ('?TreeExpand') ('')
WHEN  ('?TreeExpandBranch') ('')
WHEN  ('?TreeExportToXML') ('')
WHEN  ('?TreeExporttoXML') ('')
WHEN  ('?ViewHelp') ('')
WHEN  ('?ViewNoteButton') ('')
WHEN  ('?ViewNotes') ('')
WHEN  ('?ViewSource') ('')
WHEN  ('?ViewSourceButton') ('')
WHEN  ('?bViewCallTree') ('')
WHEN  ('?bViewClasses') ('')
WHEN  ('?bViewEquates') ('')
WHEN  ('?bViewInterfaces') ('')
WHEN  ('?bViewStructures') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 51
WHEN  ('?AddClassWizardButton') ()
WHEN  ('?CallTreeButton') ()
WHEN  ('?CloseButton') ()
WHEN  ('?ContractButton') ()
WHEN  ('?ExpandButton') ()
WHEN  ('?FileClarion20') ()
WHEN  ('?FileClarion40') ()
WHEN  ('?FileClarion50') ()
WHEN  ('?FileClarion50EE') ()
WHEN  ('?FileClarion55') ()
WHEN  ('?FileClarion55EE') ()
WHEN  ('?FileClarion60') ()
WHEN  ('?FileClarion60EE') ()
WHEN  ('?FileExit') ()
WHEN  ('?FileExportToXML') ()
WHEN  ('?FileExporttoXML') ()
WHEN  ('?HelpAboutClassViewer') ()
WHEN  ('?HelpAddtoClarionMenu') ()
WHEN  ('?HelpButton') ()
WHEN  ('?HelpContents') ()
WHEN  ('?HelpJusttheFAQs') ()
WHEN  ('?HelpOnHelp') ()
WHEN  ('?HelpSearch') ()
WHEN  ('?HyperlinkButton') ()
WHEN  ('?OptionsButton') ()
WHEN  ('?RefreshButton') ()
WHEN  ('?ToolsAddClassWizard') ()
WHEN  ('?ToolsBrowseDatabase') ()
WHEN  ('?ToolsCalculator') ()
WHEN  ('?ToolsClearHistory') ()
WHEN  ('?ToolsFavoritesAddtoFavorites') ()
WHEN  ('?ToolsFindNotes') ()
WHEN  ('?ToolsOptions') ()
WHEN  ('?ToolsRefreshTree') ()
WHEN  ('?ToolsStatistics') ()
WHEN  ('?TreeContract') ()
WHEN  ('?TreeContractBranch') ()
WHEN  ('?TreeExpand') ()
WHEN  ('?TreeExpandBranch') ()
WHEN  ('?TreeExportToXML') ()
WHEN  ('?TreeExporttoXML') ()
WHEN  ('?ViewHelp') ()
WHEN  ('?ViewNoteButton') ()
WHEN  ('?ViewNotes') ()
WHEN  ('?ViewSource') ()
WHEN  ('?ViewSourceButton') ()
WHEN  ('?bViewCallTree') ()
WHEN  ('?bViewClasses') ()
WHEN  ('?bViewEquates') ()
WHEN  ('?bViewInterfaces') ()
WHEN  ('?bViewStructures') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('?glo:bDetailLevel') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?glo:bDetailLevel') ()

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('?glo:bDetailLevel') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?glo:bDetailLevel') ()

%PostLookupDuringValidate DEPEND %Control LONG TIMES 108
WHEN  ('') (1)
WHEN  ('?AddClassWizardButton') (1)
WHEN  ('?AsciiBox') (1)
WHEN  ('?CallTreeButton') (1)
WHEN  ('?ClassRegion') (1)
WHEN  ('?CloseButton') (1)
WHEN  ('?ContractButton') (1)
WHEN  ('?EnumeratedEquate:String') (1)
WHEN  ('?Enumeration:Image') (1)
WHEN  ('?EnumerationBox') (1)
WHEN  ('?Equate:Image') (1)
WHEN  ('?EquateBox') (1)
WHEN  ('?ExpandButton') (1)
WHEN  ('?File') (1)
WHEN  ('?FileClarion20') (1)
WHEN  ('?FileClarion40') (1)
WHEN  ('?FileClarion50') (1)
WHEN  ('?FileClarion50EE') (1)
WHEN  ('?FileClarion55') (1)
WHEN  ('?FileClarion55EE') (1)
WHEN  ('?FileClarion60') (1)
WHEN  ('?FileClarion60EE') (1)
WHEN  ('?FileExit') (1)
WHEN  ('?FileExportToXML') (1)
WHEN  ('?FileExporttoXML') (1)
WHEN  ('?FileRecent') (1)
WHEN  ('?GroupdEquate:String') (1)
WHEN  ('?HelpAboutClassViewer') (1)
WHEN  ('?HelpAddtoClarionMenu') (1)
WHEN  ('?HelpButton') (1)
WHEN  ('?HelpContents') (1)
WHEN  ('?HelpJusttheFAQs') (1)
WHEN  ('?HelpMenu') (1)
WHEN  ('?HelpOnHelp') (1)
WHEN  ('?HelpSearch') (1)
WHEN  ('?HistoryList') (1)
WHEN  ('?HyperlinkButton') (1)
WHEN  ('?Image13') (1)
WHEN  ('?InterfaceRegion') (1)
WHEN  ('?LoadingString') (1)
WHEN  ('?LocatorImage') (1)
WHEN  ('?MenuBar') (1)
WHEN  ('?ModuleBox') (1)
WHEN  ('?NextHyperlink') (1)
WHEN  ('?ObjectDropList') (1)
WHEN  ('?OptionsButton') (1)
WHEN  ('?Panel3') (1)
WHEN  ('?Panel4') (1)
WHEN  ('?Panel4:3') (1)
WHEN  ('?Panel7') (1)
WHEN  ('?Panel8') (1)
WHEN  ('?PrevHyperlink') (1)
WHEN  ('?PrivateBox') (1)
WHEN  ('?PrivateString') (1)
WHEN  ('?ProcessString') (1)
WHEN  ('?ProgressBox') (1)
WHEN  ('?ProgressBox:2') (1)
WHEN  ('?ProtectedBox') (1)
WHEN  ('?ProtectedString') (1)
WHEN  ('?RefreshButton') (1)
WHEN  ('?SavingString') (1)
WHEN  ('?SciControl:Region') (1)
WHEN  ('?Tools') (1)
WHEN  ('?ToolsAddClassWizard') (1)
WHEN  ('?ToolsBrowseDatabase') (1)
WHEN  ('?ToolsCalculator') (1)
WHEN  ('?ToolsClearHistory') (1)
WHEN  ('?ToolsFavorites') (1)
WHEN  ('?ToolsFavoritesAddtoFavorites') (1)
WHEN  ('?ToolsFindNotes') (1)
WHEN  ('?ToolsOptions') (1)
WHEN  ('?ToolsRefreshTree') (1)
WHEN  ('?ToolsStatistics') (1)
WHEN  ('?ToolsXMLExport') (1)
WHEN  ('?Tree') (1)
WHEN  ('?TreeContract') (1)
WHEN  ('?TreeContractBranch') (1)
WHEN  ('?TreeExpand') (1)
WHEN  ('?TreeExpandBranch') (1)
WHEN  ('?TreeExportToXML') (1)
WHEN  ('?TreeExporttoXML') (1)
WHEN  ('?TreeList') (1)
WHEN  ('?TreeRegion') (1)
WHEN  ('?VerticalSplitter') (1)
WHEN  ('?View') (1)
WHEN  ('?ViewHelp') (1)
WHEN  ('?ViewNoteButton') (1)
WHEN  ('?ViewNotes') (1)
WHEN  ('?ViewSource') (1)
WHEN  ('?ViewSourceButton') (1)
WHEN  ('?VirtualBox') (1)
WHEN  ('?VirtualString') (1)
WHEN  ('?bViewCallTree') (1)
WHEN  ('?bViewClasses') (1)
WHEN  ('?bViewEquates') (1)
WHEN  ('?bViewInterfaces') (1)
WHEN  ('?bViewStructures') (1)
WHEN  ('?glo:bDetailLevel') (1)
WHEN  ('?glo:bDetailLevel:Prompt') (1)
WHEN  ('?glo:bShowModule') (1)
WHEN  ('?glo:bShowPrivate') (1)
WHEN  ('?glo:bShowProtected') (1)
WHEN  ('?glo:bShowSparseTrees') (1)
WHEN  ('?glo:szCategory:Prompt') (1)
WHEN  ('?glo:szCategoryChoice') (1)
WHEN  ('?loc:szAsciiFilename') (1)
WHEN  ('?locator') (1)
WHEN  ('?sciControl:Region') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 108
WHEN  ('')TIMES 0
WHEN  ('?AddClassWizardButton')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CallTreeButton')TIMES 0
WHEN  ('?ClassRegion')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?ContractButton')TIMES 0
WHEN  ('?EnumeratedEquate:String')TIMES 0
WHEN  ('?Enumeration:Image')TIMES 0
WHEN  ('?EnumerationBox')TIMES 0
WHEN  ('?Equate:Image')TIMES 0
WHEN  ('?EquateBox')TIMES 0
WHEN  ('?ExpandButton')TIMES 0
WHEN  ('?File')TIMES 0
WHEN  ('?FileClarion20')TIMES 0
WHEN  ('?FileClarion40')TIMES 0
WHEN  ('?FileClarion50')TIMES 0
WHEN  ('?FileClarion50EE')TIMES 0
WHEN  ('?FileClarion55')TIMES 0
WHEN  ('?FileClarion55EE')TIMES 0
WHEN  ('?FileClarion60')TIMES 0
WHEN  ('?FileClarion60EE')TIMES 0
WHEN  ('?FileExit')TIMES 0
WHEN  ('?FileExportToXML')TIMES 0
WHEN  ('?FileExporttoXML')TIMES 0
WHEN  ('?FileRecent')TIMES 0
WHEN  ('?GroupdEquate:String')TIMES 0
WHEN  ('?HelpAboutClassViewer')TIMES 0
WHEN  ('?HelpAddtoClarionMenu')TIMES 0
WHEN  ('?HelpButton')TIMES 0
WHEN  ('?HelpContents')TIMES 0
WHEN  ('?HelpJusttheFAQs')TIMES 0
WHEN  ('?HelpMenu')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0
WHEN  ('?HelpSearch')TIMES 0
WHEN  ('?HistoryList')TIMES 0
WHEN  ('?HyperlinkButton')TIMES 0
WHEN  ('?Image13')TIMES 0
WHEN  ('?InterfaceRegion')TIMES 0
WHEN  ('?LoadingString')TIMES 0
WHEN  ('?LocatorImage')TIMES 0
WHEN  ('?MenuBar')TIMES 0
WHEN  ('?ModuleBox')TIMES 0
WHEN  ('?NextHyperlink')TIMES 0
WHEN  ('?ObjectDropList')TIMES 0
WHEN  ('?OptionsButton')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel4')TIMES 0
WHEN  ('?Panel4:3')TIMES 0
WHEN  ('?Panel7')TIMES 0
WHEN  ('?Panel8')TIMES 0
WHEN  ('?PrevHyperlink')TIMES 0
WHEN  ('?PrivateBox')TIMES 0
WHEN  ('?PrivateString')TIMES 0
WHEN  ('?ProcessString')TIMES 0
WHEN  ('?ProgressBox')TIMES 0
WHEN  ('?ProgressBox:2')TIMES 0
WHEN  ('?ProtectedBox')TIMES 0
WHEN  ('?ProtectedString')TIMES 0
WHEN  ('?RefreshButton')TIMES 0
WHEN  ('?SavingString')TIMES 0
WHEN  ('?SciControl:Region')TIMES 0
WHEN  ('?Tools')TIMES 0
WHEN  ('?ToolsAddClassWizard')TIMES 0
WHEN  ('?ToolsBrowseDatabase')TIMES 0
WHEN  ('?ToolsCalculator')TIMES 0
WHEN  ('?ToolsClearHistory')TIMES 0
WHEN  ('?ToolsFavorites')TIMES 0
WHEN  ('?ToolsFavoritesAddtoFavorites')TIMES 0
WHEN  ('?ToolsFindNotes')TIMES 0
WHEN  ('?ToolsOptions')TIMES 0
WHEN  ('?ToolsRefreshTree')TIMES 0
WHEN  ('?ToolsStatistics')TIMES 0
WHEN  ('?ToolsXMLExport')TIMES 0
WHEN  ('?Tree')TIMES 0
WHEN  ('?TreeContract')TIMES 0
WHEN  ('?TreeContractBranch')TIMES 0
WHEN  ('?TreeExpand')TIMES 0
WHEN  ('?TreeExpandBranch')TIMES 0
WHEN  ('?TreeExportToXML')TIMES 0
WHEN  ('?TreeExporttoXML')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?TreeRegion')TIMES 0
WHEN  ('?VerticalSplitter')TIMES 0
WHEN  ('?View')TIMES 0
WHEN  ('?ViewHelp')TIMES 0
WHEN  ('?ViewNoteButton')TIMES 0
WHEN  ('?ViewNotes')TIMES 0
WHEN  ('?ViewSource')TIMES 0
WHEN  ('?ViewSourceButton')TIMES 0
WHEN  ('?VirtualBox')TIMES 0
WHEN  ('?VirtualString')TIMES 0
WHEN  ('?bViewCallTree')TIMES 0
WHEN  ('?bViewClasses')TIMES 0
WHEN  ('?bViewEquates')TIMES 0
WHEN  ('?bViewInterfaces')TIMES 0
WHEN  ('?bViewStructures')TIMES 0
WHEN  ('?glo:bDetailLevel')TIMES 0
WHEN  ('?glo:bDetailLevel:Prompt')TIMES 0
WHEN  ('?glo:bShowModule')TIMES 0
WHEN  ('?glo:bShowPrivate')TIMES 0
WHEN  ('?glo:bShowProtected')TIMES 0
WHEN  ('?glo:bShowSparseTrees')TIMES 0
WHEN  ('?glo:szCategory:Prompt')TIMES 0
WHEN  ('?glo:szCategoryChoice')TIMES 0
WHEN  ('?loc:szAsciiFilename')TIMES 0
WHEN  ('?locator')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 108
WHEN  ('')TIMES 0
WHEN  ('?AddClassWizardButton')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CallTreeButton')TIMES 0
WHEN  ('?ClassRegion')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?ContractButton')TIMES 0
WHEN  ('?EnumeratedEquate:String')TIMES 0
WHEN  ('?Enumeration:Image')TIMES 0
WHEN  ('?EnumerationBox')TIMES 0
WHEN  ('?Equate:Image')TIMES 0
WHEN  ('?EquateBox')TIMES 0
WHEN  ('?ExpandButton')TIMES 0
WHEN  ('?File')TIMES 0
WHEN  ('?FileClarion20')TIMES 0
WHEN  ('?FileClarion40')TIMES 0
WHEN  ('?FileClarion50')TIMES 0
WHEN  ('?FileClarion50EE')TIMES 0
WHEN  ('?FileClarion55')TIMES 0
WHEN  ('?FileClarion55EE')TIMES 0
WHEN  ('?FileClarion60')TIMES 0
WHEN  ('?FileClarion60EE')TIMES 0
WHEN  ('?FileExit')TIMES 0
WHEN  ('?FileExportToXML')TIMES 0
WHEN  ('?FileExporttoXML')TIMES 0
WHEN  ('?FileRecent')TIMES 0
WHEN  ('?GroupdEquate:String')TIMES 0
WHEN  ('?HelpAboutClassViewer')TIMES 0
WHEN  ('?HelpAddtoClarionMenu')TIMES 0
WHEN  ('?HelpButton')TIMES 0
WHEN  ('?HelpContents')TIMES 0
WHEN  ('?HelpJusttheFAQs')TIMES 0
WHEN  ('?HelpMenu')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0
WHEN  ('?HelpSearch')TIMES 0
WHEN  ('?HistoryList')TIMES 0
WHEN  ('?HyperlinkButton')TIMES 0
WHEN  ('?Image13')TIMES 0
WHEN  ('?InterfaceRegion')TIMES 0
WHEN  ('?LoadingString')TIMES 0
WHEN  ('?LocatorImage')TIMES 0
WHEN  ('?MenuBar')TIMES 0
WHEN  ('?ModuleBox')TIMES 0
WHEN  ('?NextHyperlink')TIMES 0
WHEN  ('?ObjectDropList')TIMES 0
WHEN  ('?OptionsButton')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel4')TIMES 0
WHEN  ('?Panel4:3')TIMES 0
WHEN  ('?Panel7')TIMES 0
WHEN  ('?Panel8')TIMES 0
WHEN  ('?PrevHyperlink')TIMES 0
WHEN  ('?PrivateBox')TIMES 0
WHEN  ('?PrivateString')TIMES 0
WHEN  ('?ProcessString')TIMES 0
WHEN  ('?ProgressBox')TIMES 0
WHEN  ('?ProgressBox:2')TIMES 0
WHEN  ('?ProtectedBox')TIMES 0
WHEN  ('?ProtectedString')TIMES 0
WHEN  ('?RefreshButton')TIMES 0
WHEN  ('?SavingString')TIMES 0
WHEN  ('?SciControl:Region')TIMES 0
WHEN  ('?Tools')TIMES 0
WHEN  ('?ToolsAddClassWizard')TIMES 0
WHEN  ('?ToolsBrowseDatabase')TIMES 0
WHEN  ('?ToolsCalculator')TIMES 0
WHEN  ('?ToolsClearHistory')TIMES 0
WHEN  ('?ToolsFavorites')TIMES 0
WHEN  ('?ToolsFavoritesAddtoFavorites')TIMES 0
WHEN  ('?ToolsFindNotes')TIMES 0
WHEN  ('?ToolsOptions')TIMES 0
WHEN  ('?ToolsRefreshTree')TIMES 0
WHEN  ('?ToolsStatistics')TIMES 0
WHEN  ('?ToolsXMLExport')TIMES 0
WHEN  ('?Tree')TIMES 0
WHEN  ('?TreeContract')TIMES 0
WHEN  ('?TreeContractBranch')TIMES 0
WHEN  ('?TreeExpand')TIMES 0
WHEN  ('?TreeExpandBranch')TIMES 0
WHEN  ('?TreeExportToXML')TIMES 0
WHEN  ('?TreeExporttoXML')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?TreeRegion')TIMES 0
WHEN  ('?VerticalSplitter')TIMES 0
WHEN  ('?View')TIMES 0
WHEN  ('?ViewHelp')TIMES 0
WHEN  ('?ViewNoteButton')TIMES 0
WHEN  ('?ViewNotes')TIMES 0
WHEN  ('?ViewSource')TIMES 0
WHEN  ('?ViewSourceButton')TIMES 0
WHEN  ('?VirtualBox')TIMES 0
WHEN  ('?VirtualString')TIMES 0
WHEN  ('?bViewCallTree')TIMES 0
WHEN  ('?bViewClasses')TIMES 0
WHEN  ('?bViewEquates')TIMES 0
WHEN  ('?bViewInterfaces')TIMES 0
WHEN  ('?bViewStructures')TIMES 0
WHEN  ('?glo:bDetailLevel')TIMES 0
WHEN  ('?glo:bDetailLevel:Prompt')TIMES 0
WHEN  ('?glo:bShowModule')TIMES 0
WHEN  ('?glo:bShowPrivate')TIMES 0
WHEN  ('?glo:bShowProtected')TIMES 0
WHEN  ('?glo:bShowSparseTrees')TIMES 0
WHEN  ('?glo:szCategory:Prompt')TIMES 0
WHEN  ('?glo:szCategoryChoice')TIMES 0
WHEN  ('?loc:szAsciiFilename')TIMES 0
WHEN  ('?locator')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 108
WHEN  ('')TIMES 0
WHEN  ('?AddClassWizardButton')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CallTreeButton')TIMES 0
WHEN  ('?ClassRegion')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?ContractButton')TIMES 0
WHEN  ('?EnumeratedEquate:String')TIMES 0
WHEN  ('?Enumeration:Image')TIMES 0
WHEN  ('?EnumerationBox')TIMES 0
WHEN  ('?Equate:Image')TIMES 0
WHEN  ('?EquateBox')TIMES 0
WHEN  ('?ExpandButton')TIMES 0
WHEN  ('?File')TIMES 0
WHEN  ('?FileClarion20')TIMES 0
WHEN  ('?FileClarion40')TIMES 0
WHEN  ('?FileClarion50')TIMES 0
WHEN  ('?FileClarion50EE')TIMES 0
WHEN  ('?FileClarion55')TIMES 0
WHEN  ('?FileClarion55EE')TIMES 0
WHEN  ('?FileClarion60')TIMES 0
WHEN  ('?FileClarion60EE')TIMES 0
WHEN  ('?FileExit')TIMES 0
WHEN  ('?FileExportToXML')TIMES 0
WHEN  ('?FileExporttoXML')TIMES 0
WHEN  ('?FileRecent')TIMES 0
WHEN  ('?GroupdEquate:String')TIMES 0
WHEN  ('?HelpAboutClassViewer')TIMES 0
WHEN  ('?HelpAddtoClarionMenu')TIMES 0
WHEN  ('?HelpButton')TIMES 0
WHEN  ('?HelpContents')TIMES 0
WHEN  ('?HelpJusttheFAQs')TIMES 0
WHEN  ('?HelpMenu')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0
WHEN  ('?HelpSearch')TIMES 0
WHEN  ('?HistoryList')TIMES 0
WHEN  ('?HyperlinkButton')TIMES 0
WHEN  ('?Image13')TIMES 0
WHEN  ('?InterfaceRegion')TIMES 0
WHEN  ('?LoadingString')TIMES 0
WHEN  ('?LocatorImage')TIMES 0
WHEN  ('?MenuBar')TIMES 0
WHEN  ('?ModuleBox')TIMES 0
WHEN  ('?NextHyperlink')TIMES 0
WHEN  ('?ObjectDropList')TIMES 0
WHEN  ('?OptionsButton')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel4')TIMES 0
WHEN  ('?Panel4:3')TIMES 0
WHEN  ('?Panel7')TIMES 0
WHEN  ('?Panel8')TIMES 0
WHEN  ('?PrevHyperlink')TIMES 0
WHEN  ('?PrivateBox')TIMES 0
WHEN  ('?PrivateString')TIMES 0
WHEN  ('?ProcessString')TIMES 0
WHEN  ('?ProgressBox')TIMES 0
WHEN  ('?ProgressBox:2')TIMES 0
WHEN  ('?ProtectedBox')TIMES 0
WHEN  ('?ProtectedString')TIMES 0
WHEN  ('?RefreshButton')TIMES 0
WHEN  ('?SavingString')TIMES 0
WHEN  ('?SciControl:Region')TIMES 0
WHEN  ('?Tools')TIMES 0
WHEN  ('?ToolsAddClassWizard')TIMES 0
WHEN  ('?ToolsBrowseDatabase')TIMES 0
WHEN  ('?ToolsCalculator')TIMES 0
WHEN  ('?ToolsClearHistory')TIMES 0
WHEN  ('?ToolsFavorites')TIMES 0
WHEN  ('?ToolsFavoritesAddtoFavorites')TIMES 0
WHEN  ('?ToolsFindNotes')TIMES 0
WHEN  ('?ToolsOptions')TIMES 0
WHEN  ('?ToolsRefreshTree')TIMES 0
WHEN  ('?ToolsStatistics')TIMES 0
WHEN  ('?ToolsXMLExport')TIMES 0
WHEN  ('?Tree')TIMES 0
WHEN  ('?TreeContract')TIMES 0
WHEN  ('?TreeContractBranch')TIMES 0
WHEN  ('?TreeExpand')TIMES 0
WHEN  ('?TreeExpandBranch')TIMES 0
WHEN  ('?TreeExportToXML')TIMES 0
WHEN  ('?TreeExporttoXML')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?TreeRegion')TIMES 0
WHEN  ('?VerticalSplitter')TIMES 0
WHEN  ('?View')TIMES 0
WHEN  ('?ViewHelp')TIMES 0
WHEN  ('?ViewNoteButton')TIMES 0
WHEN  ('?ViewNotes')TIMES 0
WHEN  ('?ViewSource')TIMES 0
WHEN  ('?ViewSourceButton')TIMES 0
WHEN  ('?VirtualBox')TIMES 0
WHEN  ('?VirtualString')TIMES 0
WHEN  ('?bViewCallTree')TIMES 0
WHEN  ('?bViewClasses')TIMES 0
WHEN  ('?bViewEquates')TIMES 0
WHEN  ('?bViewInterfaces')TIMES 0
WHEN  ('?bViewStructures')TIMES 0
WHEN  ('?glo:bDetailLevel')TIMES 0
WHEN  ('?glo:bDetailLevel:Prompt')TIMES 0
WHEN  ('?glo:bShowModule')TIMES 0
WHEN  ('?glo:bShowPrivate')TIMES 0
WHEN  ('?glo:bShowProtected')TIMES 0
WHEN  ('?glo:bShowSparseTrees')TIMES 0
WHEN  ('?glo:szCategory:Prompt')TIMES 0
WHEN  ('?glo:szCategoryChoice')TIMES 0
WHEN  ('?loc:szAsciiFilename')TIMES 0
WHEN  ('?locator')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 108
WHEN  ('')TIMES 0
WHEN  ('?AddClassWizardButton')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CallTreeButton')TIMES 0
WHEN  ('?ClassRegion')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?ContractButton')TIMES 0
WHEN  ('?EnumeratedEquate:String')TIMES 0
WHEN  ('?Enumeration:Image')TIMES 0
WHEN  ('?EnumerationBox')TIMES 0
WHEN  ('?Equate:Image')TIMES 0
WHEN  ('?EquateBox')TIMES 0
WHEN  ('?ExpandButton')TIMES 0
WHEN  ('?File')TIMES 0
WHEN  ('?FileClarion20')TIMES 0
WHEN  ('?FileClarion40')TIMES 0
WHEN  ('?FileClarion50')TIMES 0
WHEN  ('?FileClarion50EE')TIMES 0
WHEN  ('?FileClarion55')TIMES 0
WHEN  ('?FileClarion55EE')TIMES 0
WHEN  ('?FileClarion60')TIMES 0
WHEN  ('?FileClarion60EE')TIMES 0
WHEN  ('?FileExit')TIMES 0
WHEN  ('?FileExportToXML')TIMES 0
WHEN  ('?FileExporttoXML')TIMES 0
WHEN  ('?FileRecent')TIMES 0
WHEN  ('?GroupdEquate:String')TIMES 0
WHEN  ('?HelpAboutClassViewer')TIMES 0
WHEN  ('?HelpAddtoClarionMenu')TIMES 0
WHEN  ('?HelpButton')TIMES 0
WHEN  ('?HelpContents')TIMES 0
WHEN  ('?HelpJusttheFAQs')TIMES 0
WHEN  ('?HelpMenu')TIMES 0
WHEN  ('?HelpOnHelp')TIMES 0
WHEN  ('?HelpSearch')TIMES 0
WHEN  ('?HistoryList')TIMES 0
WHEN  ('?HyperlinkButton')TIMES 0
WHEN  ('?Image13')TIMES 0
WHEN  ('?InterfaceRegion')TIMES 0
WHEN  ('?LoadingString')TIMES 0
WHEN  ('?LocatorImage')TIMES 0
WHEN  ('?MenuBar')TIMES 0
WHEN  ('?ModuleBox')TIMES 0
WHEN  ('?NextHyperlink')TIMES 0
WHEN  ('?ObjectDropList')TIMES 0
WHEN  ('?OptionsButton')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel4')TIMES 0
WHEN  ('?Panel4:3')TIMES 0
WHEN  ('?Panel7')TIMES 0
WHEN  ('?Panel8')TIMES 0
WHEN  ('?PrevHyperlink')TIMES 0
WHEN  ('?PrivateBox')TIMES 0
WHEN  ('?PrivateString')TIMES 0
WHEN  ('?ProcessString')TIMES 0
WHEN  ('?ProgressBox')TIMES 0
WHEN  ('?ProgressBox:2')TIMES 0
WHEN  ('?ProtectedBox')TIMES 0
WHEN  ('?ProtectedString')TIMES 0
WHEN  ('?RefreshButton')TIMES 0
WHEN  ('?SavingString')TIMES 0
WHEN  ('?SciControl:Region')TIMES 0
WHEN  ('?Tools')TIMES 0
WHEN  ('?ToolsAddClassWizard')TIMES 0
WHEN  ('?ToolsBrowseDatabase')TIMES 0
WHEN  ('?ToolsCalculator')TIMES 0
WHEN  ('?ToolsClearHistory')TIMES 0
WHEN  ('?ToolsFavorites')TIMES 0
WHEN  ('?ToolsFavoritesAddtoFavorites')TIMES 0
WHEN  ('?ToolsFindNotes')TIMES 0
WHEN  ('?ToolsOptions')TIMES 0
WHEN  ('?ToolsRefreshTree')TIMES 0
WHEN  ('?ToolsStatistics')TIMES 0
WHEN  ('?ToolsXMLExport')TIMES 0
WHEN  ('?Tree')TIMES 0
WHEN  ('?TreeContract')TIMES 0
WHEN  ('?TreeContractBranch')TIMES 0
WHEN  ('?TreeExpand')TIMES 0
WHEN  ('?TreeExpandBranch')TIMES 0
WHEN  ('?TreeExportToXML')TIMES 0
WHEN  ('?TreeExporttoXML')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?TreeRegion')TIMES 0
WHEN  ('?VerticalSplitter')TIMES 0
WHEN  ('?View')TIMES 0
WHEN  ('?ViewHelp')TIMES 0
WHEN  ('?ViewNoteButton')TIMES 0
WHEN  ('?ViewNotes')TIMES 0
WHEN  ('?ViewSource')TIMES 0
WHEN  ('?ViewSourceButton')TIMES 0
WHEN  ('?VirtualBox')TIMES 0
WHEN  ('?VirtualString')TIMES 0
WHEN  ('?bViewCallTree')TIMES 0
WHEN  ('?bViewClasses')TIMES 0
WHEN  ('?bViewEquates')TIMES 0
WHEN  ('?bViewInterfaces')TIMES 0
WHEN  ('?bViewStructures')TIMES 0
WHEN  ('?glo:bDetailLevel')TIMES 0
WHEN  ('?glo:bDetailLevel:Prompt')TIMES 0
WHEN  ('?glo:bShowModule')TIMES 0
WHEN  ('?glo:bShowPrivate')TIMES 0
WHEN  ('?glo:bShowProtected')TIMES 0
WHEN  ('?glo:bShowSparseTrees')TIMES 0
WHEN  ('?glo:szCategory:Prompt')TIMES 0
WHEN  ('?glo:szCategoryChoice')TIMES 0
WHEN  ('?loc:szAsciiFilename')TIMES 0
WHEN  ('?locator')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?glo:bDetailLevel') ('')

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?glo:bDetailLevel') ('')

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('Default')
WHEN  ('?RefreshButton') ('Default')
WHEN  ('?ToolsOptions') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?RefreshButton')TIMES 0
WHEN  ('?ToolsOptions')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?RefreshButton')TIMES 0
WHEN  ('?ToolsOptions')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 19
WHEN  ('') ('Off')
WHEN  ('?Box5') ('Off')
WHEN  ('?EnumerationBox') ('Off')
WHEN  ('?EquateBox') ('Off')
WHEN  ('?ModuleBox') ('Off')
WHEN  ('?Panel2') ('Off')
WHEN  ('?Panel3') ('Off')
WHEN  ('?Panel4') ('Off')
WHEN  ('?Panel4:2') ('Off')
WHEN  ('?Panel4:3') ('Off')
WHEN  ('?Panel5') ('Off')
WHEN  ('?Panel6') ('Off')
WHEN  ('?Panel7') ('Off')
WHEN  ('?Panel8') ('Off')
WHEN  ('?Panel8:2') ('Off')
WHEN  ('?PrivateBox') ('Off')
WHEN  ('?ProtectedBox') ('Off')
WHEN  ('?SplitterBar:2') ('Off')
WHEN  ('?VirtualBox') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 19
WHEN  ('') ('')
WHEN  ('?Box5') ('')
WHEN  ('?EnumerationBox') ('')
WHEN  ('?EquateBox') ('')
WHEN  ('?ModuleBox') ('')
WHEN  ('?Panel2') ('')
WHEN  ('?Panel3') ('')
WHEN  ('?Panel4') ('')
WHEN  ('?Panel4:2') ('')
WHEN  ('?Panel4:3') ('')
WHEN  ('?Panel5') ('')
WHEN  ('?Panel6') ('')
WHEN  ('?Panel7') ('')
WHEN  ('?Panel8') ('')
WHEN  ('?Panel8:2') ('')
WHEN  ('?PrivateBox') ('')
WHEN  ('?ProtectedBox') ('')
WHEN  ('?SplitterBar:2') ('')
WHEN  ('?VirtualBox') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 19
WHEN  ('') (0)
WHEN  ('?Box5') (0)
WHEN  ('?EnumerationBox') (0)
WHEN  ('?EquateBox') (0)
WHEN  ('?ModuleBox') (0)
WHEN  ('?Panel2') (0)
WHEN  ('?Panel3') (0)
WHEN  ('?Panel4') (0)
WHEN  ('?Panel4:2') (0)
WHEN  ('?Panel4:3') (0)
WHEN  ('?Panel5') (0)
WHEN  ('?Panel6') (0)
WHEN  ('?Panel7') (0)
WHEN  ('?Panel8') (0)
WHEN  ('?Panel8:2') (0)
WHEN  ('?PrivateBox') (0)
WHEN  ('?ProtectedBox') (0)
WHEN  ('?SplitterBar:2') (0)
WHEN  ('?VirtualBox') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 19
WHEN  ('') (-1)
WHEN  ('?Box5') (-1)
WHEN  ('?EnumerationBox') (-1)
WHEN  ('?EquateBox') (-1)
WHEN  ('?ModuleBox') (-1)
WHEN  ('?Panel2') (-1)
WHEN  ('?Panel3') (-1)
WHEN  ('?Panel4') (-1)
WHEN  ('?Panel4:2') (-1)
WHEN  ('?Panel4:3') (-1)
WHEN  ('?Panel5') (-1)
WHEN  ('?Panel6') (-1)
WHEN  ('?Panel7') (-1)
WHEN  ('?Panel8') (-1)
WHEN  ('?Panel8:2') (-1)
WHEN  ('?PrivateBox') (-1)
WHEN  ('?ProtectedBox') (-1)
WHEN  ('?SplitterBar:2') (-1)
WHEN  ('?VirtualBox') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 19
WHEN  ('') (0)
WHEN  ('?Box5') (0)
WHEN  ('?EnumerationBox') (0)
WHEN  ('?EquateBox') (0)
WHEN  ('?ModuleBox') (0)
WHEN  ('?Panel2') (0)
WHEN  ('?Panel3') (0)
WHEN  ('?Panel4') (0)
WHEN  ('?Panel4:2') (0)
WHEN  ('?Panel4:3') (0)
WHEN  ('?Panel5') (0)
WHEN  ('?Panel6') (0)
WHEN  ('?Panel7') (0)
WHEN  ('?Panel8') (0)
WHEN  ('?Panel8:2') (0)
WHEN  ('?PrivateBox') (0)
WHEN  ('?ProtectedBox') (0)
WHEN  ('?SplitterBar:2') (0)
WHEN  ('?VirtualBox') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 19
WHEN  ('') (-1)
WHEN  ('?Box5') (-1)
WHEN  ('?EnumerationBox') (-1)
WHEN  ('?EquateBox') (-1)
WHEN  ('?ModuleBox') (-1)
WHEN  ('?Panel2') (-1)
WHEN  ('?Panel3') (-1)
WHEN  ('?Panel4') (-1)
WHEN  ('?Panel4:2') (-1)
WHEN  ('?Panel4:3') (-1)
WHEN  ('?Panel5') (-1)
WHEN  ('?Panel6') (-1)
WHEN  ('?Panel7') (-1)
WHEN  ('?Panel8') (-1)
WHEN  ('?Panel8:2') (-1)
WHEN  ('?PrivateBox') (-1)
WHEN  ('?ProtectedBox') (-1)
WHEN  ('?SplitterBar:2') (-1)
WHEN  ('?VirtualBox') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 19
WHEN  ('') (0)
WHEN  ('?Box5') (0)
WHEN  ('?EnumerationBox') (0)
WHEN  ('?EquateBox') (0)
WHEN  ('?ModuleBox') (0)
WHEN  ('?Panel2') (0)
WHEN  ('?Panel3') (0)
WHEN  ('?Panel4') (0)
WHEN  ('?Panel4:2') (0)
WHEN  ('?Panel4:3') (0)
WHEN  ('?Panel5') (0)
WHEN  ('?Panel6') (0)
WHEN  ('?Panel7') (0)
WHEN  ('?Panel8') (0)
WHEN  ('?Panel8:2') (0)
WHEN  ('?PrivateBox') (0)
WHEN  ('?ProtectedBox') (0)
WHEN  ('?SplitterBar:2') (0)
WHEN  ('?VirtualBox') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('AIBtn0')
WHEN  ('?Enumeration:Image') ('AIBtn116')
WHEN  ('?Equate:Image') ('AIBtn113')
WHEN  ('?Image13') ('AIBtn61')
WHEN  ('?LocatorImage') ('AIBtn98')
WHEN  ('?ProgressBox') ('AIBtn135')
WHEN  ('?ProgressBox:2') ('AIBtn136')
WHEN  ('?SizeGrip') ('AIBtn137')

%AIEnableMimicControl DEPEND %Control LONG TIMES 8
WHEN  ('') (1)
WHEN  ('?Enumeration:Image') (1)
WHEN  ('?Equate:Image') (1)
WHEN  ('?Image13') (1)
WHEN  ('?LocatorImage') (1)
WHEN  ('?ProgressBox') (1)
WHEN  ('?ProgressBox:2') (1)
WHEN  ('?SizeGrip') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('?MenuBar')
WHEN  ('?Enumeration:Image') ('?MenuBar')
WHEN  ('?Equate:Image') ('?MenuBar')
WHEN  ('?Image13') ('?MenuBar')
WHEN  ('?LocatorImage') ('?MenuBar')
WHEN  ('?ProgressBox') ('?MenuBar')
WHEN  ('?ProgressBox:2') ('?MenuBar')
WHEN  ('?SizeGrip') ('?MenuBar')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('') (0)
WHEN  ('?Enumeration:Image') (0)
WHEN  ('?Equate:Image') (0)
WHEN  ('?Image13') (0)
WHEN  ('?LocatorImage') (0)
WHEN  ('?ProgressBox') (0)
WHEN  ('?ProgressBox:2') (0)
WHEN  ('?SizeGrip') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('') (0)
WHEN  ('?Enumeration:Image') (0)
WHEN  ('?Equate:Image') (0)
WHEN  ('?Image13') (0)
WHEN  ('?LocatorImage') (0)
WHEN  ('?ProgressBox') (0)
WHEN  ('?ProgressBox:2') (0)
WHEN  ('?SizeGrip') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('') (0)
WHEN  ('?Enumeration:Image') (0)
WHEN  ('?Equate:Image') (0)
WHEN  ('?Image13') (0)
WHEN  ('?LocatorImage') (0)
WHEN  ('?ProgressBox') (0)
WHEN  ('?ProgressBox:2') (0)
WHEN  ('?SizeGrip') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('') (0)
WHEN  ('?Enumeration:Image') (0)
WHEN  ('?Equate:Image') (0)
WHEN  ('?Image13') (0)
WHEN  ('?LocatorImage') (0)
WHEN  ('?ProgressBox') (0)
WHEN  ('?ProgressBox:2') (0)
WHEN  ('?SizeGrip') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CloseButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 1
[END]
[END]
WHEN '?TreeList'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(TreeQ,CHOICE(?TreeList))
IF ERRORCODE()
   CLEAR(TreeQ)
END
DO ProcessNewSelection
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseRight
     sav:TreeQ:szText = TreeQ.szText  !2004.02.26 RR
     GET(TreeQ,CHOICE(?TreeList))
     DO PopupMenu
  OF MouseLeft2
     GET(TreeQ,CHOICE(?TreeList))
     IF ?TreeList{PROPLIST:MouseUpZone} = LISTZONE:ICON AND |
        TreeQ.wNoteIcon = ICON:NOTE AND ?TreeList{PROPLIST:MouseUpField} = 1
        POST(EVENT:ACCEPTED,?ViewNoteButton)
     ELSIF INRANGE(TreeQ.lStyle,STYLE:NORMAL_HYPERLINK,STYLE:PROTECTED_NEW_HYPERLINK)
        POST(EVENT:DroppingDown,?HyperlinkButton)
     ELSE
        POST(EVENT:ACCEPTED,?ViewSourceButton)
     END
     CYCLE
END
[END]
WHEN 'PreAlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
OF MouseRight
   MouseDownRow = ?TreeList{PROPLIST:MouseDownRow}
   GET(TreeQ,MouseDownRow)
   ?TreeList{PROP:Selected} = MouseDownRow
   DISPLAY(?TreeList)
END
[END]
WHEN 'Expanded'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
X = ?TreeList{PROPLIST:MouseDownRow}
GET(TreeQ,X)
TreeQ.lLevel = ABS(TreeQ.lLevel)
PUT(TreeQ)
?TreeList{PROP:Selected} = X
DO SaveTreeState
[END]
WHEN 'Contracted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
X = ?TreeList{PROPLIST:MouseDownRow}
GET(TreeQ,X)
TreeQ.lLevel = ABS(TreeQ.lLevel) * -1
PUT(TreeQ)
?TreeList{PROP:Selected} = X
DO SaveTreeState
[END]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
!ListWithFocus = ?TreeList
[END]
[END]
WHEN '?ObjectDropList'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
      Locator.Shadow = ''
      ?Locator{PROP:Text} = Locator.Shadow
      HIDE(?LocatorImage)

      CASE glo:bCurrentView
        OF VIEW:CLASSES OROF VIEW:INTERFACES
           IF RECORDS(ClassNameQ) > 0
              GET(ClassNameQ,CHOICE(?ObjectDropList))

              IF RECORDS(ClassHierarchyQueue)
                 FREE(ClassHierarchyQueue)
                 RefreshNeeded = TRUE
              END

              !Find Parent Class Category
              ClassQ.szClassSort = UPPER(ClassNameQ.szClassName)
              GET(ClassQ,+ClassQ.szClassSort)

              IF glo:bShowSparseTrees
                 ClassHierarchyQueue.szClassName = ClassQ.szClassName
                 ADD(ClassHierarchyQueue,1)
              END

              LOOP UNTIL ClassQ.szParentClassName = ''
                 ClassQ.szClassSort = UPPER(ClassQ.szParentClassName)
                 GET(ClassQ,+ClassQ.szClassSort)
                 IF ERRORCODE()
                    GET(ClassNameQ,CHOICE(?ObjectDropList))
                    ClassQ.szClassSort = UPPER(ClassNameQ.szClassName)
                    GET(ClassQ,+ClassQ.szClassSort)
                    IF ClassQ.lModuleId
                       ModuleQ.lModuleId = ClassQ.lModuleId
                    ELSE
                       ModuleQ.lModuleId = ClassQ.lIncludeId
                    END
                    GET(ModuleQ,+ModuleQ.lModuleId)
                    MESSAGE('Parent Class [' & ClassQ.szParentClassName & '] for class '   & |
                            ClassNameQ.szClassName & ' is undefined.'                              & |
                            '|Declared in ' & CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName)    & |
                            '|Please check your source files.'                                     & |
                            '|A Class Stub has been added to allow the Tree to be constructed.', |
                            'Unexpected Error',ICON:HAND)
                    !=============================================================
                    !Add a dummy class record for the missing parent
                    !=============================================================
                    SORT(ClassQ,+ClassQ.lClassID)
                    GET(ClassQ,RECORDS(ClassQ))
                    X = ClassQ.lClassID + 1
                    SORT(ClassQ,+ClassQ.szClassSort)
                    GET(ClassNameQ,CHOICE(?ObjectDropList))
                    ClassQ.szClassSort = UPPER(ClassNameQ.szClassName)
                    GET(ClassQ,+ClassQ.szClassSort)

                    !Add Parent to same Category as derived class
                    CategoryQ.szClassName = ClassQ.szClassName
                    GET(CategoryQ,+CategoryQ.szClassName)
                    CategoryQ.szClassName = ClassQ.szParentClassName
                    ADD(CategoryQ,+CategoryQ.szClassName)

                    ClassQ.szClassName = ClassQ.szParentClassName
                    ClassQ.szParentClassName = ''
                    ClassQ.lIncludeId = 0
                    ClassQ.lModuleId = 0
                    !ClassQ.bIsABC .. same as derived class
                    ClassQ.lLineNum = 0
                    ClassQ.lClassID = X
                    ClassQ.szParentClassSort = ''
                    ClassQ.szClassSort = UPPER(ClassQ.szClassName)
                    ClassQ.bPrivate = FALSE
                    ClassQ.bInterface = FALSE
                    ClassQ.bModified = FALSE
                    ADD(ClassQ,+ClassQ.szClassSort)
                    !=============================================================
                    BREAK
                 ELSE
                    IF glo:bShowSparseTrees
                       ClassHierarchyQueue.szClassName = ClassQ.szClassName
                       ADD(ClassHierarchyQueue,1)
                    END
                 END
              END

              IF RECORDS(ClassHierarchyQueue)
                 TreeStateQ.szClassName = ClassHierarchyQueue.szClassName
                 GET(TreeStateQ,+TreeStateQ.szClassName)
                 IF ~ERRORCODE()
                    DELETE(TreeStateQ)
                 END
                 RefreshNeeded = TRUE
              END

              IF glo:szParentClassName <> ClassQ.szClassSort
                 !save the tree state here for glo:parentclassname
                 DO SaveTreeState
                 glo:szParentClassName = ClassQ.szClassSort
                 RefreshNeeded = TRUE
              END

              CategoryQ.szClassName = ClassQ.szClassName
              GET(CategoryQ,CategoryQ.szClassName)
              !Check Detail Level Filter
              IF glo:bDetailLevel < CategoryQ.bDetailLevel
                 glo:bDetailLevel = CategoryQ.bDetailLevel
                 RefreshNeeded = TRUE
              END

              !Get Selected Class Record
              ClassQ.szClassSort = UPPER(ClassNameQ.szClassName)
              GET(ClassQ,+ClassQ.szClassSort)
              szLastClassName = ClassQ.szClassName

              DO UpdateMRU_Queue

              !Refresh the tree if needed
              IF RefreshNeeded
                 I = POINTER(ClassNameQ)
                 J = POINTER(NoteQ)
                 srcRefreshTree()
                 GET(ClassNameQ,I)
                 ?ObjectDropList{PROP:Selected} = I
                 GET(NoteQ,J)
                 RefreshNeeded = FALSE
              END

              J = RECORDS(TreeQ)
              LOOP I = 1 TO J
                 GET(TreeQ,I)
                 IF ERRORCODE()
                    BREAK
                 ELSE
                    IF TreeQ.szClassName = szLastClassName   !ClassQ.szClassName
                       IF ~bHyperLinking
                          BREAK
                       ELSIF TreeQ.szText = HistoryQueue.szText
                          bHyperLinking = FALSE
                          BREAK
                       END
                    END
                 END
              END
              IF I > J
                 I = 1
              END

              DO ExpandParentNodes
              POST(EVENT:NewSelection,?TreeList)
           END

        OF VIEW:STRUCTURES
           IF RECORDS(StructNameQ) > 0
              GET(StructNameQ,CHOICE(?ObjectDropList))
              szLastStructureName = StructNameQ.szStructureName

              !Find Parent Structure
              StructureQ.szStructureSort = StructNameQ.szStructureSort
              GET(StructureQ,+StructureQ.szStructureSort)
              glo:szParentClassName = StructureQ.szStructureName

              DO UpdateMRU_Queue

              srcRefreshTree()

              J = RECORDS(TreeQ)
              LOOP I = 1 TO J
                 GET(TreeQ,I)
                 IF ERRORCODE()
                    BREAK
                 ELSE
                    IF TreeQ.szClassName = StructNameQ.szStructureName
                       IF ~bHyperLinking
                          BREAK
                       ELSIF TreeQ.szText = HistoryQueue.szText
                          bHyperLinking = FALSE
                          BREAK
                       END
                    END
                 END
              END
              IF I > J
                 I = 1
              END
              DO ExpandParentNodes
              ?ObjectDropList{PROP:Selected} = POINTER(StructNameQ)
           END

        OF VIEW:EQUATES
           IF RECORDS(EnumNameQ) > 0
              GET(EnumNameQ,CHOICE(?ObjectDropList))
              szLastEnumName = EnumNameQ.szEnumName

              glo:szParentClassName = EnumNameQ.szEnumName
              srcRefreshTree()

              J = RECORDS(TreeQ)
              LOOP I = 1 TO J
                 GET(TreeQ,I)
                 IF ERRORCODE()
                    BREAK
                 ELSE
                    IF TreeQ.szClassName = EnumNameQ.szEnumName
                       BREAK
                    END
                 END
              END
              IF I > J
                 I = 1
              END
              DO ExpandParentNodes
              ?ObjectDropList{PROP:Selected} = POINTER(EnumNameQ)
           END

        OF VIEW:CALLS
           IF RECORDS(CallNameQ) > 0
              GET(CallNameQ,CHOICE(?ObjectDropList))
              CASE ABS(CallNameQ.lLevel)
              OF 1
                 POST(EVENT:DroppingDown,?ObjectDropList)
              OF 2
                 szLastCallName = CallNameQ.szCallName
                 srcRefreshTree()
                 J = RECORDS(TreeQ)
                 LOOP I = 1 TO J
                    GET(TreeQ,I)
                    IF ERRORCODE()
                       BREAK
                    ELSE
                       IF TreeQ.szText = szLastCallName
                          BREAK
                       END
                    END
                 END
                 IF I > J
                    I = 1
                 END
                 DO ExpandParentNodes
                 ?ObjectDropList{PROP:Selected} = POINTER(CallNameQ)
              END
           END
      END

      IF glo:lLoadingThread
         POST(EVENT:CloseWindow,,glo:lLoadingThread)
         SetWindowPos(Window{PROP:Handle},HWND_TOP,0,0,0,0,BOR(BOR(SWP_NOMOVE,SWP_NOSIZE),SWP_SHOWWINDOW))
         SetForegroundWindow(Window{PROP:Handle})
         Window{PROP:Active} = TRUE
      END

      !Make sure screen is visible
      IF 0{PROP:Hide} = TRUE
         0{PROP:Hide} = FALSE
         DO CreateFavoritesMenu
      END
      glo:sCurrentCursor = CURSOR:ARROW
      SETCURSOR(glo:sCurrentCursor)
[END]
WHEN 'Expanding'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 IF glo:bCurrentView = VIEW:CALLS
    I = ?ObjectDropList{PROPLIST:MouseDownRow}
    GET(CallNameQ,I)
    CallNameQ.lLevel = 1
    PUT(CallNameQ)
 END
[END]
WHEN 'Contracting'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 IF glo:bCurrentView = VIEW:CALLS
    I = ?ObjectDropList{PROPLIST:MouseDownRow}
    GET(CallNameQ,I)
    CallNameQ.lLevel = -1
    PUT(CallNameQ)
 END
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF MouseRight
      CASE glo:bCurrentView
      OF VIEW:CLASSES OROF VIEW:INTERFACES
         GET(ClassNameQ,CHOICE(?ObjectDropList))
         DO ObjectPopupMenu
      END
   OF EnterKey
      IF Locator.Shadow <> ''
         SETKEYCODE(MouseLeft)
         POST(EVENT:Accepted,?ObjectDropList)
      END

   ! New Code ===================================================
 ELSE
      CASE glo:bCurrentView
        OF VIEW:CLASSES OROF VIEW:INTERFACES
           IF Locator.TakeKey()
              LOOP X = 1 TO RECORDS(ClassNameQ)
                GET(ClassNameQ,X)
                IF ClassNameQ.szSortName[1 : LEN(CLIP(Locator.Shadow))] >= UPPER(Locator.Shadow)
                   ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
                   DISPLAY(?ObjectDropList)
                   BREAK
                END
              END
              ?Locator{PROP:Text} = Locator.Shadow
           ELSE
              Locator.Shadow = ''
              ?Locator{PROP:Text} = Locator.Shadow
              !DO UpdateMRU_Queue
           END
           IF Locator.Shadow = ''
              ?LocatorImage{PROP:Hide} = TRUE
           ELSE
              ?LocatorImage{PROP:Hide} = FALSE
           END

        OF VIEW:CALLS
           IF Locator.TakeKey()
              LOOP X = 1 TO RECORDS(CallNameQ)
                GET(CallNameQ,X)
                IF CallNameQ.szSortName[1 : LEN(CLIP(Locator.Shadow))] >= UPPER(Locator.Shadow)
                   ?ObjectDropList{PROP:Selected} = POINTER(CallNameQ)
                   DISPLAY(?ObjectDropList)
                   BREAK
                END
              END
              ?Locator{PROP:Text} = Locator.Shadow
           ELSE
              Locator.Shadow = ''
              ?Locator{PROP:Text} = Locator.Shadow
           END
           IF Locator.Shadow = ''
              ?LocatorImage{PROP:Hide} = TRUE
           ELSE
              ?LocatorImage{PROP:Hide} = FALSE
           END
           GET(CallNameQ,CHOICE(?ObjectDropList))
           CASE ABS(CallNameQ.lLevel)
           OF 1
              CYCLE
           END

        OF VIEW:STRUCTURES
           IF Locator.TakeKey()
              LOOP X = 1 TO RECORDS(StructNameQ)
                GET(StructNameQ,X)
                IF StructNameQ.szStructureSort[1 : LEN(CLIP(Locator.Shadow))] >= UPPER(Locator.Shadow)
                   ?ObjectDropList{PROP:Selected} = POINTER(StructNameQ)
                   DISPLAY(?ObjectDropList)
                   BREAK
                END
              END
              ?Locator{PROP:Text} = Locator.Shadow
           ELSE
              Locator.Shadow = ''
              ?Locator{PROP:Text} = Locator.Shadow
              !DO UpdateMRU_Queue
           END
           IF Locator.Shadow = ''
              ?LocatorImage{PROP:Hide} = TRUE
           ELSE
              ?LocatorImage{PROP:Hide} = FALSE
           END

        OF VIEW:EQUATES
           IF Locator.TakeKey()
              LOOP X = 1 TO RECORDS(EnumNameQ)
                GET(EnumNameQ,X)
                IF EnumNameQ.szEnumSort[1 : LEN(CLIP(Locator.Shadow))] >= UPPER(Locator.Shadow)
                   ?ObjectDropList{PROP:Selected} = POINTER(EnumNameQ)
                   DISPLAY(?ObjectDropList)
                   BREAK
                END
              END
              ?Locator{PROP:Text} = Locator.Shadow
           ELSE
              Locator.Shadow = ''
              ?Locator{PROP:Text} = Locator.Shadow
           END
           IF Locator.Shadow = ''
              ?LocatorImage{PROP:Hide} = TRUE
           ELSE
              ?LocatorImage{PROP:Hide} = FALSE
           END
      END
      CYCLE
   ! End New Code ===================================================
 END
[END]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
!ListWithFocus = ?ObjectDropList
[END]
[END]
WHEN '?glo:bShowProtected'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF glo:bShowProtected
   UNHIDE(?ProtectedBox,?ProtectedString)
ELSE
   HIDE(?ProtectedBox,?ProtectedString)
END
GET(TreeQ,CHOICE(?TreeList))
IF ERRORCODE()
   loc:TreeQ:szText = ''
ELSE
   loc:TreeQ:szText = TreeQ.szText
END

FREE(TreeStateQ)
[GROUP]
PRIORITY 5000
INSTANCE 8
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE glo:bCurrentView
  OF VIEW:CLASSES
     DO FillClassNameQ
     DO FillCategoryQueue
  OF VIEW:CALLS
     IF RECORDS(CallNameQ)
        szLastCallName = CallNameQ.szCallName
     ELSE
        szLastCallName = 'WindowManager.Run'
     END
     DO FillCallNameQ
     DO FillCategoryQueue
  OF VIEW:INTERFACES
     DO FillClassNameQ
  OF VIEW:STRUCTURES
     DO FillStructNameQ
  OF VIEW:EQUATES
     DO FillEnumNameQ
END
J = RECORDS(TreeQ)
IF J
   LOOP I = 1 TO J
     GET(TreeQ,I)
     IF TreeQ.szText = loc:TreeQ:szText
        BREAK
     END
   END
   IF I > J
      I = 1
   END
   DO ExpandParentNodes
END
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?glo:bShowPrivate'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF glo:bShowPrivate
   UNHIDE(?PrivateBox,?PrivateString)
   ENABLE(?glo:bShowModule)
ELSE
   HIDE(?PrivateBox,?PrivateString)
   glo:bShowModule = FALSE
   HIDE(?ModuleBox,?ModuleString)
   DISABLE(?glo:bShowModule)
END
GET(TreeQ,CHOICE(?TreeList))
IF ERRORCODE()
   CLEAR(TreeQ)
END
loc:TreeQ:szText = TreeQ.szText

FREE(TreeStateQ)
[GROUP]
PRIORITY 5000
INSTANCE 9
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE glo:bCurrentView
  OF VIEW:CLASSES
     DO FillClassNameQ
     DO FillCategoryQueue
  OF VIEW:CALLS
     IF RECORDS(CallNameQ)
        szLastCallName = CallNameQ.szCallName
     ELSE
        szLastCallName = 'WindowManager.Run'
     END
     DO FillCallNameQ
     DO FillCategoryQueue
  OF VIEW:INTERFACES
     DO FillClassNameQ
  OF VIEW:STRUCTURES
     DO FillStructNameQ
  OF VIEW:EQUATES
     DO FillEnumNameQ
END
J = RECORDS(TreeQ)
IF J
   LOOP I = 1 TO J
     GET(TreeQ,I)
     IF TreeQ.szText = loc:TreeQ:szText
        BREAK
     END
   END
   IF I > J
      I = 1
   END
   DO ExpandParentNodes
END
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?OptionsButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
LABEL
PROPERTY:END
      DO DestroyFavoritesMenu
      loc:Layout = glo:Layout
      CASE winOptions()
        OF 0  !User Cancelled
        OF 1  !Color Change
           DO SetTreeStyles
           DO SaveViewerStyles
       COMPILE('***',_Scintilla_)
           SciControl.SetColors(glo:ViewerStyles)
           IF glo:Typeface
              SciControl.SetTypeface(glo:Typeface)
           END
       !***
           glo:szParentClassName = ''
      END

      DO CreateFavoritesMenu

      IF loc:Layout <> glo:Layout
         INIMgr.Update('Splitter','Layout',glo:Layout)
         DO SetScreenLayout
         POST(EVENT:Sized)
      END

      SELECT(?ObjectDropList)
      SETKEYCODE(0)
      POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?RefreshButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
      IF winGetScanOptions(loc:ForceSmartScan) = Level:Benign
         loc:sCurrentCursor = glo:sCurrentCursor
         glo:sCurrentCursor = CURSOR:WAIT
         SETCURSOR(glo:sCurrentCursor)
         !Save Current Info
         CASE glo:bCurrentView
           OF VIEW:CLASSES
              szObjectName = ClassNameQ.szClassName
           OF VIEW:STRUCTURES
              szObjectName = StructNameQ.szStructureName
           OF VIEW:EQUATES
              glo:szParentClassName = EnumNameQ.szEnumName
           OF VIEW:CALLS
              szLastCallName = CallNameQ.szCallName
           OF VIEW:INTERFACES
              szObjectName = ClassNameQ.szClassName
         END

         CASE glo:bClarionVersion
           OF CWVERSION_C2
              szClassViewDatafile = 'CVIEW20S.DAT'
           OF CWVERSION_C4
              szClassViewDatafile = 'CVIEW40S.DAT'
           OF CWVERSION_C5
              szClassViewDatafile = 'CVIEW50S.DAT'
           OF CWVERSION_C5EE
              szClassViewDatafile = 'CVIEW50E.DAT'
           OF CWVERSION_C55
              szClassViewDatafile = 'CVIEW55S.DAT'
           OF CWVERSION_C55EE
              szClassViewDatafile = 'CVIEW55E.DAT'
           OF CWVERSION_C60
              szClassViewDatafile = 'CVIEW60S.DAT'
           OF CWVERSION_C60EE
              szClassViewDatafile = 'CVIEW60E.DAT'
           OF CWVERSION_C70
              szClassViewDatafile = 'CVIEW70.DAT'
           OF CWVERSION_C80
              szClassViewDatafile = 'CVIEW80.DAT'
           OF CWVERSION_C90
              szClassViewDatafile = 'CVIEW90.DAT'
           OF CWVERSION_C100
              szClassViewDatafile = 'CVIEW100.DAT'
         END
         szClassViewDatafile = szValue & '\' & szClassViewDatafile
         Access:Memory(szClassViewDatafile,ACTION:SAVE)
         DO FillOldClassQ
         Access:Memory(szClassViewDatafile,ACTION:LOAD)

         HIDE(?TreeList)
         HIDE(?AsciiBox)
       COMPILE('***',_Scintilla_)
         SciControl.SetHide(TRUE)
       !***
         HIDE(?VCRTop,?VCRBottom)
         HIDE(?loc:szAsciiFilename)
         HIDE(?VirtualBox,?EnumeratedEquate:String)
         !HIDE(?glo:bABCOnly,?glo:bDetailLevel)
         HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)
         HIDE(?ObjectDropList)
         HIDE(?SplitterBar)
         HIDE(?SplitterBar:2)
         HIDE(?VerticalSplitter)
         HIDE(?HyperlinkButton,?HistoryList)

         FREE(TreeStateQ)
         cc = srcRefreshQueues(?ProcessString,?ScanString,?ProgressBox,?ProgressBox:2,?RefreshGroup)

         UNHIDE(?ObjectDropList)
         UNHIDE(?SplitterBar)
         UNHIDE(?SplitterBar:2)
         UNHIDE(?VerticalSplitter)
         UNHIDE(?HyperlinkButton,?HistoryList)
         !!!UNHIDE(?glo:bABCOnly)
         UNHIDE(?HyperlinkButton,?HistoryList)
         UNHIDE(?TreeList)
       OMIT('***',_scintilla_)
         UNHIDE(?AsciiBox)
       !***
       COMPILE('***',_Scintilla_)
         SciControl.SetHide(FALSE)
       !***
         UNHIDE(?loc:szAsciiFilename)
         IF ~cc    !Successful Scan
            CASE glo:bClarionVersion
              OF CWVERSION_C2
                 szClassViewDatafile = 'CVIEW20S.DAT'
              OF CWVERSION_C4
                 szClassViewDatafile = 'CVIEW40S.DAT'
              OF CWVERSION_C5
                 szClassViewDatafile = 'CVIEW50S.DAT'
              OF CWVERSION_C5EE
                 szClassViewDatafile = 'CVIEW50E.DAT'
              OF CWVERSION_C55
                 szClassViewDatafile = 'CVIEW55S.DAT'
              OF CWVERSION_C55EE
                 szClassViewDatafile = 'CVIEW55E.DAT'
              OF CWVERSION_C60
                 szClassViewDatafile = 'CVIEW60S.DAT'
              OF CWVERSION_C60EE
                 szClassViewDatafile = 'CVIEW60E.DAT'
              OF CWVERSION_C70
                 szClassViewDatafile = 'CVIEW70.DAT'
              OF CWVERSION_C80
                 szClassViewDatafile = 'CVIEW80.DAT'
              OF CWVERSION_C90
                 szClassViewDatafile = 'CVIEW90.DAT'
              OF CWVERSION_C100
                 szClassViewDatafile = 'CVIEW100.DAT'
            END
            szClassViewDatafile = szValue & '\' & szClassViewDatafile
            ?SavingString{PROP:XPos} = (?CloseButton{PROP:XPos} - 90)
            ?SavingString{PROP:YPos} = (?CloseButton{PROP:YPos} + 0)
            UNHIDE(?SavingString)
            DISPLAY()
            Access:Memory(szClassViewDatafile,ACTION:SAVE)
            HIDE(?SavingString)
            UNHIDE(?VCRTop,?VCRBottom)
            glo:sCurrentCursor = loc:sCurrentCursor
            SETCURSOR(glo:sCurrentCursor)

            lLatchControl = 0

            CASE glo:bCurrentView
              OF VIEW:CLASSES
                 POST(EVENT:Accepted,?ClassRegion)
              OF VIEW:STRUCTURES
                 POST(EVENT:Accepted,?StructureRegion)
              OF VIEW:EQUATES
                 POST(EVENT:Accepted,?EquateRegion)
              OF VIEW:CALLS
                 IF RECORDS(CallNameQ)
                    szLastCallName = CallNameQ.szCallName
                 ELSE
                    szLastCallName = 'WindowManager.Run'
                 END
                 DO FillCallNameQ
                 POST(EVENT:Accepted,?TreeRegion)
              OF VIEW:INTERFACES
                 POST(EVENT:Accepted,?InterfaceRegion)
            END
         ELSE
            DO RefreshControls
         END
      END
      SELECT(?ObjectDropList)
      loc:ForceSmartScan = FALSE
[END]
[END]
WHEN '?HelpButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(TreeQ,CHOICE(?TreeList))
IF UPPER(SUB(TreeQ.szHelpFile,LEN(TreeQ.szHelpFile)-2,3)) = 'CHM'
   IF oHH &= NULL
      oHH &= NEW tagHTMLHelp
      oHH.Init(TreeQ.szHelpFile)
   ELSE
      oHH.SetHelpFile( TreeQ.szHelpFile )
   END
   I = INSTRING(':',TreeQ.szContextString)
   IF I > 0
      oHH.KeyWordLookup(SUB(TreeQ.szContextString,1,I-1))
   ELSE
      oHH.KeyWordLookup(TreeQ.szContextString)
   END
   !oHH.ShowTopic(TreeQ.szContextString)
   oHH.SetHelpFile( 'ABCVIEW.CHM' )
ELSE
   HELP(TreeQ.szHelpFile,TreeQ.szContextString)
   HELP('abcview.hlp')
END
SELECT(?TreeList)
[END]
[END]
WHEN '?ViewSourceButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(TreeQ,CHOICE(?TreeList))
DO SyncQueues
DO ViewSource
SELECT(?TreeList)
[END]
[END]
WHEN '?ClassRegion'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF lLatchControl <> ?ClassRegion          !if this control is not the latched control

   glo:szParentClassName = ''

   DO SetupClassView

   szLastClassName = ClassNameQ.szClassName

   J = RECORDS(TreeQ)
   LOOP I = 1 TO J
      GET(TreeQ,I)
      IF ERRORCODE()
         BREAK
      ELSE
         IF TreeQ.szClassName = szLastClassName
            BREAK
         END
      END
   END
   IF I > J
      I = 1
   END
   GET(TreeQ,I)
   IF glo:bAutoExpand OR I = 1
      TreeQ.lLevel = ABS(TreeQ.lLevel)
      PUT(TreeQ)
   END

END

?TreeList{PROP:Selected} = POINTER(TreeQ)

SELECT(?ObjectDropList)
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?StructureRegion'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF lLatchControl <> ?StructureRegion      !if this control is not the latched control

   DO SetupStructureView

   J = RECORDS(TreeQ)
   LOOP I = 1 TO J
      GET(TreeQ,I)
      IF ERRORCODE()
         BREAK
      ELSE
         IF TreeQ.szClassName = szLastStructureName
            BREAK
         END
      END
   END
   IF I > J
      I = 1
   END
   GET(TreeQ,I)
   IF glo:bAutoExpand OR I = 1
      TreeQ.lLevel = ABS(TreeQ.lLevel)
      PUT(TreeQ)
   END
END
?TreeList{PROP:Selected} = POINTER(TreeQ)
SELECT(?ObjectDropList)
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?TreeRegion'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
LABEL
PROPERTY:END
      IF lLatchControl <> ?TreeRegion           !if this control is not the latched control

         lLatchControl = ?TreeRegion            !make this the latched control
         DO DrawLatchBox
         glo:bCurrentView = VIEW:CALLS          !view call tree

         DO RefreshControls

         IF ~szLastCallName
            szLastCallName = 'WindowManager.Run'
         END
         DO FillCallNameQ

         CallNameQ.szCallName = szLastCallName
         CallNameQ.szSortName = UPPER(szLastCallName)
         GET(CallNameQ,+CallNameQ.szSortName)

         srcRefreshTree()

         ?ObjectDropList{PROP:From} = CallNameQ
         CASE glo:bABCOnly
         OF 0
            ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~All Classes~C@s63@'
         OF 1
            ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~ABC Classes~C@s63@'
         OF 2
            ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~Non-ABC Classes~C@s63@'
         END

         DO FillCategoryQueue

         J = RECORDS(TreeQ)
         LOOP I = 1 TO J
            GET(TreeQ,I)
            IF ERRORCODE()
               BREAK
            ELSE
               IF TreeQ.szText = szLastCallName
                  BREAK
               END
            END
         END
         IF I > J
            I = 1
         END
         GET(TreeQ,I)
         IF glo:bAutoExpand OR I = 1
            TreeQ.lLevel = ABS(TreeQ.lLevel)
            PUT(TreeQ)
         END
      END
      ?TreeList{PROP:Selected} = POINTER(TreeQ)
      ?ObjectDropList{PROP:Selected} = POINTER(CallNameQ)
      SETKEYCODE(0)
      POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?InterfaceRegion'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF lLatchControl <> ?InterfaceRegion      !if this control is not the latched control

   glo:szParentClassName = ''
   DO SetupInterfaceView

   szLastClassName = ClassNameQ.szClassName

   J = RECORDS(TreeQ)
   LOOP I = 1 TO J
      GET(TreeQ,I)
      IF ERRORCODE()
         BREAK
      ELSE
         IF TreeQ.szClassName = szLastClassName
            BREAK
         END
      END
   END
   IF I > J
      I = 1
   END
   GET(TreeQ,I)
   IF glo:bAutoExpand OR I = 1
      TreeQ.lLevel = ABS(TreeQ.lLevel)
      PUT(TreeQ)
   END
END
?TreeList{PROP:Selected} = POINTER(TreeQ)
SELECT(?ObjectDropList)
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?ContractButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO ContractTree
[END]
[END]
WHEN '?ExpandButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO ExpandTree
[END]
[END]
WHEN '?ViewNoteButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(TreeQ,CHOICE(?TreeList))
IF TreeQ.szContextString
   winViewNote(glo:bClarionVersion,TreeQ.szContextString)
ELSE
   winViewNote(glo:bClarionVersion,TreeQ.szText)
END
[END]
[END]
WHEN '?glo:szCategoryChoice'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE glo:szCategoryChoice
  OF ' ALL'
   glo:szCategory = ''
ELSE
   glo:szCategory = glo:szCategoryChoice
END
glo:szParentClassName = ''

GET(TreeQ,CHOICE(?TreeList))
loc:TreeQ:szText = TreeQ.szText

DO FillCallNameQ

FREE(TreeStateQ)

srcRefreshTree()

DO FillClassNameQ
DO FillCategoryQueue

J = RECORDS(TreeQ)
IF J
   LOOP I = 1 TO J
     GET(TreeQ,I)
     IF TreeQ.szText = loc:TreeQ:szText
        BREAK
     END
   END
   IF I > J
      I = 1
   END
   GET(TreeQ,I)
   ?TreeList{PROP:Selected} = I
END

IF glo:bAutoExpand OR I = 1
   TreeQ.lLevel = ABS(TreeQ.lLevel)
   PUT(TreeQ)
END

DO SaveTreeState

?ObjectDropList{PROP:Selected} = 1
SELECT(?ObjectDropList)
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?glo:bDetailLevel'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
bCount = 10
bDetailNewSelection = TRUE
Window{PROP:Timer} = 10
[END]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO ProcessNewDetailLevel
[END]
[END]
WHEN '?FileExit'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?CloseButton)
[END]
[END]
WHEN '?TreeExpand'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?ExpandButton)
[END]
[END]
WHEN '?TreeContract'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?ContractButton)
[END]
[END]
WHEN '?ViewSource'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?ViewSourceButton)
[END]
[END]
WHEN '?ViewHelp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?HelpButton)
[END]
[END]
WHEN '?ViewNotes'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?ViewNoteButton)
[END]
[END]
WHEN '?ToolsOptions'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?OptionsButton)
[END]
[END]
WHEN '?ToolsRefreshTree'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?RefreshButton)
[END]
[END]
WHEN '?bViewCallTree'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?TreeRegion)
[END]
[END]
WHEN '?bViewClasses'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?ClassRegion)
[END]
[END]
WHEN '?bViewEquates'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?EquateRegion)
[END]
[END]
WHEN '?bViewInterfaces'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?InterfaceRegion)
[END]
[END]
WHEN '?bViewStructures'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?StructureRegion)
[END]
[END]
WHEN '?HistoryList'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
lHistoryPointer = CHOICE(?HistoryList)
ThisWindow.Reset()

GET(HistoryQueue,lHistoryPointer)

CASE HistoryQueue.ObjectView
OF VIEW:CLASSES
   szObjectType = 'CLASS'
OF VIEW:STRUCTURES
   szObjectType = 'STRUCTURE'
OF VIEW:INTERFACES
   szObjectType = 'INTERFACE'
END
szObjectName = HistoryQueue.ObjectName
DO ProcessHyperlink
[END]
[END]
WHEN '?NextHyperlink'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lHistoryPointer += 1
IF lHistoryPointer = RECORDS(HistoryQueue)
   ?NextHyperlink{PROP:Disable} = TRUE
ELSE
   ?NextHyperlink{PROP:Disable} = FALSE
END
?PrevHyperlink{PROP:Disable} = FALSE

GET(HistoryQueue,lHistoryPointer)
?HistoryList{PROP:Selected} = lHistoryPointer

CASE HistoryQueue.ObjectView
OF VIEW:CLASSES
   szObjectType = 'CLASS'
OF VIEW:STRUCTURES
   szObjectType = 'STRUCTURE'
OF VIEW:INTERFACES
   szObjectType = 'INTERFACE'
END
szObjectName = HistoryQueue.ObjectName
DO ProcessHyperlink
RETURN Level:Notify
[END]
[END]
WHEN '?PrevHyperlink'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF HistoryQueue.ObjectName <> TreeQ.szClassName
   HistoryQueue.ObjectName = TreeQ.szClassName
   HistoryQueue.ObjectView = glo:bCurrentView
   CASE HistoryQueue.ObjectView
   OF VIEW:CLASSES
      HistoryQueue.lObjectDropListPointer = POINTER(ClassNameQ)
   OF VIEW:STRUCTURES
      HistoryQueue.lObjectDropListPointer = POINTER(StructNameQ)
   OF VIEW:INTERFACES
      HistoryQueue.lObjectDropListPointer = POINTER(ClassNameQ)
   END
   HistoryQueue.szText = TreeQ.szText
   HistoryQueue.bProtected = glo:bShowProtected
   HistoryQueue.bPrivate = glo:bShowPrivate
   HistoryQueue.bModule = glo:bShowModule
   ADD(HistoryQueue)
   lHistoryPointer = POINTER(HistoryQueue)
ELSE
   HistoryQueue.szText = TreeQ.szText
   PUT(HistoryQueue)
END

lHistoryPointer -= 1

IF lHistoryPointer = 1
   ?PrevHyperlink{PROP:Disable} = TRUE
ELSE
   ?PrevHyperlink{PROP:Disable} = FALSE
END
IF RECORDS(HistoryQueue) > 1
   IF lHistoryPointer < RECORDS(HistoryQueue)
      ?NextHyperlink{PROP:Disable} = FALSE
   ELSE
      ?NextHyperlink{PROP:Disable} = TRUE
   END
ELSE
   ?NextHyperlink{PROP:Disable} = TRUE
END

GET(HistoryQueue,lHistoryPointer)
?HistoryList{PROP:Selected} = lHistoryPointer

CASE HistoryQueue.ObjectView
OF VIEW:CLASSES
   szObjectType = 'CLASS'
OF VIEW:STRUCTURES
   szObjectType = 'STRUCTURE'
OF VIEW:INTERFACES
   szObjectType = 'INTERFACE'
END
szObjectName = HistoryQueue.ObjectName
DO ProcessHyperlink
RETURN Level:Notify
[END]
[END]
WHEN '?ToolsClearHistory'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
FREE(HistoryQueue)
lHistoryPointer = 0
ThisWindow.Reset()
[END]
[END]
WHEN '?FileClarion55EE'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C55EE
DO LoadData
[END]
[END]
WHEN '?FileClarion50'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C5
DO LoadData
[END]
[END]
WHEN '?FileClarion55'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C55
DO LoadData
[END]
[END]
WHEN '?FileClarion60'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C60
DO LoadData
[END]
[END]
WHEN '?FileClarion60EE'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C60EE
DO LoadData
[END]
[END]
WHEN '?FileClarion50EE'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C5EE
DO LoadData
[END]
[END]
WHEN '?HelpJusttheFAQs'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szURL = 'http://www.devuna.com/ToolsForClarion/ClassViewer/ClassViewerFAQ.aspx'
szNull = ''
ShellExecute(window{prop:handle},0,szURL,0,szNull,1)
[END]
[END]
WHEN '?TreeContractBranch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
J = CHOICE(?TreeList)
IF J < RECORDS(TreeQ)
   GET(TreeQ,J + 1)
   K = ABS(TreeQ:lLevel)
   GET(TreeQ,J)
   IF ABS(TreeQ:lLevel) < K
      TreeQ:lLevel = ABS(TreeQ:lLevel) * -1
      PUT(TreeQ)
      DISPLAY(?TreeList)
   END
END
[END]
[END]
WHEN '?TreeExpandBranch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(TreeQ,CHOICE(?TreeList))
TreeQ:lLevel = ABS(TreeQ:lLevel)
PUT(TreeQ)
DISPLAY(?TreeList)
[END]
[END]
WHEN '?FileClarion20'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C2
DO LoadData
[END]
[END]
WHEN '?FileClarion40'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C4
DO LoadData
[END]
[END]
WHEN '?HyperlinkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 DO SetupHyperlink
 DO ProcessHyperlink
[END]
[END]
WHEN '?HelpContents'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
PROPERTY:END
IF glo:bUseHTMLHelp AND ~oHH &= NULL
   oHH.SetHelpFile( 'ABCVIEW.CHM' )
   oHH.ShowTOC()
ELSE
   HELP( , 'CONTENTS')
END
[END]
[END]
WHEN '?SplitterBar'
[INSTANCES]
WHEN 'MouseIn'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF SELF.HasFocus
   SETCURSOR(CURSOR:SIZEWE)
END
[END]
WHEN 'MouseMove'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
      IF SELF.HasFocus AND KEYCODE() = MouseLeft AND bTrackMouse
         X = MouseX()
         Y = MouseY()
         IF INRANGE(Y,?ObjectDropList{PROP:YPos}+0,?ObjectDropList{PROP:YPos}+?ObjectDropList{PROP:Height}+0)
            CASE glo:Layout
            OF 1
               vXPos = ?VerticalSplitter{PROP:XPos}
            ELSE
               vXPos = Window{PROP:Width}-192
            END
            XMax = Window{PROP:Width}-192
            XMax = CHOOSE(XMax>vXPos,vXPos-2,XMax)

            IF INRANGE(X,8,XMax)
               PanelX = CHOOSE(X < PANELMINIMUMX,PANELMINIMUMX,X)
               ?SplitterBar{PROP:Color} = COLOR:BLACK
               ?SplitterBar{PROP:Fill} = COLOR:BLUE
               ?SplitterBar{PROP:XPos} = X
               Splitter1_XPos = X
            END
         END
      END
[END]
WHEN 'MouseOut'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SETCURSOR()
[END]
WHEN 'MouseUp'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SETKEYCODE(0)
?SplitterBar{PROP:Color} = COLOR:NONE
?SplitterBar{PROP:Fill} = COLOR:NONE

IF bTrackMouse
   X = Splitter1_XPos
   Splitter2_XPos = ?VerticalSplitter{PROP:XPos}
   PanelX = CHOOSE(X < PANELMINIMUMX,PANELMINIMUMX,X)

   ?ObjectDropList{PROP:Width} = X-8

   ?SplitterBar{PROP:XPos} = X
   ?SplitterBar:2{PROP:XPos} = PanelX

   CASE glo:Layout
   OF 1
      ?TreeList{PROP:XPos} = X+2
      ?TreeList{PROP:Width} = Splitter2_XPos - (X+2)
      ?AsciiBox{PROP:XPos} = Splitter2_XPos + 3
      ?AsciiBox{PROP:Width} = Window{PROP:Width}-(Splitter2_XPos + 3)-8
   ELSE
      ?TreeList{PROP:XPos} = X+2
      ?TreeList{PROP:Width} = Window{PROP:Width}-(X+2)-8
      ?VerticalSplitter{PROP:XPos} = X+2
      ?VerticalSplitter{PROP:Width} = Window{PROP:Width}-(X+2)-8
      ?AsciiBox{PROP:XPos} = X+3
      ?AsciiBox{PROP:Width} = Window{PROP:Width}-(X+3)-8
   END

   COMPILE('***',_Scintilla_)
   !======================================================================
   !scintilla support
   !======================================================================
   SETPOSITION(?SciControl:Region,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos},?AsciiBox{PROP:Width},?AsciiBox{PROP:Height})
   SciControl.Reset(FALSE)
   !======================================================================
   !***
   SETPOSITION(?loc:szAsciiFilename,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos}-6,?AsciiBox{PROP:Width},)

   ?glo:szCategoryChoice{PROP:Width} = PanelX - ?glo:szCategoryChoice{PROP:XPos} - 2

   ?glo:bDetailLevel:Prompt{PROP:XPos} = PanelX + 8
   ?glo:bDetailLevel{PROP:XPos} = PanelX + 36
   ?glo:bShowProtected{PROP:XPos} = PanelX + 54
   ?glo:bShowPrivate{PROP:XPos} = PanelX + 104
   ?glo:bShowModule{PROP:XPos} = PanelX + 154
END

bTrackMouse = FALSE

!fix up the screen
IF ?glo:bDetailLevel:Prompt{PROP:HIDE} = FALSE
   HIDE(?glo:bDetailLevel:Prompt,?glo:bDetailLevel)
   UNHIDE(?glo:bDetailLevel:Prompt,?glo:bDetailLevel)
END
IF ?glo:bShowProtected{PROP:HIDE} = FALSE
   HIDE(?glo:bShowProtected)
   UNHIDE(?glo:bShowProtected)
END
IF ?glo:bShowPrivate{PROP:HIDE} = FALSE
   HIDE(?glo:bShowPrivate)
   UNHIDE(?glo:bShowPrivate)
END
IF ?glo:bShowModule{PROP:HIDE} = FALSE
   HIDE(?glo:bShowModule)
   UNHIDE(?glo:bShowModule)
END

SELF.Reset(TRUE)
[END]
[END]
WHEN '?VerticalSplitter'
[INSTANCES]
WHEN 'MouseIn'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF SELF.HasFocus
   CASE(glo:Layout)
   OF 1
      SETCURSOR(CURSOR:SIZEWE)
   ELSE
      SETCURSOR(CURSOR:SIZENS)
   END
END
[END]
WHEN 'MouseMove'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
      IF SELF.HasFocus AND KEYCODE() = MouseLeft AND bTrackMouse
         X = MouseX()
         Y = MouseY()
         CASE glo:Layout
         OF 1
            IF INRANGE(Y,?ObjectDropList{PROP:YPos}+0,?ObjectDropList{PROP:YPos}+?ObjectDropList{PROP:Height}+0)
               vXPos = ?SplitterBar{PROP:XPos}+3
               XMin = 10
               XMin = CHOOSE(XMin<vXPos,vXPos,XMin)
               IF INRANGE(X,XMin,Window{PROP:Width}-13)
                  ?VerticalSplitter{PROP:Color} = COLOR:BLACK
                  ?VerticalSplitter{PROP:Fill} = COLOR:BLUE
                  ?VerticalSplitter{PROP:XPos} = X
                  Splitter2_XPos = X
               END
            END
         ELSE
            IF INRANGE(Y,74,Window{PROP:Height}-42)
               IF INRANGE(X,?VerticalSplitter{PROP:XPos}+0,?VerticalSplitter{PROP:XPos}+?VerticalSplitter{PROP:Width}+0)
                  ?VerticalSplitter{PROP:Color} = COLOR:BLACK
                  ?VerticalSplitter{PROP:Fill} = COLOR:BLUE
                  ?VerticalSplitter{PROP:YPos} = Y
                  Splitter2_YPos = Y
               END
            END
         END
      END
[END]
WHEN 'MouseOut'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SETCURSOR()
[END]
WHEN 'MouseUp'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SETKEYCODE(0)
?VerticalSplitter{PROP:Color} = COLOR:NONE
?VerticalSplitter{PROP:Fill} = COLOR:NONE

CASE glo:Layout
OF 1
   IF bTrackMouse
      X = Splitter2_XPos
      IF X > Window{PROP:Width}-13
         X = Window{PROP:Width}-13
      END
      ?TreeList{PROP:Width} = X - ?TreeList{PROP:XPos}
      ?AsciiBox{PROP:XPos} =  X+3
      ?AsciiBox{PROP:Width} = (Window{PROP:Width}-8) - (X+4)
      COMPILE('***',_Scintilla_)
      !======================================================================
      !scintilla support
      !======================================================================
      SETPOSITION(?SciControl:Region,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos},?AsciiBox{PROP:Width},?AsciiBox{PROP:Height})
      SciControl.Reset(FALSE)
      !======================================================================
      !***
      SETPOSITION(?loc:szAsciiFilename,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos}-6,?AsciiBox{PROP:Width},)
   END
ELSE
   ?TreeList{PROP:Height} = Splitter2_YPos-?TreeList{PROP:YPos}
   ?AsciiBox{PROP:YPos} = Splitter2_YPos+SPLITTERHEIGHT
   ?AsciiBox{PROP:Height} = Window{PROP:Height}-(Splitter2_YPos+SPLITTERHEIGHT)-22

   AsciiBoxHeight = ?AsciiBox{Prop:Height}

   OMIT('***',_Scintilla_)
   ?AsciiBox{Prop:Items} = ?AsciiBox{Prop:Items}
   !***

   COMPILE('***',_Scintilla_)
   lh = ?SciControl:Region{PROP:LineHeight}
   h = AsciiBoxHeight
   lc = int(h / lh)
   ?AsciiBox{Prop:Items} = lc
   !***

   ?AsciiBox{PROP:Ypos} = ?AsciiBox{PROP:Ypos} + (AsciiBoxHeight - ?AsciiBox{Prop:Height})
   ?VerticalSplitter{PROP:Ypos} = ?VerticalSplitter{PROP:Ypos} + (AsciiBoxHeight - ?AsciiBox{Prop:Height})
   ?TreeList{PROP:Height} = ?TreeList{PROP:Height} + (AsciiBoxHeight - ?AsciiBox{Prop:Height})

   COMPILE('***',_Scintilla_)
   !======================================================================
   !scintilla support
   !======================================================================
   SETPOSITION(?SciControl:Region,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos},?AsciiBox{PROP:Width},?AsciiBox{PROP:Height})
   SciControl.Reset(FALSE)
   !======================================================================
   !***
   SETPOSITION(?loc:szAsciiFilename,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos}-6,?AsciiBox{PROP:Width},)
END
bTrackMouse = FALSE

OMIT('***',_Scintilla_)
Viewer.DisplayPage()
!***

SELF.Reset(TRUE)
[END]
[END]
WHEN '?AsciiBox'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
OF MouseLeft2
   POST(EVENT:Accepted,?ViewSourceButton)
END
[END]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
!ListWithFocus = ?AsciiBox
[END]
[END]
WHEN '?glo:bShowModule'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF glo:bShowModule
   UNHIDE(?ModuleBox,?ModuleString)
ELSE
   HIDE(?ModuleBox,?ModuleString)
END
GET(TreeQ,CHOICE(?TreeList))
IF ERRORCODE()
   CLEAR(TreeQ)
END
loc:TreeQ:szText = TreeQ.szText

FREE(TreeStateQ)
srcRefreshTree()

CASE glo:bCurrentView
  OF VIEW:CLASSES
     DO FillClassNameQ
     DO FillCategoryQueue
  OF VIEW:CALLS
     IF RECORDS(CallNameQ)
        szLastCallName = CallNameQ.szCallName
     ELSE
        szLastCallName = 'WindowManager.Run'
     END
     DO FillCallNameQ
     DO FillCategoryQueue
  OF VIEW:INTERFACES
     DO FillClassNameQ
  OF VIEW:STRUCTURES
     DO FillStructNameQ
  OF VIEW:EQUATES
     DO FillEnumNameQ
END
J = RECORDS(TreeQ)
IF J
   LOOP I = 1 TO J
     GET(TreeQ,I)
     IF TreeQ.szText = loc:TreeQ:szText
        BREAK
     END
   END
   IF I > J
      I = 1
   END
   DO ExpandParentNodes
END
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?HelpSearch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
PROPERTY:END
IF glo:bUseHTMLHelp AND ~oHH &= NULL
   oHH.SetHelpFile( 'ABCVIEW.CHM' )
   oHH.ShowSearch()
END
[END]
[END]
WHEN '?HelpOnHelp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
PROPERTY:END
IF glo:bUseHTMLHelp AND ~oHH &= NULL
   oHH.SetHelpFile( 'NTHELP.CHM' )
   oHH.ShowTopic('htmlhelp_overview.htm')
   oHH.SetHelpFile( 'ABCVIEW.CHM' )
END
[END]
[END]
WHEN '?glo:bShowSparseTrees'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
glo:bShowSparseTrees = ABS(glo:bShowSparseTrees - 1)
SELECT(?ObjectDropList)
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?HelpAddtoClarionMenu'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF srcFindWindow('CLARION') <> 0
   MESSAGE('This procedure will not work if the Clarion IDE is running.|' & |
           'Please exit the Clarion IDE and try again.','Clarion IDE is running',ICON:HAND)
ELSE
   srcAddToUserMenu(0)
   bAddtoClarionMenu = FALSE
   HIDE(?HelpAddtoClarionMenu)
   ThisWindow.Reset
END
[END]
[END]
WHEN '?CallTreeButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
szObjectName = winBrowseCallQ()
IF szObjectName <> ''
   szObjectType = 'CLASS'
   DO ProcessHyperlink
ELSE
   SELECT(?ObjectDropList)
END
[END]
[END]
WHEN '?ToolsFindNotes'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
bSyncView = winFindNotes()
[END]
[END]
WHEN '?ToolsFavoritesAddtoFavorites'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
DO DestroyFavoritesMenu
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO CreateFavoritesMenu
[END]
[END]
WHEN '?ToolsBrowseDatabase'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?CallTreeButton)
[END]
[END]
WHEN '?ToolsAddClassWizard'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:Accepted,?AddClassWizardButton)
[END]
[END]
WHEN '?AddClassWizardButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF winAddClass() = Level:Benign     !call the add class dialog
   loc:ForceSmartScan = TRUE
   POST(EVENT:Accepted,?RefreshButton)
END
[END]
[END]
WHEN '?FileClarion70'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C70
LOOP i = 1 TO RECORDS(glo:VersionQ)
   GET(glo:VersionQ,i)
   IF NOT glo:VersionQ.RedirectionMacros &= NULL
      FREE(glo:VersionQ.RedirectionMacros)
      DISPOSE(glo:VersionQ.RedirectionMacros)
      glo:VersionQ.RedirectionMacros &= NULL
      PUT(glo:VersionQ)
   END
END
FREE(glo:VersionQ)
DO LoadData
[END]
[END]
WHEN '?FileClarion80'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C80
LOOP i = 1 TO RECORDS(glo:VersionQ)
   GET(glo:VersionQ,i)
   IF NOT glo:VersionQ.RedirectionMacros &= NULL
      FREE(glo:VersionQ.RedirectionMacros)
      DISPOSE(glo:VersionQ.RedirectionMacros)
      glo:VersionQ.RedirectionMacros &= NULL
      PUT(glo:VersionQ)
   END
END
FREE(glo:VersionQ)
DO LoadData
[END]
[END]
WHEN '?VcrTop'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COMPILE('***',_Scintilla_)
IF ListWithFocus = -1
   SciControl.DocumentStart()
   SciControl.GoToLine(SciControl.GetCurrentLineNumber())
ELSE
!***
   SETKEYCODE(CtrlHome)
   FORWARDKEY(ListWithFocus)
COMPILE('***',_Scintilla_)
END
!***
[END]
[END]
WHEN '?VcrRewind'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COMPILE('***',_Scintilla_)
IF ListWithFocus = -1
   SciControl.PageUp()
   SciControl.GoToLine(SciControl.GetCurrentLineNumber())
ELSE
!***
   SETKEYCODE(PgUpKey)
   FORWARDKEY(ListWithFocus)
COMPILE('***',_Scintilla_)
END
!***
[END]
[END]
WHEN '?VcrBack'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COMPILE('***',_Scintilla_)
IF ListWithFocus = -1
   !SciControl.LineScrollUp()
   SciControl.GoToLine(SciControl.GetCurrentLineNumber()-1)
ELSE
!***
  SETKEYCODE(UpKey)
  FORWARDKEY(ListWithFocus)
COMPILE('***',_Scintilla_)
END
!***

[END]
[END]
WHEN '?VcrPlay'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COMPILE('***',_Scintilla_)
IF ListWithFocus = -1
   !SciControl.LineScrollDown()
   SciControl.GoToLine(SciControl.GetCurrentLineNumber()+1)
ELSE
!***
  SETKEYCODE(DownKey)
  FORWARDKEY(ListWithFocus)
COMPILE('***',_Scintilla_)
END
!***

[END]
[END]
WHEN '?VcrFastForward'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COMPILE('***',_Scintilla_)
IF ListWithFocus = -1
   SciControl.PageDown()
   SciControl.GoToLine(SciControl.GetCurrentLineNumber())
ELSE
!***
  SETKEYCODE(PgDnKey)
  FORWARDKEY(ListWithFocus)
COMPILE('***',_Scintilla_)
END
!***

[END]
[END]
WHEN '?VcrBottom'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COMPILE('***',_Scintilla_)
IF ListWithFocus = -1
   SciControl.DocumentEnd()
   SciControl.GoToLine(SciControl.GetCurrentLineNumber())
ELSE
!***
  SETKEYCODE(CtrlEnd)
  FORWARDKEY(ListWithFocus)
COMPILE('***',_Scintilla_)
END
!***

[END]
[END]
WHEN '?EquateRegion'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF lLatchControl <> ?EquateRegion         !if this control is not the latched control
   lLatchControl = ?EquateRegion          !make this the latched control
   DO DrawLatchBox
   glo:bCurrentView = VIEW:EQUATES        !view equates

   DO RefreshControls

   GET(EnumQ,1)
   glo:szParentClassName = EnumQ.szEnumName

   srcRefreshTree()
   DO FillEnumNameQ
   ?ObjectDropList{PROP:From} = EnumNameQ
   ?ObjectDropList{PROP:Format} = '252L(2)|@s63@'

   J = RECORDS(TreeQ)
   LOOP I = 1 TO J
      GET(TreeQ,I)
      IF ERRORCODE()
         BREAK
      ELSE
         IF TreeQ.szClassName = szLastEnumName
            BREAK
         END
      END
   END
   IF I > J
      I = 1
   END
   GET(TreeQ,I)
   IF glo:bAutoExpand OR I = 1
      TreeQ.lLevel = ABS(TreeQ.lLevel)
      PUT(TreeQ)
   END
END

?TreeList{PROP:Selected} = POINTER(TreeQ)
?ObjectDropList{PROP:Selected} = POINTER(EnumNameQ)
SETKEYCODE(0)
POST(EVENT:Accepted,?ObjectDropList)
[END]
[END]
WHEN '?FileClarion100'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C100
LOOP i = 1 TO RECORDS(glo:VersionQ)
   GET(glo:VersionQ,i)
   IF NOT glo:VersionQ.RedirectionMacros &= NULL
      FREE(glo:VersionQ.RedirectionMacros)
      DISPOSE(glo:VersionQ.RedirectionMacros)
      glo:VersionQ.RedirectionMacros &= NULL
      PUT(glo:VersionQ)
   END
END
FREE(glo:VersionQ)
DO LoadData
[END]
[END]
WHEN '?FileClarion90'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO SaveData
glo:bClarionVersion = CWVERSION_C90
LOOP i = 1 TO RECORDS(glo:VersionQ)
   GET(glo:VersionQ,i)
   IF NOT glo:VersionQ.RedirectionMacros &= NULL
      FREE(glo:VersionQ.RedirectionMacros)
      DISPOSE(glo:VersionQ.RedirectionMacros)
      glo:VersionQ.RedirectionMacros &= NULL
      PUT(glo:VersionQ)
   END
END
FREE(glo:VersionQ)
DO LoadData

[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 501
PROPERTY:END
SYSTEM{PROP:ICON} = '~ABCVIEW.ICO'
glo:sCurrentCursor = CURSOR:Arrow
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
LABEL
PROPERTY:END
  !Get User Options
  glo:lModuleColor    = COLOR:PURPLE
  INIMgr.Fetch('Options','Module Color',glo:lModuleColor)

  glo:lPrivateColor   = COLOR:RED
  INIMgr.Fetch('Options','Private Color',glo:lPrivateColor)

  glo:lProtectedColor = COLOR:MAROON
  INIMgr.Fetch('Options','Protected Color',glo:lProtectedColor)

  glo:lVirtualColor   = COLOR:FUSCHIA
  INIMgr.Fetch('Options','Virtual Color',glo:lVirtualColor)

  glo:lSelectedBack   = 09C613BH    !080FFFFh
  INIMgr.Fetch('Options','Selected Color',glo:lSelectedBack)

  glo:lSelectedFore   = COLOR:WHITE
  INIMgr.Fetch('Options','Selected Text',glo:lSelectedFore)

  glo:lNoteColor      = COLOR:WHITE
  INIMgr.Fetch('Options','Note Color',glo:lNoteColor)

  glo:lHighlightColor1  = COLOR:BLUE
  INIMgr.Fetch('Options','Highlight Color 1',glo:lHighlightColor1)

  glo:lHighlightColor2  = COLOR:TEAL
  INIMgr.Fetch('Options','Highlight Color 2',glo:lHighlightColor2)

  glo:lHyperlinkColor  = COLOR:BLACK
  INIMgr.Fetch('Options','Hyperlink Color',glo:lHyperlinkColor)

  DO SetDefaultClarionVersion
  INIMgr.Fetch('Options','Clarion Version',glo:bClarionVersion)

  glo:bABCOnly        = TRUE
  INIMgr.Fetch('Options','ABC Only',glo:bABCOnly)

  glo:bShowModule     = FALSE
  INIMgr.Fetch('Options','Show Module',glo:bShowModule)

  glo:bShowPrivate    = FALSE
  INIMgr.Fetch('Options','Show Private',glo:bShowPrivate)

  glo:bShowProtected  = FALSE
  INIMgr.Fetch('Options','Show Protected',glo:bShowProtected)

  glo:bCurrentView    = VIEW:CLASSES
  INIMgr.Fetch('Options','Current View',glo:bCurrentView)

  glo:bShowTips       = TRUE
  INIMgr.Fetch('Options','Show Tips',glo:bShowTips)

  glo:bOpaqueCheckBox = TRUE
  INIMgr.Fetch('Options','Opaque Check Box',glo:bOpaqueCheckBox)

  glo:bForceEdit      = FALSE
  INIMgr.Fetch('Options','Force Edit',glo:bForceEdit)

  glo:bUseAssociation = FALSE
  INIMgr.Fetch('Options','Use Association',glo:bUseAssociation)

  glo:szEditorCommand = 'Notepad.exe %1'
  INIMgr.Fetch('Options','Editor Command',glo:szEditorCommand)

  glo:Background = 3    !None
  INIMgr.Fetch('Options','Background',glo:Background)

  glo:Color1          = COLOR:BTNFACE
  INIMgr.Fetch('Options','Color 1',glo:Color1)

  glo:Color2          = COLOR:BTNFACE
  INIMgr.Fetch('Options','Color 2',glo:Color2)

  glo:szWallpaper1    = '~WALLPAPER.GIF'
  INIMgr.Fetch('Options','Wallpaper 1',glo:szWallpaper1)

  glo:szWallpaper2    = '~WALLPAPER.GIF'
  INIMgr.Fetch('Options','Wallpaper 2',glo:szWallpaper2)

  glo:Tiled1          = FALSE
  INIMgr.Fetch('Options','Tiled 1',glo:Tiled1)

  glo:Tiled2          = FALSE
  INIMgr.Fetch('Options','Tiled 2',glo:Tiled2)

  glo:Typeface = 'Tahoma'
  INIMgr.Fetch('Options','Typeface',glo:Typeface)

  glo:FontSize = 10
  INIMgr.Fetch('Options','FontSize',glo:FontSize)

  glo:FontColor = COLOR:BLACK
  INIMgr.Fetch('Options','FontColor',glo:FontColor)

  glo:FontStyle = FONT:REGULAR
  INIMgr.Fetch('Options','FontStyle',glo:FontStyle)

  glo:bDetailLevel = 1
  INIMgr.Fetch('Options','DetailLevel',glo:bDetailLevel)

  glo:szCategory = ''
  INIMgr.Fetch('Options','Category',glo:szCategory)
  IF glo:szCategory
     glo:szCategoryChoice = glo:szCategory
  ELSE
     glo:szCategoryChoice = ' ALL'
  END

  glo:CategoryDropCount = 10
  INIMgr.Fetch('Options','CategoryDropCount',glo:CategoryDropCount)

  glo:szCurrentDir = LONGPATH(PATH())
  INIMgr.Fetch('Options','Current Directory',glo:szCurrentDir)
  SETPATH(glo:szCurrentDir)

  DO LoadMRU_Queue

  CASE glo:bClarionVersion
    OF CWVERSION_C2
       loc:szSection = 'Clarion for Windows V2.0'
       loc:szRedFileName = '\bin\cw20.red'
    OF CWVERSION_C4
       loc:szSection = 'Clarion 4'
       loc:szRedFileName = '\bin\clarion4.red'
    OF CWVERSION_C5
       loc:szSection = 'Clarion 5'
       loc:szRedFileName = '\bin\clarion5.red'
    OF CWVERSION_C5EE
       loc:szSection = 'Clarion 5  Enterprise Edition'
       loc:szRedFileName = '\bin\clarion5.red'
    OF CWVERSION_C55
       loc:szSection = 'Clarion 5.5'
       loc:szRedFileName = '\bin\c55pe.red'
    OF CWVERSION_C55EE
       loc:szSection = 'Clarion 5.5  Enterprise Edition'
       loc:szRedFileName = '\bin\c55ee.red'
    OF CWVERSION_C60
       loc:szSection = 'Clarion 6.0'
       loc:szRedFileName = '\bin\c60pe.red'
    OF CWVERSION_C60EE
       loc:szSection = 'Clarion 6.0  Enterprise Edition'
       loc:szRedFileName = '\bin\c60ee.red'
    OF CWVERSION_C70
       loc:szSection = 'Clarion 7.'
       !get redirection file from xml file
       IF RECORDS(glo:VersionQ) = 0
          hr = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END
       !find latest version
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

    OF CWVERSION_C80
       loc:szSection = 'Clarion 8.'
       !get redirection file from xml file
       IF RECORDS(glo:VersionQ) = 0
          hr = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END
       !find latest version
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

    OF CWVERSION_C90
       loc:szSection = 'Clarion 9.'
       !get redirection file from xml file
       IF RECORDS(glo:VersionQ) = 0
          hr = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END
       !find latest version
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

    OF CWVERSION_C100
       loc:szSection = 'Clarion 10.'
       !get redirection file from xml file
       IF RECORDS(glo:VersionQ) = 0
          hr = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END
       !find latest version
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

  END

  DO LoadRedirectionQueue

  loc:szRoot = szRoot

  IF glo:bClarionVersion < CWVERSION_C70
     glo:szRedFilePath = loc:szRoot & loc:szRedFileName
  ELSE
     glo:szRedFilePath = glo:VersionQ.RedDir & '\' & loc:szRedFileName
  END

  INIMgr.Fetch('Options','RED File Path ' & glo:bClarionVersion,glo:szRedFilePath)

  glo:bAutoExpand = TRUE
  INIMgr.Fetch('Options','AutoExpand',glo:bAutoExpand)

  glo:bUseHTMLHelp = FALSE
  INIMgr.Fetch('Options','UseHTMLHelp',glo:bUseHTMLHelp)

  glo:szXmlStyleSheet = ''
  INIMgr.Fetch('Options','XmlStyleSheet',glo:szXmlStyleSheet)

  glo:bEnumSort = 0
  INIMgr.Fetch('Options','EnumSort',glo:bEnumSort)

  glo:bShowSparseTrees = 0
  INIMgr.Fetch('Options','ShowSparseTrees',glo:bShowSparseTrees)

  glo:bMaxMRU = 10
  INIMgr.Fetch('Options','MaxMRU',glo:bMaxMRU)

  IF srcAddToUserMenu(1) = TRUE  !check if already present; param 0 = update, 1 = query
     bAddToClarionMenu = FALSE
  ELSE
     bAddToClarionMenu = TRUE
  END

  LOOP K = 1 TO SCE_CLW_LAST
     EXECUTE K
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,255,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,128,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,8421504,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,16711680,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,32768,16777215,0,0,1,1'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,255,16777215,0,0,1,0'
        loc:szViewerStyle = 'Courier New,10,700,1,0,0,8421376,16777215,0,0,1,0'
     END

     INIMgr.Fetch('Options','ViewerStyle'& FORMAT(K-1,@n02),loc:szViewerStyle)
     I = 1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Font = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].FontSize = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].FontStyle = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Bold = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Italic = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Underline = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Fore = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Back = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].EolFilled = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].CaseOpt = loc:szViewerStyle[I : J-1]
     I = J+1
     J = INSTRING(',',loc:szViewerStyle,,I)
     glo:ViewerStyles.StyleGroup[K].Visible = loc:szViewerStyle[I : J-1]
     I = J+1
     J = LEN(CLIP(loc:szViewerStyle))
     glo:ViewerStyles.StyleGroup[K].HotSpot = loc:szViewerStyle[I : J]
  END

  DO GetAppPath
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
!Initialize Popup Manager(s)
PopupMgr.Init()
ObjectPopupMgr.Init()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
szLastCallName = 'WindowManager.Run'
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
!Add program error messages
GlobalErrors.AddErrors(MyErrors)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
LOOP I = 48 TO 57
  LocatorQ.character = CHR(I)
  ADD(LocatorQ)
END
LOOP I = 65 TO 90
  LocatorQ.character = CHR(I)
  ADD(LocatorQ)
END
LocatorQ.character = '_'
ADD(LocatorQ)
SORT(LocatorQ,+LocatorQ.character)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
0{PROP:Hide} = TRUE     !Hide the window
Window{PROP:Buffer} = 1

0{PROP:Pixels} = TRUE
?Box5{PROP:Ypos} = ?Box5{PROP:Ypos} + 1
!?Box6{PROP:Height} = (?Box6{PROP:Height} + 1)
0{PROP:Pixels} = FALSE

!COMPILE('End_Compile',_DEBUG_)
?CallTreeButton{PROP:Hide} = FALSE
!End_Compile

loc:sCurrentCursor = glo:sCurrentCursor
glo:sCurrentCursor = CURSOR:WAIT
SETCURSOR(glo:sCurrentCursor)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
!Build Menu of Clarion Versions

loc:szSection = 'Clarion for Windows V2.0'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion20{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 4'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion40{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 5'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion50{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 5  Enterprise Edition'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion50EE{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 5.5'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion55{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 5.5  Enterprise Edition'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion55EE{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 6.0'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion60{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 6.0  Enterprise Edition'
loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
IF ~loc:szRoot
   ?FileClarion60EE{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 7.0'
szSubKey = 'SOFTWARE\SoftVelocity\Clarion7'
RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
IF RetVal = ERROR_SUCCESS
   szValueName = 'root'
   pType = REG_SZ
   pData = SIZE(loc:szRoot)
   RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
   RetVal = RegCloseKey(hKeyExtension)
   IF ~loc:szRoot
      ?FileClarion70{PROP:Hide} = TRUE
   END
ELSE
   ?FileClarion70{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 8.0'
szSubKey = 'SOFTWARE\SoftVelocity\Clarion8'
RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
IF RetVal = ERROR_SUCCESS
   szValueName = 'root'
   pType = REG_SZ
   pData = SIZE(loc:szRoot)
   RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
   RetVal = RegCloseKey(hKeyExtension)
   IF ~loc:szRoot
      ?FileClarion80{PROP:Hide} = TRUE
   END
ELSE
   ?FileClarion80{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 9.0'
szSubKey = 'SOFTWARE\SoftVelocity\Clarion9'
RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
IF RetVal = ERROR_SUCCESS
   szValueName = 'root'
   pType = REG_SZ
   pData = SIZE(loc:szRoot)
   RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
   RetVal = RegCloseKey(hKeyExtension)
   IF ~loc:szRoot
      ?FileClarion90{PROP:Hide} = TRUE
   END
ELSE
   ?FileClarion90{PROP:Hide} = TRUE
END

loc:szSection = 'Clarion 10.0'
szSubKey = 'SOFTWARE\SoftVelocity\Clarion10'
RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
IF RetVal = ERROR_SUCCESS
   szValueName = 'root'
   pType = REG_SZ
   pData = SIZE(loc:szRoot)
   RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
   RetVal = RegCloseKey(hKeyExtension)
   IF ~loc:szRoot
      ?FileClarion100{PROP:Hide} = TRUE
   END
ELSE
   ?FileClarion100{PROP:Hide} = TRUE
END

IF ~glo:bClarionVersion
   IF ?FileClarion100{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C100
   ELSIF ?FileClarion90{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C90
   ELSIF ?FileClarion80{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C80
   ELSIF ?FileClarion70{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C70
   ELSIF ?FileClarion60EE{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C60EE
   ELSIF ?FileClarion60{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C60
   ELSIF ?FileClarion55EE{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C55EE
   ELSIF ?FileClarion55{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C55
   ELSIF ?FileClarion50EE{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C5EE
   ELSIF ?FileClarion50{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C5
   ELSIF ?FileClarion40{PROP:Hide} = FALSE
      glo:bClarionVersion = CWVERSION_C4
   ELSE
      glo:bClarionVersion = CWVERSION_C2
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
DO CreateMRUMenu
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
hm = GetMenu(Window{PROP:Handle})
IF hm
   mi.cbSize = SIZE(mi)
   mi.fMask = MIM_BACKGROUND + MIM_MAXHEIGHT
   hr = GetMenuInfo(hm,mi)
   mi.hbrBack = CreateSolidBrush(0F9DAC3H) !0E2A981H)
   hr = SetMenuInfo(hm,mi)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
?HistoryList{PROP:DropWidth} = 120

bc &= NULL
Locator.Init(0,LocatorQ.Character,TRUE,bc)
Locator.Shadow = ''
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8080
PROPERTY:END
OMIT('***',_Scintilla_)
HIDE(?SciControl:Region)
!***
COMPILE('***',_Scintilla_)
!======================================================================
!scintilla support
!======================================================================
HIDE(?AsciiBox)
!***
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8104
LABEL
PROPERTY:END
  COMPILE('***',_Scintilla_)
  IF ReturnValue = Level:Benign
     bControlInitialised = TRUE
  ELSE
     bControlInitialised = FALSE
  END
  !***

  !Set Tree Icons
  ?TreeList{PROP:IconList,ICON:CLASS} = '~class.ico'
  ?TreeList{PROP:IconList,ICON:NEWCLASS} = '~newclass.ico'
  ?TreeList{PROP:IconList,ICON:INTERFACEFOLDER} = '~intrface.ico'
  ?TreeList{PROP:IconList,ICON:NEWINTERFACEFOLDER} = '~newintrface.ico'
  ?TreeList{PROP:IconList,ICON:PROPERTYFOLDER} = '~pfolder.ico'
  ?TreeList{PROP:IconList,ICON:PROPERTY} = '~property.ico'
  ?TreeList{PROP:IconList,ICON:METHODFOLDER} = '~mfolder.ico'
  ?TreeList{PROP:IconList,ICON:METHOD} = '~method.ico'
  ?TreeList{PROP:IconList,ICON:STRUCTUREFOLDER} = '~structyp.ico'
  ?TreeList{PROP:IconList,ICON:STRUCTURE} = '~property.ico'
  ?TreeList{PROP:IconList,ICON:EQUATEFOLDER} = '~efolder.ico'
  ?TreeList{PROP:IconList,ICON:ENUMFOLDER} = '~efolder2.ico'
  ?TreeList{PROP:IconList,ICON:EQUATE} = '~equate.ico'
  ?TreeList{PROP:IconList,ICON:INTERFACE} = '~method.ico'
  ?TreeList{PROP:IconList,ICON:NOTE} = '~note2.ico'

  !Set Tree Styles
  DO SetTreeStyles

  ?ObjectDropList{PROP:DropWidth} = 155

  ?glo:bShowProtected{PROP:Background} = ?Panel4:2{PROP:Fill}
  ?glo:bShowPrivate{PROP:Background} = ?Panel4:2{PROP:Fill}
  ?glo:bShowModule{PROP:Background} = ?Panel4:2{PROP:Fill}

  DO SetScreenLayout
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9001
PROPERTY:END
Locator.SetAlerts(?ObjectDropList)
DO SetAlerts
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Main_Window.htm')
   END
?HelpContents{PROP:STD} = ''
?HelpSearch{PROP:STD} = ''
?HelpOnHelp{PROP:STD} = ''
END

SELF.HasFocus = TRUE

GET(MRU_Queue,1)
IF ~ERRORCODE() AND MRU_Queue.MenuFeq <> 0
   POST(EVENT:Accepted,MRU_Queue.MenuFeq)
ELSE
   CASE glo:bCurrentView
     OF VIEW:CLASSES
        POST(EVENT:Accepted,?ClassRegion)
     OF VIEW:STRUCTURES
        POST(EVENT:Accepted,?StructureRegion)
     OF VIEW:EQUATES
        POST(EVENT:Accepted,?EquateRegion)
     OF VIEW:CALLS
        POST(EVENT:Accepted,?TreeRegion)
     OF VIEW:INTERFACES
        POST(EVENT:Accepted,?InterfaceRegion)
   END
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
DO DestroyFavoritesMenu
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4500
LABEL
PROPERTY:END
  PopupMgr.Kill()
  ObjectPopupMgr.Kill()
  INIMgr.Update('Options','Module Color',glo:lModuleColor)
  INIMgr.Update('Options','Private Color',glo:lPrivateColor)
  INIMgr.Update('Options','Protected Color',glo:lProtectedColor)
  INIMgr.Update('Options','Virtual Color',glo:lVirtualColor)
  INIMgr.Update('Options','Selected Color',glo:lSelectedBack)
  INIMgr.Update('Options','Selected Text',glo:lSelectedFore)
  INIMgr.Update('Options','Note Color',glo:lNoteColor)
  INIMgr.Update('Options','Highlight Color 1',glo:lHighlightColor1)
  INIMgr.Update('Options','Highlight Color 2',glo:lHighlightColor2)
  INIMgr.Update('Options','Hyperlink Color',glo:lHyperlinkColor)
  INIMgr.Update('Options','Clarion Version',glo:bClarionVersion)
  INIMgr.Update('Options','ABC Only',glo:bABCOnly)
  INIMgr.Update('Options','Show Module',glo:bShowModule)
  INIMgr.Update('Options','Show Private',glo:bShowPrivate)
  INIMgr.Update('Options','Show Protected',glo:bShowProtected)
  INIMgr.Update('Options','Current View',glo:bCurrentView)
  INIMgr.Update('Options','Show Tips',glo:bShowTips)
  INIMgr.Update('Options','Opaque Check Box',glo:bOpaqueCheckBox)
  INIMgr.Update('Options','Force Edit',glo:bForceEdit)
  INIMgr.Update('Options','Use Association',glo:bUseAssociation)
  INIMgr.Update('Options','Editor Command',glo:szEditorCommand)
  INIMgr.Update('Options','Background',glo:Background)
  INIMgr.Update('Options','Color 1',glo:Color1)
  INIMgr.Update('Options','Color 2',glo:Color2)
  INIMgr.Update('Options','Wallpaper 1',glo:szWallpaper1)
  INIMgr.Update('Options','Wallpaper 2',glo:szWallpaper2)
  INIMgr.Update('Options','Tiled 1',glo:Tiled1)
  INIMgr.Update('Options','Tiled 2',glo:Tiled2)
  INIMgr.Update('Options','Typeface',glo:Typeface)
  INIMgr.Update('Options','FontSize',glo:FontSize)
  INIMgr.Update('Options','FontColor',glo:FontColor)
  INIMgr.Update('Options','FontStyle',glo:FontStyle)
  INIMgr.Update('Options','DetailLevel',glo:bDetailLevel)
  INIMgr.Update('Options','Category',glo:szCategory)
  INIMgr.Update('Options','CategoryDropCount',glo:CategoryDropCount)
  INIMgr.Update('Options','Current Directory',glo:szCurrentDir)
  INIMgr.Update('Options','RED File Path ' & glo:bClarionVersion,glo:szRedFilePath)
  INIMgr.Update('Options','AutoExpand',glo:bAutoExpand)
  INIMgr.Update('Options','UseHTMLHelp',glo:bUseHTMLHelp)
  INIMgr.Update('Options','XmlStyleSheet',glo:szXmlStyleSheet)
  INIMgr.Update('Options','EnumSort',glo:bEnumSort)
  INIMgr.Update('Options','ShowSparseTrees',glo:bShowSparseTrees)
  INIMgr.Update('Options','MaxMRU',glo:bMaxMRU)
  INIMgr.Update('Splitter','Layout',glo:Layout)


  DO SaveMRU_Queue
  DO SaveViewerStyles

  CASE glo:bClarionVersion
    OF CWVERSION_C2
       szClassViewDatafile = 'CVIEW20S.DAT'
    OF CWVERSION_C4
       szClassViewDatafile = 'CVIEW40S.DAT'
    OF CWVERSION_C5
       szClassViewDatafile = 'CVIEW50S.DAT'
    OF CWVERSION_C5EE
       szClassViewDatafile = 'CVIEW50E.DAT'
    OF CWVERSION_C55
       szClassViewDatafile = 'CVIEW55S.DAT'
    OF CWVERSION_C55EE
       szClassViewDatafile = 'CVIEW55E.DAT'
    OF CWVERSION_C60
       szClassViewDatafile = 'CVIEW60S.DAT'
    OF CWVERSION_C60EE
       szClassViewDatafile = 'CVIEW60E.DAT'
    OF CWVERSION_C70
       szClassViewDatafile = 'CVIEW70.DAT'
    OF CWVERSION_C80
       szClassViewDatafile = 'CVIEW80.DAT'
    OF CWVERSION_C90
       szClassViewDatafile = 'CVIEW90.DAT'
    OF CWVERSION_C100
       szClassViewDatafile = 'CVIEW100.DAT'
    !OF CWVERSION_C71
    !   szClassViewDatafile = 'CVIEW71.DAT'
  END
  szClassViewDatafile = szValue & '\' & szClassViewDatafile
  loc:sCurrentCursor = glo:sCurrentCursor
  glo:sCurrentCursor = CURSOR:WAIT
  SETCURSOR(glo:sCurrentCursor)
  ?SavingString{PROP:XPos} = (?CloseButton{PROP:XPos} - 90)
  ?SavingString{PROP:YPos} = (?CloseButton{PROP:YPos} + 0)
  HIDE(?VCRTop,?VCRBottom)
  UNHIDE(?SavingString)
  DISPLAY()
  Access:Memory(szClassViewDatafile,ACTION:SAVE)
  HIDE(?SavingString)
  UNHIDE(?VCRTop,?VCRBottom)
  glo:sCurrentCursor = loc:sCurrentCursor
  SETCURSOR(glo:sCurrentCursor)
  J = RECORDS(ViewerThreadQ)
  LOOP I = 1 TO J
    GET(ViewerThreadQ,I)
    POST(EVENT:CloseWindow,,ViewerThreadQ.lThreadId)
  END
  FREE(HistoryQueue)
  FREE(TreeStateQ)

  LOOP i = 1 TO RECORDS(glo:VersionQ)
     GET(glo:VersionQ,i)
     IF NOT glo:VersionQ.RedirectionMacros &= NULL
        FREE(glo:VersionQ.RedirectionMacros)
        DISPOSE(glo:VersionQ.RedirectionMacros)
        glo:VersionQ.RedirectionMacros &= NULL
        PUT(glo:VersionQ)
     END
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
IF SELF.Opened
  INIMgr.Update('Splitter','Layout',glo:Layout)
  CASE glo:Layout
  OF 1
    INIMgr.Update('Splitter','XPos',?SplitterBar{PROP:XPos})
    INIMgr.Update('Splitter','VXPos',?VerticalSplitter{PROP:XPos})
  ELSE
    INIMgr.Update('Splitter','XPos',?SplitterBar{PROP:XPos})
    INIMgr.Update('Splitter','YPos',?VerticalSplitter{PROP:YPos})
  END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9501
PROPERTY:END
OMIT('***',_Scintilla_)
IF ViewerActive
   Viewer.Kill()
END
!***
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
glo:lMainThread = 0
POST(EVENT:CloseWindow,,1)
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
!  Fld = FIELD()
!  CASE Fld
!  OF   ?ClassRegion
!  OROF ?InterfaceRegion
!  OROF ?TreeRegion
!  OROF ?StructureRegion
!  OROF ?EquateRegion
!    CASE EVENT()
!    OF EVENT:MouseIn
!       IF lLatchControl <> Fld
!          IF SYSTEM{PROP:ThemeActive} = 1
!             ?ThemeButton{PROP:XPos} = Fld{PROP:XPos}
!             ?ThemeButton{PROP:YPos} = Fld{PROP:YPos}
!             UNHIDE(?ThemeButton)
!          ELSE
!             ?Button{PROP:XPos} = Fld{PROP:XPos}
!             ?Button{PROP:YPos} = Fld{PROP:YPos}
!             UNHIDE(?Button)
!          END
!       END
!    OF EVENT:MouseOut
!       IF SYSTEM{PROP:ThemeActive} = 1
!          HIDE(?ThemeButton)
!       ELSE
!          HIDE(?Button)
!       END
!    END
!  END
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
LABEL
PROPERTY:END
  IF RECORDS(HistoryQueue)
     ?ToolsClearHistory{PROP:Disable} = FALSE
     IF lHistoryPointer = 1
        ?PrevHyperlink{PROP:Disable} = TRUE
     ELSE
        ?PrevHyperlink{PROP:Disable} = FALSE
     END
     IF lHistoryPointer >= RECORDS(HistoryQueue)
        ?NextHyperlink{PROP:Disable} = TRUE
     ELSE
        ?NextHyperlink{PROP:Disable} = FALSE
     END
     ?HistoryList{PROP:Disable} = FALSE
  ELSE
     ?ToolsClearHistory{PROP:Disable} = TRUE
     ?PrevHyperlink{PROP:Disable} = TRUE
     ?NextHyperlink{PROP:Disable} = TRUE
     ?HistoryList{PROP:Disable} = TRUE
  END

  IF glo:bShowPrivate
     ENABLE(?glo:bShowModule)
  ELSE
     DISABLE(?glo:bShowModule)
  END

  IF ~RECORDS(incTemplateQ) OR ~RECORDS(clwTemplateQ)
     DISABLE(?ToolsAddClassWizard)
     DISABLE(?AddClassWizardButton)
  ELSE
     ENABLE(?ToolsAddClassWizard)
     ENABLE(?AddClassWizardButton)
  END
[END]
[END]
WHEN 'Open'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5200
PROPERTY:END
IF ~glo:bShowTips
   ?ClassRegion{PROP:Tip} = 'View Classes'
   ?InterfaceRegion{PROP:Tip} = 'View Interfaces'
   ?TreeRegion{PROP:Tip} = 'View Method Call Tree'
   ?StructureRegion{PROP:Tip} = 'View Structures'
   ?EquateRegion{PROP:Tip} = 'View Enumerated Equates'
END

DO FillOldClassQ

CASE glo:bClarionVersion
  OF CWVERSION_C2
     szClassViewDatafile = 'CVIEW20S.DAT'
     FileClarion20 = TRUE
     DISABLE(?FileClarion20)
  OF CWVERSION_C4
     szClassViewDatafile = 'CVIEW40S.DAT'
     FileClarion40 = TRUE
     DISABLE(?FileClarion40)
  OF CWVERSION_C5
     szClassViewDatafile = 'CVIEW50S.DAT'
     FileClarion50 = TRUE
     DISABLE(?FileClarion50)
  OF CWVERSION_C5EE
     szClassViewDatafile = 'CVIEW50E.DAT'
     FileClarion50EE = TRUE
     DISABLE(?FileClarion50EE)
  OF CWVERSION_C55
     szClassViewDatafile = 'CVIEW55S.DAT'
     FileClarion55 = TRUE
     DISABLE(?FileClarion55)
  OF CWVERSION_C55EE
     szClassViewDatafile = 'CVIEW55E.DAT'
     FileClarion55EE = TRUE
     DISABLE(?FileClarion55EE)
  OF CWVERSION_C60
     szClassViewDatafile = 'CVIEW60S.DAT'
     FileClarion60 = TRUE
     DISABLE(?FileClarion60)
  OF CWVERSION_C60EE
     szClassViewDatafile = 'CVIEW60E.DAT'
     FileClarion60EE = TRUE
     DISABLE(?FileClarion60EE)
  OF CWVERSION_C70
     szClassViewDatafile = 'CVIEW70.DAT'
     FileClarion70 = TRUE
     DISABLE(?FileClarion70)
  OF CWVERSION_C80
     szClassViewDatafile = 'CVIEW80.DAT'
     FileClarion80 = TRUE
     DISABLE(?FileClarion80)
  OF CWVERSION_C90
     szClassViewDatafile = 'CVIEW90.DAT'
     FileClarion90 = TRUE
     DISABLE(?FileClarion90)
  OF CWVERSION_C100
     szClassViewDatafile = 'CVIEW100.DAT'
     FileClarion100 = TRUE
     DISABLE(?FileClarion100)
END
szClassViewDatafile = szValue & '\' & szClassViewDatafile

IF Access:Memory(szClassViewDatafile,ACTION:LOAD) <> LEVEL:Benign
   IF glo:lLoadingThread
      POST(EVENT:CloseWindow,,glo:lLoadingThread)
      SetWindowPos(Window{PROP:Handle},HWND_TOP,0,0,0,0,BOR(BOR(SWP_NOMOVE,SWP_NOSIZE),SWP_SHOWWINDOW))
      SetForegroundWindow(Window{PROP:Handle})
      Window{PROP:Active} = TRUE
   END
   0{PROP:HIDE} = FALSE
   DO CreateFavoritesMenu

   IF ~RECORDS(ExtraModuleQ)
      DO InitExtraModuleQ
   END

   HIDE(?LoadingString)
   HIDE(?VCRTop,?VCRBottom)
   HIDE(?TreeList)
   HIDE(?AsciiBox)
 COMPILE('***',_Scintilla_)
   SciControl.SetHide(TRUE)
 !***
   HIDE(?loc:szAsciiFilename)
   HIDE(?VirtualBox,?EnumeratedEquate:String)
   HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)
   HIDE(?ObjectDropList)
   HIDE(?SplitterBar)
   HIDE(?SplitterBar:2)
   HIDE(?VerticalSplitter)

   HIDE(?HyperlinkButton,?HistoryList)
   HIDE(?LocatorImage,?locator)

   FREE(TreeStateQ)
   glo:bRefreshAll = TRUE
   srcRefreshQueues(?ProcessString,?ScanString,?ProgressBox,?ProgressBox:2,?RefreshGroup)
   glo:bRefreshAll = FALSE
   srcRefreshQueues(?ProcessString,?ScanString,?ProgressBox,?ProgressBox:2,?RefreshGroup)

   UNHIDE(?ObjectDropList)
   UNHIDE(?SplitterBar)
   UNHIDE(?SplitterBar:2)
   UNHIDE(?VerticalSplitter)
   UNHIDE(?HyperlinkButton,?HistoryList)
   UNHIDE(?LocatorImage,?locator)
   UNHIDE(?TreeList)
 OMIT('***',_scintilla_)
   UNHIDE(?AsciiBox)
 !***
 COMPILE('***',_Scintilla_)
   SciControl.SetHide(FALSE)
 !***
   UNHIDE(?loc:szAsciiFilename)
   glo:bCurrentView = VIEW:CLASSES
   ?SavingString{PROP:XPos} = (?CloseButton{PROP:XPos} - 90)
   ?SavingString{PROP:YPos} = (?CloseButton{PROP:YPos} + 0)
   UNHIDE(?SavingString)
   DISPLAY()
   Access:Memory(szClassViewDatafile,ACTION:SAVE)
   HIDE(?SavingString)
   UNHIDE(?VCRTop,?VCRBottom)
ELSE
   HIDE(?LoadingString)
   UNHIDE(?VCRTop,?VCRBottom)
   IF glo:lLoadingThread
      POST(EVENT:CloseWindow,,glo:lLoadingThread)
      SetWindowPos(Window{PROP:Handle},HWND_TOP,0,0,0,0,BOR(BOR(SWP_NOMOVE,SWP_NOSIZE),SWP_SHOWWINDOW))
      SetForegroundWindow(Window{PROP:Handle})
      Window{PROP:Active} = TRUE
      0{PROP:HIDE} = FALSE
      DO CreateFavoritesMenu
      DISPLAY()
   END
END

IF RECORDS(CallNameQ)
   szLastCallName = CallNameQ.szCallName
ELSE
   szLastCallName = 'WindowManager.Run'
END

GET(TreeQ,1)
TreeQ.lLevel = ABS(TreeQ.lLevel)
PUT(TreeQ)
?TreeList{PROP:Selected} = 1
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
LABEL
PROPERTY:END
    CASE EVENT()
      OF EVENT:Accepted
         IF ~oHH &= NULL
            oHH.SetTopic('Main_Window.htm')
         END

      OF EVENT:Selected

      OF EVENT:Timer
         IF bCount > 0
            bCount -= 1
         ELSE
            Window{PROP:Timer} = 0
            IF bDetailNewSelection
               bDetailNewSelection = FALSE
               DO ProcessNewDetailLevel
            END
         END

      OF EVENT:User

    END
[END]
[END]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
  IF INRANGE(ACCEPTED(),lFirstFavoriteMenuFeq,lLastFavoriteMenuFeq)
     DO ProcessFavoritesMenu
  ELSIF INRANGE(ACCEPTED(),lFirstMRUMenuFeq,lLastMRUMenuFeq)
     DO ProcessMRUMenu
  ELSIF INRANGE(ACCEPTED(),lFirstControlFeq,lLastControlFeq)
     DO ProcessFavoriteButton
  END
[END]
[END]
WHEN 'TakeSelected'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!SELF.HasFocus = TRUE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
  IF SELECTED() <> ?ObjectDropList
     Locator.Shadow = ''
     ?Locator{PROP:Text} = Locator.Shadow
     HIDE(?LocatorImage)
  END
[END]
[END]
[END]
EMBED %LocalDataAfterClasses
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  COMPILE('***',_Scintilla_)
bControlInitialised  BOOL(FALSE)
  !***
szLastClassName      CSTRING(64)
szLastCallName       CSTRING(64)
szLastStructureName  CSTRING(64)
szLastEnumName       CSTRING(64)
PopupString          STRING(16)
PopupMgr             PopupClass
ObjectPopupMgr       PopupClass
comctl32             CSTRING('comctl32.dll')
lLastLevel           LONG
szCaptionVersion     CSTRING(10)
szCaptionView        CSTRING(32)
MyErrors             GROUP
Number                 USHORT(3)
                       USHORT(Msg:DeleteNote)
                       BYTE(Level:User)
                       PSTRING('Confirm Delete')
                       PSTRING('Are you sure you want to delete the note?')
                       USHORT(Msg:SaveNote)
                       BYTE(Level:User)
                       PSTRING('Save Note')
                       PSTRING('Do you want to save the changes to this note?')
                       USHORT(Msg:QueryRefresh)
                       BYTE(Level:User)
                       PSTRING('Confirm Refresh')
                       PSTRING('Are you sure you want to re-scan the source files?')
                     END
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2624
PROPERTY:END
LoadRedirectionQueue    ROUTINE
  DATA
loc:szSection       CSTRING(256)
loc:szRoot          CSTRING(256)
loc:build           CSTRING(5)
I                   LONG
J                   LONG

  CODE
     FREE(RedirectionQueue)

     CASE glo:bClarionVersion
       OF CWVERSION_C2
          loc:szSection = 'Clarion for Windows V2.0'
       OF CWVERSION_C4
          loc:szSection = 'Clarion 4'
       OF CWVERSION_C5
          loc:szSection = 'Clarion 5'
       OF CWVERSION_C5EE
          loc:szSection = 'Clarion 5  Enterprise Edition'
       OF CWVERSION_C55
          loc:szSection = 'Clarion 5.5'
       OF CWVERSION_C55EE
          loc:szSection = 'Clarion 5.5  Enterprise Edition'
       OF CWVERSION_C60
          loc:szSection = 'Clarion 6.0'
       OF CWVERSION_C60EE
          loc:szSection = 'Clarion 6.0  Enterprise Edition'
       OF CWVERSION_C70
          loc:szSection = 'Clarion 7.'
       OF CWVERSION_C80
          loc:szSection = 'Clarion 8.'
       OF CWVERSION_C90
          loc:szSection = 'Clarion 9.'
       OF CWVERSION_C100
          loc:szSection = 'Clarion 10.'
     END

     IF glo:bClarionVersion < CWVERSION_C70
        loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory from win.ini
        IF loc:szRoot[LEN(loc:szRoot)] = '\'
           loc:szRoot[LEN(loc:szRoot)] = '<0>'                                 !remove trailing backslash
        END
     ELSE
        !look for latest clarion7 or greater install
        LOOP I = 1 TO RECORDS(glo:VersionQ)
           GET(glo:VersionQ,I)
           IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
              IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                 loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                 loc:szRoot = glo:VersionQ.Root
                 IF NOT glo:VersionQ.RedirectionMacros &= NULL
                    FREE(RedirectionQueue)
                    LOOP J = 1 TO RECORDS(glo:VersionQ.RedirectionMacros)
                       GET(glo:VersionQ.RedirectionMacros,J)
                       RedirectionQueue.Token = glo:VersionQ.RedirectionMacros.Token
                       RedirectionQueue.Path  = glo:VersionQ.RedirectionMacros.Path
                       ADD(RedirectionQueue,+RedirectionQueue.Token)
                    END
                 END
              END
           END
        END
     END

     RedirectionQueue.Token = '%ROOT%'
     GET(RedirectionQueue,+RedirectionQueue.Token)
     IF ERRORCODE()
        RedirectionQueue.Token = '%ROOT%'
        RedirectionQueue.Path  = loc:szRoot
        ADD(RedirectionQueue,+RedirectionQueue.Token)
     END

     CASE glo:bClarionVersion
       OF CWVERSION_C2
          szIniFile = loc:szRoot & '\bin\c2.ini'
       OF CWVERSION_C4
          szIniFile = loc:szRoot & '\bin\c4.ini'
       OF CWVERSION_C5
          szIniFile = loc:szRoot & '\bin\c5pe.ini'
       OF CWVERSION_C5EE
          szIniFile = loc:szRoot & '\bin\c5ee.ini'
       OF CWVERSION_C55
          szIniFile = loc:szRoot & '\bin\c55pe.ini'
       OF CWVERSION_C55EE
          szIniFile = loc:szRoot & '\bin\c55ee.ini'
       OF CWVERSION_C60
          szIniFile = loc:szRoot & '\bin\c60pe.ini'
       OF CWVERSION_C60EE
          szIniFile = loc:szRoot & '\bin\c60ee.ini'
       OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
          !this needs work
          IF glo:VersionQ.IniFile = ''
             szIniFile = ''
          ELSE
             szIniFile = loc:szRoot & glo:VersionQ.IniFile
          END
     END
     IF szIniFile <> ''
        OPEN(IniFile,ReadOnly+DenyNone)
        SET(IniFile)
        NEXT(IniFile)
        LOOP UNTIL ERRORCODE()
           CASE UPPER(CLIP(IniFile.IniRecord.IniBuffer))
           OF '[REDIRECTION MACROS]'
              !look for other redirection macros
              DO ProcessRedirectionMacros
           ELSE
              NEXT(IniFile)
           END
        END
        CLOSE(IniFile)
     ELSE
        IF glo:bClarionVersion >= CWVERSION_C70
            !currently nothing to do
        END
     END

     RedirectionQueue.Token = '%ROOT%'
     GET(RedirectionQueue,+RedirectionQueue.Token)
     szRoot = RedirectionQueue.Path
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2624
PROPERTY:END
ProcessRedirectionMacros  ROUTINE
  DATA
I   LONG
J   LONG
szWork  CSTRING(256)

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    IF IniFile.IniRecord.IniBuffer[J] = '\'
       IniFile.IniRecord.IniBuffer[J] = '<0>'                                 !remove trailing backslash
    END
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       RedirectionQueue.Token = '%' & UPPER(IniFile.IniRecord.IniBuffer[1 : I-1]) & '%'
       GET(RedirectionQueue,+RedirectionQueue.Token)
       IF ERRORCODE()
          RedirectionQueue.Token = '%' & UPPER(IniFile.IniRecord.IniBuffer[1 : I-1]) & '%'
          RedirectionQueue.Path  = CLIP(LEFT(IniFile.IniRecord.IniBuffer[I+1 : J]))
          ADD(RedirectionQueue,+RedirectionQueue.Token)
       ELSE
          RedirectionQueue.Path  = CLIP(LEFT(IniFile.IniRecord.IniBuffer[I+1 : J]))
          PUT(RedirectionQueue)
       END
    END
    NEXT(IniFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2916
PROPERTY:END
LoadMRU_Queue   ROUTINE
  J = 0
  INIMgr.Fetch('MRU','Records',J)
  LOOP I = 1 TO J
     INIMgr.Fetch('MRU','Name' & FORMAT(I,@N02),MRU_Queue.szName)
     IF MRU_Queue.szName <> ''
        INIMgr.Fetch('MRU','Sort' & FORMAT(I,@N02),MRU_Queue.szSortName)
        INIMgr.Fetch('MRU','Type' & FORMAT(I,@N02),MRU_Queue.szObjectType)
        ADD(MRU_Queue,I)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2916
PROPERTY:END
SaveMRU_Queue   ROUTINE
  J = RECORDS(MRU_Queue)
  INIMgr.Update('MRU','Records',J)
  LOOP I = 1 TO RECORDS(MRU_Queue)
     GET(MRU_Queue,I)
     INIMgr.Update('MRU','Name' & FORMAT(I,@N02),MRU_Queue.szName)
     INIMgr.Update('MRU','Sort' & FORMAT(I,@N02),MRU_Queue.szSortName)
     INIMgr.Update('MRU','Type' & FORMAT(I,@N02),MRU_Queue.szObjectType)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
UpdateMRU_Queue ROUTINE
   DATA
szSearch    CSTRING(64)

   CODE
   IF KEYCODE() = MouseLeft
      CASE glo:bCurrentView
      OF VIEW:CLASSES
         GET(ClassNameQ,CHOICE(?ObjectDropList))
         szSearch = ClassNameQ.szSortName
      OF VIEW:INTERFACES
         GET(ClassNameQ,CHOICE(?ObjectDropList))
         szSearch = ClassNameQ.szSortName
      OF VIEW:STRUCTURES
         GET(StructNameQ,CHOICE(?ObjectDropList))
         szSearch = StructNameQ.szStructureSort
      END

      J = RECORDS(MRU_Queue)
      IF J <> 0
         LOOP I = 1 TO J
            GET(MRU_Queue,I)
            IF MRU_Queue.szSortName = szSearch
               BREAK
            END
         END
         IF INRANGE(I,2,J)
            DELETE(MRU_Queue)
         END
      ELSE
         I = 0
      END
      IF I <> 1
         CASE glo:bCurrentView
         OF VIEW:CLASSES
            MRU_Queue.szObjectType = 'CLASS'
            MRU_Queue.szName = ClassNameQ.szClassName
            MRU_Queue.szSortName = ClassNameQ.szSortName
         OF VIEW:INTERFACES
            MRU_Queue.szObjectType = 'INTERFACE'
            MRU_Queue.szName = ClassNameQ.szClassName
            MRU_Queue.szSortName = ClassNameQ.szSortName
         OF VIEW:STRUCTURES
            MRU_Queue.szObjectType = 'STRUCTURE'
            MRU_Queue.szName = StructNameQ.szStructureName
            MRU_Queue.szSortName = StructNameQ.szStructureSort
         END
         ADD(MRU_Queue,1)
         J = RECORDS(MRU_Queue)
         LOOP WHILE J > glo:bMaxMRU
            GET(MRU_Queue,J)
            DELETE(MRU_Queue)
            J = RECORDS(MRU_Queue)
         END
         DO CreateMRUMenu
      END
   END

   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
CreateMRUMenu  ROUTINE
  DATA

  CODE
  DO DestroyMRUMenu

  J = RECORDS(MRU_Queue)
  LOOP I = 1 TO J
     GET(MRU_Queue,I)
?    ASSERT(MRU_Queue.MenuFeq = 0)
     IF MRU_Queue.MenuFeq = 0
        MRU_Queue.MenuFeq = CREATE(0,CREATE:ITEM,?FileRecent)
        PUT(MRU_Queue)
        CASE I
        OF 1
           lFirstMRUMenuFeq = MRU_Queue.MenuFeq
           IF J = 1
              lLastMRUMenuFeq = MRU_Queue.MenuFeq
           END
        OF J
           lLastMRUMenuFeq = MRU_Queue.MenuFeq
        END
        MRU_Queue.MenuFeq{PROP:Text} = MRU_Queue.szName
        MRU_Queue.MenuFeq{PROP:Left} = 16
        CASE MRU_Queue.szObjectType
        OF 'CLASS'
           MRU_Queue.MenuFeq{PROP:ICON} = '~class.ico'
        OF 'INTERFACE'
           MRU_Queue.MenuFeq{PROP:ICON} = '~intrface.ico'
        OF 'STRUCTURE'
           MRU_Queue.MenuFeq{PROP:ICON} = '~structyp.ico'
        END
        UNHIDE(MRU_Queue.MenuFeq)
     END
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
DestroyMRUMenu  ROUTINE
  J = RECORDS(MRU_Queue)
  LOOP I = 1 TO J
     GET(MRU_Queue,I)
     IF MRU_Queue.MenuFeq <> 0
        DESTROY(MRU_Queue.MenuFeq)
        MRU_Queue.MenuFeq = 0
        PUT(MRU_Queue)
     END
  END
  lFirstMRUMenuFeq = 0
  lLastMRUMenuFeq = 0

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
ProcessMRUMenu    ROUTINE
  DATA

szURL   CSTRING(256)
szNull  CSTRING(2)

  CODE

  J = RECORDS(MRU_Queue)
  LOOP I = 1 TO J
     GET(MRU_Queue,I)
     IF MRU_Queue.MenuFeq = ACCEPTED()
        CASE MRU_Queue.szObjectType
        OF 'CLASS'
           IF lLatchControl <> ?ClassRegion
              DO SetupClassView
           END
           ClassNameQ:szSortName = MRU_Queue.szSortName
           GET(ClassNameQ,+ClassNameQ:szSortName)
           ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
           DISPLAY(?ObjectDropList)
           SELECT(?ObjectDropList)
           SETKEYCODE(MouseLeft)
           POST(EVENT:Accepted,?ObjectDropList)
        OF 'INTERFACE'
           IF lLatchControl <> ?InterfaceRegion
              DO SetupInterfaceView
           END
           ClassNameQ:szSortName = MRU_Queue.szSortName
           GET(ClassNameQ,+ClassNameQ:szSortName)
           ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
           DISPLAY(?ObjectDropList)
           SELECT(?ObjectDropList)
           SETKEYCODE(MouseLeft)
           POST(EVENT:Accepted,?ObjectDropList)
        OF 'STRUCTURE'
           IF lLatchControl <> ?StructureRegion
              DO SetupStructureView
           END
           StructNameQ.szStructureSort = MRU_Queue.szSortName
           GET(StructNameQ,+StructNameQ.szStructureSort)
           ?ObjectDropList{PROP:Selected} = POINTER(StructNameQ)
           DISPLAY(?ObjectDropList)
           SELECT(?ObjectDropList)
           SETKEYCODE(MouseLeft)
           POST(EVENT:Accepted,?ObjectDropList)
        END
        BREAK
     END
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
GetAppPath  ROUTINE
 szSubKey = 'SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\abcview.exe'
 RetVal = RegOpenKeyEx(HKEY_CURRENT_USER,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
 IF RetVal <> ERROR_SUCCESS
    RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
 END
 IF RetVal = ERROR_SUCCESS
    szValueName = 'DataPath'
    pType = REG_SZ
    pData = SIZE(szValue)
    RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(szValue),pData)
    RetVal = RegCloseKey(hKeyExtension)
 END

 !First Command Line Parameter is DataPath
 !and it overrides the registry entry
 !=====================================================================
 IF COMMAND('1')
    szValue = COMMAND('1')
 END

 IF ~CLIP(szValue)
    szValue = LONGPATH(PATH())
 END

 IF szValue[LEN(CLIP(szValue))] = '\'
    szValue[LEN(CLIP(szValue))] = '<0>'
 END
 EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
PopupMenu   ROUTINE
 DATA
lObjectId               LONG
bSeparate               BYTE
lModuleId               LONG
bEditDefinition         BYTE
bEditSource             BYTE
loc:bForceEdit          LIKE(glo:bForceEdit)
sav:TreeQ:lLineNum      LIKE(TreeQ:lLineNum)
sav:TreeQ:lIncludeId    LIKE(TreeQ:lIncludeId)

 CODE
 DO SyncQueues

 !Remove Popup Manager Menu Options
 PopupMgr.DeleteItem('SparseTree')
 PopupMgr.DeleteItem('Declaration')
 PopupMgr.DeleteItem('Definition')
 PopupMgr.DeleteItem('Separator1')
 PopupMgr.DeleteItem('Source')
 PopupMgr.DeleteItem('Callers')
 PopupMgr.DeleteItem('Separator2')
 PopupMgr.DeleteItem('Edit')
 PopupMgr.DeleteItem('EditDeclaration')
 PopupMgr.DeleteItem('EditDefinition')
 PopupMgr.DeleteItem('EditSource')
 PopupMgr.DeleteItem('Separator4')
 PopupMgr.DeleteItem('Notes')
 PopupMgr.DeleteItem('Properties')
 PopupMgr.DeleteItem('Help')
 PopupMgr.DeleteItem('Separator5')
 PopupMgr.DeleteItem('Hyperlink')
 PopupMgr.DeleteItem('Separator6')
 PopupMgr.DeleteItem('View')
 PopupMgr.DeleteItem('Classes')
 PopupMgr.DeleteItem('Interfaces')
 PopupMgr.DeleteItem('CallTree')
 PopupMgr.DeleteItem('Structures')
 PopupMgr.DeleteItem('Equates')
 PopupMgr.DeleteItem('Separator7')
 PopupMgr.DeleteItem('Sort')
 PopupMgr.DeleteItem('Alphabetic')
 PopupMgr.DeleteItem('Canonical')

 !Set Popup Manager Menu Options
 PopupMgr.AddItem('&Declaration','Declaration')

 IF TreeQ:wIcon = ICON:METHOD               |
 AND glo:bCurrentView <> VIEW:INTERFACES    |
 AND TreeQ.lModuleId <> 0                   |
 AND TreeQ.lSourceLine
     PopupMgr.AddItem('De&finition','Definition')
     bEditDefinition = TRUE
 END
 PopupMgr.AddItem('-','Separator1')

 IF glo:bCurrentView = VIEW:CALLS   |
 AND ABS(TreeQ.lLevel) > 1          |
 AND TreeQ.lOccurranceLine
     PopupMgr.AddItem('&Source','Source')
     bEditSource = TRUE
     bSeparate = TRUE
 END
 IF glo:bCurrentView = VIEW:CALLS
    PopupMgr.AddItem('&Callers','Callers')
    bSeparate = TRUE
 END
 IF bSeparate = TRUE
    bSeparate = FALSE
    PopupMgr.AddItem('-','Separator2')
 END

!==============================================================================
!new code build 2003.06.10
!==============================================================================
 PopupMgr.AddItem('Edit')
 PopupMgr.AddItem('-','Separator4')
!==============================================================================
!end new code build 2003.06.10
!==============================================================================

 IF TreeQ.szHelpFile
    PopupMgr.AddItem('&Help','Help')
 END

 PopupMgr.AddItem('&Notes','Notes')

 IF TreeQ:wIcon = ICON:CLASS OR TreeQ:wIcon = ICON:NEWCLASS
    PopupMgr.AddItem('&Properties','Properties','Notes',1)
 END

 IF (TreeQ:wIcon = ICON:PROPERTY OR TreeQ:wIcon = ICON:STRUCTURE)
    IF INSTRING('&',TreeQ.szText)
       IF srcIsClassReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName,lObjectId)
          PopupMgr.AddItem('-','Separator5')
          PopupMgr.AddItem('Hyper&link','Hyperlink')
          ClassQ.szClassName = szObjectName
          GET(ClassQ,+ClassQ.szClassName)
          szObjectType = CHOOSE(ClassQ:bInterface=TRUE,'INTERFACE','CLASS')
          bSeparate = TRUE
       ELSIF srcIsStructureReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName)
          PopupMgr.AddItem('-','Separator5')
          PopupMgr.AddItem('Hyper&link','Hyperlink')
          szObjectType = 'STRUCTURE'
          bSeparate = TRUE
       END
    ELSIF INSTRING('LIKE(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('LIKE(',UPPER(TreeQ.szText),1)+5 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          PopupMgr.AddItem('-','Separator5')
          PopupMgr.AddItem('Hyper&link','Hyperlink')
          szObjectType = 'STRUCTURE'
          bSeparate = TRUE
       END
    ELSIF INSTRING('GROUP(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('GROUP(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          PopupMgr.AddItem('-','Separator5')
          PopupMgr.AddItem('Hyper&link','Hyperlink')
          szObjectType = 'STRUCTURE'
          bSeparate = TRUE
       END
    ELSIF INSTRING('QUEUE(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('QUEUE(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          PopupMgr.AddItem('-','Separator5')
          PopupMgr.AddItem('Hyper&link','Hyperlink')
          szObjectType = 'STRUCTURE'
          bSeparate = TRUE
       END
    END
 END

 PopupMgr.AddItem('-','Separator6')
 PopupMgr.AddItem('&View','View')

 !==============================================================================
 !new code build 2003.08.12
 !==============================================================================
 IF glo:bCurrentView = VIEW:EQUATES
    J = POINTER(TreeQ)
    GET(TreeQ,1)
    IF TreeQ.szText <> '*EQUATES*'
       PopupMgr.AddItem('-','Separator7')
       PopupMgr.AddItem('&Sort','Sort')

       PopupMgr.AddItem('&Alphabetic','Alphabetic','Sort',2)
       PopupMgr.AddItem('&Canonical','Canonical','Sort',2)
    END
    GET(TreeQ,J)
 END
 !==============================================================================
 !end of new code build 2003.08.12
 !==============================================================================

 PopupMgr.AddItem('&Classes','Classes','View',2)
 PopupMgr.AddItemEvent('Classes',EVENT:Accepted,?bViewClasses)
 PopupMgr.SetItemCheck('Classes',bViewClasses)
 PopupMgr.SetItemEnable('Classes',CHOOSE(?bViewClasses{PROP:Disable}=TRUE,FALSE,TRUE))

 PopupMgr.AddItem('&Interfaces','Interfaces','Classes',2)
 PopupMgr.AddItemEvent('Interfaces',EVENT:Accepted,?bViewInterfaces)
 PopupMgr.SetItemCheck('Interfaces',bViewInterfaces)
 PopupMgr.SetItemEnable('Interfaces',CHOOSE(?bViewInterfaces{PROP:Disable}=TRUE,FALSE,TRUE))

 PopupMgr.AddItem('Call &Tree','CallTree','Interfaces',2)
 PopupMgr.AddItemEvent('CallTree',EVENT:Accepted,?bViewCallTree)
 PopupMgr.SetItemCheck('CallTree',bViewCallTree)
 PopupMgr.SetItemEnable('CallTree',CHOOSE(?bViewCallTree{PROP:Disable}=TRUE,FALSE,TRUE))

 PopupMgr.AddItem('&Structures','Structures','CallTree',2)
 PopupMgr.AddItemEvent('Structures',EVENT:Accepted,?bViewStructures)
 PopupMgr.SetItemCheck('Structures',bViewStructures)
 PopupMgr.SetItemEnable('Structures',CHOOSE(?bViewStructures{PROP:Disable}=TRUE,FALSE,TRUE))

 PopupMgr.AddItem('&Equates','Equates','Structures',2)
 PopupMgr.AddItemEvent('Equates',EVENT:Accepted,?bViewEquates)
 PopupMgr.SetItemCheck('Equates',bViewEquates)
 PopupMgr.SetItemEnable('Equates',CHOOSE(?bViewEquates{PROP:Disable}=TRUE,FALSE,TRUE))

 IF glo:bCurrentView = VIEW:CLASSES
    PopupMgr.AddItem('-','Separator7','Equates',2)
    PopupMgr.AddItem('&Sparse Tree','SparseTree','Separator7',2)
    PopupMgr.AddItemEvent('SparseTree',EVENT:Accepted,?glo:bShowSparseTrees)
    PopupMgr.SetItemCheck('SparseTree',glo:bShowSparseTrees)
 END

 PopupMgr.AddItem('D&eclaration','EditDeclaration','Edit',2)

 IF bEditDefinition
    PopupMgr.AddItem('De&finition','EditDefinition','EditDeclaration',2)
    IF bEditSource
       PopupMgr.AddItem('&Source','EditSource','EditDefinition',2)
    END
 ELSE
    IF bEditSource
       PopupMgr.AddItem('&Source','EditSource','EditDeclaration',2)
    END
 END
!==============================================================================
!end new code build 2003.06.10
!==============================================================================

 PopupString = PopupMgr.Ask()

 CASE PopupString
   OF 'Help'
      IF UPPER(SUB(TreeQ.szHelpFile,LEN(TreeQ.szHelpFile)-2,3)) = 'CHM'
         IF oHH &= NULL
            oHH &= NEW tagHTMLHelp
            oHH.Init(TreeQ.szHelpFile)
         ELSE
            oHH.SetHelpFile( TreeQ.szHelpFile)
         END
         I = INSTRING(':',TreeQ.szContextString)
         IF I > 0
            oHH.KeyWordLookup(SUB(TreeQ.szContextString,1,I-1))
         ELSE
            oHH.KeyWordLookup(TreeQ.szContextString)
         END
         oHH.KeyWordLookup(TreeQ.szContextString)
         !oHH.ShowTopic(TreeQ.szContextString)
         oHH.SetHelpFile( 'ABCVIEW.CHM' )
      ELSE
         HELP(TreeQ.szHelpFile,TreeQ.szContextString)
         HELP('abcview.hlp')
      END

   OF 'Declaration'
      loc:bForceEdit = glo:bForceEdit
      glo:bForceEdit = FALSE
      CASE TreeQ:wIcon
        OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
           srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
        OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
           srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
        OF ICON:METHOD
           CASE glo:bCurrentView
             OF VIEW:CLASSES OROF VIEW:CALLS
                S" = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
                I = INSTRING('.',S")
                IF I
                   ClassQ.szClassSort = UPPER(S"[1 : I-1])
                   GET(ClassQ,+ClassQ.szClassSort)
                   srcViewAsciiFile(ClassQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
                ELSE
                   IF TreeQ.lIncludeId
                      srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
                   ELSE
                      srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
                   END
                END
           ELSE
              srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
           END
        OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
           CASE glo:bCurrentView
             OF VIEW:CLASSES
                ClassQ.szClassSort = UPPER(TreeQ.szText)
                GET(ClassQ,+ClassQ.szClassSort)
                srcViewAsciiFile(ClassQ.lIncludeId,ClassQ.lLineNum,ViewerThreadQ)
           ELSE
                srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
           END
      ELSE
           srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
      END
      glo:bForceEdit = loc:bForceEdit
   OF 'Definition'
      loc:bForceEdit = glo:bForceEdit
      glo:bForceEdit = FALSE
      srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lSourceLine,ViewerThreadQ)
      glo:bForceEdit = loc:bForceEdit
   OF 'Source'
      J = POINTER(TreeQ)
      K = ABS(TreeQ.lLevel)
      LOOP I = J TO 1 BY -1
        GET(TreeQ,I)
        IF ABS(TreeQ.lLevel) < K
           BREAK
        END
      END
      lModuleId = TreeQ.lModuleId
      GET(TreeQ,J)
      loc:bForceEdit = glo:bForceEdit
      glo:bForceEdit = FALSE
      srcViewAsciiFile(lModuleId,TreeQ.lOccurranceLine,ViewerThreadQ)
      glo:bForceEdit = loc:bForceEdit
   OF 'Callers'
      winViewCallers(TreeQ.szSearch)
   OF 'EditDeclaration'
      loc:bForceEdit = glo:bForceEdit
      glo:bForceEdit = TRUE
      CASE TreeQ:wIcon
        OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
           srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
        OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
           srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
        OF ICON:METHOD
           CASE glo:bCurrentView
             OF VIEW:CLASSES OROF VIEW:CALLS
                S" = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
                I = INSTRING('.',S")
                IF I
                   ClassQ.szClassSort = UPPER(S"[1 : I-1])
                   GET(ClassQ,+ClassQ.szClassSort)
                   srcViewAsciiFile(ClassQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
                ELSE
                   IF TreeQ.lIncludeId
                      srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
                   ELSE
                      srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
                   END
                END
           ELSE
              srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
           END
        OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
           CASE glo:bCurrentView
             OF VIEW:CLASSES
                ClassQ.szClassSort = UPPER(TreeQ.szText)
                GET(ClassQ,+ClassQ.szClassSort)
                srcViewAsciiFile(ClassQ.lIncludeId,ClassQ.lLineNum,ViewerThreadQ)
           ELSE
                srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
           END
      ELSE
           srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
      END
      glo:bForceEdit = loc:bForceEdit
   OF 'EditDefinition'
      loc:bForceEdit = glo:bForceEdit
      glo:bForceEdit = TRUE
      srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lSourceLine,ViewerThreadQ)
      glo:bForceEdit = loc:bForceEdit
   OF 'EditSource'
      J = POINTER(TreeQ)
      K = ABS(TreeQ.lLevel)
      LOOP I = J TO 1 BY -1
        GET(TreeQ,I)
        IF ABS(TreeQ.lLevel) < K
           BREAK
        END
      END
      lModuleId = TreeQ.lModuleId
      GET(TreeQ,J)
      loc:bForceEdit = glo:bForceEdit
      glo:bForceEdit = TRUE
      srcViewAsciiFile(lModuleId,TreeQ.lOccurranceLine,ViewerThreadQ)
      glo:bForceEdit = loc:bForceEdit
!==============================================================================
!end of new code build 2003.06.10
!==============================================================================
   OF 'Notes'
      POST(EVENT:Accepted,?ViewNoteButton)
   OF 'Properties'
      ClassQ.szClassSort = UPPER(TreeQ.szText)
      GET(ClassQ,+ClassQ.szClassSort)
      CategoryQ.szClassName = ClassQ.szClassName
      GET(CategoryQ,+CategoryQ.szClassName)
      IF ~winClassProperties(CategoryQueue)
         !loc:TreeQ:szText = TreeQ.szText       !2004.02.26 RR
         srcRefreshTree()
         DO FillClassNameQ
         J = RECORDS(TreeQ)
         LOOP I = 1 TO J
           GET(TreeQ,I)
           !IF TreeQ.szText = loc:TreeQ:szText
           IF TreeQ.szText = sav:TreeQ:szText
              BREAK
           END
         END
         IF I > J
            GET(TreeQ,1)
            ?TreeList{PROP:Selected} = 1
         ELSE
            ?TreeList{PROP:Selected} = I
         END

         !now find the base node and expand it
         J = POINTER(TreeQ)
         LOOP I = J to 1 BY -1
           GET(TreeQ,I)
           IF ABS(TreeQ.lLevel) = 1
              TreeQ.lLevel = ABS(TreeQ.lLevel)
              PUT(TreeQ)
              BREAK
           END
         END

         !get our queue record
         GET(TreeQ,J)
      END
   OF 'Hyperlink'
      DO SetupHyperlink
      DO ProcessHyperlink
!==============================================================================
!new code build 2003.08.18
!==============================================================================
   OF 'Alphabetic'
      glo:bEnumSort = 0  !alphabetic
      SORT(TreeQ,+TreeQ:lModuleId,+TreeQ:lLevel,+TreeQ:szText) !+TreeQ:szSearch)
      GET(TreeQ,2)
      sav:TreeQ:lLineNum = TreeQ:lLineNum
      sav:TreeQ:lIncludeId = TreeQ:lIncludeId
      GET(TreeQ,1)
      TreeQ:lLineNum = sav:TreeQ:lLineNum
      TreeQ:lIncludeId = sav:TreeQ:lIncludeId
      PUT(TreeQ)
      DO ProcessNewSelection
   OF 'Canonical'
      glo:bEnumSort = 1  !canonical
      SORT(TreeQ,+TreeQ:lModuleId,+TreeQ:lLevel,+TreeQ:lLineNum)
      GET(TreeQ,2)
      sav:TreeQ:lLineNum = TreeQ:lLineNum
      sav:TreeQ:lIncludeId = TreeQ:lIncludeId
      GET(TreeQ,1)
      TreeQ:lLineNum = sav:TreeQ:lLineNum
      TreeQ:lIncludeId = sav:TreeQ:lIncludeId
      PUT(TreeQ)
      DO ProcessNewSelection
!==============================================================================
!end of new code build 2003.08.18
!==============================================================================
 END

 EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ObjectPopupMenu   ROUTINE
 DATA
ObjectPopupString   CSTRING(21)

 CODE

 !Remove Object Popup Manager Menu Options
 ObjectPopupMgr.DeleteItem('AllClasses')
 ObjectPopupMgr.DeleteItem('AbcClasses')
 ObjectPopupMgr.DeleteItem('NonClasses')
 ObjectPopupMgr.DeleteItem('AddClass')
 ObjectPopupMgr.DeleteItem('Template')

 !Set Popup Manager Menu Options
 IF ?ObjectDropList{PROPLIST:MouseDownZone} = LISTZONE:header
    ObjectPopupMgr.AddItem('&All Classes','AllClasses')
    ObjectPopupMgr.AddItem('&ABC Classes','AbcClasses')
    ObjectPopupMgr.AddItem('&Non-ABC','NonClasses')
    CASE glo:bABCOnly
      OF 0
         ObjectPopupMgr.SetItemCheck('AllClasses',TRUE)
      OF 1
         ObjectPopupMgr.SetItemCheck('AbcClasses',TRUE)
      OF 2
         ObjectPopupMgr.SetItemCheck('NonClasses',TRUE)
    END
 ELSE
    ObjectPopupMgr.AddItem('&Add Class Wizard...','AddClass')
    IF ~RECORDS(incTemplateQ) OR ~RECORDS(clwTemplateQ)
       ObjectPopupMgr.SetItemEnable('AddClass',FALSE)
    END

    CASE glo:bCurrentView
      OF VIEW:CLASSES
         ObjectPopupMgr.AddItem('&Generate Wrapper...','Template')
         IF ~RECORDS(tplTemplateQ)
            ObjectPopupMgr.SetItemEnable('Template',FALSE)
         END
    END
 END
 ObjectPopupString = ObjectPopupMgr.Ask()

 CASE ObjectPopupString
   OF 'AllClasses'
      glo:bABCOnly = 0
      DO ABCOnlyFlagChanged
   OF 'AbcClasses'
      glo:bABCOnly = 1
      DO ABCOnlyFlagChanged
   OF 'NonClasses'
      glo:bABCOnly = 2
      DO ABCOnlyFlagChanged
   OF 'AddClass'
      IF winAddClass() = Level:Benign           !call the add class dialog
         loc:ForceSmartScan = TRUE
         POST(EVENT:Accepted,?RefreshButton)
      END
   OF 'Template'
      GET(ClassNameQ,CHOICE(?ObjectDropList))
      IF winGenerateTemplate(ClassNameQ.szClassName) = Level:Benign   !call the Template Generator
      END
 END

 EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ABCOnlyFlagChanged   ROUTINE
   CASE glo:bCurrentView
     OF VIEW:CLASSES OROF VIEW:INTERFACES
        CASE glo:bABCOnly
        OF 0
           ?ObjectDropList{PROP:Format} = '252L(2)Y|~All Classes~C@s63@'
        OF 1
           ?ObjectDropList{PROP:Format} = '252L(2)Y|~ABC Classes~C@s63@'
        OF 2
           ?ObjectDropList{PROP:Format} = '252L(2)Y|~Non-ABC Classes~C@s63@'
        END
        POST(EVENT:Accepted,?glo:szCategoryChoice)
     OF VIEW:CALLS
        CASE glo:bABCOnly
        OF 0
           ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~All Classes~C@s63@'
        OF 1
           ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~ABC Classes~C@s63@'
        OF 2
           ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~Non-ABC Classes~C@s63@'
        END
        POST(EVENT:Accepted,?glo:szCategoryChoice)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupHyperlink  ROUTINE
   IF RECORDS(HistoryQueue)
      GET(HistoryQueue,RECORDS(HistoryQueue))
   ELSE
      CLEAR(HistoryQueue)
   END
   IF HistoryQueue.ObjectName <> TreeQ.szClassName
      HistoryQueue.ObjectName = TreeQ.szClassName   !szObjectName
      HistoryQueue.ObjectView = glo:bCurrentView
      CASE HistoryQueue.ObjectView
      OF VIEW:CLASSES
         HistoryQueue.lObjectDropListPointer = POINTER(ClassNameQ)
      OF VIEW:STRUCTURES
         HistoryQueue.lObjectDropListPointer = POINTER(StructNameQ)
      OF VIEW:INTERFACES
         HistoryQueue.lObjectDropListPointer = POINTER(ClassNameQ)
      END
      HistoryQueue.szText = TreeQ.szText
      HistoryQueue.bProtected = glo:bShowProtected
      HistoryQueue.bPrivate = glo:bShowPrivate
      HistoryQueue.bModule = glo:bShowModule
      ADD(HistoryQueue)
   ELSE
      HistoryQueue.szText = TreeQ.szText
      PUT(HistoryQueue)
   END
   lHistoryPointer = RECORDS(HistoryQueue)+1
   ?HistoryList{PROP:Selected} = lHistoryPointer

   !enable/disable buttons
   ThisWindow.Reset()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ProcessHyperlink    ROUTINE
   bHyperLinking = TRUE

   CASE szObjectType
   OF 'CLASS'
      IF lLatchControl <> ?ClassRegion
         DO SetupClassView
      END
      ClassNameQ:szSortName = UPPER(szObjectName)
      GET(ClassNameQ,+ClassNameQ:szSortName)
      ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
      DISPLAY(?ObjectDropList)
      SELECT(?ObjectDropList)
      POST(EVENT:Accepted,?ObjectDropList)

   OF 'STRUCTURE'
      IF lLatchControl <> ?StructureRegion
         DO SetupStructureView
      END
      StructNameQ.szStructureSort = UPPER(szObjectName)
      GET(StructNameQ,+StructNameQ.szStructureSort)
      ?ObjectDropList{PROP:Selected} = POINTER(StructNameQ)
      DISPLAY(?ObjectDropList)
      SELECT(?ObjectDropList)
      POST(EVENT:Accepted,?ObjectDropList)

   OF 'INTERFACE'
      IF lLatchControl <> ?InterfaceRegion
         DO SetupInterfaceView
      END
      ClassNameQ:szSortName = UPPER(szObjectName)
      GET(ClassNameQ,+ClassNameQ:szSortName)
      ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
      DISPLAY(?ObjectDropList)
      SELECT(?ObjectDropList)
      POST(EVENT:Accepted,?ObjectDropList)

   END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ViewSource  ROUTINE
  CASE TreeQ:wIcon
    OF ICON:METHOD
       IF glo:bCurrentView <> VIEW:INTERFACES     |
       AND TreeQ.lModuleId <> 0                   |
       AND TreeQ.lSourceLine
          !Definition
          srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lSourceLine,ViewerThreadQ)
       ELSE
          !Declaration
          CASE glo:bCurrentView
            OF VIEW:CLASSES OROF VIEW:CALLS
               S" = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
               I = INSTRING('.',S")
               IF I
                  ClassQ.szClassSort = UPPER(S"[1 : I-1])
                  GET(ClassQ,+ClassQ.szClassSort)
                     srcViewAsciiFile(ClassQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
               ELSE
                  srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
               END
          ELSE
             srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
          END
       END
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lLineNum,ViewerThreadQ)
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            srcViewAsciiFile(ClassQ.lIncludeId,ClassQ.lLineNum,ViewerThreadQ)
       ELSE
            IF TreeQ.lModuleId
               srcViewAsciiFile(TreeQ.lModuleId,TreeQ.lSourceLine,ViewerThreadQ)
            ELSE
               srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
            END
       END
  ELSE
       srcViewAsciiFile(TreeQ.lIncludeId,TreeQ.lLineNum,ViewerThreadQ)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetTreeStyles   ROUTINE
  ?TreeList{PROPSTYLE:TextColor,STYLE:NORMAL} = COLOR:BLACK
  ?TreeList{PROPSTYLE:BackColor,STYLE:NORMAL} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:NORMAL} = glo:lSelectedFore    !COLOR:HIGHLIGHTTEXT    !COLOR:BLACK
  ?TreeList{PROPSTYLE:BackSelected,STYLE:NORMAL} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:NORMAL} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:NORMAL} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:NORMAL} = glo:FontStyle

  ?TreeList{PROPSTYLE:TextColor,STYLE:MODULE} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:MODULE} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:MODULE} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:MODULE} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:MODULE} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:MODULE} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:MODULE} = glo:FontStyle

  ?TreeList{PROPSTYLE:TextColor,STYLE:PRIVATE} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PRIVATE} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PRIVATE} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PRIVATE} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PRIVATE} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PRIVATE} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PRIVATE} = glo:FontStyle

  ?TreeList{PROPSTYLE:TextColor,STYLE:PROTECTED} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PROTECTED} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PROTECTED} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PROTECTED} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PROTECTED} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PROTECTED} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PROTECTED} = glo:FontStyle

  ?TreeList{PROPSTYLE:TextColor,STYLE:VIRTUAL} = glo:lVirtualColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:VIRTUAL} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:VIRTUAL} = glo:lVirtualColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:VIRTUAL} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:VIRTUAL} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:VIRTUAL} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:VIRTUAL} = glo:FontStyle

  ?TreeList{PROPSTYLE:TextColor,STYLE:NORMAL_NEW} = COLOR:BLACK
  ?TreeList{PROPSTYLE:BackColor,STYLE:NORMAL_NEW} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:NORMAL_NEW} = glo:lSelectedFore    !COLOR:HIGHLIGHTTEXT    !COLOR:BLACK
  ?TreeList{PROPSTYLE:BackSelected,STYLE:NORMAL_NEW} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:NORMAL_NEW} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:NORMAL_NEW} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:NORMAL_NEW} = FONT:BOLD

  ?TreeList{PROPSTYLE:TextColor,STYLE:MODULE_NEW} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:MODULE_NEW} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:MODULE_NEW} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:MODULE_NEW} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:MODULE_NEW} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:MODULE_NEW} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:MODULE_NEW} = FONT:BOLD

  ?TreeList{PROPSTYLE:TextColor,STYLE:PRIVATE_NEW} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PRIVATE_NEW} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PRIVATE_NEW} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PRIVATE_NEW} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PRIVATE_NEW} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PRIVATE_NEW} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PRIVATE_NEW} = FONT:BOLD

  ?TreeList{PROPSTYLE:TextColor,STYLE:PROTECTED_NEW} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PROTECTED_NEW} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PROTECTED_NEW} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PROTECTED_NEW} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PROTECTED_NEW} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PROTECTED_NEW} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PROTECTED_NEW} = FONT:BOLD

  ?TreeList{PROPSTYLE:TextColor,STYLE:VIRTUAL_NEW} = glo:lVirtualColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:VIRTUAL_NEW} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:VIRTUAL_NEW} = glo:lVirtualColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:VIRTUAL_NEW} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:VIRTUAL_NEW} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:VIRTUAL_NEW} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:VIRTUAL_NEW} = FONT:BOLD

  ?TreeList{PROPSTYLE:TextColor,STYLE:NORMAL_HYPERLINK} = glo:lHyperlinkColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:NORMAL_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:NORMAL_HYPERLINK} = glo:lHyperlinkColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:NORMAL_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:NORMAL_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:NORMAL_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:NORMAL_HYPERLINK} = glo:FontStyle + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:MODULE_HYPERLINK} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:MODULE_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:MODULE_HYPERLINK} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:MODULE_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:MODULE_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:MODULE_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:MODULE_HYPERLINK} = glo:FontStyle + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:PRIVATE_HYPERLINK} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PRIVATE_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PRIVATE_HYPERLINK} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PRIVATE_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PRIVATE_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PRIVATE_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PRIVATE_HYPERLINK} = glo:FontStyle + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:PROTECTED_HYPERLINK} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PROTECTED_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PROTECTED_HYPERLINK} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PROTECTED_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PROTECTED_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PROTECTED_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PROTECTED_HYPERLINK} = glo:FontStyle + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:NORMAL_NEW_HYPERLINK} = glo:lHyperlinkColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:NORMAL_NEW_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:NORMAL_NEW_HYPERLINK} = glo:lHyperlinkColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:NORMAL_NEW_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:NORMAL_NEW_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:NORMAL_NEW_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:NORMAL_NEW_HYPERLINK} = FONT:BOLD + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:MODULE_NEW_HYPERLINK} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:MODULE_NEW_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:MODULE_NEW_HYPERLINK} = glo:lModuleColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:MODULE_NEW_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:MODULE_NEW_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:MODULE_NEW_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:MODULE_NEW_HYPERLINK} = FONT:BOLD + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:PRIVATE_NEW_HYPERLINK} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PRIVATE_NEW_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PRIVATE_NEW_HYPERLINK} = glo:lPrivateColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PRIVATE_NEW_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PRIVATE_NEW_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PRIVATE_NEW_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PRIVATE_NEW_HYPERLINK} = FONT:BOLD + FONT:UNDERLINE

  ?TreeList{PROPSTYLE:TextColor,STYLE:PROTECTED_NEW_HYPERLINK} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackColor,STYLE:PROTECTED_NEW_HYPERLINK} = COLOR:WHITE
  ?TreeList{PROPSTYLE:TextSelected,STYLE:PROTECTED_NEW_HYPERLINK} = glo:lProtectedColor
  ?TreeList{PROPSTYLE:BackSelected,STYLE:PROTECTED_NEW_HYPERLINK} = glo:lSelectedBack
  ?TreeList{PROPSTYLE:FontName,STYLE:PROTECTED_NEW_HYPERLINK} = glo:Typeface
  ?TreeList{PROPSTYLE:FontSize,STYLE:PROTECTED_NEW_HYPERLINK} = glo:FontSize
  ?TreeList{PROPSTYLE:FontStyle,STYLE:PROTECTED_NEW_HYPERLINK} = FONT:BOLD + FONT:UNDERLINE

  ?TreeList{PROPLIST:BackColor} = COLOR:WHITE

  ! Object List
  ?ObjectDropList{PROPSTYLE:TextColor,STYLE:NORMAL} = COLOR:BLACK
  ?ObjectDropList{PROPSTYLE:BackColor,STYLE:NORMAL} = COLOR:WHITE
  ?ObjectDropList{PROPSTYLE:TextSelected,STYLE:NORMAL} = glo:lSelectedFore  !COLOR:HIGHLIGHTTEXT    !COLOR:BLACK
  ?ObjectDropList{PROPSTYLE:BackSelected,STYLE:NORMAL} = glo:lSelectedBack
  ?ObjectDropList{PROPSTYLE:FontName,STYLE:NORMAL} = glo:Typeface
  ?ObjectDropList{PROPSTYLE:FontSize,STYLE:NORMAL} = glo:FontSize
  ?ObjectDropList{PROPSTYLE:FontStyle,STYLE:NORMAL} = glo:FontStyle

  ?ObjectDropList{PROPSTYLE:TextColor,STYLE:NORMAL_NEW} = COLOR:BLACK
  ?ObjectDropList{PROPSTYLE:BackColor,STYLE:NORMAL_NEW} = COLOR:WHITE
  ?ObjectDropList{PROPSTYLE:TextSelected,STYLE:NORMAL_NEW} = glo:lSelectedFore  !COLOR:HIGHLIGHTTEXT    !COLOR:BLACK
  ?ObjectDropList{PROPSTYLE:BackSelected,STYLE:NORMAL_NEW} = glo:lSelectedBack
  ?ObjectDropList{PROPSTYLE:FontName,STYLE:NORMAL_NEW} = glo:Typeface
  ?ObjectDropList{PROPSTYLE:FontSize,STYLE:NORMAL_NEW} = glo:FontSize
  ?ObjectDropList{PROPSTYLE:FontStyle,STYLE:NORMAL_NEW} = FONT:BOLD

  ?ObjectDropList{PROP:SelectedFillColor} = glo:lSelectedBack

  ?glo:szCategoryChoice{PROP:SelectedColor}     = glo:lSelectedFore
  ?glo:szCategoryChoice{PROP:SelectedFillColor} = glo:lSelectedBack
  ?glo:szCategoryChoice{PROP:Drop}              = glo:CategoryDropCount

  ?ModuleBox{PROP:Fill}    = glo:lModuleColor
  ?PrivateBox{PROP:Fill}   = glo:lPrivateColor
  ?ProtectedBox{PROP:Fill} = glo:lProtectedColor
  ?VirtualBox{PROP:Fill}   = glo:lVirtualColor

  CASE glo:Background
  OF 1  !Color
     window{PROP:Wallpaper} = ''
     window{PROP:Color} = glo:Color1
  OF 2  !Wallpaper
     window{PROP:Wallpaper} = glo:szWallpaper1
     window{PROP:Tiled} = glo:Tiled1
     window{PROP:Color} = COLOR:NONE
  OF 3  !None
     window{PROP:Wallpaper} = ''
     window{PROP:Color} = COLOR:NONE
  END

  J = LASTFIELD()
  LOOP I = 0 TO J
     IF INRANGE(I,?File,?Panel4-1)  !Skip Menu
        CYCLE
     END
     CASE I
     OF ?LoadingString OROF ?SavingString OROF ?ProcessString   |
     OROF ?loc:szAsciiFilename
        !Do Nothing
     OF ?AsciiBox
        SETFONT(I,,glo:FontSize,glo:FontColor,glo:FontStyle,0)
     OF ?TreeList
        SETFONT(I,glo:Typeface,glo:FontSize+2,glo:FontColor,glo:FontStyle,0)
     ELSE
        SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
     END
  END

  ?glo:bShowProtected{PROP:Background} = ?Panel4:2{PROP:Fill}
  ?glo:bShowPrivate{PROP:Background} = ?Panel4:2{PROP:Fill}
  ?glo:bShowModule{PROP:Background} = ?Panel4:2{PROP:Fill}

  ?ProgressBox{PROP:Color} = COLOR:NAVY !glo:lSelectedBack
  ?ProgressBox{PROP:Fill}  = COLOR:NAVY !glo:lSelectedBack
  ?ProgressBox:2{PROP:Color} = COLOR:NAVY !glo:lSelectedBack
  ?ProgressBox:2{PROP:Fill}  = COLOR:NAVY !glo:lSelectedBack

  CASE glo:bClarionVersion
    OF CWVERSION_C2 OROF CWVERSION_C4 OROF CWVERSION_C5 OROF CWVERSION_C5EE
       DISABLE(?InterfaceRegion)
  ELSE
       ENABLE(?InterfaceRegion)
  END

  IF glo:bUseHTMLHelp
     ?HelpSearch{PROP:STD} = ''
     ?HelpOnHelp{PROP:STD} = ''

     IF oHH &= NULL
        oHH &= NEW tagHTMLHelp
        oHH.Init( 'ABCVIEW.CHM' )
        oHH.SetTopic('Main_Window.htm')
     END

  ELSE
     ?HelpSearch{PROP:STD} = STD:HelpSearch
     ?HelpOnHelp{PROP:STD} = STD:HelpOnHelp

     IF ~oHH &= NULL
        oHH.Kill()
        DISPOSE( oHH )
     END

     ALIAS()
  END
  IF bAddToClarionMenu = FALSE
     HIDE(?HelpAddtoClarionMenu)
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetAsciiBoxStyle    ROUTINE
  ?AsciiBox{PROP:HSCROLL} = FALSE
  ?AsciiBox{PROP:FORMAT} = '24L(2)|~Line#~L(0)@n05@250L(2)Y~' & CLIP(AsciiFileName) & '~S(1024)@s255@'
  ?AsciiBox{PROP:SelectedColor} = COLOR:BLACK
  ?AsciiBox{PROP:SelectedFillColor} = glo:lSelectedBack
  ?AsciiBox{PROPLIST:BackColor,1} = COLOR:BTNFACE

  ?AsciiBox{PROPSTYLE:TextColor,1} = COLOR:BLACK
  ?AsciiBox{PROPSTYLE:BackColor,1} = COLOR:WHITE
  ?AsciiBox{PROPSTYLE:TextSelected,1} = glo:lSelectedFore  !COLOR:BLACK
  ?AsciiBox{PROPSTYLE:BackSelected,1} = glo:lSelectedBack
  ?AsciiBox{PROPSTYLE:FontName,1} = 'Courier New'
  ?AsciiBox{PROPSTYLE:FontSize,1} = glo:FontSize
  ?AsciiBox{PROPSTYLE:FontStyle,1} = glo:FontStyle

  ?AsciiBox{PROPSTYLE:TextColor,2} = glo:lHighlightColor2
  ?AsciiBox{PROPSTYLE:BackColor,2} = COLOR:BTNFACE
  ?AsciiBox{PROPSTYLE:TextSelected,2} = glo:lHighlightColor2
  ?AsciiBox{PROPSTYLE:BackSelected,2} = glo:lSelectedBack
  ?AsciiBox{PROPSTYLE:FontName,2} = 'Courier New'
  ?AsciiBox{PROPSTYLE:FontSize,2} = glo:FontSize
  ?AsciiBox{PROPSTYLE:FontStyle,2} = glo:FontStyle

  ?AsciiBox{PROPSTYLE:TextColor,3} = glo:lHighlightColor1
  ?AsciiBox{PROPSTYLE:BackColor,3} = COLOR:BTNFACE
  ?AsciiBox{PROPSTYLE:TextSelected,3} = glo:lHighlightColor1
  ?AsciiBox{PROPSTYLE:BackSelected,3} = glo:lSelectedBack
  ?AsciiBox{PROPSTYLE:FontName,3} = 'Courier New'
  ?AsciiBox{PROPSTYLE:FontSize,3} = glo:FontSize
  ?AsciiBox{PROPSTYLE:FontStyle,3} = glo:FontStyle
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SyncQueues  ROUTINE
 CASE TreeQ:wIcon
   OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
      StructureQ.szStructureName = TreeQ.szClassName
      StructureQ.szDataLabel = TreeQ.szContextString
      GET(StructureQ,+StructureQ.szStructureName,+StructureQ.szDataLabel)
   OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
      EnumQ.szEnumName = TreeQ.szClassName
      EnumQ.szEnumLabel = TreeQ.szContextString
      GET(EnumQ,+EnumQ.szEnumName,+EnumQ.szEnumLabel)
   OF ICON:METHOD
      IF glo:bCurrentView = VIEW:CALLS
         CallNameQ.szSortName = UPPER(TreeQ.szText)
         GET(CallNameQ,+CallNameQ.szSortName)
      END
 END
 CASE glo:bCurrentView
   OF VIEW:CLASSES OROF VIEW:CALLS OROF VIEW:INTERFACES
      ClassQ.szClassSort = UPPER(TreeQ.szClassName)
      GET(ClassQ,+ClassQ.szClassSort)
      ASSERT(~ERRORCODE())
 END
 EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DrawLatchBox    ROUTINE
  bViewClasses = FALSE
  bViewInterfaces = FALSE
  bViewCallTree = FALSE
  bViewStructures = FALSE
  bViewEquates = FALSE
  ENABLE(?bViewClasses,?bViewEquates)
  ENABLE(?ClassRegion,?EquateRegion)

  DISABLE(lLatchControl)   !
  CASE lLatchControl
  OF ?ClassRegion
     bViewClasses = TRUE
     DISABLE(?bViewClasses)
  OF ?InterfaceRegion
     bViewInterfaces = TRUE
     DISABLE(?bViewInterfaces)
  OF ?TreeRegion
     bViewCallTree = TRUE
     DISABLE(?bViewCallTree)
  OF ?StructureRegion
     bViewStructures = TRUE
     DISABLE(?bViewStructures)
  OF ?EquateRegion
     bViewEquates = TRUE
     DISABLE(?bViewEquates)
  END
  DISPLAY(?bViewClasses,?bViewEquates)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ProcessNewSelection ROUTINE
  DATA
lObjectId           LONG
LineNo              LONG
ModuleId            LONG
I                   LONG
J                   LONG
K                   LONG
szAsciiFilename     CSTRING(256)

  CODE
  CASE glo:bClarionVersion
    OF CWVERSION_C2
       szCaptionVersion = '2.0'
    OF CWVERSION_C4
       szCaptionVersion = '4.0'
    OF CWVERSION_C5
       szCaptionVersion = '5.0'
    OF CWVERSION_C5EE
       szCaptionVersion = '5.0 EE'
    OF CWVERSION_C55
       szCaptionVersion = '5.5'
    OF CWVERSION_C55EE
       szCaptionVersion = '5.5 EE'
    OF CWVERSION_C60
       szCaptionVersion = '6.0'
    OF CWVERSION_C60EE
       szCaptionVersion = '6.0 EE'
    OF CWVERSION_C70
       szCaptionVersion = '7'
    OF CWVERSION_C80
       szCaptionVersion = '8'
    OF CWVERSION_C90
       szCaptionVersion = '9'
    OF CWVERSION_C100
       szCaptionVersion = '10'
  END
  CASE glo:bCurrentView
    OF VIEW:CLASSES OROF VIEW:INTERFACES
       szCaptionView = CHOOSE(glo:bCurrentView = VIEW:CLASSES,'Classes','Interfaces')
       ClassQ.szClassName = TreeQ.szClassName
       GET(ClassQ,+ClassQ.szClassName)
       szLastClassName = ClassNameQ.szClassName
    OF VIEW:STRUCTURES
       szCaptionView = 'Structures'
       szLastStructureName = StructNameQ.szStructureName
    OF VIEW:EQUATES
       szCaptionView = 'Equates'
       szLastEnumName = EnumNameQ.szEnumName
    OF VIEW:CALLS
       szCaptionView = 'Method Calls'
       szLastCallName = CallNameQ.szCallName
  END
  IF TreeQ:szHelpFile
     ENABLE(?HelpButton)
  ELSE
     DISABLE(?HelpButton)
  END

  IF (TreeQ:wIcon = ICON:PROPERTY OR TreeQ:wIcon = ICON:STRUCTURE)
     IF INSTRING('&',TreeQ.szText)
        IF srcIsClassReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName,lObjectId)
           ClassQ.szClassName = szObjectName
           GET(ClassQ,+ClassQ.szClassName)
           szObjectType = CHOOSE(ClassQ:bInterface=TRUE,'INTERFACE','CLASS')
           ENABLE(?HyperlinkButton)
        ELSIF srcIsStructureReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName)
           szObjectType = 'STRUCTURE'
           ENABLE(?HyperlinkButton)
        ELSE
           DISABLE(?HyperlinkButton)
        END
     ELSIF INSTRING('LIKE(',UPPER(TreeQ.szText),1)
          IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('LIKE(',UPPER(TreeQ.szText),1)+5 : INSTRING(')',TreeQ.szText)-1],szObjectName)
             szObjectType = 'STRUCTURE'
             ENABLE(?HyperlinkButton)
          END
     ELSIF INSTRING('GROUP(',UPPER(TreeQ.szText),1)
          IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('GROUP(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
             szObjectType = 'STRUCTURE'
             ENABLE(?HyperlinkButton)
          END
     ELSIF INSTRING('QUEUE(',UPPER(TreeQ.szText),1)
          IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('QUEUE(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
             szObjectType = 'STRUCTURE'
             ENABLE(?HyperlinkButton)
          END
     ELSE
        DISABLE(?HyperlinkButton)
     END
  ELSE
     DISABLE(?HyperlinkButton)
  END

  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     ?ViewNoteButton{PROP:Icon} = '~newnote.ico'
     IF glo:bShowTips
        IF hwndTT
           tt.updatetiptext(?ViewNoteButton{PROP:HANDLE},'Add User Notes',0)
        END
     END
  ELSE
     ?ViewNoteButton{PROP:Icon} = '~note.ico'
     IF glo:bShowTips
        IF hwndTT
           tt.updatetiptext(?ViewNoteButton{PROP:HANDLE},'View User Notes',0)
        END
     END
  END

  ?LoadingString{PROP:Hide} = TRUE

  Window{PROP:Text} = 'ClassViewer [Clarion ' & szCaptionVersion & ' - ' & szCaptionView & ']'

  !====================================================================
  !Code for AsciiViewer
  !====================================================================
  IF TreeQ:wIcon = ICON:METHOD              |
  AND glo:bCurrentView = VIEW:CLASSES       |
  AND TreeQ.lModuleId <> 0                  |
  AND TreeQ.lSourceLine <> 0                        !View Definition
      ModuleId = TreeQ.lModuleId
      LineNo = TreeQ.lSourceLine

  ELSIF glo:bCurrentView = VIEW:CALLS   |
     AND ABS(TreeQ.lLevel) > 1          |
     AND TreeQ.lOccurranceLine <> 0                 !View Source
        J = POINTER(TreeQ)
        K = ABS(TreeQ.lLevel)
        LOOP I = J TO 1 BY -1
          GET(TreeQ,I)
          IF ABS(TreeQ.lLevel) < K
             BREAK
          END
        END
        ModuleId = TreeQ.lModuleId
        GET(TreeQ,J)
        LineNo = TreeQ.lOccurranceLine
  ELSE                                              !View Declaration
     CASE TreeQ:wIcon
       OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
          ModuleId = TreeQ.lModuleId
          LineNo = TreeQ.lLineNum
       OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
          ModuleId = TreeQ.lModuleId
          LineNo = TreeQ.lLineNum
       OF ICON:METHOD
          ModuleId = TreeQ.lIncludeId
          LineNo = TreeQ.lLineNum
       OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
          ModuleId = TreeQ.lIncludeId
          LineNo = TreeQ.lLineNum
     ELSE
          ModuleId = TreeQ.lIncludeId
          LineNo = TreeQ.lLineNum
     END
  END

  OMIT('***',_Scintilla_)
  IF ModuleId = 0
     IF ViewerActive
        Viewer.Kill()
        ViewerActive = FALSE
     END
  ELSE
     ModuleQ.lModuleId = ModuleId
     GET(ModuleQ,+ModuleQ.lModuleId)
    ASSERT(~ERRORCODE())
     IF ViewerActive AND AsciiFilename <> ModuleQ.szModulePath & ModuleQ.szModuleName
        Viewer.Kill()
        ViewerActive = FALSE
     END
     IF ViewerActive = FALSE
        AsciiFilename = ModuleQ.szModulePath & ModuleQ.szModuleName
        ViewerActive = Viewer.Init(AsciiFile,A1:Textline,AsciiFilename,?AsciiBox,GlobalErrors,EnableSearch+EnablePrint)
        DO SetAsciiBoxStyle
     END
     Viewer.DisplayPage(LineNo)
  END
  !***

  COMPILE('***',_Scintilla_)
  IF ModuleId = 0
     IF ViewerActive
        SciControl.ClearBuffer()
        ViewerActive = FALSE
     END
  ELSE
     ModuleQ.lModuleId = ModuleId
     GET(ModuleQ,+ModuleQ.lModuleId)
    ASSERT(~ERRORCODE())
     IF ViewerActive AND AsciiFilename <> ModuleQ.szModulePath & ModuleQ.szModuleName
        SciControl.ClearBuffer()
        ViewerActive = FALSE
     END
     IF ViewerActive = FALSE
        szAsciiFilename = CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName)
        loc:szAsciiFilename = '  Filename:  ' & szAsciiFilename
        DISPLAY(?loc:szAsciiFilename)
        SciControl.SetReadOnly(FALSE)
        ViewerActive = SciControl.OpenFile(szAsciiFilename)
        IF ViewerActive = TRUE
           SciControl.SetReadOnly(TRUE)
        END
     END
     sciControl.GoToLine(LineNo + ?sciControl:Region{PROP:LineCount})
     SciControl.GoToLine(LineNo-1)
  END
  !***
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ExpandTree    ROUTINE
  J = RECORDS(TreeQ)
  LOOP I = 1 TO J
    GET(TreeQ,I)
    TreeQ.lLevel = ABS(TreeQ.lLevel)
    PUT(TreeQ)
  END
  GET(TreeQ,1)
  ?TreeList{PROP:Selected} = 1
  DISPLAY(?TreeList)
  SELECT(?TreeList)
  DO SaveTreeState
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ContractTree    ROUTINE
  DATA
ABS:TreeQ:lLevel    LIKE(TreeQ.lLevel)
  CODE
  J = RECORDS(TreeQ)
  GET(TreeQ,J)
  ABS:TreeQ:lLevel = ABS(TreeQ.lLevel)
  lLastLevel = ABS:TreeQ:lLevel
  LOOP I = J TO 1 BY -1
    GET(TreeQ,I)
    ABS:TreeQ:lLevel = ABS(TreeQ.lLevel)
    IF ABS:TreeQ:lLevel > lLastLevel
       lLastLevel = ABS:TreeQ:lLevel
       TreeQ.lLevel = ABS:TreeQ:lLevel
    ELSIF ABS:TreeQ:lLevel < lLastLevel
       lLastLevel = ABS:TreeQ:lLevel
       TreeQ.lLevel = -1 * ABS:TreeQ:lLevel
    ELSE
       TreeQ.lLevel = ABS:TreeQ:lLevel
    END
    PUT(TreeQ)
  END
  GET(TreeQ,1)
  ?TreeList{PROP:Selected} = 1
  DISPLAY(?TreeList)
  SELECT(?TreeList)
  DO SaveTreeState
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillClassNameQ   ROUTINE
  DATA
loc:szSortName LIKE(ClassNameQ.szSortName)

  CODE
  loc:szSortName = ClassNameQ.szSortName
  FREE(ClassNameQ)
  J = RECORDS(ClassQ)
  LOOP I = 1 TO J
    GET(ClassQ,I)
    IF ~glo:bShowPrivate AND ClassQ.bPrivate
       CYCLE
    ELSIF glo:bCurrentView = VIEW:CLASSES AND ClassQ.bInterface
       CYCLE
    ELSIF glo:bCurrentView = VIEW:INTERFACES AND ~ClassQ:bInterface
       CYCLE
    ELSE
       !filter the class name queue
       IF glo:bCurrentView = VIEW:CLASSES
          IF glo:szCategory
             CategoryQ.szClassName = ClassQ.szClassName
             GET(CategoryQ,+CategoryQ.szClassName)
             IF CategoryQ.szCategory <> glo:szCategory
                CYCLE
             END
          END
       END

       ClassNameQ.szClassName = ClassQ.szClassName
       ClassNameQ.szSortName = UPPER(ClassQ.szClassName)

       !=======================================================================
       OldClassQ.szClassName = ClassQ.szClassName
       GET(OldClassQ,+OldClassQ.szClassName)
       IF ERRORCODE()
          ClassNameQ.lStyle = STYLE:NORMAL_NEW
       ELSE
          ClassNameQ.lStyle = STYLE:NORMAL
       END
       !=======================================================================

       GET(ClassNameQ,+ClassNameQ.szSortName)
       IF ERRORCODE()
          CASE glo:bABCOnly
          OF 0
             ADD(ClassNameQ,+ClassNameQ.szSortName)
          OF 1
             IF srcIsBaseClassABC(ClassQ.szClassName)
                ADD(ClassNameQ,+ClassNameQ.szSortName)
             END
          OF 2
             IF ~srcIsBaseClassABC(ClassQ.szClassName)
                ADD(ClassNameQ,+ClassNameQ.szSortName)
             END
          END
       END
    END
  END
  SORT(ClassNameQ,+ClassNameQ.szSortName)
  ClassNameQ.szSortName = loc:szSortName
  GET(ClassNameQ,+ClassNameQ.szSortName)
  ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillStructNameQ   ROUTINE
  FREE(StructNameQ)
  J = RECORDS(StructureQ)
  LOOP I = 1 TO J
    GET(StructureQ,I)
    IF ~glo:bShowPrivate AND StructureQ.bPrivate
       CYCLE
    ELSE
       StructNameQ.szStructureName = StructureQ.szStructureName
       StructNameQ.szStructureSort = UPPER(StructureQ.szStructureName)
       GET(StructNameQ,+StructNameQ.szStructureSort)
       IF ERRORCODE()
          ADD(StructNameQ,+StructNameQ.szStructureSort)
       END
     END
  END
  SORT(StructNameQ,+StructNameQ.szStructureSort)
  StructNameQ.szStructureSort = UPPER(glo:szParentClassName)
  GET(StructNameQ,+StructNameQ.szStructureSort)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillEnumNameQ   ROUTINE
  FREE(EnumNameQ)
  J = RECORDS(EnumQ)
  LOOP I = 1 TO J
    GET(EnumQ,I)
    IF ~glo:bShowPrivate AND EnumQ.bPrivate
       CYCLE
    ELSE
       EnumNameQ.szEnumName = EnumQ.szEnumName
       EnumNameQ.szEnumSort = UPPER(EnumQ.szEnumName)
       GET(EnumNameQ,+EnumNameQ.szEnumSort)
       IF ERRORCODE()
          ADD(EnumNameQ,+EnumNameQ.szEnumSort)
       END
    END
  END
  SORT(EnumNameQ,+EnumNameQ.szEnumSort)
  EnumNameQ.szEnumSort = UPPER(glo:szParentClassName)
  GET(EnumNameQ,+EnumNameQ.szEnumSort)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillCallNameQ   ROUTINE
  DATA
szCurrentClass  CSTRING(65)
K               LONG

  CODE
  SORT(ClassQ,+ClassQ.szClassSort)
  SORT(MethodQ,+MethodQ.lClassId,+MethodQ.szMethodSort)
  FREE(CallNameQ)
  J = RECORDS(CallQ)
  LOOP I = 1 TO J
    GET(CallQ,I)
    K = INSTRING('.',CallQ.szCallingMethod)
    IF K
       ClassQ.szClassSort = UPPER(CallQ.szCallingMethod[1 : K-1])
       GET(ClassQ,+ClassQ.szClassSort)
       CategoryQ.szClassName = ClassQ.szClassName
       GET(CategoryQ,+CategoryQ.szClassName)
       MethodQ.lClassId = ClassQ.lClassId
       MethodQ.szMethodSort = UPPER(CallQ.szCallingMethod[K+1 : LEN(CallQ.szCallingMethod)])
       GET(MethodQ,+MethodQ.lClassId,+MethodQ.szMethodSort)
       IF ~ERRORCODE()
          IF ~glo:bShowPrivate AND MethodQ.bPrivate
             CYCLE
          ELSIF ~glo:bShowModule AND MethodQ.bModule
             CYCLE
          ELSIF glo:szCategory AND CategoryQ.szCategory <> glo:szCategory
             CYCLE
          ELSE
             CASE glo:bABCOnly
             OF 1
                IF ~srcIsBaseClassABC(ClassQ.szClassSort)
                   CYCLE
                END
             OF 2
                IF srcIsBaseClassABC(ClassQ.szClassSort)
                   CYCLE
                END
             END
             CallNameQ.szCallName = CallQ.szCallingMethod
             CallNameQ.szSortName = UPPER(CallQ.szCallingMethod)
             GET(CallNameQ,+CallNameQ.szSortName)
             IF ERRORCODE()
                CallNameQ.szCallName = CallQ.szCallingMethod
                CallNameQ.szSortName = UPPER(CallQ.szCallingMethod)
                CallNameQ.lLevel = 2
                CallNameQ.lStyle = STYLE:NORMAL
                CallNameQ.bExpandedAbove = FALSE
                ADD(CallNameQ,+CallNameQ.szSortName)
                K = INSTRING('.',CallNameQ.szCallName)
                IF UPPER(szCurrentClass) <> UPPER(CallNameQ.szCallName[1 : K-1])
                   szCurrentClass = CallNameQ.szCallName[1 : K-1]
                   CallNameQ.szCallName = szCurrentClass
                   CallNameQ.lLevel = -1
                   CallNameQ.szSortName = UPPER(szCurrentClass)
                   CallNameQ.bExpandedAbove = FALSE

                   !=======================================================================
                   OldClassQ.szClassName = ClassQ.szClassName
                   GET(OldClassQ,+OldClassQ.szClassName)
                   IF ERRORCODE()
                      CallNameQ.lStyle = STYLE:NORMAL_NEW
                   ELSE
                      CallNameQ.lStyle = STYLE:NORMAL
                   END
                   !=======================================================================

                   ADD(CallNameQ,+CallNameQ.szSortName)
                END
             END
          END
       END
    END
  END

  SORT(CallNameQ,+CallNameQ.szSortName)

  CallNameQ.szSortName = UPPER(szLastCallName)
  GET(CallNameQ,+CallNameQ.szSortName)
  IF ERRORCODE()
     GET(CallNameQ,1)
     CallNameQ.lLevel = ABS(CallNameQ.lLevel)
     PUT(CallNameQ)
     GET(CallNameQ,2)
     szLastCallName = CallNameQ.szCallName
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillOldClassQ   ROUTINE
  DATA
sav:szClassViewDatafile LIKE(szClassViewDatafile)

  CODE
  sav:szClassViewDatafile = szClassViewDatafile
  FREE(OldClassQ)
  CASE glo:bClarionVersion
    OF CWVERSION_C4
       szClassViewDatafile = 'CVIEW20S.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C5
       szClassViewDatafile = 'CVIEW40S.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C5EE
       szClassViewDatafile = 'CVIEW40S.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C55
       szClassViewDatafile = 'CVIEW50S.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C55EE
       szClassViewDatafile = 'CVIEW50E.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C60
       szClassViewDatafile = 'CVIEW55S.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C60EE
       szClassViewDatafile = 'CVIEW55E.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C70
       szClassViewDatafile = 'CVIEW60E.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C80
       szClassViewDatafile = 'CVIEW70.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C90
       szClassViewDatafile = 'CVIEW80.DAT'
       DO _FillOldClassQ
    OF CWVERSION_C100
       szClassViewDatafile = 'CVIEW90.DAT'
       DO _FillOldClassQ
  END
  szClassViewDatafile = sav:szClassViewDatafile

_FillOldClassQ   ROUTINE
  szClassViewDatafile = szValue & '\' & szClassViewDatafile
  IF Access:Memory(szClassViewDatafile,ACTION:LOAD) = LEVEL:Benign
     J = RECORDS(ClassQ)
     LOOP I = 1 TO J
       GET(ClassQ,I)
       OldClassQ.szClassName = ClassQ.szClassName
       ADD(OldClassQ,+OldClassQ.szClassName)
     END
     DO FillOldMethodQ
     DO FillOldPropertyQ
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillOldMethodQ  ROUTINE
  DATA
N   LONG
P   LONG
  CODE
  SORT(ClassQ,+ClassQ.lClassId)
  N = RECORDS(MethodQ)
  LOOP P = 1 TO N
     GET(MethodQ,P)
     ClassQ.lClassId = MethodQ.lClassId
     GET(ClassQ,+ClassQ.lClassId)
     OldMethodQ.szClassName = ClassQ.szClassSort
     OldMethodQ.szMethodName = MethodQ.szMethodSort
     OldMethodQ.szPrototype = UPPER(MethodQ.szPrototype)
     ADD(OldMethodQ,+OldMethodQ.szClassName,+OldMethodQ.szMethodName,+OldMethodQ.szPrototype)
  END
  SORT(ClassQ,+ClassQ.szClassSort)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillOldPropertyQ    ROUTINE
  DATA
N   LONG
P   LONG
  CODE
  SORT(ClassQ,+ClassQ.lClassId)
  N = RECORDS(PropertyQ)
  LOOP P = 1 TO N
     GET(PropertyQ,P)
     ClassQ.lClassId = PropertyQ.lClassId
     GET(ClassQ,+ClassQ.lClassId)
     OldPropertyQ.szClassName = ClassQ.szClassSort
     OldPropertyQ.szPropertyName = PropertyQ.szPropertySort
     ADD(OldPropertyQ,+OldPropertyQ.szClassName,+OldPropertyQ.szPropertyName)
  END
  SORT(ClassQ,+ClassQ.szClassSort)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillCategoryQueue   ROUTINE
  FREE(CategoryQueue)
  J = RECORDS(CategoryQ)
  LOOP I = 1 TO J
    GET(CategoryQ,I)
    ClassQ.szClassName = CategoryQ.szClassName
    GET(ClassQ,+ClassQ.szClassName)
    IF ~ERRORCODE() AND ClassQ.szParentClassName = ''
       IF CategoryQ.szCategory
          CategoryQueue.szCategory = CategoryQ.szCategory
       ELSE
          CategoryQueue.szCategory = ' ALL'
       END
       GET(CategoryQueue,+CategoryQueue.szCategory)
       IF ERRORCODE()
          IF CategoryQ.szCategory
             CategoryQueue.szCategory = CategoryQ.szCategory
          ELSE
             CategoryQueue.szCategory = ' ALL'
          END
          ADD(CategoryQueue,+CategoryQueue.szCategory)
       END
    END
  END
  IF ~glo:szCategoryChoice
     glo:szCategoryChoice = ' ALL'
  END
  J = RECORDS(CategoryQueue)
  LOOP I = 1 TO J
    GET(CategoryQueue,I)
    IF CategoryQueue.szCategory = glo:szCategoryChoice
       BREAK
    END
  END
  IF ThisWindow.Opened
     ?glo:szCategoryChoice{PROP:Selected} = POINTER(CategoryQueue)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
InitExtraModuleQ    ROUTINE
  DATA

I               LONG
loc:szFileName  CSTRING(261)
subFolder       CSTRING(5)

  CODE
  IF glo:bClarionVersion > CWVERSION_C60EE
     subFolder = 'win\'
  ELSE
     subFolder = ''
  END
  LOOP I = 1 TO 8
    CASE I
    OF 1
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'equates.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'equates.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 2
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'errors.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'errors.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 3
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'property.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'property.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 4
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'prnprop.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'prnprop.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 5
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'keycodes.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'keycodes.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 6
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'tplequ.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'tplequ.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 7
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'winequ.clw'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'winequ.clw'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    OF 8
       loc:szFileName = szRoot & '\libsrc\' & subFolder & 'windows.inc'
       IF _access(loc:szFileName,0) = 0
          ExtraQ:bClarionVersion = glo:bClarionVersion
          ExtraModuleQ.szModuleName = 'windows.inc'
          ExtraModuleQ.szModulePath = szRoot & '\LIBSRC\' & subFolder
          ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
       END
    END
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupClassView  ROUTINE
   lLatchControl = ?ClassRegion           !make this the latched control
   DO DrawLatchBox
   glo:bCurrentView = VIEW:CLASSES        !view classes

   DO RefreshControls

   IF ~bHyperLinking
      srcRefreshTree()
   END

   DO FillClassNameQ
   DO FillCategoryQueue

   ?ObjectDropList{PROP:From} = ClassNameQ
   CASE glo:bABCOnly
   OF 0
      ?ObjectDropList{PROP:Format} = '252L(2)Y|~All Classes~C@s63@'
   OF 1
      ?ObjectDropList{PROP:Format} = '252L(2)Y|~ABC Classes~C@s63@'
   OF 2
      ?ObjectDropList{PROP:Format} = '252L(2)Y|~Non-ABC Classes~C@s63@'
   END

   J = RECORDS(ClassNameQ)
   LOOP I = 1 TO J
      GET(ClassNameQ,I)
      IF ClassNameQ.szClassName = szObjectName
         BREAK
      END
   END
   IF I > J
      I = 1
   END
   GET(ClassNameQ,I)
   ?ObjectDropList{PROP:Selected} = I
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupInterfaceView  ROUTINE
   lLatchControl = ?InterfaceRegion       !make this the latched control
   DO DrawLatchBox
   glo:bCurrentView = VIEW:INTERFACES     !view interfaces

   DO RefreshControls

   IF ~bHyperLinking
      srcRefreshTree()
   END

   DO FillClassNameQ
   DO FillCategoryQueue

   ?ObjectDropList{PROP:From} = ClassNameQ

   CASE glo:bABCOnly
   OF 0
      ?ObjectDropList{PROP:Format} = '252L(2)Y|~All Classes~C@s63@'
   OF 1
      ?ObjectDropList{PROP:Format} = '252L(2)Y|~ABC Classes~C@s63@'
   OF 2
      ?ObjectDropList{PROP:Format} = '252L(2)Y|~Non-ABC Classes~C@s63@'
   END

   J = RECORDS(ClassNameQ)
   LOOP I = 1 TO J
      GET(ClassNameQ,I)
      IF ClassNameQ.szClassName = szObjectName
         BREAK
      END
   END
   IF I > J
      I = 1
   END
   GET(ClassNameQ,I)
   ?ObjectDropList{PROP:Selected} = I
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupStructureView  ROUTINE
   lLatchControl = ?StructureRegion       !make this the latched control
   DO DrawLatchBox
   glo:bCurrentView = VIEW:STRUCTURES     !view structures

   DO RefreshControls

   IF ~bHyperLinking
      GET(StructureQ,1)
      glo:szParentClassName = StructureQ.szStructureName
      srcRefreshTree()
   ELSE
      glo:szParentClassName = StructureQ.szStructureName
   END

   DO FillStructNameQ
   ?ObjectDropList{PROP:From} = StructNameQ
   ?ObjectDropList{PROP:Format} = '252L(2)|@s63@'

   J = RECORDS(StructNameQ)
   LOOP I = 1 TO J
      GET(StructNameQ,I)
      IF StructNameQ.szStructureName = szObjectName
         BREAK
      END
   END
   IF I > J
      I = 1
   END
   GET(StructNameQ,I)
   ?ObjectDropList{PROP:Selected} = I
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SaveData    ROUTINE
  DATA
loc:sCurrentCursor  STRING(4)

  CODE
  CASE glo:bClarionVersion
    OF CWVERSION_C2
       szClassViewDatafile = 'CVIEW20S.DAT'
       FileClarion20 = FALSE
       ENABLE(?FileClarion20)
    OF CWVERSION_C4
       szClassViewDatafile = 'CVIEW40S.DAT'
       FileClarion40 = FALSE
       ENABLE(?FileClarion40)
    OF CWVERSION_C5
       szClassViewDatafile = 'CVIEW50S.DAT'
       FileClarion50 = FALSE
       ENABLE(?FileClarion50)
    OF CWVERSION_C5EE
       szClassViewDatafile = 'CVIEW50E.DAT'
       FileClarion50EE = FALSE
       ENABLE(?FileClarion50EE)
    OF CWVERSION_C55
       szClassViewDatafile = 'CVIEW55S.DAT'
       FileClarion55 = FALSE
       ENABLE(?FileClarion55)
    OF CWVERSION_C55EE
       szClassViewDatafile = 'CVIEW55E.DAT'
       FileClarion55EE = FALSE
       ENABLE(?FileClarion55EE)
    OF CWVERSION_C60
       szClassViewDatafile = 'CVIEW60S.DAT'
       FileClarion60 = FALSE
       ENABLE(?FileClarion60)
    OF CWVERSION_C60EE
       szClassViewDatafile = 'CVIEW60E.DAT'
       FileClarion60EE = FALSE
       ENABLE(?FileClarion60EE)
    OF CWVERSION_C70
       szClassViewDatafile = 'CVIEW70.DAT'
       FileClarion70 = FALSE
       ENABLE(?FileClarion70)
    OF CWVERSION_C80
       szClassViewDatafile = 'CVIEW80.DAT'
       FileClarion80 = FALSE
       ENABLE(?FileClarion80)
    OF CWVERSION_C90
       szClassViewDatafile = 'CVIEW90.DAT'
       FileClarion90 = FALSE
       ENABLE(?FileClarion90)
    OF CWVERSION_C100
       szClassViewDatafile = 'CVIEW100.DAT'
       FileClarion100 = FALSE
       ENABLE(?FileClarion100)
  END

  INIMgr.Update('Options','RED File Path ' & glo:bClarionVersion,glo:szRedFilePath)

  szClassViewDatafile = szValue & '\' & szClassViewDatafile
  loc:sCurrentCursor = glo:sCurrentCursor
  glo:sCurrentCursor = CURSOR:WAIT
  SETCURSOR(glo:sCurrentCursor)
  ?SavingString{PROP:XPos} = (?CloseButton{PROP:XPos} - 90)
  ?SavingString{PROP:YPos} = (?CloseButton{PROP:YPos} + 0)
  HIDE(?VCRTop,?VCRBottom)
  UNHIDE(?SavingString)
  DISPLAY()
  Access:Memory(szClassViewDatafile,ACTION:SAVE)
  HIDE(?SavingString)
  UNHIDE(?VCRTop,?VCRBottom)
  glo:sCurrentCursor = loc:sCurrentCursor
  SETCURSOR(glo:sCurrentCursor)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LoadData    ROUTINE
  DATA
loc:build           CSTRING(5)
loc:szSection       CSTRING(256)
loc:szRoot          CSTRING(261)
loc:szRedFileName   CSTRING(261)
loc:szXMLFilename   CSTRING(261)
loc:sCurrentCursor  STRING(4)
cc                  LONG

i                   LONG

  CODE
  DO FillOldClassQ

  CASE glo:bClarionVersion
    OF CWVERSION_C2
       szClassViewDatafile = 'CVIEW20S.DAT'
       FileClarion20 = TRUE
       DISABLE(?FileClarion20)
       loc:szSection = 'Clarion for Windows V2.0'
       loc:szRedFileName = '\bin\cw20.red'
    OF CWVERSION_C4
       szClassViewDatafile = 'CVIEW40S.DAT'
       FileClarion40 = TRUE
       DISABLE(?FileClarion40)
       loc:szSection = 'Clarion 4'
       loc:szRedFileName = '\bin\clarion4.red'
    OF CWVERSION_C5
       szClassViewDatafile = 'CVIEW50S.DAT'
       FileClarion50 = TRUE
       DISABLE(?FileClarion50)
       loc:szSection = 'Clarion 5'
       loc:szRedFileName = '\bin\clarion5.red'
    OF CWVERSION_C5EE
       szClassViewDatafile = 'CVIEW50E.DAT'
       FileClarion50EE = TRUE
       DISABLE(?FileClarion50EE)
       loc:szSection = 'Clarion 5  Enterprise Edition'
       loc:szRedFileName = '\bin\clarion5.red'
    OF CWVERSION_C55
       szClassViewDatafile = 'CVIEW55S.DAT'
       FileClarion55 = TRUE
       DISABLE(?FileClarion55)
       loc:szSection = 'Clarion 5.5'
       loc:szRedFileName = '\bin\c55pe.red'
    OF CWVERSION_C55EE
       szClassViewDatafile = 'CVIEW55E.DAT'
       FileClarion55EE = TRUE
       DISABLE(?FileClarion55EE)
       loc:szSection = 'Clarion 5.5  Enterprise Edition'
       loc:szRedFileName = '\bin\c55ee.red'
    OF CWVERSION_C60
       szClassViewDatafile = 'CVIEW60S.DAT'
       FileClarion60 = TRUE
       DISABLE(?FileClarion60)
       loc:szSection = 'Clarion 6.0'
       loc:szRedFileName = '\bin\c60pe.red'
    OF CWVERSION_C60EE
       szClassViewDatafile = 'CVIEW60E.DAT'
       FileClarion60EE = TRUE
       DISABLE(?FileClarion60EE)
       loc:szSection = 'Clarion 6.0  Enterprise Edition'
       loc:szRedFileName = '\bin\c60ee.red'
    OF CWVERSION_C70
       szClassViewDatafile = 'CVIEW70.DAT'
       FileClarion70 = TRUE
       DISABLE(?FileClarion70)
       loc:szSection = 'Clarion 7.'

       !need to get red filename this from xml file
       !CSIDL_APPDATA   EQUATE(01ah)
       IF RECORDS(glo:VersionQ) = 0
          cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END

       !look for latest clarion7 install
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

    OF CWVERSION_C80
       szClassViewDatafile = 'CVIEW80.DAT'
       FileClarion80 = TRUE
       DISABLE(?FileClarion80)
       loc:szSection = 'Clarion 8.'

       !need to get red filename this from xml file
       !CSIDL_APPDATA   EQUATE(01ah)
       IF RECORDS(glo:VersionQ) = 0
          cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END

       !look for latest clarion8 install
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

    OF CWVERSION_C90
       szClassViewDatafile = 'CVIEW90.DAT'
       FileClarion90 = TRUE
       DISABLE(?FileClarion90)
       loc:szSection = 'Clarion 9.'

       !need to get red filename this from xml file
       !CSIDL_APPDATA   EQUATE(01ah)
       IF RECORDS(glo:VersionQ) = 0
          cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END

       !look for latest clarion9 install
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

    OF CWVERSION_C100
       szClassViewDatafile = 'CVIEW100.DAT'
       FileClarion100 = TRUE
       DISABLE(?FileClarion100)
       loc:szSection = 'Clarion 10.'

       !need to get red filename this from xml file
       !CSIDL_APPDATA   EQUATE(01ah)
       IF RECORDS(glo:VersionQ) = 0
          cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\ClarionProperties.xml'
          srcReadClarionProps(loc:szXMLFileName)
       END

       !look for latest clarion10 install
       LOOP I = 1 TO RECORDS(glo:VersionQ)
          GET(glo:VersionQ,I)
          IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
             IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
                loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
                loc:szRedFileName = glo:VersionQ.RedFile
             END
          END
       END

  END

  DO LoadRedirectionQueue
  loc:szRoot = szRoot

  IF glo:bClarionVersion < CWVERSION_C70
     glo:szRedFilePath = loc:szRoot & loc:szRedFileName
  ELSE
     glo:szRedFilePath = glo:VersionQ.RedDir & '\' & loc:szRedFileName
  END
  INIMgr.Fetch('Options','RED File Path ' & glo:bClarionVersion,glo:szRedFilePath)

  szClassViewDatafile = szValue & '\' & szClassViewDatafile
  loc:sCurrentCursor = glo:sCurrentCursor
  glo:sCurrentCursor = CURSOR:WAIT
  SETCURSOR(glo:sCurrentCursor)
  ?LoadingString{PROP:XPos} = (?CloseButton{PROP:XPos} - 90)
  ?LoadingString{PROP:YPos} = (?CloseButton{PROP:YPos} + 0)
  HIDE(?VCRTop,?VCRBottom)
  UNHIDE(?LoadingString)
  DISPLAY(?LoadingString)
  cc = Access:Memory(szClassViewDatafile,ACTION:LOAD)
  IF (cc <> Level:Benign) OR (cc = Level:Benign AND RECORDS(ModuleQ) = 0)
     HIDE(?LoadingString)
     HIDE(?TreeList)
     HIDE(?AsciiBox)
   COMPILE('***',_Scintilla_)
     SciControl.SetHide(TRUE)
   !***
     HIDE(?loc:szAsciiFilename)
     HIDE(?VirtualBox,?EnumeratedEquate:String)
     HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)
     HIDE(?ObjectDropList)
     HIDE(?SplitterBar)
     HIDE(?SplitterBar:2)
     HIDE(?VerticalSplitter)
     HIDE(?HyperlinkButton,?HistoryList)
     HIDE(?VcrTop,?VcrBottom)

     FREE(TreeStateQ)

     IF ~RECORDS(ExtraModuleQ)
        DO InitExtraModuleQ
     END

   COMPILE('***',_Scintilla_)
     SciControl.SetReadOnly(FALSE)
     SciControl.ClearAll()
     loc:szAsciiFilename = '  Filename:'
     DISPLAY(?loc:szAsciiFilename)
   !***

     glo:bRefreshAll = TRUE
     srcRefreshQueues(?ProcessString,?ScanString,?ProgressBox,?ProgressBox:2,?RefreshGroup)
     glo:bRefreshAll = FALSE
     srcRefreshQueues(?ProcessString,?ScanString,?ProgressBox,?ProgressBox:2,?RefreshGroup)

     UNHIDE(?ObjectDropList)
     UNHIDE(?SplitterBar)
     UNHIDE(?SplitterBar:2)
     UNHIDE(?VerticalSplitter)
     UNHIDE(?HyperlinkButton,?HistoryList)
     UNHIDE(?TreeList)
   OMIT('***',_scintilla_)
     UNHIDE(?AsciiBox)
   !***
   COMPILE('***',_Scintilla_)
     SciControl.SetReadOnly(TRUE)
     SciControl.SetHide(FALSE)
   !***
     UNHIDE(?loc:szAsciiFilename)
     ?SavingString{PROP:XPos} = (?CloseButton{PROP:XPos} - 90)
     ?SavingString{PROP:YPos} = (?CloseButton{PROP:YPos} + 0)
     UNHIDE(?SavingString)
     DISPLAY()
     Access:Memory(szClassViewDatafile,ACTION:SAVE)
     HIDE(?SavingString)
     UNHIDE(?VcrTop,?VcrBottom)
  ELSE
     srcRefreshTree()
  END

  DO SetTreeStyles

  OMIT('***',UseDefaultWordlist=1)
  srcGetWordList(szClarionKeywords, szCompilerDirectives, szBuiltinProcsFuncs, szStructDataTypes, szAttributes, szStandardEquates)
  !***

  lLatchControl = 0
  CASE glo:bCurrentView
    OF VIEW:CLASSES
       POST(EVENT:Accepted,?ClassRegion)
    OF VIEW:STRUCTURES
       POST(EVENT:Accepted,?StructureRegion)
    OF VIEW:EQUATES
       POST(EVENT:Accepted,?EquateRegion)
    OF VIEW:CALLS
       IF RECORDS(CallNameQ)
          szLastCallName = CallNameQ.szCallName
       ELSE
          szLastCallName = 'WindowManager.Run'
       END
       POST(EVENT:Accepted,?TreeRegion)
    OF VIEW:INTERFACES
       POST(EVENT:Accepted,?InterfaceRegion)
  END

  HIDE(?LoadingString)
  UNHIDE(?VCRTop,?VCRBottom)
  glo:sCurrentCursor = loc:sCurrentCursor
  SETCURSOR(glo:sCurrentCursor)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetScreenLayout ROUTINE
  DATA
X       LONG
Y       LONG

  CODE

  ?LocatorImage{PROP:Hide} = TRUE
  ?Locator{PROP:Hide} = false

  glo:Layout = 0
  INIMgr.Fetch('Splitter','Layout',glo:Layout)


  CASE glo:Layout
  OF 1
     X = 80
     INIMgr.Fetch('Splitter','XPos',X)
     Y = 210
     INIMgr.Fetch('Splitter','VXPos',Y)
     Splitter1_XPos = X
     Splitter2_XPos = Y

     ?TreeList{PROP:Height} = ?ObjectDropList{PROP:Height}
     ?TreeList{PROP:Width} = X+2 - Y
     ?TreeList{PROP:XPos} = X+2

     ?AsciiBox{PROP:Height} = ?ObjectDropList{PROP:Height} - SPLITTERHEIGHT + 2
     ?AsciiBox{PROP:Width} = Window{PROP:Width} - (Y+3) - 8
     ?AsciiBox{PROP:XPos} = Y+3
     ?AsciiBox{PROP:YPos} = ?ObjectDropList{PROP:YPos} + SPLITTERHEIGHT - 2

     ?SplitterBar{PROP:Height} = ?TreeList{PROP:Height} !+ 18
     ?SplitterBar{PROP:YPos} = ?TreeList{PROP:YPos} !- 18

     ?VerticalSplitter{PROP:XPos} = Y
     ?VerticalSplitter{PROP:YPos} = ?TreeList{PROP:YPos}
     ?VerticalSplitter{PROP:Width} = 2
     ?VerticalSplitter{PROP:Height} = ?TreeList{PROP:Height}

  ELSE  !default layout
     INIMgr.Fetch('Splitter','XPos', X)
     INIMgr.Fetch('Splitter','YPos', Y)
     Splitter1_XPos = X
     Splitter2_YPos = Y

     ?TreeList{PROP:YPos} = ?ObjectDropList{PROP:YPos}
     ?SplitterBar{PROP:Height} = ?ObjectDropList{PROP:Height}
     ?SplitterBar{PROP:YPos} = ?ObjectDropList{PROP:YPos}
     ?VerticalSplitter{PROP:XPos} = ?TreeList{PROP:XPos}
     ?VerticalSplitter{PROP:YPos} = ?TreeList{PROP:YPos} + ?TreeList{PROP:Height}
     ?VerticalSplitter{PROP:Width} = ?TreeList{PROP:Width}
     ?VerticalSplitter{PROP:Height} = 2
  END

  ?ObjectDropList{PROP:SelectedFillColor} = glo:lSelectedBack
  CASE glo:bCurrentView
    OF VIEW:CLASSES OROF VIEW:INTERFACES
       GET(ClassNameQ,1)
       ?ObjectDropList{PROP:From} = ClassNameQ
       ?ObjectDropList{PROP:Selected} = POINTER(ClassNameQ)
       CASE glo:bABCOnly
       OF 0
          ?ObjectDropList{PROP:Format} = '252L(2)Y|~All Classes~C@s63@'
       OF 1
          ?ObjectDropList{PROP:Format} = '252L(2)Y|~ABC Classes~C@s63@'
       OF 2
          ?ObjectDropList{PROP:Format} = '252L(2)Y|~Non-ABC Classes~C@s63@'
       END
    OF VIEW:STRUCTURES
       GET(StructNameQ,1)
       ?ObjectDropList{PROP:From} = StructNameQ
       ?ObjectDropList{PROP:Selected} = POINTER(StructNameQ)
       ?ObjectDropList{PROP:Format} = '252L(2)|@s63@'
    OF VIEW:EQUATES
       GET(EnumNameQ,1)
       ?ObjectDropList{PROP:From} = EnumNameQ
       ?ObjectDropList{PROP:Selected} = POINTER(EnumNameQ)
       ?ObjectDropList{PROP:Format} = '252L(2)|@s63@'
    OF VIEW:CALLS
       GET(CallNameQ,1)
       ?ObjectDropList{PROP:From} = CallNameQ
       ?ObjectDropList{PROP:Selected} = POINTER(CallNameQ)
       CASE glo:bABCOnly
       OF 0
          ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~All Classes~C@s63@'
       OF 1
          ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~ABC Classes~C@s63@'
       OF 2
          ?ObjectDropList{PROP:Format} = '252L(2)Y|T(R)~Non-ABC Classes~C@s63@'
       END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
RefreshControls ROUTINE
   CASE glo:bCurrentView
   OF VIEW:CLASSES
      HIDE(?EquateBox,?EnumeratedEquate:String)
      UNHIDE(?VirtualBox,?VirtualString)
      UNHIDE(?glo:bShowProtected,?glo:bShowModule)
      IF glo:bShowProtected
         UNHIDE(?ProtectedBox,?ProtectedString)
      ELSE
         HIDE(?ProtectedBox,?ProtectedString)
      END
      IF glo:bShowPrivate
         UNHIDE(?PrivateBox,?PrivateString)
      ELSE
         HIDE(?PrivateBox,?PrivateString)
      END
      IF glo:bShowModule
         UNHIDE(?ModuleBox,?ModuleString)
      ELSE
         HIDE(?ModuleBox,?ModuleString)
      END
      !UNHIDE(?glo:bABCOnly+1,?glo:bDetailLevel)
      UNHIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)

   OF VIEW:INTERFACES
      HIDE(?EquateBox,?EnumeratedEquate:String)
      UNHIDE(?VirtualBox,?VirtualString)
      HIDE(?ProtectedBox,?glo:bShowModule)
      HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)

   OF VIEW:CALLS
      HIDE(?EquateBox,?EnumeratedEquate:String)
      UNHIDE(?VirtualBox,?VirtualString)
      UNHIDE(?glo:bShowProtected,?glo:bShowModule)
      IF glo:bShowProtected
         UNHIDE(?ProtectedBox,?ProtectedString)
      ELSE
         HIDE(?ProtectedBox,?ProtectedString)
      END
      IF glo:bShowPrivate
         UNHIDE(?PrivateBox,?PrivateString)
      ELSE
         HIDE(?PrivateBox,?PrivateString)
      END
      IF glo:bShowModule
         UNHIDE(?ModuleBox,?ModuleString)
      ELSE
         HIDE(?ModuleBox,?ModuleString)
      END
      !HIDE(?glo:bABCOnly,?glo:bDetailLevel)
      HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)

      !UNHIDE(?glo:bABCOnly+1,?glo:szCategoryChoice)   !?glo:bDetailLevel)
      UNHIDE(?glo:szCategory:Prompt,?glo:szCategoryChoice)

   OF VIEW:STRUCTURES
      HIDE(?EquateBox,?EnumeratedEquate:String)
      HIDE(?VirtualBox,?glo:bShowModule)
      IF glo:bShowPrivate
         UNHIDE(?PrivateBox,?PrivateString)
      ELSE
         HIDE(?PrivateBox,?PrivateString)
      END
      UNHIDE(?glo:bShowPrivate)
      !HIDE(?glo:bABCOnly,?glo:bDetailLevel)
      HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)

   OF VIEW:EQUATES
      HIDE(?VirtualBox,?glo:bShowModule)
      UNHIDE(?EquateBox,?EnumeratedEquate:String)
      IF glo:bShowPrivate
         UNHIDE(?PrivateBox,?PrivateString)
      ELSE
         HIDE(?PrivateBox,?PrivateString)
      END
      UNHIDE(?glo:bShowPrivate)
      !HIDE(?glo:bABCOnly,?glo:bDetailLevel)
      HIDE(?glo:szCategory:Prompt,?glo:bDetailLevel)
   END

   DISPLAY()
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ExpandParentNodes   ROUTINE
  DATA
MyParent    LIKE(ClassQ.szClassName)
pByte       LONG
pBit        BYTE
n           LONG
qRecords    LONG
  CODE

  CASE glo:bCurrentView
  OF VIEW:CLASSES OROF VIEW:INTERFACES
     GET(TreeQ,1)
     TreeStateQ.szClassName = TreeQ.szClassName
     GET(TreeStateQ,+TreeStateQ.szClassName)
     IF ~ERRORCODE()
        qRecords = RECORDS(TreeQ)
        pByte = 0
        n = 0
        LOOP UNTIL n > qRecords OR pByte > 1000
          pByte += 1
          pBit = 0
          LOOP 8 TIMES
            pBit += 1
            n += 1
            IF n > qRecords
               BREAK
            ELSIF BAND(TreeStateQ.state[pByte],BSHIFT(1,8-pBit))
               GET(TreeQ,n)
               TreeQ.lLevel = ABS(TreeQ.lLevel)
               PUT(TreeQ)
            END
          END
        END
     END
  END

  !Expand Starting Node
  !----------------------------------------------
  GET(TreeQ,I)
  IF glo:bAutoExpand OR I = 1
     TreeQ.lLevel = ABS(TreeQ.lLevel)
     PUT(TreeQ)
  END

  !Look for parents and expand them
  !----------------------------------------------
  ClassQ.szClassSort = UPPER(TreeQ.szClassName)
  GET(ClassQ,+ClassQ.szClassSort)
  MyParent = ClassQ.szParentClassName
  LOOP J = I TO 1 BY -1
    GET(TreeQ,J)
    IF TreeQ.szSearch = MyParent
       TreeQ.lLevel = ABS(TreeQ.lLevel)
       PUT(TreeQ)
       ClassQ.szClassSort = UPPER(TreeQ.szClassName)
       GET(ClassQ,+ClassQ.szClassSort)
       MyParent = ClassQ.szParentClassName
    END
    IF ABS(TreeQ.lLevel) = 1
       TreeQ.lLevel = ABS(TreeQ.lLevel)
       PUT(TreeQ)
       BREAK
    END
  END

  !get starting node and select it
  !----------------------------------------------
  GET(TreeQ,I)
  ?TreeList{PROP:Selected} = POINTER(TreeQ)

  !get matching class record
  !----------------------------------------------
  ClassQ.szClassSort = UPPER(TreeQ.szClassName)
  GET(ClassQ,+ClassQ.szClassSort)

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ProcessNewDetailLevel   ROUTINE
  DATA
loc:TreeQ:szText    LIKE(TreeQ.szText)
loc:sCurrentCursor  STRING(4)

  CODE
  IF bCurrentDetailLevel <> glo:bDetailLevel
     bCurrentDetailLevel = glo:bDetailLevel
     loc:sCurrentCursor = glo:sCurrentCursor
     glo:sCurrentCursor = CURSOR:WAIT
     SETCURSOR(glo:sCurrentCursor)

     GET(TreeQ,CHOICE(?TreeList))
     loc:TreeQ:szText = TreeQ.szText

     DO FillCallNameQ

     FREE(TreeStateQ)

     srcRefreshTree()

     DO FillClassNameQ
     DO FillCategoryQueue

     J = RECORDS(TreeQ)
     IF J
        LOOP I = 1 TO J
          GET(TreeQ,I)
          IF TreeQ.szText = loc:TreeQ:szText
             BREAK
          END
        END
        IF I > J
           I = 1
        END
        DO ExpandParentNodes
     END

     glo:sCurrentCursor = loc:sCurrentCursor
     SETCURSOR(glo:sCurrentCursor)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SaveTreeState   ROUTINE
  DATA
pByte   LONG,AUTO
pBit    BYTE,AUTO

  CODE
    !save our position in the treeq
    K = POINTER(TreeQ)

    !Make sure we have a TreeStateQ record for this class
    GET(TreeQ,1)
    TreeStateQ.szClassName = TreeQ.szClassName
    GET(TreeStateQ,+TreeStateQ.szClassName)
    IF ERRORCODE()
       CLEAR(TreeStateQ)
       TreeStateQ.szClassName = TreeQ.szClassName
       ADD(TreeStateQ,+TreeStateQ.szClassName)
    END

    !spin through treeq and save expanded/contracted state in TreeStateQ
    CLEAR(TreeStateQ.state[])
    pBit = 0
    J = RECORDS(TreeQ)
    LOOP I = 1 TO J
      GET(TreeQ,I)
      pByte = INT((I-1)/8)+1
      IF pByte > 1000
         BREAK
      ELSE
         IF pBit < 8
            pBit += 1
         ELSE
            pBit = 1
         END
         IF TreeQ.lLevel > 0
            TreeStateQ.state[pByte] = BOR(TreeStateQ.state[pByte],BSHIFT(1,8-pBit))
         END
      END
    END
    PUT(TreeStateQ)

    !reget our treeq record
    GET(TreeQ,K)

    EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetAlerts   ROUTINE
  ?ObjectDropList{PROP:ALRT,255} = Key0
  ?ObjectDropList{PROP:ALRT,255} = Key1
  ?ObjectDropList{PROP:ALRT,255} = Key2
  ?ObjectDropList{PROP:ALRT,255} = Key3
  ?ObjectDropList{PROP:ALRT,255} = Key4
  ?ObjectDropList{PROP:ALRT,255} = Key5
  ?ObjectDropList{PROP:ALRT,255} = Key6
  ?ObjectDropList{PROP:ALRT,255} = Key7
  ?ObjectDropList{PROP:ALRT,255} = Key8
  ?ObjectDropList{PROP:ALRT,255} = Key9
  ?ObjectDropList{PROP:ALRT,255} = AKey
  ?ObjectDropList{PROP:ALRT,255} = BKey
  ?ObjectDropList{PROP:ALRT,255} = CKey
  ?ObjectDropList{PROP:ALRT,255} = DKey
  ?ObjectDropList{PROP:ALRT,255} = EKey
  ?ObjectDropList{PROP:ALRT,255} = FKey
  ?ObjectDropList{PROP:ALRT,255} = GKey
  ?ObjectDropList{PROP:ALRT,255} = HKey
  ?ObjectDropList{PROP:ALRT,255} = IKey
  ?ObjectDropList{PROP:ALRT,255} = JKey
  ?ObjectDropList{PROP:ALRT,255} = KKey
  ?ObjectDropList{PROP:ALRT,255} = LKey
  ?ObjectDropList{PROP:ALRT,255} = MKey
  ?ObjectDropList{PROP:ALRT,255} = NKey
  ?ObjectDropList{PROP:ALRT,255} = OKey
  ?ObjectDropList{PROP:ALRT,255} = PKey
  ?ObjectDropList{PROP:ALRT,255} = QKey
  ?ObjectDropList{PROP:ALRT,255} = RKey
  ?ObjectDropList{PROP:ALRT,255} = SKey
  ?ObjectDropList{PROP:ALRT,255} = TKey
  ?ObjectDropList{PROP:ALRT,255} = UKey
  ?ObjectDropList{PROP:ALRT,255} = VKey
  ?ObjectDropList{PROP:ALRT,255} = WKey
  ?ObjectDropList{PROP:ALRT,255} = XKey
  ?ObjectDropList{PROP:ALRT,255} = YKey
  ?ObjectDropList{PROP:ALRT,255} = ZKey
  ?ObjectDropList{PROP:ALRT,255} = ShiftA
  ?ObjectDropList{PROP:ALRT,255} = ShiftB
  ?ObjectDropList{PROP:ALRT,255} = ShiftC
  ?ObjectDropList{PROP:ALRT,255} = ShiftD
  ?ObjectDropList{PROP:ALRT,255} = ShiftE
  ?ObjectDropList{PROP:ALRT,255} = ShiftF
  ?ObjectDropList{PROP:ALRT,255} = ShiftG
  ?ObjectDropList{PROP:ALRT,255} = ShiftH
  ?ObjectDropList{PROP:ALRT,255} = ShiftI
  ?ObjectDropList{PROP:ALRT,255} = ShiftJ
  ?ObjectDropList{PROP:ALRT,255} = ShiftK
  ?ObjectDropList{PROP:ALRT,255} = ShiftL
  ?ObjectDropList{PROP:ALRT,255} = ShiftM
  ?ObjectDropList{PROP:ALRT,255} = ShiftN
  ?ObjectDropList{PROP:ALRT,255} = ShiftO
  ?ObjectDropList{PROP:ALRT,255} = ShiftP
  ?ObjectDropList{PROP:ALRT,255} = ShiftQ
  ?ObjectDropList{PROP:ALRT,255} = ShiftR
  ?ObjectDropList{PROP:ALRT,255} = ShiftS
  ?ObjectDropList{PROP:ALRT,255} = ShiftT
  ?ObjectDropList{PROP:ALRT,255} = ShiftU
  ?ObjectDropList{PROP:ALRT,255} = ShiftV
  ?ObjectDropList{PROP:ALRT,255} = ShiftW
  ?ObjectDropList{PROP:ALRT,255} = ShiftX
  ?ObjectDropList{PROP:ALRT,255} = ShiftY
  ?ObjectDropList{PROP:ALRT,255} = ShiftZ
  ?ObjectDropList{PROP:ALRT,255} = 445  !underscore
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
CreateFavoritesMenu  ROUTINE
  DATA

  CODE
  DO DestroyFavoritesMenu

  J = RECORDS(FavoritesQ)
  LOOP I = 1 TO J
     GET(FavoritesQ,I)
?    ASSERT(FavoritesQ.MenuFeq = 0)
     IF FavoritesQ.MenuFeq = 0
        FavoritesQ.MenuFeq = CREATE(0,CREATE:ITEM,?ToolsFavorites,FavoritesQ.SequenceNo)
        PUT(FavoritesQ)
        CASE I
        OF 1
           lFirstFavoriteMenuFeq = FavoritesQ.MenuFeq
           IF J = 1
              lLastFavoriteMenuFeq = FavoritesQ.MenuFeq
           END
        OF J
           lLastFavoriteMenuFeq = FavoritesQ.MenuFeq
        END
        FavoritesQ.MenuFeq{PROP:Text} = FavoritesQ.szName
        UNHIDE(FavoritesQ.MenuFeq)
     END
  END

  LOOP I = 1 TO J
     GET(FavoritesQ,I)
     DO CreateFavoriteButton
  END

  EXIT

CreateFavoriteButton ROUTINE
  DATA
X           LONG,AUTO
N           LONG,AUTO
lFollows    LONG,AUTO
szFile      CSTRING(261)
szDirectory CSTRING(261)
szResult    CSTRING(261)

lResult     LONG
hkResult    ULONG
szSubKey    CSTRING(256)
szValueName CSTRING(32)
dwType      ULONG
DataBuffer  CSTRING(64)
dwData      ULONG

  CODE

  N = RECORDS(CtrlQueue)
  IF (?Panel6{PROP:XPOS} + 3 + (N * 14)) <= (?HyperlinkButton{PROP:XPOS} - 14)

     CtrlQueue.ControlFeq = CREATE(0,CREATE:BUTTON)
     CtrlQueue.MenuFeq = FavoritesQ.MenuFeq
     ADD(CtrlQueue,+CtrlQueue.ControlFeq)

     N = RECORDS(CtrlQueue)
     IF N = 1
        lFirstControlFeq = CtrlQueue.ControlFeq
        lFollows = ?Panel6 !?CallTreeButton
     ELSE
        lFollows = lLastControlFeq
     END

     lLastControlFeq = CtrlQueue.ControlFeq


     !X = ?CallTreeButton{PROP:XPOS} + (N * 14)
     X = ?Panel6{PROP:XPOS} + 3 + ((N-1) * 14)
     SETPOSITION(CtrlQueue.ControlFeq,X,1,12,12)

     CtrlQueue.ControlFeq{PROP:TRN} = TRUE
     CtrlQueue.ControlFeq{PROP:FLAT} = TRUE
     CtrlQueue.ControlFeq{PROP:SKIP} = TRUE
     CtrlQueue.ControlFeq{PROP:FOLLOWS} = lFollows

     IF hwndTT
        X = INSTRING('&',FavoritesQ.szName)
        N = LEN(FavoritesQ.szName)
        IF X
           tt.addtip(CtrlQueue.ControlFeq{PROP:HANDLE},FavoritesQ.szName[1 : X-1] & FavoritesQ.szName[X+1 : N],0)
        ELSE
           tt.addtip(CtrlQueue.ControlFeq{PROP:HANDLE},FavoritesQ.szName,0)
        END

     END

     CtrlQueue.ControlFeq{PROP:ICON} = '~UNKNOWN.ICO'
     IF UPPER(SUB(FavoritesQ.szPath,-12,12)) = 'CSSEARCH.EXE'
        CtrlQueue.ControlFeq{PROP:ICON} = '~CSSEARCH.ICO'
     ELSIF UPPER(SUB(FavoritesQ.szPath,-3,3)) = 'EXE'
        CtrlQueue.ControlFeq{PROP:ICON} = SHORTPATH(FavoritesQ.szPath) & '[0]'
     ELSIF INSTRING(':',FavoritesQ.szPath[3 : LEN(FavoritesQ.szPath)])
        N = INSTRING(':',FavoritesQ.szPath[3 : LEN(FavoritesQ.szPath)])
        szSubKey = FavoritesQ.szPath[1 : N+1] & '\Shell\open\command'
        lResult = RegOpenKeyEx(HKEY_CLASSES_ROOT,szSubKey,0,KEY_QUERY_VALUE,hkResult)
        IF lResult = ERROR_SUCCESS
           szValueName = ''
           dwData = 64
           lResult = RegQueryValueEx(hkResult,szValueName,0,dwType,ADDRESS(DataBuffer),dwData)
           IF lResult = ERROR_SUCCESS
              IF DataBuffer[1] = '"'
                 N = INSTRING('"',DataBuffer[2 : dwData])
                 CtrlQueue.ControlFeq{PROP:ICON} = SHORTPATH(DataBuffer[2 : N]) & '[0]'
              ELSE
                 N = INSTRING(' ',DataBuffer)
                 IF N
                    CtrlQueue.ControlFeq{PROP:ICON} = SHORTPATH(DataBuffer[1 : N-1]) & '[0]'
                 ELSE
                    CtrlQueue.ControlFeq{PROP:ICON} = SHORTPATH(CLIP(DataBuffer)) & '[0]'
                 END
              END
           END
           lResult = RegCloseKey(hkResult)
        END
     ELSE
        N = LEN(FavoritesQ.szPath)
        szDirectory = ''
        LOOP X = N TO 1 BY -1
           IF FavoritesQ.szPath[X] = '\'
              szFile = FavoritesQ.szPath[X+1 : N] ! Filename Only
              szDirectory = UPPER( FavoritesQ.szPath[1: X-1] )
              BREAK
           END  ! Pos Directory Separator
        END
        IF CLIP(szDirectory) = ''
           szFile = FavoritesQ.szPath
           szDirectory = PATH()
        END  ! Pos Directory Required
        IF FindExecutable(szFile,szDirectory,szResult) > 32
           CtrlQueue.ControlFeq{PROP:ICON} = SHORTPATH(szResult) & '[0]'
        END
     END

     CtrlQueue.ControlFeq{PROP:HIDE} = FALSE
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DestroyFavoritesMenu  ROUTINE
  J = RECORDS(FavoritesQ)
  LOOP I = 1 TO J
     GET(FavoritesQ,I)
     IF FavoritesQ.MenuFeq <> 0
        DESTROY(FavoritesQ.MenuFeq)
        FavoritesQ.MenuFeq = 0
        PUT(FavoritesQ)
     END
  END
  lFirstFavoriteMenuFeq = 0
  lLastFavoriteMenuFeq = 0

  DO DestroyCtrlQueue

  EXIT

DestroyCtrlQueue ROUTINE
  J = RECORDS(CtrlQueue)
  LOOP I = 1 TO J
     GET(CtrlQueue,I)
     IF CtrlQueue.ControlFeq <> 0
        IF hwndTT
           tt.deltool(CtrlQueue.ControlFeq{PROP:HANDLE})
        END
        DESTROY(CtrlQueue.ControlFeq)
     END
  END
  FREE(CtrlQueue)
  lFirstControlFeq = 0
  lLastControlFeq = 0
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ProcessFavoritesMenu    ROUTINE
  DATA

szURL   CSTRING(256)
szNull  CSTRING(2)

  CODE

  J = RECORDS(FavoritesQ)
  LOOP I = 1 TO J
     GET(FavoritesQ,I)
     IF FavoritesQ.MenuFeq = ACCEPTED()
        szURL = FavoritesQ.szPath
        szNull = ''
        ShellExecute(window{prop:handle},0,szURL,0,szNull,1)
        BREAK
     END
  END

  EXIT

ProcessFavoriteButton   ROUTINE
  DATA

szURL   CSTRING(256)
szNull  CSTRING(2)

  CODE

  CtrlQueue.ControlFeq = ACCEPTED()
  GET(CtrlQueue,+CtrlQueue.ControlFeq)
  IF ~ERRORCODE()
     J = RECORDS(FavoritesQ)
     LOOP I = 1 TO J
        GET(FavoritesQ,I)
        IF FavoritesQ.MenuFeq = CtrlQueue.MenuFeq
           szURL = FavoritesQ.szPath
           szNull = ''
           ShellExecute(window{prop:handle},0,szURL,0,szNull,1)
           BREAK
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SaveViewerStyles    ROUTINE
  LOOP K = 1 TO SCE_CLW_LAST
     loc:szViewerStyle = CLIP(glo:ViewerStyles.StyleGroup[K].Font) & ',' & |
                         glo:ViewerStyles.StyleGroup[K].FontSize   & ',' & |
                         glo:ViewerStyles.StyleGroup[K].FontStyle  & ',' & |
                         glo:ViewerStyles.StyleGroup[K].Bold       & ',' & |
                         glo:ViewerStyles.StyleGroup[K].Italic     & ',' & |
                         glo:ViewerStyles.StyleGroup[K].Underline  & ',' & |
                         glo:ViewerStyles.StyleGroup[K].Fore       & ',' & |
                         glo:ViewerStyles.StyleGroup[K].Back       & ',' & |
                         glo:ViewerStyles.StyleGroup[K].EolFilled  & ',' & |
                         glo:ViewerStyles.StyleGroup[K].CaseOpt    & ',' & |
                         glo:ViewerStyles.StyleGroup[K].Visible    & ',' & |
                         glo:ViewerStyles.StyleGroup[K].HotSpot
     INIMgr.Update('Options','ViewerStyle'& FORMAT(K-1,@n02),loc:szViewerStyle)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetDefaultClarionVersion    ROUTINE
  DATA
loc:szSection       CSTRING(256)
loc:szRoot          CSTRING(256)

  CODE
  loc:szSection = 'Clarion for Windows V2.0'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C2
  END

  loc:szSection = 'Clarion 4'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C4
  END

  loc:szSection = 'Clarion 5'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C5
  END

  loc:szSection = 'Clarion 5  Enterprise Edition'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C5EE
  END

  loc:szSection = 'Clarion 5.5'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C55
  END

  loc:szSection = 'Clarion 5.5  Enterprise Edition'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C55EE
  END

  loc:szSection = 'Clarion 6.0'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C60
  END

  loc:szSection = 'Clarion 6.0  Enterprise Edition'
  loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
  IF loc:szRoot
     glo:bClarionVersion = CWVERSION_C60EE
  END


  !Clarion 7 is not in win.ini file
  !look in registry
  szSubKey = 'SOFTWARE\SoftVelocity\Clarion7'
  RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
  IF RetVal = ERROR_SUCCESS
     szValueName = 'root'
     pType = REG_SZ
     pData = SIZE(loc:szRoot)
     RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
     RetVal = RegCloseKey(hKeyExtension)
     IF loc:szRoot
        glo:bClarionVersion = CWVERSION_C70
     END
  END

  !Clarion 8 is not in win.ini file
  !look in registry
  szSubKey = 'SOFTWARE\SoftVelocity\Clarion8'
  RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
  IF RetVal = ERROR_SUCCESS
     szValueName = 'root'
     pType = REG_SZ
     pData = SIZE(loc:szRoot)
     RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
     RetVal = RegCloseKey(hKeyExtension)
     IF loc:szRoot
        glo:bClarionVersion = CWVERSION_C80
     END
  END

  !Clarion 9 is not in win.ini file
  !look in registry
  szSubKey = 'SOFTWARE\SoftVelocity\Clarion9'
  RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
  IF RetVal = ERROR_SUCCESS
     szValueName = 'root'
     pType = REG_SZ
     pData = SIZE(loc:szRoot)
     RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
     RetVal = RegCloseKey(hKeyExtension)
     IF loc:szRoot
        glo:bClarionVersion = CWVERSION_C90
     END
  END

  !Clarion 10 is not in win.ini file
  !look in registry
  szSubKey = 'SOFTWARE\SoftVelocity\Clarion10'
  RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
  IF RetVal = ERROR_SUCCESS
     szValueName = 'root'
     pType = REG_SZ
     pData = SIZE(loc:szRoot)
     RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
     RetVal = RegCloseKey(hKeyExtension)
     IF loc:szRoot
        glo:bClarionVersion = CWVERSION_C100
     END
  END

  IF ~glo:bClarionVersion
     glo:bClarionVersion = CWVERSION_C55EE
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
TakeHtmlHelp    ROUTINE
  CASE ACCEPTED()
    OF ?HelpOnHelp
       oHH.SetHelpFile( 'NTHELP.CHM' )
       oHH.ShowTopic('htmlhelp_overview.htm')
       oHH.SetHelpFile( 'ABCVIEW.CHM' )
    OF ?HelpContents
       oHH.SetHelpFile( 'ABCVIEW.CHM' )
       oHH.ShowTOC()
    OF ?HelpSearch
       oHH.SetHelpFile( 'ABCVIEW.CHM' )
       oHH.ShowSearch()
  ELSE
       oHH.SetHelpFile( 'ABCVIEW.CHM' )
       oHH.SetTopic('Main_Window.htm')
  END
  EXIT
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
loc:TreeQ:szText    LIKE(TreeQ.szText)
RefreshNeeded       BYTE,AUTO
szURL               CSTRING(256)
szNull              CSTRING(2)
cc                  LONG            !completion code
X                   LONG
Y                   LONG
loc:Layout          BYTE
loc:sCurrentCursor  STRING(4)

szProperty          CSTRING('fold')
szPropertyValue0    CSTRING('0')
szPropertyValue1    CSTRING('1')
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
QueueLimit      LONG
ScrollBarWidth  LONG
fld             LONG
MouseDownRow    LONG
X               LONG
Y               LONG
W               LONG
PanelX          LONG    !X position for Option Panel controls
AsciiBoxHeight  LONG
vXPos           LONG,AUTO
XMin            LONG,AUTO
XMax            LONG,AUTO
      COMPILE('***',_Scintilla_)
lc  LONG,AUTO
lh  LONG,AUTO
h   LONG,AUTO
h2  LONG,AUTO
      !***
[END]
[END]
WHEN 'TakeNewSelection'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
loc:TreeQ:szText     LIKE(TreeQ.szText)
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
loc:build           CSTRING(5)
loc:szSection       CSTRING(256)
loc:szRoot          CSTRING(261)
loc:szRedFileName   CSTRING(261)
loc:szXMLFileName   CSTRING(261)
loc:sCurrentCursor  STRING(4)
X                   LONG
Y                   LONG
W                   LONG
H                   LONG

hm  UNSIGNED
hr  UNSIGNED
mi  LIKE(MENUINFO),PRE()

szType              CSTRING('IMAGE')
szBitmap            CSTRING(33)
hInst               LONG                              !application instance handle
hRes                LONG                              !Resource Handle for BitMap
hMem                LONG                              !global handle
hBitmap             LONG                              !Bitmap handle
hBmp                LONG                              !resized bitmap for brush
lpBM                LONG                              !pointer to BM resource data
pBM                 &BITMAPFILEHEADER
pBI                 &BITMAPINFOHEADER
pBMI                &BITMAPINFO
lpBits              LONG
hDC                 LONG
szLibName           CSTRING(33)
cy                  LONG
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
loc:sCurrentCursor  STRING(4)
X   LONG
Y   LONG
W   LONG
H   LONG
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
X                   LONG
Y                   LONG
rc                  LIKE(RECT)
QueueLimit          LONG
ScrollBarWidth      LONG
[END]
[END]
WHEN 'Open'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
X   LONG
Y   LONG
[END]
[END]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
FirstTime   BYTE(TRUE),STATIC
X           LONG,AUTO
Y           LONG,AUTO
PanelX      LONG,AUTO
vXPos       LONG,AUTO
MinX        LONG,AUTO
MaxX        LONG,AUTO
[END]
[END]
[END]
EMBED %ResizerMethodCodeSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
LOOP FldEqu = ?ExpandButton TO ?Panel6
  SELF.SetStrategy(FldEqu, Resize:FixLeft+Resize:FixTop, Resize:LockSize)
END

SELF.SetStrategy(?ObjectDropList, Resize:FixLeft+Resize:FixTop, Resize:LockWidth+Resize:ConstantBottom)

SELF.SetStrategy(?glo:szCategory:Prompt, Resize:FixLeft+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?glo:szCategoryChoice, Resize:FixLeft+Resize:FixTop, Resize:LockHeight+Resize:ConstantRight)
SELF.SetStrategy(?glo:bDetailLevel:Prompt, Resize:FixLeft+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?glo:bDetailLevel, Resize:FixLeft+Resize:FixTop, Resize:LockSize)

SELF.SetStrategy(?glo:bShowProtected, Resize:FixLeft+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?glo:bShowPrivate, Resize:FixLeft+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?glo:bShowModule, Resize:FixLeft+Resize:FixTop, Resize:LockSize)

SELF.SetStrategy(?HyperlinkButton, Resize:FixRight+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?PrevHyperlink, Resize:FixRight+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?NextHyperlink, Resize:FixRight+Resize:FixTop, Resize:LockSize)
SELF.SetStrategy(?HistoryList, Resize:FixRight+Resize:FixTop, Resize:LockSize)

SELF.SetStrategy(?Locator, Resize:FixLeft+Resize:FixBottom, Resize:LockSize)

SELF.SetStrategy(?VcrTop, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?VcrRewind, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?VcrBack, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?VcrPlay, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?VcrFastForward, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?VcrBottom, Resize:FixRight+Resize:FixBottom, Resize:LockSize)

SELF.SetStrategy(?VirtualBox,Resize:FixLeft+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?VirtualString,Resize:FixLeft+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?ProtectedBox,Resize:FixLeft+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?ProtectedString,Resize:FixLeft+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?PrivateBox,Resize:FixLeft+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?PrivateString,Resize:FixLeft+Resize:FixBottom, Resize:LockSize)

SELF.SetStrategy(?CloseButton, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
SELF.SetStrategy(?SizeGrip, Resize:FixRight+Resize:FixBottom, Resize:LockSize)
[END]
[END]
WHEN 'Resize'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
vXPos1 = ?SplitterBar{prop:XPos}
vXPos2 = ?VerticalSplitter{prop:XPos}
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
?HistoryList{PROP:XPos}     = Window{PROP:Width} - 18
?NextHyperlink{PROP:XPos}   = Window{PROP:Width} - 30 !29
?PrevHyperlink{PROP:XPos}   = Window{PROP:Width} - 42 !40
?HyperlinkButton{PROP:XPos} = Window{PROP:Width} - 54 !51

?LocatorImage{PROP:YPos} = ?ObjectDropList{PROP:YPos} + ?ObjectDropList{PROP:Height} + 1
?Locator{PROP:YPos} = ?LocatorImage{PROP:YPos}

CASE glo:Layout
OF 1
   ?ObjectDropList{PROP:Width} = vXPos1 - 8
   ?SplitterBar{PROP:Height} = ?ObjectDropList{PROP:Height}
   ?SplitterBar{PROP:YPos} = ?ObjectDropList{PROP:YPos}
   ?SplitterBar{PROP:XPos} = vXPos1

   ?TreeList{PROP:XPos} = vXPos1+2
   ?TreeList{PROP:YPos} = ?ObjectDropList{PROP:YPos}
   ?TreeList{PROP:Width} = vXPos2-(vXPos1+2)
   ?TreeList{PROP:Height} = ?ObjectDropList{PROP:Height}

   ?VerticalSplitter{PROP:XPos} = vXPos2
   ?VerticalSplitter{PROP:YPos} = ?TreeList{PROP:YPos}

   ?AsciiBox{PROP:XPos} = ?VerticalSplitter{PROP:XPos} + 3
   ?AsciiBox{PROP:YPos} = ?VerticalSplitter{PROP:YPos} + SPLITTERHEIGHT - 2
   ?AsciiBox{PROP:Height} = ?ObjectDropList{PROP:Height} - SPLITTERHEIGHT + 2
   ?AsciiBox{PROP:Width} = Window{PROP:Width} - ?AsciiBox{PROP:XPos} - 9

ELSE  !default
   ?TreeList{PROP:YPos} = ?ObjectDropList{PROP:YPos}

   ?VerticalSplitter{PROP:XPos} = ?TreeList{PROP:XPos}
   ?VerticalSplitter{PROP:YPos} = ?TreeList{PROP:YPos} + ?TreeList{PROP:Height}
   ?VerticalSplitter{PROP:Width} = ?TreeList{PROP:Width}

   ?AsciiBox{PROP:XPos} = ?TreeList{PROP:XPos}+1
   ?AsciiBox{PROP:YPos} = ?TreeList{PROP:YPos} + ?TreeList{PROP:Height} + SPLITTERHEIGHT
   ?AsciiBox{PROP:Width} = ?TreeList{PROP:Width}-1
   ?AsciiBox{PROP:Height} = Window{PROP:Height} - ?VerticalSplitter{PROP:YPos} - (22 + SPLITTERHEIGHT)   !24

   ?SplitterBar{PROP:Height} = ?ObjectDropList{PROP:Height}
   ?SplitterBar{PROP:YPos} = ?TreeList{PROP:YPos}
   ?SplitterBar{PROP:XPos} = ?TreeList{PROP:XPos} - 2
END

PanelX = ?TreeList{PROP:XPos} - 2
PanelX = CHOOSE(PanelX < PANELMINIMUMX, PANELMINIMUMX, PanelX)

?SplitterBar:2{PROP:XPos} = PanelX

COMPILE('***',_Scintilla_)
!======================================================================
!scintilla support
!======================================================================
SETPOSITION(?SciControl:Region,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos},?AsciiBox{PROP:Width},?AsciiBox{PROP:Height})
SciControl.Reset(FALSE)
!======================================================================
!***
SETPOSITION(?loc:szAsciiFilename,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos}-6,?AsciiBox{PROP:Width},)

?ModuleBox{PROP:YPos} = ?VirtualBox{PROP:YPos}
?ModuleString{PROP:YPos} = ?VirtualBox{PROP:YPos}
?EquateBox{PROP:YPos} = ?VirtualBox{PROP:YPos}
?Equate:Image{PROP:YPos} = ?VirtualBox{PROP:YPos}
?GroupdEquate:String{PROP:YPos} = ?VirtualBox{PROP:YPos}
?EnumerationBox{PROP:YPos} = ?VirtualBox{PROP:YPos}
?Enumeration:Image{PROP:YPos} = ?VirtualBox{PROP:YPos}
?EnumeratedEquate:String{PROP:YPos} = ?VirtualBox{PROP:YPos}

?Panel7{PROP:XPos} = (Window{PROP:Width} - ?RefreshGroup{PROP:Width})/2
?ProcessString{PROP:XPos} = ?Panel7{PROP:XPos}+4
?ScanString{PROP:XPos} = ?Panel7{PROP:XPos}+4
?glo:lLineNum{PROP:XPos} = ?Panel7{PROP:XPos}+211
?Panel8{PROP:XPos} = ?Panel7{PROP:XPos}+29
?Panel8:2{PROP:XPos} = ?Panel7{PROP:XPos}+29
?ProgressBox{PROP:XPos} = ?Panel7{PROP:XPos}+30
?ProgressBox:2{PROP:XPos} = ?Panel7{PROP:XPos}+30
?Box5{PROP:XPos} = ?Panel7{PROP:XPos}+2
!?Box6{PROP:XPos} = ?Panel7{PROP:XPos}+?Panel7{PROP:Width}  !258

DO DrawLatchBox

OMIT('***',_Scintilla_)
Viewer.DisplayPage()
!***
[END]
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
CASE KEYCODE()
  OF F5Key
     POST(EVENT:Accepted,?RefreshButton)
  OF CtrlF5
     loc:ForceSmartScan = TRUE
     POST(EVENT:Accepted,?RefreshButton)
  OF PlusKey
     GET(TreeQ,CHOICE(?TreeList))
     TreeQ:lLevel = ABS(TreeQ:lLevel)
     PUT(TreeQ)
     DISPLAY(?TreeList)
  OF MinusKey
     J = CHOICE(?TreeList)
     IF J < RECORDS(TreeQ)
        GET(TreeQ,J + 1)
        K = ABS(TreeQ:lLevel)
        GET(TreeQ,J)
        IF ABS(TreeQ:lLevel) < K
           TreeQ:lLevel = ABS(TreeQ:lLevel) * -1
           PUT(TreeQ)
           DISPLAY(?TreeList)
        END
     END
  OF BSKey OROF SpaceKey
     IF FOCUS() = ?ObjectDropList
        SETKEYCODE(0)
        POST(EVENT:Accepted,?ObjectDropList)
     END
END
[END]
WHEN 'PreAlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
PROPERTY:END
IF KEYCODE() <> EscKey
   CYCLE
END
[END]
WHEN 'DoResize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE glo:Layout
OF 1
   X = ?SplitterBar{PROP:XPos}
   vXPos = ?VerticalSplitter{PROP:XPos}
   MaxX = Window{PROP:Width}-192
   MaxX = CHOOSE(MaxX<vXPos,MaxX,vXPos)
   IF X < 8
      X = 8
   ELSIF X > MaxX
      X = MaxX
   END

   vXPos = ?SplitterBar{PROP:XPos}
   MinX = 10
   MinX = CHOOSE(vXPos>MinX,vXPos,MinX)
   Y = ?VerticalSplitter{PROP:XPos}
   IF Y < MinX
      Y = MinX
   ELSIF Y > Window{PROP:Width}-10
      Y = Window{PROP:Width}-10
   END

   PanelX = CHOOSE(X < PANELMINIMUMX,PANELMINIMUMX,X)

   ?ObjectDropList{PROP:Width} = X-8

   ?TreeList{PROP:XPos} = X+2
   ?TreeList{PROP:Width} = Y - (X+2)

   ?AsciiBox{PROP:XPos} = Y+3
   ?AsciiBox{PROP:Width} = Window{PROP:Width}-(Y+2)-8

   ?SplitterBar{PROP:Height} = ?TreeList{PROP:Height}
   ?SplitterBar{PROP:YPos} = ?TreeList{PROP:YPos}
   ?SplitterBar{PROP:XPos} = X
   ?SplitterBar:2{PROP:XPos} = PanelX
   Splitter1_XPos = X

   ?VerticalSplitter{PROP:XPos} = Y
   Splitter2_XPos = Y
   ?VerticalSplitter{PROP:Height} = ?TreeList{PROP:Height}

    COMPILE('***',_Scintilla_)
   !======================================================================
   !scintilla support
   !======================================================================
   SETPOSITION(?SciControl:Region,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos},?AsciiBox{PROP:Width},?AsciiBox{PROP:Height})
   SciControl.Reset(FALSE)
   !======================================================================
    !***
   SETPOSITION(?loc:szAsciiFilename,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos}-6,?AsciiBox{PROP:Width},)
ELSE
   X = ?SplitterBar{PROP:XPos}
   IF X < 75
      X = 75
   ELSIF X > Window{PROP:Width}-192
      X = Window{PROP:Width}-192
   END

   Y = ?VerticalSplitter{PROP:YPos}
   IF Y < 74
      Y = 74
   ELSIF Y > Window{PROP:Height}-42
      Y = Window{PROP:Height}-42
   END

   PanelX = CHOOSE(X < PANELMINIMUMX,PANELMINIMUMX,X)

   ?ObjectDropList{PROP:Width} = X-8

   ?TreeList{PROP:XPos} = X+2
   ?TreeList{PROP:Width} = Window{PROP:Width}-(X+2)-8
   ?TreeList{PROP:Height} = Y-?TreeList{PROP:YPos}

   ?AsciiBox{PROP:XPos} = X+3
   ?AsciiBox{PROP:YPos} = Y+SPLITTERHEIGHT
   ?AsciiBox{PROP:Width} = Window{PROP:Width}-(X+2)-9
   ?AsciiBox{PROP:Height} = Window{PROP:Height}-(Y+SPLITTERHEIGHT)-22

   ?SplitterBar{PROP:Height} = ?TreeList{PROP:Height} + ?AsciiBox{PROP:Height} + SPLITTERHEIGHT
   ?SplitterBar{PROP:YPos} = ?TreeList{PROP:YPos}
   ?SplitterBar{PROP:XPos} = X
   Splitter1_XPos = X
   ?SplitterBar:2{PROP:XPos} = PanelX

   ?VerticalSplitter{PROP:XPos} = X+2
   ?VerticalSplitter{PROP:YPos} = Y
   Splitter2_YPos = Y
   ?VerticalSplitter{PROP:Width} = Window{PROP:Width}-(X+2)-8
   ?VerticalSplitter{PROP:Height} = 2

    COMPILE('***',_Scintilla_)
   !======================================================================
   !scintilla support
   !======================================================================
   SETPOSITION(?SciControl:Region,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos},?AsciiBox{PROP:Width},?AsciiBox{PROP:Height})
   SciControl.Reset(FALSE)
   !======================================================================
    !***
   SETPOSITION(?loc:szAsciiFilename,?AsciiBox{PROP:XPos},?AsciiBox{PROP:YPos}-6,?AsciiBox{PROP:Width},)
END

?glo:szCategoryChoice{PROP:Width} = PanelX - ?glo:szCategoryChoice{PROP:XPos} - 2
?glo:bDetailLevel:Prompt{PROP:XPos} = PanelX + 8
?glo:bDetailLevel{PROP:XPos} = PanelX + 36
?glo:bShowProtected{PROP:XPos} = PanelX + 54
?glo:bShowPrivate{PROP:XPos} = PanelX + 104
?glo:bShowModule{PROP:XPos} = PanelX + 154

DO CreateFavoritesMenu

POST(EVENT:MouseUp,?SplitterBar)
POST(EVENT:MouseUp,?VerticalSplitter)
[END]
WHEN 'Maximized'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF bSizeOnMaximize
   bSizeOnMaximize = FALSE
   POST(EVENT:Sized)
END
[END]
WHEN 'Restore'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
J = RECORDS(ViewerThreadQ)
LOOP I = 1 TO J
   GET(ViewerThreadQ,I)
   POST(EVENT:Restore,,ViewerThreadQ.lThreadId)
END
[END]
WHEN 'Iconize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF IsZoomed(0{PROP:Handle})
   bSizeOnMaximize = TRUE
ELSE
   bSizeOnMaximize = FALSE
END
J = RECORDS(ViewerThreadQ)
LOOP I = 1 TO J
   GET(ViewerThreadQ,I)
   POST(EVENT:Iconize,,ViewerThreadQ.lThreadId)
END
[END]
WHEN 'LoseFocus'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
SELF.HasFocus = FALSE
bTrackMouse = FALSE
?SplitterBar{PROP:Color} = COLOR:NONE
?SplitterBar{PROP:Fill} = COLOR:NONE
?VerticalSplitter{PROP:Color} = COLOR:NONE
?VerticalSplitter{PROP:Fill} = COLOR:NONE
[END]
WHEN 'GainFocus'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
SELF.HasFocus = TRUE
[END]
[END]
EMBED %ControlHandling
[INSTANCES]
WHEN '?ObjectDropList'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6800
PROPERTY:END
OF EVENT:LoseFocus
   Locator.Shadow = ''
   ?ObjectDropList{PROP:SelectedFillColor} = COLOR:Silver
   ?ObjectDropList{PROPSTYLE:BackSelected,STYLE:NORMAL} = COLOR:Silver
   ?ObjectDropList{PROPSTYLE:BackSelected,STYLE:NORMAL_NEW} = COLOR:Silver
[END]
WHEN '?AsciiBox'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9000
PROPERTY:END
OMIT('***',_Scintilla_)
Viewer.TakeEvent(EVENT())
!***
[END]
WHEN '?SplitterBar'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6800
PROPERTY:END
OF EVENT:MouseDown
   IF SELF.HasFocus
      bTrackMouse = TRUE
      ?SplitterBar{PROP:Color} = COLOR:BLACK
      ?SplitterBar{PROP:Fill} = COLOR:BLUE
   END
[END]
WHEN '?VerticalSplitter'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6800
PROPERTY:END
OF EVENT:MouseDown
   IF SELF.HasFocus
      bTrackMouse = TRUE
      ?VerticalSplitter{PROP:Color} = COLOR:BLACK
      ?VerticalSplitter{PROP:Fill} = COLOR:BLUE
   END
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
SPLITTERHEIGHT  EQUATE(8)
PANELMINIMUMX   EQUATE(75)
Splitter1_XPos  LONG
Splitter2_XPos  LONG
Splitter2_YPos  LONG
ListWithFocus   LONG(-1)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
  COMPILE('***',_Scintilla_)
!==========================================================!
!ToolTip for Scintilla Viewer                              !
!==========================================================!
Viewer_tt            ToolTipClass                          !
hwndViewer_TT        HWND                                  !
!==========================================================!
! ***
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
lFirstMRUMenuFeq     LONG
lLastMRUMenuFeq      LONG

locator              IncrementalLocatorClass
szLocator            LIKE(ClassNameQ.szClassName)

bc                   &BrowseClass
TreeStateQ           QUEUE,PRE(TSQ)
szClassName          LIKE(ClassQ.szClassName)
state                  BYTE,DIM(1000)                       !room for 8000 queue entries
                     END

AsciiFilename        STRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
AsciiFile            FILE,DRIVER('ASCII'),NAME(AsciiFilename),PRE(A1),THREAD
RECORD                RECORD,PRE()
TextLine                STRING(255)
                      END
                     END

bEnableFolding       BYTE(TRUE)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5050
PROPERTY:END
XML_Queue          QUEUE,PRE(XML)
ClassName            CSTRING(64)
ParentClassName      CSTRING(64)
DeclarationPath      CSTRING(256)
DeclarationLine      LONG
DefinitionPath       CSTRING(256)
IsABCClass           CSTRING(6)
IsInterface          CSTRING(6)
Private              CSTRING(6)
                   END

szClarionKeywords    CSTRING(4096)
szCompilerDirectives CSTRING(4096)
szBuiltinProcsFuncs  CSTRING(4096)
szStructDataTypes    CSTRING(4096)
szAttributes         CSTRING(4096)
szStandardEquates    CSTRING(4096)

sav:TreeQ:szText     LIKE(TreeQ.szText)

MRU_Queue   QUEUE,PRE(MRU_Queue)
szName        CSTRING(64)
szSortName    CSTRING(64)
szObjectType  CSTRING(10)
MenuFeq       LONG
            END

lFirstControlFeq    LONG
lLastControlFeq     LONG
CtrlQueue    QUEUE,PRE(CtrlQueue)
ControlFeq        LONG  !the button
MenuFeq           LONG  !corresponding menu option
                END

bSyncView       BYTE(FALSE)
bSizeOnMaximize BYTE(FALSE)

szIniFile       STRING(256),STATIC
IniFile         FILE,DRIVER('ASCII'),NAME(szIniFile)
IniRecord         RECORD
IniBuffer           STRING(256)
                  END
                END
[END]
EMBED %SciMethodCodeSection
[INSTANCES]
WHEN '6'
[INSTANCES]
WHEN 'TakeOpenWindow'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
COMPILE('***',_Scintilla_)
!======================================================================
!scintilla support
!======================================================================
IF bControlInitialised
   SciControl.UsePopup(FALSE)
   SciControl.SetDefaults()
END
!***
[END]
[END]
WHEN 'OpenFile'
[INSTANCES]
WHEN '(*CSTRING szFileName),BOOL'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
?sciControl:Region{PROP:Use} = SELF.szTextBuffer
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(*WINDOW W,LONG feq,UNSIGNED id,BOOL Themed = 0),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
OMIT('***',UseDefaultWordlist=1)
IF srcGetWordList(szClarionKeywords, szCompilerDirectives, szBuiltinProcsFuncs, szStructDataTypes, szAttributes, szStandardEquates)
   IF CLIP(szClarionKeywords)
      SELF.ClarionKeywords     &= szClarionKeywords
   END
   IF CLIP(szCompilerDirectives)
      SELF.CompilerDirectives  &= szCompilerDirectives
   END
   IF CLIP(szBuiltinProcsFuncs)
      SELF.BuiltinProcsFuncs   &= szBuiltinProcsFuncs
   END
   IF CLIP(szStructDataTypes)
      SELF.StructDataTypes     &= szStructDataTypes
   END
   IF CLIP(szAttributes)
      SELF.Attributes          &= szAttributes
   END
   IF CLIP(szStandardEquates)
      IF glo:bClarionVersion >= CWVERSION_C70 !CWVERSION_C71
         szStandardEquates = szStandardEquates & |
                             ' BEEP: BUTTON: CHARSET: COLOR: CREATE: CURSOR: DATATYPE: DDE: DOCK: DRIVEROP: '   & |
                             'EVENT: FF_: FILE: FONT: ICON: LISTZONE: MATCH: OCX: OCXEVENT: PAPER: PAPERBIN: '  & |
                             'PEN: PROP: PROPLIST: PROPPRINT: REJECT: RESOLUTION: STD: TPSREADONLY '            & |
                             'VBXEVENT: WARN:'
      END
      SELF.StandardEquates     &= szStandardEquates
   END
END
!***
SELF.Style = glo:ViewerStyles
IF glo:Typeface
   SELF.SetTypeface(glo:Typeface)
END
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
CASE EVENT()
   OF SCEN_SETFOCUS
      ListWithFocus = -1
   !OF SCEN_KILLFOCUS
   !   ListWithFocus = 0

   OF    SCN_MARGINCLICK
      SELF.ToggleFold(SELF.LineFromPosition(SELF.MarginClickPosition))

   OF    SCN_HOTSPOTCLICK        |
   OROF  SCN_HOTSPOTDOUBLECLICK
      WordEndPosition = SELF.WordEndPosition(SELF.HotSpotClickPosition, 0)
      WordStartPosition = SELF.WordStartPosition(SELF.HotSpotClickPosition, 0)
      SELF.SetCurrentPos(WordStartPosition)
      SELF.SetAnchor(WordEndPosition)
      SELF.GetSelText(szHotClickWord)
      SELF.SetSel(SELF.HotSpotClickPosition,SELF.HotSpotClickPosition)
      CASE glo:bClarionVersion
        OF CWVERSION_C2
           HELP(szRoot & '\bin\CW20help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C4
           HELP(szRoot & '\bin\C4help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C5 OROF CWVERSION_C5EE
           HELP(szRoot & '\bin\C5help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C55 OROF CWVERSION_C55EE
           HELP(szRoot & '\bin\C55help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C60 OROF CWVERSION_C60EE
           HELP(szRoot & '\bin\C60help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
           IF oHH &= NULL
              oHH &= NEW tagHTMLHelp
              oHH.Init(szRoot & '\bin\ClarionHelp.chm')
           ELSE
              oHH.SetHelpFile(szRoot & '\bin\ClarionHelp.chm')
           END
           oHH.KeyWordLookup(szHotClickWord)
           !oHH.ShowTopic(szHotClickWord)
           oHH.SetHelpFile( 'ABCVIEW.CHM' )
      END
END
[END]
[END]
WHEN 'FindWindowTakeOpenWindow'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4500
PROPERTY:END
!  hwndViewer_tt = Viewer_tt.init(0{PROP:HANDLE},1) !ToolTipClass Initialization
IF hwndViewer_tt
   Fld = 0
   LOOP
      Fld = 0{PROP:NextField,Fld}
      IF Fld = 0
         BREAK
      ELSE
         IF Fld{PROP:TIP}
            IF INSTRING('<13,10>',Fld{PROP:TIP},1,1)
               Viewer_tt.addtip(Fld{PROP:HANDLE},Fld{PROP:TIP},1)
            ELSE
               Viewer_tt.addtip(Fld{PROP:HANDLE},Fld{PROP:TIP},0)
            END!IF
            Fld{PROP:TIP}=''
         END!IF
      END!IF
   END!LOOP
   Viewer_tt.SetTipTextColor(COLOR:NAVY)
END!IF
[END]
[END]
WHEN 'FindWindowTakeCloseWindow'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4500
PROPERTY:END
Viewer_tt.Kill()
[END]
[END]
WHEN 'Colourise'
[INSTANCES]
WHEN '(LONG lStart,LONG lEnd)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
OMIT('***',UseDefaultWordlist=1)
IF UPPER(SUB(ModuleQ.szModuleName,-3,3)) = 'CLW'

   FirstLine = lStart
   LastLine = CHOOSE(lEnd = -1, SELF.GetLineCount() - 1, lEnd)

   SaveClass = POINTER(ClassQ)
   LastClass = RECORDS(ClassQ)
   LOOP thisClass = 1 TO LastClass
      GET(ClassQ,thisCLass)
      IF ClassQ.lModuleID = ModuleQ.lModuleID
         N = RECORDS(MethodQ)
         LOOP M = 1 TO N
            GET(MethodQ,M)
            IF MethodQ.lClassID = ClassQ.lClassID
               IF INRANGE(MethodQ:lSourceLine,FirstLine,LastLine)
                  sciControl.SetFoldLevel(MethodQ:lSourceLine-1,BOR(1023,SC_FOLDLEVELHEADERFLAG))
               END
            END
         END
      END
   END
   GET(ClassQ,SaveClass)

   LOOP thisLine = FirstLine TO LastLine
     thisFoldLevel = BAND(SELF.GetFoldLevel(thisLine),SC_FOLDLEVELNUMBERMASK)
     IF thisFoldLevel = 1023
        SELF.SetFoldLevel(thisLine,BOR(1024,SC_FOLDLEVELHEADERFLAG))
        LOOP thisLine = thisLine+1 TO LastLine
           thisFoldLevel = BAND(SELF.GetFoldLevel(thisLine),SC_FOLDLEVELNUMBERMASK)
           IF thisFoldLevel = 1023
              thisLine -= 1
              BREAK
           ELSE
              IF BAND(SELF.GetFoldLevel(thisLine),SC_FOLDLEVELHEADERFLAG)
                 SELF.SetFoldLevel(thisLine,BOR(thisFoldLevel+1,SC_FOLDLEVELHEADERFLAG))
              ELSE
                 SELF.SetFoldLevel(thisLine,thisFoldLevel+1)
              END
           END
        END
     END
   END
END
!***
[END]
[END]
WHEN 'SetBuffer'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetClarionLexer()
[END]
[END]
[END]
[END]
EMBED %SciMethodDataSection
[INSTANCES]
WHEN '6'
[INSTANCES]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
WordEndPosition     LONG,AUTO
WordStartPosition   LONG,AUTO
szHotClickWord      CSTRING(256)
[END]
[END]
WHEN 'FindWindowTakeOpenWindow'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Fld     LONG,AUTO
[END]
[END]
WHEN 'Colourise'
[INSTANCES]
WHEN '(LONG lStart,LONG lEnd)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
M               LONG
N               LONG
FirstLine       LONG
LastLine        LONG
thisLine        LONG
thisFoldLevel   LONG
thisClass       LONG
LastClass       LONG
SaveClass       LONG
foldQ           QUEUE,PRE(foldQ)
foldLine          LONG
                END

Indx            LONG
Jndx            LONG
szText          CSTRING(1024)
cchText         LONG
foldLevel       LONG
[END]
[END]
[END]
[END]
EMBED %ResizerMethodDataSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Resize'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
PanelX               LONG,AUTO
vXPos1               LONG,AUTO
vXPos2               LONG,AUTO
vcrXPos              LONG,AUTO
vcrYPos              LONG,AUTO
[END]
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 4
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Main_Window.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 1
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 2
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%UseBalloonTips LONG  (1)
%ToolTipControls MULTI LONG  (11, 1, 10, 9, 2, 3, 4, 5, 13, 6, 7, 8, 12, 14, 15, |
  16, 17, 18, 19, 20, 22, 23, 24, 25)
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 24
WHEN  (1) ('?ClassRegion')
WHEN  (2) ('?StructureRegion')
WHEN  (3) ('?EquateRegion')
WHEN  (4) ('?ViewSourceButton')
WHEN  (5) ('?HelpButton')
WHEN  (6) ('?OptionsButton')
WHEN  (7) ('?RefreshButton')
WHEN  (8) ('?CloseButton')
WHEN  (9) ('?TreeRegion')
WHEN  (10) ('?InterfaceRegion')
WHEN  (11) ('?ExpandButton')
WHEN  (12) ('?ContractButton')
WHEN  (13) ('?ViewNoteButton')
WHEN  (14) ('?glo:szCategoryChoice')
WHEN  (15) ('?glo:bDetailLevel')
WHEN  (16) ('?glo:bShowProtected')
WHEN  (17) ('?glo:bShowPrivate')
WHEN  (18) ('?PrevHyperlink')
WHEN  (19) ('?HistoryList')
WHEN  (20) ('?NextHyperlink')
WHEN  (22) ('?HyperlinkButton')
WHEN  (23) ('?glo:bShowModule')
WHEN  (24) ('?CallTreeButton')
WHEN  (25) ('?AddClassWizardButton')

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 24
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)
WHEN  (13) (0)
WHEN  (14) (0)
WHEN  (15) (0)
WHEN  (16) (0)
WHEN  (17) (0)
WHEN  (18) (0)
WHEN  (19) (0)
WHEN  (20) (0)
WHEN  (22) (0)
WHEN  (23) (0)
WHEN  (24) (0)
WHEN  (25) (0)

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 24
WHEN  (1) ('Use Local Data Variable')
WHEN  (2) ('Use Local Data Variable')
WHEN  (3) ('Specify Text')
WHEN  (4) ('Specify Text')
WHEN  (5) ('Specify Text')
WHEN  (6) ('Use Local Data Variable')
WHEN  (7) ('Specify Text')
WHEN  (8) ('Use Tip Text')
WHEN  (9) ('Specify Text')
WHEN  (10) ('Specify Text')
WHEN  (11) ('Specify Text')
WHEN  (12) ('Specify Text')
WHEN  (13) ('Specify Text')
WHEN  (14) ('Use Tip Text')
WHEN  (15) ('Use Tip Text')
WHEN  (16) ('Use Tip Text')
WHEN  (17) ('Use Tip Text')
WHEN  (18) ('Use Tip Text')
WHEN  (19) ('Use Tip Text')
WHEN  (20) ('Use Tip Text')
WHEN  (22) ('Use Tip Text')
WHEN  (23) ('Use Tip Text')
WHEN  (24) ('Use Tip Text')
WHEN  (25) ('Use Tip Text')

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 24
WHEN  (1) ('sClassTip')
WHEN  (2) ('sStructureTip')
WHEN  (3) ('FilesOpened')
WHEN  (4) ('FilesOpened')
WHEN  (5) ('FilesOpened')
WHEN  (6) ('sOptionsTip')
WHEN  (7) ('FilesOpened')
WHEN  (8) ('FilesOpened')
WHEN  (9) ('FilesOpened')
WHEN  (10) ('FilesOpened')
WHEN  (11) ('FilesOpened')
WHEN  (12) ('FilesOpened')
WHEN  (13) ('FilesOpened')
WHEN  (14) ('FilesOpened')
WHEN  (15) ('FilesOpened')
WHEN  (16) ('FilesOpened')
WHEN  (17) ('FilesOpened')
WHEN  (18) ('FilesOpened')
WHEN  (19) ('FilesOpened')
WHEN  (20) ('FilesOpened')
WHEN  (22) ('FilesOpened')
WHEN  (23) ('FilesOpened')
WHEN  (24) ('FilesOpened')
WHEN  (25) ('FilesOpened')

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 24
WHEN  (1) ('szRoot')
WHEN  (2) ('szRoot')
WHEN  (3) ('szRoot')
WHEN  (4) ('szRoot')
WHEN  (5) ('szRoot')
WHEN  (6) ('szRoot')
WHEN  (7) ('szRoot')
WHEN  (8) ('szRoot')
WHEN  (9) ('szRoot')
WHEN  (10) ('szRoot')
WHEN  (11) ('szRoot')
WHEN  (12) ('szRoot')
WHEN  (13) ('szRoot')
WHEN  (14) ('szRoot')
WHEN  (15) ('szRoot')
WHEN  (16) ('szRoot')
WHEN  (17) ('szRoot')
WHEN  (18) ('szRoot')
WHEN  (19) ('szRoot')
WHEN  (20) ('szRoot')
WHEN  (22) ('szRoot')
WHEN  (23) ('glo:hwnd_main')
WHEN  (24) ('glo:hwnd_main')
WHEN  (25) ('glo:hwnd_main')

%TTText DEPEND %ToolTipControls DEFAULT TIMES 12
WHEN  (1) ('View Class Hierarchy')
WHEN  (2) ('View Structures')
WHEN  (3) ('View Enumerated Equates')
WHEN  (4) ('View Source')
WHEN  (5) ('View Help')
WHEN  (6) ('Edit User Preferences')
WHEN  (7) ('Refresh Tree')
WHEN  (9) ('View Method Call Tree')
WHEN  (10) ('View Interfaces')
WHEN  (11) ('Expand All')
WHEN  (12) ('Contract All')
WHEN  (13) ('View User Notes')

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 24
WHEN  (1) (1)
WHEN  (2) (1)
WHEN  (3) (1)
WHEN  (4) (1)
WHEN  (5) (1)
WHEN  (6) (1)
WHEN  (7) (1)
WHEN  (8) (1)
WHEN  (9) (1)
WHEN  (10) (1)
WHEN  (11) (1)
WHEN  (12) (1)
WHEN  (13) (1)
WHEN  (14) (1)
WHEN  (15) (1)
WHEN  (16) (1)
WHEN  (17) (1)
WHEN  (18) (1)
WHEN  (19) (1)
WHEN  (20) (1)
WHEN  (22) (1)
WHEN  (23) (1)
WHEN  (24) (1)
WHEN  (25) (1)

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 24
WHEN  (1) ('?ClassRegion')
WHEN  (2) ('?StructureRegion')
WHEN  (3) ('?EquateRegion')
WHEN  (4) ('?ViewSourceButton')
WHEN  (5) ('?HelpButton')
WHEN  (6) ('?OptionsButton')
WHEN  (7) ('?RefreshButton')
WHEN  (8) ('?CloseButton')
WHEN  (9) ('?TreeRegion')
WHEN  (10) ('?InterfaceRegion')
WHEN  (11) ('?ExpandButton')
WHEN  (12) ('?ContractButton')
WHEN  (13) ('?ViewNoteButton')
WHEN  (14) ('?glo:szCategoryChoice')
WHEN  (15) ('?glo:bDetailLevel')
WHEN  (16) ('?glo:bShowProtected')
WHEN  (17) ('?glo:bShowPrivate')
WHEN  (18) ('?PrevHyperlink')
WHEN  (19) ('?HistoryList')
WHEN  (20) ('?NextHyperlink')
WHEN  (22) ('?HyperlinkButton')
WHEN  (23) ('?glo:bShowModule')
WHEN  (24) ('?CallTreeButton')
WHEN  (25) ('?AddClassWizardButton')

%DontApply LONG  (0)
%ApplyAsRegularTip LONG  (0)
%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 7
PARENT 2
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)', |
  'Resize {17}PROCEDURE(),BYTE,PROC,DERIVED')

%AppStrategy DEFAULT  ('Don''t alter controls')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  ()
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 0

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 0

%VertResize DEPEND %OverrideControls DEFAULT TIMES 0

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 0

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 0

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%AutoTransparent DEFAULT  ('Default')
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%DisableResize DEPEND %OverrideControls LONG TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 5
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME SciTPL CSciControl
[INSTANCE]
INSTANCE 6
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('CSciControl')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciControl')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('CSciControl') ('Colourise {14}PROCEDURE(LONG lStart,LONG lEnd),DERIVED', |
  'FindWindowTakeCloseWindow PROCEDURE(),DERIVED', 'FindWindowTakeOpenWindow PROCEDURE(),DERIVED', |
  'Init {19}PROCEDURE(*WINDOW W,LONG feq,UNSIGNED id,BOOL Themed = 0),BYTE,DERIVED', |
  'OpenFile {15}PROCEDURE(*CSTRING szFileName),BOOL,PROC,DERIVED', 'SetBuffer {14}PROCEDURE(),DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,DERIVED', 'TakeOpenWindow {9}PROCEDURE(),BYTE,DERIVED')

%ControlID DEFAULT  ('1006')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('SciControl')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (0)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciViewer')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%GenerateScintilla LONG  (1)
%OmitWindowsDeclarations LONG  (1)
%NotificationEvent DEFAULT  ('EVENT:USER+1')
[ADDITION]
NAME ABC CallProcedureExtended
[INSTANCE]
INSTANCE 8
[PROMPTS]
%ExtendedActionAction DEFAULT  ('Call a Procedure')
%ExtendedActionRunName DEFAULT  ('')
%ExtendedActionRunParameters DEFAULT  ('')
%ExtendedActionProcedure PROCEDURE  (srcRefreshTree)
%ExtendedActionThread LONG  (0)
%ExtendedActionThreadStack DEFAULT  ('25000')
%ExtendedActionParameters DEFAULT  ('')
%ExtendedActionReturnValueAssignment FIELD  ()
%ExtendedActionReturnValueReferenceAssign LONG  (0)
%ExtendedActionRequest DEFAULT  ('None')
%ExtendedActionThreadParameters DEFAULT  ('')
%ExtendedActionThreadReturnValueAssignment FIELD  ()
[INSTANCE]
INSTANCE 9
[PROMPTS]
%ExtendedActionAction DEFAULT  ('Call a Procedure')
%ExtendedActionRunName DEFAULT  ('')
%ExtendedActionRunParameters DEFAULT  ('')
%ExtendedActionProcedure PROCEDURE  (srcRefreshTree)
%ExtendedActionThread LONG  (0)
%ExtendedActionThreadStack DEFAULT  ('25000')
%ExtendedActionParameters DEFAULT  ('')
%ExtendedActionReturnValueAssignment FIELD  ()
%ExtendedActionReturnValueReferenceAssign LONG  (0)
%ExtendedActionRequest DEFAULT  ('None')
%ExtendedActionThreadParameters DEFAULT  ('')
%ExtendedActionThreadReturnValueAssignment FIELD  ()
[CALLS]
Access:Memory
srcReadClarionProps
srcAddToUserMenu
srcFindWindow
srcGetPrototype
srcGetWordList
srcIsBaseClassABC
srcIsClassReference
srcIsStructureReference
srcRefreshQueues
srcRefreshTree
srcViewAsciiFile
winAddClass
winBrowseCallQ
winClassProperties
winExportDatabaseToXML
winFindNotes
winGenerateTemplate
winGetScanOptions
winOptions
winUpdateMethod
winUpdateProperty
winViewCallers
winViewNote
[WINDOW]
Window  WINDOW('ClassViewer'),AT(,,318,228),FONT('Microsoft Sans Serif',10,,FONT:regular,CHARSET:DEFAULT), |
          RESIZE,TILED,ALRT(EscKey),ALRT(F5Key),ALRT(PlusKey),ALRT(MinusKey),ALRT(BSKey),ALRT(SpaceKey), |
          ALRT(CtrlF5),CENTER,ICON('abcview.ico'),GRAY,IMM,MAX,PALETTE(256),SYSTEM,TIMER(10), |
          WALLPAPER('WALLPAPER.GIF')
          MENUBAR,USE(?MenuBar),#ORDINAL(1)
            MENU('&File'),USE(?File),#ORDINAL(2)
              ITEM('Clarion &10'),USE(FileClarion100),CHECK,#ORDINAL(3)
              ITEM('Clarion &9'),USE(FileClarion90),CHECK,#ORDINAL(3)
              ITEM('Clarion &8'),USE(FileClarion80),CHECK,#ORDINAL(4)
              ITEM('Clarion &7'),USE(FileClarion70),CHECK,#ORDINAL(5)
              ITEM('Clarion &6.0 EE'),USE(FileClarion60EE),CHECK,#ORDINAL(6)
              ITEM('Clarion &6.0'),USE(FileClarion60),CHECK,#ORDINAL(7)
              ITEM('Clarion &5.5 EE'),USE(FileClarion55EE),CHECK,#ORDINAL(8)
              ITEM('Clarion &5.5'),USE(FileClarion55),CHECK,#ORDINAL(9)
              ITEM('&Clarion 5.0 EE'),USE(FileClarion50EE),CHECK,#ORDINAL(10)
              ITEM('&Clarion 5.0'),USE(FileClarion50),CHECK,#ORDINAL(11)
              ITEM('Clarion &4.0'),USE(FileClarion40),CHECK,#ORDINAL(12)
              ITEM('Clarion &2.0'),USE(FileClarion20),CHECK,#ORDINAL(13)
              ITEM,USE(?SEPARATOR1),SEPARATOR,#ORDINAL(14)
              MENU('&Recent'),USE(?FileRecent),#ORDINAL(15)
              END
              ITEM,USE(?SEPARATOR2),SEPARATOR,#ORDINAL(16)
              ITEM('E&xit'),USE(?FileExit),#ORDINAL(17)
            END
            MENU('&Tree'),USE(?Tree),#ORDINAL(18)
              ITEM('E&xpand All<09H>    Ctrl+Grey Plus'),USE(?TreeExpand),LEFT(16),KEY(CtrlPlus), |
                ICON('expand.ico'),#ORDINAL(19)
              ITEM('C&ontract All<09H>    Ctrl+Grey Minus'),USE(?TreeContract),LEFT(16),KEY(CtrlMinus), |
                ICON('contract.ico'),#ORDINAL(20)
              ITEM,USE(?SEPARATOR3),SEPARATOR,#ORDINAL(21)
              ITEM('&Expand Branch<09H>    Grey Plus'),USE(?TreeExpandBranch),LEFT(16),KEY(PlusKey), |
                #ORDINAL(22)
              ITEM('&Contract Branch<09H>    Grey Minus'),USE(?TreeContractBranch),LEFT(16), |
                KEY(MinusKey),#ORDINAL(23)
              ITEM,USE(?SEPARATOR4),SEPARATOR,#ORDINAL(24)
            END
            MENU('&View'),USE(?View),#ORDINAL(25)
              ITEM('C&lasses    <09H>Ctrl+L'),USE(bViewClasses),LEFT(16),KEY(CtrlL),CHECK, |
                ICON('class.ico'),#ORDINAL(26)
              ITEM('&Interfaces<09H>Ctrl+I'),USE(bViewInterfaces),LEFT(16),KEY(CtrlI),CHECK, |
                ICON('intrface.ico'),#ORDINAL(27)
              ITEM('Call &Tree<09H>Ctrl+T'),USE(bViewCallTree),LEFT(16),KEY(CtrlT),CHECK,ICON('tree.ico'), |
                #ORDINAL(28)
              ITEM('Str&uctures<09H>Ctrl+U'),USE(bViewStructures),LEFT(16),KEY(CtrlU),CHECK, |
                ICON('structyp.ico'),#ORDINAL(29)
              ITEM('&Equates    <09H>Ctrl+E'),USE(bViewEquates),LEFT(16),KEY(CtrlE),CHECK, |
                ICON('efolder.ico'),#ORDINAL(30)
              ITEM,USE(?SEPARATOR5),SEPARATOR,#ORDINAL(31)
              ITEM('&Definition<09H>Ctrl+Enter'),USE(?ViewSource),LEFT(16),KEY(CtrlEnter), |
                ICON('data.ico'),#ORDINAL(32)
              ITEM('&Help        <09H>Ctrl+H'),USE(?ViewHelp),LEFT(16),KEY(CtrlH),ICON('help.ico'), |
                #ORDINAL(33)
              ITEM('&Notes    <09H>Ctrl+N'),USE(?ViewNotes),LEFT(16),KEY(CtrlN),ICON('note.ico'), |
                #ORDINAL(34)
            END
            MENU('T&ools'),USE(?Tools),#ORDINAL(35)
              ITEM('&Options...<09H> {14}Ctrl+O'),AT(,,80),USE(?ToolsOptions),LEFT(16),KEY(CtrlO), |
                ICON('options.ico'),#ORDINAL(36)
              ITEM('&Refresh Tree<09H> {14}Ctrl+R'),AT(,,80),USE(?ToolsRefreshTree),LEFT(16), |
                KEY(CtrlR),ICON('refresh.ico'),#ORDINAL(37)
              ITEM('Add Class &Wizard<09H>Ctrl+W'),AT(,,80),USE(?ToolsAddClassWizard),LEFT(16), |
                KEY(CtrlW),ICON('classwiz.ico'),#ORDINAL(38)
              ITEM('&Browse Database<09H>Ctrl+B'),AT(,,80),USE(?ToolsBrowseDatabase),LEFT(16), |
                KEY(CtrlB),ICON('BrowseDatabase.ico'),#ORDINAL(39)
              ITEM('&Statistics<09H> {14}Ctrl+S'),USE(?ToolsStatistics),LEFT(16),KEY(CtrlS), |
                ICON('stats.ico'),#ORDINAL(40)
              ITEM('&Calculator<09H> {14}Ctrl+Shift+C'),USE(?ToolsCalculator),LEFT(16),KEY(CtrlShiftC), |
                ICON('calc.ico'),#ORDINAL(41)
              ITEM,USE(?SEPARATOR6),SEPARATOR,#ORDINAL(42)
              MENU('Fa&vorites'),USE(?ToolsFavorites),LEFT(16),#ORDINAL(43)
                ITEM('&Edit Favorites...'),USE(?ToolsFavoritesAddtoFavorites),#ORDINAL(44)
              END
              ITEM('&Find Notes<09H> {14}Ctrl+F'),USE(?ToolsFindNotes),LEFT(16),KEY(CtrlF), |
                #ORDINAL(45)
              ITEM('Clear Histor&y<09H> {14}Ctrl+Y'),AT(,,80),USE(?ToolsClearHistory),LEFT(16), |
                KEY(CtrlY),DISABLE,#ORDINAL(46)
              ITEM('Add to Clarion &Menu'),USE(?HelpAddtoClarionMenu),LEFT(16),ICON('cw.ico'), |
                #ORDINAL(47)
              ITEM,USE(?SEPARATOR7),SEPARATOR,#ORDINAL(48)
              MENU('&XML Export'),USE(?ToolsXMLExport),LEFT(16),#ORDINAL(49)
                ITEM('&Database to XML'),USE(?FileExportToXML),#ORDINAL(50)
                ITEM('&Tree to XML'),USE(?TreeExportToXML),#ORDINAL(51)
              END
            END
            MENU('&Help'),USE(?HelpMenu),MSG('Windows Help'),#ORDINAL(52)
              ITEM('&Contents'),USE(?HelpContents),LEFT(16),ICON('HelpContents.ico'),MSG('View the c' & |
                'ontents of the help file'),#ORDINAL(53)
              ITEM('&Search for Help On...'),USE(?HelpSearch),LEFT(16),MSG('Search for ' & |
                'help on a subject'),STD(STD:HelpSearch),#ORDINAL(54)
              ITEM('&How to Use Help'),USE(?HelpOnHelp),LEFT(16),MSG('How to use Windows Help'), |
                STD(STD:HelpOnHelp),#ORDINAL(55)
              ITEM,USE(?SEPARATOR8),SEPARATOR,#ORDINAL(56)
              ITEM('&About Class Viewer'),USE(?HelpAboutClassViewer),LEFT(16),ICON('Help.ICO'), |
                #ORDINAL(57)
              ITEM('Just the FA&Qs'),USE(?HelpJusttheFAQs),LEFT(16),ICON('RedPin.ico'),#ORDINAL(58)
            END
          END
          PANEL,AT(0,0,,0),USE(?Panel4),FULL,BEVEL(0,0,2048),#ORDINAL(59)
          IMAGE('toolbar.bmp'),AT(0,0,,14),USE(?Image13),FULL,#ORIG(?Image13),#ORDINAL(60)
          PANEL,AT(0,14,,14),USE(?Panel4:2),FULL,BEVEL(0,0,2048),FILL(00E2A981h),#ORDINAL(61)
          PANEL,AT(0,28,,2),USE(?Panel4:3),FULL,BEVEL(0,0,2048),#ORDINAL(62)
          LIST,AT(8,32,100,174),USE(?ObjectDropList),FONT(,,COLOR:INACTIVECAPTION,,CHARSET:ANSI), |
            LEFT(2),VSCROLL,ALRT(MouseRight),ALRT(EnterKey),COLOR(COLOR:White,COLOR:White, |
            COLOR:INACTIVECAPTION),FORMAT('252L(2)|T@s63@'),FROM(ClassQ),#ORIG(?List5),#ORDINAL(63)
          BUTTON,AT(4,1,12,12),USE(?ExpandButton),ICON('expand.ico'),FLAT,SKIP,TIP('Expand Tree'), |
            #ORIG(?Button7),#ORDINAL(64)
          BUTTON,AT(18,1,12,12),USE(?ContractButton),ICON('contract.ico'),FLAT,SKIP,TIP('Contract Tree'), |
            #ORIG(?Button8),#ORDINAL(65)
          PANEL,AT(32,1,2,12),USE(?Panel5),BEVEL(0,0,24576),#ORIG(?Panel2),#ORDINAL(66)
          REGION,AT(108,32,2,192),USE(?SplitterBar),IMM,#ORIG(?Region6),#ORDINAL(67)
          BUTTON,AT(35,1,12,12),USE(?ClassRegion),ICON('class.ico'),FLAT,SKIP,TIP('View Classes'), |
            #ORDINAL(68)
          BUTTON,AT(49,1,12,12),USE(?InterfaceRegion),ICON('intrface.ico'),FLAT,SKIP,TIP('View Interfaces'), |
            #ORDINAL(69)
          BUTTON,AT(63,1,12,12),USE(?TreeRegion),ICON('tree.ico'),FLAT,SKIP,TIP('View Metho' & |
            'd Call Tree'),#ORDINAL(70)
          BUTTON,AT(77,1,12,12),USE(?StructureRegion),ICON('structyp.ico'),FLAT,SKIP,TIP('View Structures'), |
            #ORDINAL(71)
          BUTTON,AT(91,1,12,12),USE(?EquateRegion),ICON('efolder.ico'),FLAT,SKIP,TIP('View Equates'), |
            #ORDINAL(72)
          PANEL,AT(105,1,2,12),USE(?Panel2),BEVEL(0,0,24576),#ORIG(?Panel2),#ORDINAL(73)
          BUTTON,AT(108,1,12,12),USE(?ViewSourceButton),ICON('data.ico'),FLAT,SKIP,TIP('View Source File'), |
            #ORIG(?Button7),#ORDINAL(74)
          BUTTON,AT(122,1,12,12),USE(?HelpButton),ICON('help.ico'),FLAT,SKIP,TIP('View Clarion Help'), |
            #ORIG(?Button8),#ORDINAL(75)
          BUTTON,AT(136,1,12,12),USE(?ViewNoteButton),ICON('note.ico'),FLAT,SKIP,TIP('View Progr' & |
            'ammer Notes'),#ORIG(?Button9),#ORDINAL(76)
          PANEL,AT(150,1,2,12),USE(?Panel3),BEVEL(0,0,24576),#ORIG(?Panel3),#ORDINAL(77)
          BUTTON,AT(153,1,12,12),USE(?OptionsButton),ICON('options.ico'),FLAT,SKIP,TIP('Edit Appli' & |
            'cation Options'),#ORIG(?Button9),#ORDINAL(78)
          BUTTON,AT(167,1,12,12),USE(?RefreshButton),ICON('refresh.ico'),FLAT,SKIP,TIP('Refresh Tree'), |
            #ORIG(?Button10),#ORDINAL(79)
          BUTTON,AT(181,1,12,12),USE(?AddClassWizardButton),ICON('classwiz.ico'),FLAT,SKIP, |
            TIP('Add Class Wizard'),#ORIG(?Button11),#ORDINAL(80)
          BUTTON,AT(195,1,12,12),USE(?CallTreeButton),ICON('BrowseDatabase.ico'),FLAT,SKIP, |
            TIP('Browse Database'),#ORIG(?Button6),#ORDINAL(81)
          PANEL,AT(209,1,2,12),USE(?Panel6),BEVEL(0,0,24576),#ORIG(?Panel6),#ORDINAL(82)
          PROMPT('&Category:'),AT(8,17,31,8),USE(?glo:szCategory:Prompt),TRN,#ORIG(?Prompt2), |
            #ORDINAL(83)
          LIST,AT(41,16,52,10),USE(glo:szCategoryChoice),LEFT(2),VSCROLL,DROP(20),FORMAT('80L(2)@s20@'), |
            FROM(CategoryQueue),TIP('Select Category Filter'),#ORIG(?List3),#ORDINAL(84)
          PROMPT('&Detail:'),AT(116,17,24,8),USE(?glo:bDetailLevel:Prompt),TRN,#ORIG(?Prompt3), |
            #ORDINAL(85)
          SPIN(@n3),AT(142,16,14,10),USE(glo:bDetailLevel),CENTER,COLOR(COLOR:White),RANGE(0, |
            9),STEP(1),TIP('Select Detail Level'),#ORIG(DetailLevel),#ORDINAL(86)
          PANEL,AT(108,14,2,14),USE(?SplitterBar:2),BEVEL(0,0,20640),#ORIG(?Panel9),#ORDINAL(87)
          BUTTON,AT(264,2,10,10),USE(?HyperlinkButton),ICON('REDO.ICO'),DISABLE,FLAT,TIP('Hyperlink'), |
            #ORIG(?HyperlinkButton),#ORDINAL(88)
          BUTTON,AT(276,2,10,10),USE(?PrevHyperlink),ICON('LEFTXP16.ICO'),DISABLE,FLAT,TIP('Move to Pr' & |
            'evious Hyperlink'),#ORIG(?PrevHyperlink),#ORDINAL(89)
          BUTTON,AT(288,2,10,10),USE(?NextHyperlink),ICON('RIGHTXP16.ICO'),DISABLE,FLAT,TIP('Move to Ne' & |
            'xt Hyperlink'),#ORIG(?NextHyperlink),#ORDINAL(90)
          LIST,AT(300,2,10,10),USE(?HistoryList),VSCROLL,COLOR(COLOR:White),DISABLE,DROP(10), |
            FLAT,FORMAT('120L(2)~Hyperlink History~@s30@'),FROM(HistoryQueue),TIP('HyperLink History'), |
            #FIELDS(HistoryQueue:ObjectName),#ORIG(?List4),#ORDINAL(91)
          LIST,AT(110,32,200,98),USE(?TreeList),FONT(,,COLOR:INACTIVECAPTION,,CHARSET:ANSI), |
            VSCROLL,ALRT(MouseRight),ALRT(MouseLeft2),COLOR(COLOR:White,COLOR:White,COLOR:INACTIVECAPTION), |
            FORMAT('8L|IP@p p@250LIYPTS(1024)@s255@'),FROM(TreeQ),TIP('Double Click to Open.'), |
            #FIELDS(TreeQ:sNote,TreeQ:szText),#ORIG(?List4),#ORDINAL(92)
          LIST,AT(110,133,200,74),USE(?AsciiBox),FONT('Courier New',9,,FONT:regular,CHARSET:ANSI), |
            VSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White),IMM,#ORDINAL(93)
          TEXT,AT(110,133,200,74),USE(?sciControl:Region),BOXED,#ORIG(?sciControl:Region), |
            #SEQ(6),#ORDINAL(94)
          STRING(@s255),AT(110,158,154,6),USE(loc:szAsciiFilename),FONT('Tahoma',7,COLOR:Black, |
            FONT:regular,CHARSET:ANSI),LEFT,TRN,#ORIG(?String13),#ORDINAL(95)
          REGION,AT(110,130,200,2),USE(?VerticalSplitter),IMM,#ORIG(?Region7),#ORDINAL(96)
          IMAGE('pick.ico'),AT(8,207,10,8),USE(?LocatorImage),CENTERED,#ORIG(?Image13),#ORDINAL(97)
          STRING(''),AT(18,207,100),USE(?locator),FONT('Tahoma',8,,FONT:regular,CHARSET:ANSI), |
            LEFT(2),TRN,#ORIG(?String11),#ORDINAL(98)
          BOX,AT(8,216,10,8),USE(?VirtualBox),COLOR(00B99D7Fh),FILL(COLOR:Fuchsia),HIDE,LINEWIDTH(1), |
            ROUND,#ORIG(?Box3),#ORDINAL(99)
          STRING('Virtual'),AT(20,215),USE(?VirtualString),TRN,#ORIG(?String3),#ORDINAL(100)
          BOX,AT(56,216,10,8),USE(?ProtectedBox),COLOR(00B99D7Fh),FILL(COLOR:Maroon),HIDE, |
            LINEWIDTH(1),ROUND,#ORIG(?Box2),#ORDINAL(101)
          STRING('Protected'),AT(68,215),USE(?ProtectedString),TRN,#ORIG(?String2),#ORDINAL(102)
          BOX,AT(108,216,10,8),USE(?PrivateBox),COLOR(00B99D7Fh),FILL(COLOR:Red),HIDE,LINEWIDTH(1), |
            ROUND,#ORIG(?Box1),#ORDINAL(103)
          STRING('Private'),AT(120,215),USE(?PrivateString),TRN,#ORIG(?String1),#ORDINAL(104)
          BOX,AT(152,216,10,8),USE(?ModuleBox),COLOR(00B99D7Fh),FILL(COLOR:Purple),HIDE,LINEWIDTH(1), |
            ROUND,#ORIG(?PrivateBox),#ORDINAL(105)
          STRING('Module'),AT(164,215),USE(?ModuleString),TRN,#ORIG(?PrivateString),#ORDINAL(106)
          CHECK('Sparse Tree'),AT(213,2,50,10),USE(glo:bShowSparseTrees),HIDE,#ORIG(glo:bShowSparseTrees), |
            #ORDINAL(107)
          CHECK(' Pro&tected'),AT(160,17,44,8),USE(glo:bShowProtected),COLOR(00E2A981h),TIP('Show Prote' & |
            'cted Attributes'),TRN,#ORIG(bShowProtected),#ORDINAL(108)
          CHECK(' &Private'),AT(210,17,36,8),USE(glo:bShowPrivate),COLOR(00E2A981h),TIP('Show Priva' & |
            'te Attributes'),TRN,#ORIG(bShowPrivate),#ORDINAL(109)
          CHECK(' &Module'),AT(260,17,36,8),USE(glo:bShowModule),COLOR(00E2A981h),TIP('Show Modul' & |
            'e Attributes'),TRN,#ORIG(glo:bShowPrivate),#ORDINAL(110)
          BOX,AT(8,216,10,8),USE(?EquateBox),COLOR(00B99D7Fh),FILL(COLOR:White),HIDE,LINEWIDTH(1), |
            ROUND,#ORIG(?Box3),#ORDINAL(111)
          IMAGE('efolder.ico'),AT(8,216,10,8),USE(?Equate:Image),CENTERED,HIDE,#ORIG(?Image11), |
            #ORDINAL(112)
          STRING('Grouped'),AT(20,215),USE(?GroupdEquate:String),HIDE,TRN,#ORIG(?String12), |
            #ORDINAL(113)
          BOX,AT(56,216,10,8),USE(?EnumerationBox),COLOR(00B99D7Fh),FILL(COLOR:White),HIDE, |
            LINEWIDTH(1),ROUND,#ORIG(?Box1),#ORDINAL(114)
          IMAGE('efolder2.ico'),AT(56,216,10,8),USE(?Enumeration:Image),CENTERED,HIDE,#ORIG(?Image12), |
            #ORDINAL(115)
          STRING('Enumerated'),AT(68,215),USE(?EnumeratedEquate:String),HIDE,TRN,#ORIG(?String13), |
            #ORDINAL(116)
          STRING('Loading...'),AT(196,211,66,14),USE(?LoadingString),FONT('Tahoma',16,COLOR:Navy, |
            FONT:bold,CHARSET:ANSI),TRN,#ORIG(?String4),#ORDINAL(117)
          STRING('Saving...'),AT(196,211,66,14),USE(?SavingString),FONT('Tahoma',16,COLOR:Navy, |
            FONT:bold,CHARSET:ANSI),HIDE,TRN,#ORDINAL(118)
          BUTTON,AT(179,211,14,14),USE(?VcrTop),ICON('VCRFIRST.ICO'),#ORDINAL(119)
          BUTTON,AT(193,211,14,14),USE(?VcrRewind),ICON('VCRPRIOR.ICO'),#ORDINAL(120)
          BUTTON,AT(207,211,14,14),USE(?VcrBack),ICON('VCRUP.ICO'),#ORDINAL(121)
          BUTTON,AT(221,211,14,14),USE(?VcrPlay),ICON('VCRDOWN.ICO'),#ORDINAL(122)
          BUTTON,AT(235,211,14,14),USE(?VcrFastForward),ICON('VCRNEXT.ICO'),#ORDINAL(123)
          BUTTON,AT(249,211,14,14),USE(?VcrBottom),ICON('VCRLAST.ICO'),#ORDINAL(124)
          BUTTON('E&xit'),AT(266,211,45,14),USE(?CloseButton),TIP('Exit the ClassViewer' & |
            ' Application'),#ORIG(?Button1),#ORDINAL(125)
          GROUP,AT(30,76,258,58),USE(?RefreshGroup),HIDE,#ORIG(?Group1),#ORDINAL(126)
            BOX,AT(32,78,258,58),USE(?Box5),COLOR(COLOR:Black),FILL(COLOR:Black),LINEWIDTH(1), |
              #ORIG(?Box5),#ORDINAL(127)
            BOX,AT(30,76,258,58),USE(?Panel7),COLOR(COLOR:Blue),FILL(COLOR:BTNFACE),LINEWIDTH(1), |
              #ORDINAL(128)
            STRING('Building Class Hierarchy'),AT(34,80,252,10),USE(?ProcessString),FONT(, |
              ,,FONT:bold,CHARSET:ANSI),CENTER,TRN,#ORDINAL(129)
            STRING('Scanning:'),AT(34,119,252,10),USE(?ScanString),CENTER,TRN,#ORDINAL(130)
            STRING(@n_4),AT(241,119),USE(glo:lLineNum),HIDE,TRN,#ORDINAL(131)
            PANEL,AT(59,91,202,16),USE(?Panel8),BEVEL(-1,-1),FILL(00C8FFFFh),#ORDINAL(132)
            PANEL,AT(59,109,202,6),USE(?Panel8:2),BEVEL(-1,-1),FILL(00C8FFFFh),#ORDINAL(133)
            IMAGE('progress.gif'),AT(60,92,0,14),USE(?ProgressBox),TILED,#ORDINAL(134)
            IMAGE('sm_progress.gif'),AT(60,110,0,4),USE(?ProgressBox:2),TILED,#ORDINAL(135)
          END
          IMAGE('tcorner.gif'),AT(311,220),USE(?SizeGrip),#ORIG(?Image10),#ORDINAL(136)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcRefreshQueues
PROTOTYPE '(LONG ProcessString, LONG ScanString, LONG ProgressBox, LONG FileProgressBox, LONG RefreshGroup),LONG,PROC'
PARAMETERS '(ProcessString, ScanString, ProgressBox, FileProgressBox, RefreshGroup)'
[COMMON]
DESCRIPTION 'Scan Source Files and fill Queues'
FROM ABC Source
MODIFIED '2017/07/02' ' 9:10:26'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  hProcess = GetCurrentProcess()
  IF hProcess
     bResult = SetPriorityClass(hProcess,IDLE_PRIORITY_CLASS)
  END

  DO CopyStructureQ
  DO RefreshQueues
  FREE(glo:StructureQCopy)

  IF hProcess
     bResult = SetPriorityClass(hProcess,NORMAL_PRIORITY_CLASS)
  END
  RETURN(ReturnValue)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
RefreshQueues   ROUTINE
  IF glo:szRedFilePath
     UNHIDE(RefreshGroup)
     ReturnValue = FALSE

     loc:sCurrentCursor = glo:sCurrentCursor
     glo:sCurrentCursor = CURSOR:WAIT
     SETCURSOR(glo:sCurrentCursor)

     ProcessString{PROP:TEXT} = 'Building Class Hierarchy Tree'
     DISPLAY(ProcessString)

     FREE(ProcessQ)
     FREE(IncludeQ)
     FREE(EquateQ)

     IF glo:bRefreshAll
        FREE(ModuleQ)
        lLastModuleId = 0
        FREE(ClassQ)
        lLastClassId = 0
        FREE(PropertyQ)
        FREE(MethodQ)
        FREE(FileNameQ)
        FREE(SourceLineQ)
        FREE(LineCommentQ)
        FREE(StructureQ)
        FREE(EnumQ)
        DO FindAllModules
     ELSE
        SORT(ModuleQ,+ModuleQ.lModuleId)
        GET(ModuleQ,RECORDS(ModuleQ))
        lLastModuleId = ModuleQ.lModuleId
        SORT(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)

        SORT(ClassQ,+ClassQ.lClassId)
        GET(ClassQ,RECORDS(ClassQ))
        lLastClassId = ClassQ.lClassId
        DO FindChangedModules
        DO RemoveChangedModules
        DO FindNewModules
     END

     bProcessingInclude = FALSE
     J = RECORDS(ProcessQ)
     LOOP I = 1 TO J
       bProcessFile = FALSE
       bProcessingClass = FALSE
       bProcessingStructure = FALSE
       bProcessingEquate = FALSE
       bProcessingMap = FALSE
       bABC = FALSE
       szCategory = ''
       szOmitTerminator = ''
       glo:lLineNum = 0
       GET(ProcessQ,I)

       IF UPPER(ProcessQ.szName) = 'NETEMAIL.INC'
          IncludeQ.szPath = UPPER(ProcessQ.szPath)
          IncludeQ.szName = UPPER(ProcessQ.szName)
          GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
          IF ERRORCODE()
             ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
          END
          CYCLE
       END

       szAsciiFilename = ProcessQ.szPath & ProcessQ.szName
       PathCompactPathEx(loc:szCompactAsciiFilename, szAsciiFilename, SIZE(loc:szCompactAsciiFilename),0)
       ScanString{PROP:TEXT} = loc:szCompactAsciiFilename
       DISPLAY(ScanString)
       OPEN(SourceFile,ReadOnly+DenyNone)   !Read-Only

       !File Progress Bar
       lFileBytesToProcess = BYTES(SourceFile)
       lFileBytesProcessed = 0
       lFileLastPct = 0
       lFilePctComplete = 0
       FileProgressBox{PROP:WIDTH} = 0
       DISPLAY(FileProgressBox)

       SET(SourceFile)

       LOOP
         YIELD()
         Sleep(0)
         IF bMultiStatement = TRUE
            SourceFile.Record.sText = save:sMultiStatement
            bMultiStatement = FALSE
         ELSE
            NEXT(SourceFile)
            IF ~ERRORCODE()

               !!! remove extra whitespace from SourceFile.Record.sText here !!!
               SourceFile.Record.sText = srcRemoveWhitespace(SourceFile.Record.sText)

               glo:lLineNum += 1

               lFileBytesProcessed = POINTER(SourceFile)
               lFilePctComplete = (lFileBytesProcessed/lFileBytesToProcess)*100
               IF lFileLastPct <> INT(lFilePctComplete/10)
                  lFileLastPct = INT(lFilePctComplete/10)
                  FileProgressBox{PROP:Width} = lFilePctComplete*2
                  DISPLAY(FileProgressBox)
               END

            END

            K = srcFindComment(SourceFile.Record.sText)
            IF K
               IF UPPER(SourceFile.Record.sText[K : K+14]) = '!ABCINCLUDEFILE' |
               OR UPPER(SourceFile.Record.sText[K : K+8]) = '!CATEGORY'        |
               OR szOmitTerminator <> ''
                  !let it pass
               ELSE
                  !Begin 2004.12.14 -------------------------------------------
                  IF INSTRING(',FINAL', UPPER(SourceFile.Record.sText[K : LEN(CLIP(SourceFile.Record.sText))]), 1 ,1)
                     bFinal = TRUE
                  ELSE
                     bFinal = FALSE
                  END
                  IF INSTRING(',EXTENDS', UPPER(SourceFile.Record.sText[K : LEN(CLIP(SourceFile.Record.sText))]), 1 ,1)
                     bExtends = TRUE
                  ELSE
                     bExtends = FALSE
                  END
                  !End   2004.12.14 -------------------------------------------
                  IF K > 1
                     SourceFile.Record.sText = SourceFile.Record.sText[1 : K-1]
                  ELSE
                     SourceFile.Record.sText = ''
                  END
               END
            END
         END

         IF ERRORCODE()
            lFilePctComplete = 100
            FileProgressBox{PROP:Width} = lFilePctComplete*2
            DISPLAY(FileProgressBox)
            BREAK
         ELSE
            !==========================================================
            !Handle multiple statements on a line
            !==========================================================
            K = INSTRING(';',SourceFile.Record.sText)
            IF K
               save:sMultiStatement = SourceFile.Record.sText[K+1 : LEN(SourceFile.Record.sText)]
               SourceFile.Record.sText = SourceFile.Record.sText[1 : K-1]
               bMultiStatement = TRUE
            ELSE
               save:sMultiStatement = ''
            END
            !==========================================================
            IF szUpper
               IF szUpper[LEN(szUpper)] = '|'
                  SourceFile.Record.sText = CLIP(save:stext) & ' ' & CLIP(LEFT(SourceFile.Record.sText))
                  szUpper = UPPER(CLIP(SourceFile.Record.sText))
               ELSE
                  szUpper = UPPER(CLIP(SourceFile.Record.sText))
               END
            ELSE
               szUpper = UPPER(CLIP(SourceFile.Record.sText))
            END

            IF ~szUpper
               CYCLE
            ELSIF szUpper[LEN(szUpper)] = '|'
               save:stext = SourceFile.Record.sText[1 : LEN(szUpper)-1]
               CYCLE
            ELSIF szOmitTerminator AND ~INSTRING(szOmitTerminator,szUpper,1)
               szUpper = ''
               CYCLE
            ELSE
               IF szOmitTerminator
                  szOmitTerminator = ''
                  CYCLE
               END
               IF ~bProcessFile
                  bProcessFile = TRUE
                  IF INSTRING('!ABCINCLUDEFILE',szUpper,1)
                     bABC = TRUE
                     K = INSTRING('(',szUpper,1)
                     IF K
                        szCategory = szUpper[K+1 : INSTRING(')',szUpper,1)-1]
                     ELSE
                        szCategory = 'ABC'
                     END
                  ELSIF INSTRING('!CATEGORY',szUpper,1)
                     K = INSTRING('(',szUpper,1)
                     IF K
                        szCategory = szUpper[K+1 : INSTRING(')',szUpper,1)-1]
                     END
                  END
                  ProcessQ.bProcessed = TRUE
                  PUT(ProcessQ)
                  DO ProcessFile
               ELSE
                  DO ProcessFile
               END
            END
         END
       END
       CLOSE(SourceFile)

       lPctComplete = (I/(J + RECORDS(ExtraModuleQ)))*100
       IF lPctComplete > 98
          lPctComplete = 98
       END
       IF lPctComplete <> lLastPct
          lLastPct = lPctComplete
          ProgressBox{PROP:WIDTH} = lPctComplete
          DISPLAY(ProgressBox)
       END
     END

     IF glo:bRefreshAll = TRUE
        !include user specified files
        J = RECORDS(ExtraModuleQ)
        LOOP I = 1 TO J
           GET(ExtraModuleQ,I)
           IF ExtraModuleQ.bClarionVersion = glo:bClarionVersion
              IncludeQ.szPath = UPPER(ExtraModuleQ.szModulePath)
              IncludeQ.szName = UPPER(ExtraModuleQ.szModuleName)
              GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
              IF ERRORCODE()
                 ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
              END
           END
        END
     END

     !Process Files that were included
     bProcessingInclude = TRUE
     SORT(ProcessQ,+ProcessQ.szName,+ProcessQ.szPath)

     P = 0
     LOOP
       bProcessFile = FALSE
       bProcessingClass = FALSE
       bProcessingStructure = FALSE
       bProcessingEquate = FALSE
       bABC = FALSE
       szCategory = ''
       glo:lLineNum = 0
       P += 1
       GET(IncludeQ,P)
       IF ERRORCODE()
          BREAK
       ELSE
          !---------------------------------------------------------------------
          !spin through the queue looking
          bProcessInclude = TRUE
          LOOP A = 1 TO RECORDS(ProcessQ)
            GET(ProcessQ,A)
            IF ProcessQ.szPath = UPPER(IncludeQ.szPath) AND   |
               ProcessQ.szName = UPPER(IncludeQ.szName)
               IF ProcessQ.bProcessed = TRUE
                  bProcessInclude = FALSE
               ELSE
                  ProcessQ.bProcessed = TRUE
                  PUT(ProcessQ)
               END
               BREAK
            END
          END

          !get include file date and time
          IF bProcessInclude
             ProcessQ.szPath = UPPER(IncludeQ.szPath)
             ProcessQ.szName = UPPER(IncludeQ.szName)
             FREE(TempQ)
             DIRECTORY(TempQ,ProcessQ.szPath & ProcessQ.szName,0)
             IF RECORDS(TempQ)
                GET(TempQ,1)
                ProcessQ.lDate  = TempQ.Date
                ProcessQ.lTime  = TempQ.Time
             ELSE
                bProcessInclude = FALSE    !because it doesn't exist
             END
          END

          IF bProcessInclude
             szAsciiFilename = ProcessQ.szPath & ProcessQ.szName
             !ScanString{PROP:TEXT} = szAsciiFilename
             PathCompactPathEx(loc:szCompactAsciiFilename, szAsciiFilename, SIZE(loc:szCompactAsciiFilename),0)
             ScanString{PROP:TEXT} = loc:szCompactAsciiFilename
             DISPLAY(ScanString)
             OPEN(SourceFile,ReadOnly+DenyNone)   !Read-Only

             !File Progress Bar
             lFileBytesToProcess = BYTES(SourceFile)
             lFileBytesProcessed = 0
             lFileLastPct = 0
             lFilePctComplete = 0
             FileProgressBox{PROP:WIDTH} = 0
             DISPLAY(FileProgressBox)

             SET(SourceFile)

             bMultiStatement = FALSE
             LOOP
               YIELD()
               Sleep(0)
               IF bMultiStatement = TRUE
                  SourceFile.Record.sText = save:sMultiStatement
                  bMultiStatement = FALSE
               ELSE
                  NEXT(SourceFile)
                  IF ~ERRORCODE()

                     !!! remove extra whitespace from SourceFile.Record.sText here !!!
                     SourceFile.Record.sText = srcRemoveWhitespace(SourceFile.Record.sText)

                     glo:lLineNum += 1

                     lFileBytesProcessed = POINTER(SourceFile)
                     lFilePctComplete = (lFileBytesProcessed/lFileBytesToProcess)*100
                     IF lFileLastPct <> INT(lFilePctComplete/10)
                        lFileLastPct = INT(lFilePctComplete/10)
                        FileProgressBox{PROP:Width} = lFilePctComplete*2
                        DISPLAY(FileProgressBox)
                     END

                  END
                  IF szOmitTerminator = ''     !If not omitted source section
                     K = srcFindComment(SourceFile.Record.sText)
                     IF K
                        IF UPPER(SourceFile.Record.sText[K : K+14]) = '!ABCINCLUDEFILE' |
                        OR UPPER(SourceFile.Record.sText[K : K+8]) = '!CATEGORY'        |
                           !let it pass
                        ELSE
                           !Begin 2004.12.14 -------------------------------------------
                           IF INSTRING(',FINAL', UPPER(SourceFile.Record.sText[K : LEN(CLIP(SourceFile.Record.sText))]), 1 ,1)
                              bFinal = TRUE
                           ELSE
                              bFinal = FALSE
                           END
                           IF INSTRING(',EXTENDS', UPPER(SourceFile.Record.sText[K : LEN(CLIP(SourceFile.Record.sText))]), 1 ,1)
                              bExtends = TRUE
                           ELSE
                              bExtends = FALSE
                           END
                           !End   2004.12.14 -------------------------------------------
                           IF K > 1
                              SourceFile.Record.sText = SourceFile.Record.sText[1 : K-1]
                           ELSE
                              SourceFile.Record.sText = ''
                           END
                        END
                     END
                  END
               END
               IF ERRORCODE()
                  lFilePctComplete = 100
                  FileProgressBox{PROP:Width} = lFilePctComplete*2
                  DISPLAY(FileProgressBox)
                  BREAK
               ELSE
                  !==========================================================
                  !Handle multiple statements on a line
                  !==========================================================
                  K = INSTRING(';',SourceFile.Record.sText)
                  IF K
                     save:sMultiStatement = SourceFile.Record.sText[K+1 : LEN(SourceFile.Record.sText)]
                     SourceFile.Record.sText = SourceFile.Record.sText[1 : K-1]
                     bMultiStatement = TRUE
                  ELSE
                     save:sMultiStatement = ''
                  END
                  !==========================================================
                  IF szUpper
                     IF szUpper[LEN(szUpper)] = '|'
                        SourceFile.Record.sText = CLIP(save:stext) & ' ' & CLIP(LEFT(SourceFile.Record.sText))
                        szUpper = UPPER(CLIP(SourceFile.Record.sText))
                     ELSE
                        szUpper = UPPER(CLIP(SourceFile.Record.sText))
                     END
                  ELSE
                     szUpper = UPPER(CLIP(SourceFile.Record.sText))
                  END

                  IF ~szUpper
                     CYCLE
                  ELSIF szUpper[LEN(szUpper)] = '|'
                     save:stext = SourceFile.Record.sText[1 : LEN(szUpper)-1]
                     CYCLE
                  ELSIF szOmitTerminator AND ~INSTRING(szOmitTerminator,szUpper,1)
                     szUpper = ''
                     CYCLE
                  ELSE
                     IF szOmitTerminator
                        szOmitTerminator = ''
                        CYCLE
                     END
                     IF ~bProcessFile
                        bProcessFile = TRUE
                        !!! process file here ??? !!!
                     ELSE
                        DO ProcessFile
                     END
                  END
               END
             END
             DO _ProcessMap
             CLOSE(SourceFile)
          END
       END
     END

     !Add InterfaceMethods
     SORT(ClassQ,+ClassQ.lClassId)
     SORT(MethodQ,+MethodQ.lClassId)
     J = RECORDS(ClassInterfaceQ)
     LOOP I = 1 TO J
       GET(ClassInterfaceQ,I)
       ClassQ.lClassId = ClassInterfaceQ.lClassId
       GET(ClassQ,+ClassQ.lClassId)
       ThisClass = ClassQ

       SORT(ClassQ,+ClassQ.szClassSort)
       ClassQ.szClassSort = UPPER(ClassInterfaceQ.szInterface)
       GET(ClassQ,+ClassQ.szClassSort)

       MethodQ.lClassId = ClassQ.lClassId
       GET(MethodQ,+MethodQ.lClassId)
       lMethodQPointer = POINTER(MethodQ)
       lMethodQRecords = RECORDS(MethodQ)
       LOOP lMethodQPointer = lMethodQPointer TO lMethodQRecords
         GET(MethodQ,lMethodQPointer)
         IF MethodQ.lClassId = ClassQ.lClassId
            MethodQ.szMethodName = ClassQ.szClassName & '.' & MethodQ.szMethodName
            MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
            MethodQ:lSourceLine = srcGetSourceLine(ThisClass.lModuleId,ThisClass.szClassName & '.' & MethodQ.szMethodName,MethodQ.szPrototype)
            MethodQ.lClassID = ThisClass.lClassId
            MethodQ.bModule = FALSE
            ADD(MethodQ)
         ELSE
            BREAK
         END
       END
     END

     !Add Equates to EnumQ
     J = RECORDS(EquateQ)
     LOOP I = 1 TO J
       GET(EquateQ,I)
       !Group Equates with a common prefix
       K = INSTRING(':',EquateQ.szLabel)
       IF K
          EnumQ.szEnumName = EquateQ.szLabel[1 : K-1]
          EnumQ:lModuleId = EquateQ.lModuleId
          IF szLastEnumName <> EnumQ.szEnumName OR |
             (szLastEnumName = EnumQ.szEnumName AND lSaveModuleId <> EnumQ:lModuleId)
             IF I < J
                GET(EquateQ,I+1)
                IF EnumQ.szEnumName = EquateQ.szLabel[1 : K-1] AND EnumQ:lModuleId = EquateQ.lModuleId
                   GET(EquateQ,I)
                   szLastEnumName      = EnumQ.szEnumName
                   lSaveModuleId       = EquateQ.lModuleId  !EnumQ:lModuleId
                   !Write a Enumeration Detail
                   EnumQ.szEnumPrefix  = EnumQ.szEnumName
                   EnumQ.szEnumLabel   = EquateQ.szLabel
                   EnumQ.szEnumValue   = EquateQ.szValue
                   EnumQ.lModuleId     = EquateQ.lModuleId
                   EnumQ.lLineNum      = EquateQ.lLineNum
                   EnumQ.szEnumSort    = UPPER(EnumQ.szEnumName)
                   EnumQ.bIsHexValue   = EquateQ.bIsHexValue
                   EnumQ.bIsEquate     = TRUE
                   ADD(EnumQ)
                ELSE
                   GET(EquateQ,I)
                   szLastEnumName      = ''
                   EnumQ.szEnumName    = '*EQUATES*'
                   EnumQ.szEnumPrefix  = ''
                   EnumQ.szEnumLabel   = EquateQ.szLabel
                   EnumQ.szEnumValue   = EquateQ.szValue
                   EnumQ.lModuleId     = EquateQ.lModuleId
                   EnumQ.lLineNum      = EquateQ.lLineNum
                   EnumQ.szEnumSort    = '*EQUATES*'
                   EnumQ.bIsHexValue   = EquateQ.bIsHexValue
                   EnumQ.bIsEquate     = TRUE
                   ADD(EnumQ)
                END
             ELSE
                EnumQ.szEnumPrefix  = EnumQ.szEnumName
                EnumQ.szEnumLabel   = EquateQ.szLabel
                EnumQ.szEnumValue   = EquateQ.szValue
                EnumQ.lModuleId     = EquateQ.lModuleId
                EnumQ.lLineNum      = EquateQ.lLineNum
                EnumQ.szEnumSort    = UPPER(EnumQ.szEnumName)
                EnumQ.bIsHexValue   = EquateQ.bIsHexValue
                EnumQ.bIsEquate     = TRUE
                ADD(EnumQ)
             END
          ELSE
             EnumQ.szEnumPrefix  = EnumQ.szEnumName
             EnumQ.szEnumLabel   = EquateQ.szLabel
             EnumQ.szEnumValue   = EquateQ.szValue
             EnumQ.lModuleId     = EquateQ.lModuleId
             EnumQ.lLineNum      = EquateQ.lLineNum
             EnumQ.szEnumSort    = UPPER(EnumQ.szEnumName)
             EnumQ.bIsHexValue   = EquateQ.bIsHexValue
             EnumQ.bIsEquate     = TRUE
             ADD(EnumQ)
          END
       ELSE
          EnumQ.szEnumName    = '*EQUATES*'
          EnumQ.szEnumPrefix  = ''
          EnumQ.szEnumLabel   = EquateQ.szLabel
          EnumQ.szEnumValue   = EquateQ.szValue
          EnumQ.lModuleId     = EquateQ.lModuleId
          EnumQ.lLineNum      = EquateQ.lLineNum
          EnumQ.szEnumSort    = '*EQUATES*'
          EnumQ.bIsHexValue   = EquateQ.bIsHexValue
          EnumQ.bIsEquate     = TRUE
          ADD(EnumQ)
       END
     END

     !Fixup EnumQ
     DO FixupEnumQ

     lPctComplete = 100
     ProgressBox{PROP:WIDTH} = lPctComplete
     DISPLAY(ProgressBox)

     !Look For Method Calls
     ProcessString{PROP:TEXT} = 'Building Method Call Tree'
     DISPLAY(ProcessString)
     srcBuildCallQueue(ScanString,ProgressBox,FileProgressBox)

     !Now fill the Class Hierarchy Tree
     ProcessString{PROP:TEXT} = 'Finishing Up...'
     DISPLAY(ProcessString)
     !!!srcRefreshTree()
     HIDE(RefreshGroup)
  ELSE
     ReturnValue = TRUE
  END

  glo:sCurrentCursor = loc:sCurrentCursor
  SETCURSOR(glo:sCurrentCursor)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5200
PROPERTY:END
ProcessFile    ROUTINE
  DATA
X   LONG

  CODE
  IF INSTRING('!ABCINCLUDEFILE',szUpper,1)
     bABC = TRUE
     K = INSTRING('(',szUpper,1)
     IF K
        szCategory = szUpper[K+1 : INSTRING(')',szUpper,1)-1]
     ELSE
        szCategory = 'ABC'
     END
  ELSIF INSTRING('!CATEGORY',szUpper,1)
     K = INSTRING('(',szUpper,1)
     IF K
        szCategory = szUpper[K+1 : INSTRING(')',szUpper,1)-1]
     END
  END

  !Look for and remove comments
  K = srcFindComment(szUpper)
  IF K
     IF K > 1
        SourceFile.Record.sText = SUB(SourceFile.Record.sText,1,K-1)
     ELSE
        SourceFile.Record.sText = ''
     END
     szUpper = UPPER(CLIP(SourceFile.Record.sText))
  END

  K = INSTRING(' OMIT(''',szUpper,1)                !look for an omit statement
  IF K                                              !if an omit statement
     IF ~INSTRING(',',szUpper)                      !and not conditional
        M = INSTRING('''',szUpper,1,K+7)
        szOmitTerminator = szUpper[K+7 : M-1]
        szUpper = ''
     ELSE                                           !conditional, remove omit from source line
        M = INSTRING(')',szUpper,1,K+7)
        IF M > 0
           szUpper = CLIP(LEFT(szUpper[M+1 : LEN(szUpper)]))
        END
     END
  END

  IF CLIP(LEFT(szUpper)) = 'MAP'
     bProcessingMap = TRUE
  END

  IF bProcessingMap
     DO ProcessMap
  ELSE
     IF szUpper
        IF ~bProcessingClass    !look for class definition
           IF INSTRING(' CLASS,',szUpper,1)        |   !base class
           OR INSTRING(' CLASS()',szUpper,1)       |   !base class
           OR INSTRING(' INTERFACE,',szUpper,1)    |   !interface definition
           OR INSTRING(' INTERFACE ',szUpper,1)    |   !interface definition
           OR SUB(szUpper,-6,6) = ' CLASS'         |   !base class
           OR SUB(szUpper,-9,9) = 'INTERFACE'          !interface definition
              K = INSTRING(' ',SourceFile.Record.sText) - 1
              ClassQ.szClassName = SourceFile.Record.sText[1 : K]
              IF CLIP(ClassQ.szClassName)              !make sure class has a name
                 ClassQ.szParentClassName = ''
                 ModuleQ.szModulePath = ProcessQ.szPath
                 ModuleQ.szModuleName = ProcessQ.szName
                 ModuleQ.lDate        = ProcessQ.lDate
                 ModuleQ.lTime        = ProcessQ.lTime
                 GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 IF ERRORCODE()
                    lLastModuleId += 1
                    ModuleQ.lModuleId = lLastModuleId
                    ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                    ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 ELSE
                    ModuleQ.lDate        = ProcessQ.lDate
                    ModuleQ.lTime        = ProcessQ.lTime
                    PUT(ModuleQ)
                 END
                 ClassQ.lIncludeId = ModuleQ.lModuleId
                 K = INSTRING(',MODULE(',szUpper,1)
                 IF K
                    K += 9
                 ELSE
                    K = INSTRING(', MODULE(',szUpper,1)
                    IF K
                       K += 10
                    END
                 END
                 IF K
                    X = INSTRING('''',SourceFile.Record.sText,1,K)-1
                    ModuleQ.szModulePath = ProcessQ.szPath
                    ModuleQ.szModuleName = UPPER(SourceFile.Record.sText[K : X])
                    IF ~INSTRING('.',ModuleQ.szModuleName)
                       ModuleQ.szModuleName = ModuleQ.szModuleName & '.CLW'
                    END
                    GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                    IF ERRORCODE()
                       lLastModuleId += 1
                       ModuleQ.lModuleId = lLastModuleId
                       !Get Module Date and Time
                       FREE(TempQ)
                       DIRECTORY(TempQ,ModuleQ.szModulePath & ModuleQ.szModuleName,0)
                       IF RECORDS(TempQ)
                          GET(TempQ,1)
                          ModuleQ.lDate        = TempQ.Date
                          ModuleQ.lTime        = TempQ.Time
                          ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                          ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                       ELSE
                          ModuleQ.lModuleId = 0    !because it doesn't exist
                       END
                    ELSE
                       FREE(TempQ)
                       DIRECTORY(TempQ,ModuleQ.szModulePath & ModuleQ.szModuleName,0)
                       IF RECORDS(TempQ)
                          GET(TempQ,1)
                          ModuleQ.lDate        = TempQ.Date
                          ModuleQ.lTime        = TempQ.Time
                          PUT(ModuleQ)
                       END
                    END
                    ClassQ.lModuleId = ModuleQ.lModuleId
                 ELSE
                    ClassQ.lModuleId = 0
                 END
                 lLastClassId += 1
                 ClassQ.bIsABC = bABC
                 ClassQ.lLineNum = glo:lLineNum
                 ClassQ.lClassID = lLastClassId
                 ClassQ.szClassSort = UPPER(ClassQ.szClassName)
                 ClassQ.szParentClassSort = ''
                 ClassQ.bPrivate = FALSE
                 IF INSTRING(' INTERFACE,',szUpper,1)    |   !interface definition
                 OR INSTRING(' INTERFACE ',szUpper,1)    |   !interface definition
                 OR SUB(szUpper,-9,9) = 'INTERFACE'          !interface definition
                    ClassQ.bInterface = TRUE
                 ELSE
                    ClassQ.bInterface = FALSE
                 END
                 ClassQ.bModified = TRUE
                 ADD(ClassQ)

                 !Add Class Categories
                 CategoryQ.szClassName = ClassQ.szClassName
                 GET(CategoryQ,+CategoryQ.szClassName)
                 IF ERRORCODE()
                    CategoryQ.szClassName = ClassQ.szClassName
                    CategoryQ.szCategory = szCategory
                    CASE CategoryQ.szClassName
                    OF   'INIClass'        |
                    OROF 'PopupClass'
                       CategoryQ.bDetailLevel = 0

                    OF   'ErrorClass'      |
                    OROF 'FileManager'     |
                    OROF 'RelationManager'
                       CategoryQ.bDetailLevel = 0

                    OF   'ViewManager'     |
                    OROF 'WindowManager'
                       CategoryQ.bDetailLevel = 0
                    ELSE
                       CategoryQ.bDetailLevel = 1
                    END

                    ADD(CategoryQ,+CategoryQ.szClassName)
                 ELSIF szCategory
                    CategoryQ.szCategory = szCategory
                    PUT(CategoryQ,+CategoryQ.szClassName)
                 END
                 !=================================================
                 !look for terminator
                 IF SUB(szUpper,-1,1) = '.'    |
                 OR SUB(szUpper,-3,3) = 'END'
                    bProcessingClass = FALSE
                 ELSE
                    bProcessingClass = TRUE
                 END
                 !=================================================
                 !bProcessingClass = TRUE
                 DO AddInterfaceMethods
              END

           ELSIF INSTRING(' CLASS(',szUpper,1)     |  !derived class
              OR INSTRING(' INTERFACE(',szUpper,1)    !Interface
              K = INSTRING(' ',SourceFile.Record.sText) - 1
              ClassQ.szClassName = SourceFile.Record.sText[1 : K]
              IF CLIP(ClassQ.szClassName)              !make sure class has a name
                 K = INSTRING(' CLASS(',szUpper,1)
                 IF K
                    K += 7
                 ELSE
                    K = INSTRING(' INTERFACE(',szUpper,1) + 11
                 END
                 M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
                 ClassQ.szParentClassName = SourceFile.Record.sText[K : M]
                 ModuleQ.szModulePath = ProcessQ.szPath
                 ModuleQ.szModuleName = ProcessQ.szName
                 ModuleQ.lDate        = ProcessQ.lDate
                 ModuleQ.lTime        = ProcessQ.lTime
                 GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 IF ERRORCODE()
                    lLastModuleId += 1
                    ModuleQ.lModuleId = lLastModuleId
                    ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                    ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 ELSE
                    ModuleQ.lDate        = ProcessQ.lDate
                    ModuleQ.lTime        = ProcessQ.lTime
                    PUT(ModuleQ)
                 END
                 ClassQ.lIncludeId = ModuleQ.lModuleId
                 K = INSTRING(',MODULE(',szUpper,1)
                 IF K
                    K += 9
                 ELSE
                    K = INSTRING(', MODULE(',szUpper,1)
                    IF K
                       K += 10
                    END
                 END
                 IF K
                    X = INSTRING('''',SourceFile.Record.sText,1,K)-1
                    ModuleQ.szModuleName = UPPER(SourceFile.Record.sText[K : X])
                    IF ~INSTRING('.',ModuleQ.szModuleName)
                       ModuleQ.szModuleName = ModuleQ.szModuleName & '.CLW'
                    END
                    GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                    IF ERRORCODE()
                       lLastModuleId += 1
                       ModuleQ.lModuleId = lLastModuleId
                       !Get Module Date and Time
                       FREE(TempQ)
                       DIRECTORY(TempQ,ModuleQ.szModulePath & ModuleQ.szModuleName,0)
                       IF RECORDS(TempQ)
                          GET(TempQ,1)
                          ModuleQ.lDate        = TempQ.Date
                          ModuleQ.lTime        = TempQ.Time
                          ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                          ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                       ELSE
                          ModuleQ.lModuleId = 0    !because it doesn't exist
                       END
                    ELSE
                       FREE(TempQ)
                       DIRECTORY(TempQ,ModuleQ.szModulePath & ModuleQ.szModuleName,0)
                       IF RECORDS(TempQ)
                          GET(TempQ,1)
                          ModuleQ.lDate        = TempQ.Date
                          ModuleQ.lTime        = TempQ.Time
                          PUT(ModuleQ)
                       END
                    END
                    ClassQ.lModuleId = ModuleQ.lModuleId
                 ELSE
                    ClassQ.lModuleId = 0
                 END
                 lLastClassId += 1
                 ClassQ.bIsABC = bABC
                 ClassQ.lLineNum = glo:lLineNum
                 ClassQ.lClassID = lLastClassId
                 ClassQ.szClassSort = UPPER(ClassQ.szClassName)
                 ClassQ.szParentClassSort = UPPER(ClassQ.szParentClassName)
                 ClassQ.bPrivate = FALSE
                 IF INSTRING(' INTERFACE(',szUpper,1)    !Interface
                    ClassQ.bInterface = TRUE
                 ELSE
                    ClassQ.bInterface = FALSE
                 END
                 ClassQ.bModified = TRUE
                 ADD(ClassQ)

                 CategoryQ.szClassName = ClassQ.szClassName
                 GET(CategoryQ,+CategoryQ.szClassName)
                 IF ERRORCODE()
                    CategoryQ.szClassName = ClassQ.szClassName
                    CategoryQ.szCategory = szCategory
                    CASE CategoryQ.szClassName
                    OF   'INIClass'        |
                    OROF 'PopupClass'
                       CategoryQ.bDetailLevel = 0

                    OF   'ErrorClass'      |
                    OROF 'FileManager'     |
                    OROF 'RelationManager'
                       CategoryQ.bDetailLevel = 0

                    OF   'ViewManager'     |
                    OROF 'WindowManager'
                       CategoryQ.bDetailLevel = 0
                    ELSE
                       CategoryQ.szCategory = szCategory
                       CategoryQ.bDetailLevel = 1
                    END

                    ADD(CategoryQ,+CategoryQ.szClassName)

                 ELSIF szCategory
                    CategoryQ.szCategory = szCategory
                    PUT(CategoryQ,+CategoryQ.szClassName)
                 END

                 !=================================================
                 !look for terminator
                 IF SUB(szUpper,-1,1) = '.'    |
                 OR SUB(szUpper,-3,3) = 'END'
                    bProcessingClass = FALSE
                 ELSE
                    bProcessingClass = TRUE
                 END
                 !=================================================
                 !bProcessingClass = TRUE
                 DO AddInterfaceMethods
              END
           END
        ELSE !look for properties and methods
           DO ProcessClass
        END

        IF ~bProcessingStructure   !look for structure definition
           IF INSTRING(' GROUP',szUpper,1) OR |
              INSTRING(' QUEUE',szUpper,1)

              IF INSTRING(',TYPE',szUpper,1)   |       !found a structure?
              OR INSTRING(', TYPE',szUpper,1)
                 StructureQ.szStructureName = srcGetLabel(SourceFile.Record.sText)
                 StructureQ.szDataLabel = srcGetLabel(SourceFile.Record.sText)
                 StructureQ.szDataType = srcGetStatement(SourceFile.Record.sText)

?               ASSERT(LEN(StructureQ.szDataType) <> 0)
                 IF StructureQ.szDataType[LEN(StructureQ.szDataType)] = '.'
                    StructureQ.szDataType[LEN(StructureQ.szDataType)] = '<0>'
                 ELSE
                    bProcessingStructure = TRUE
                    bStructureCount = 1
                 END
                 ModuleQ.szModulePath = ProcessQ.szPath
                 ModuleQ.szModuleName = ProcessQ.szName
                 ModuleQ.lDate        = ProcessQ.lDate
                 ModuleQ.lTime        = ProcessQ.lTime
                 GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 IF ERRORCODE()
                    lLastModuleId += 1
                    ModuleQ.lModuleId = lLastModuleId
                    ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                    ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 ELSE
                    ModuleQ.lDate        = ProcessQ.lDate
                    ModuleQ.lTime        = ProcessQ.lTime
                    PUT(ModuleQ)
                 END
                 StructureQ.lModuleId = ModuleQ.lModuleId
                 StructureQ.lLineNum = glo:lLineNum
                 StructureQ.szStructureSort = UPPER(StructureQ.szStructureName)
                 StructureQ.bPrivate = FALSE
                 ADD(StructureQ)
              END
           END
        ELSE !look for properties and methods
           DO ProcessStructure
        END

        IF ~bProcessingEquate   !look for itemized equates
           IF INSTRING(' ITEMIZE',szUpper,1)

              K = INSTRING('PRE(',szUpper,1)  !start value specified?
              IF K
                 K += 4
                 M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
                 EnumQ.szEnumPrefix = SourceFile.Record.sText[K : M]
              ELSE
                 EnumQ.szEnumPrefix = ''
              END

              EnumQ.szEnumLabel  = srcGetLabel(SourceFile.Record.sText)

              IF EnumQ.szEnumLabel
                 EnumQ.szEnumName = EnumQ.szEnumLabel
                 IF ~EnumQ.szEnumPrefix
                    EnumQ.szEnumPrefix = EnumQ.szEnumLabel
                 END
              ELSIF EnumQ.szEnumPrefix
                 EnumQ.szEnumName = EnumQ.szEnumPrefix
              ELSE
                 lUnlabelledCount += 1
                 EnumQ.szEnumName = '_Unlabelled Enumeration Data Structure [' & lUnlabelledCount  & ']'
              END

              K = INSTRING(' ITEMIZE(',szUpper,1)  !start value specified?
              IF K
                 K += 9
                 M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
                 EnumQ.szEnumValue = SourceFile.Record.sText[K : M]
              ELSE
                 EnumQ.szEnumValue = 1
              END
              EnumQ.bIsHexValue = FALSE
              IF ~NUMERIC(EnumQ.szEnumValue)
                 EnumQ.szEnumValue = srcGetEquateValue(EnumQ.szEnumValue,EnumQ.bIsHexValue)
              END
              lEnumValue = EnumQ.szEnumValue - 1

              ModuleQ.szModulePath = ProcessQ.szPath
              ModuleQ.szModuleName = ProcessQ.szName
              ModuleQ.lDate        = ProcessQ.lDate
              ModuleQ.lTime        = ProcessQ.lTime
              GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
              IF ERRORCODE()
                 lLastModuleId += 1
                 ModuleQ.lModuleId = lLastModuleId
                 ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                 ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
              ELSE
                 ModuleQ.lDate        = ProcessQ.lDate
                 ModuleQ.lTime        = ProcessQ.lTime
                 PUT(ModuleQ)
              END
              EnumQ.lModuleId = ModuleQ.lModuleId

              EnumQ.lLineNum     = glo:lLineNum
              EnumQ.szEnumSort   = UPPER(EnumQ.szEnumName)
              ADD(EnumQ)

              bProcessingEquate = TRUE

           ELSE
              K = INSTRING(' EQUATE',szUpper,1)  !equate value specified?
              IF K
                 K = INSTRING('(',szUpper,1,K+7)  !equate value specified?
              END
              IF K
                 EquateQ.szLabel = UPPER(srcGetLabel(SourceFile.Record.sText))
                 K += 1
                 M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
                 IF SourceFile.Record.sText[K] <> ''''
                    EquateQ.bIsHexValue = FALSE
                    IF ~NUMERIC(SourceFile.Record.sText[K : M])
                       EquateQ.szValue = srcGetEquateValue(SourceFile.Record.sText[K : M],EquateQ.bIsHexValue)
                       IF EquateQ.szValue = ''
                          EquateQ.szValue = SourceFile.Record.sText[K : M]
                       END
                    ELSE
                       EquateQ.szValue = SourceFile.Record.sText[K : M]
                    END
                 ELSE
                    EquateQ.szValue = SourceFile.Record.sText[K : M]
                 END
                 IF INSTRING('(',EquateQ.szValue)
                    EquateQ.szValue = EquateQ.szValue & ')'
                 END
                 ModuleQ.szModulePath = ProcessQ.szPath
                 ModuleQ.szModuleName = ProcessQ.szName
                 ModuleQ.lDate        = ProcessQ.lDate
                 ModuleQ.lTime        = ProcessQ.lTime
                 GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 IF ERRORCODE()
                    lLastModuleId += 1
                    ModuleQ.lModuleId = lLastModuleId
                    ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                    ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                 ELSE
                    ModuleQ.lDate        = ProcessQ.lDate
                    ModuleQ.lTime        = ProcessQ.lTime
                    PUT(ModuleQ)
                 END
                 EquateQ.lModuleId = ModuleQ.lModuleId
                 EquateQ.lLineNum = glo:lLineNum
                 IF EquateQ.szLabel <> EquateQ.szValue     !prevent infinate loop in scan
                    ADD(EquateQ) !,+EquateQ.szLabel)
                 END
              END
           END
        ELSE !look for enumeration structures
           DO ProcessEquate
        END

        IF glo:bRefreshAll = TRUE
           K = INSTRING(' INCLUDE',szUpper,1)
           IF K !AND ~bProcessingInclude
              K = INSTRING('''',szUpper)
              IF K
                 IncludeQ.szName = CLIP(szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1])
                 IncludeQ.szPath = ProcessQ.szPath
                 GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                 IF ERRORCODE()
                    !ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                    ADD(IncludeQ)
                 END
              END
           END
        END

     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5200
PROPERTY:END
ProcessMap ROUTINE
  DATA
pToken  LONG

  CODE
  !Look for END or .
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     IF lCount > 0
        lCount -= 1
        MapSourceQueue.sText   = SourceFile.Record.sText
        MapSourceQueue.szUpper = szUpper
        MapSourceQueue.LineNo  = glo:lLineNum
        ADD(MapSourceQueue)
     ELSE
        bProcessingMap = FALSE
     END
  ELSE
     pToken = INSTRING('MODULE(',szUpper,1)
     IF pToken
        lCount += 1
     END
     MapSourceQueue.sText   = SourceFile.Record.sText
     MapSourceQueue.szUpper = szUpper
     MapSourceQueue.LineNo  = glo:lLineNum
     ADD(MapSourceQueue)
  END

_ProcessMap ROUTINE
  DATA
szTemp  CSTRING(256)
pToken  LONG
pSpace  LONG
pComma  LONG
pParen  LONG
qPtr    LONG
qRecs   LONG
fAdd    BYTE

  CODE
  bProcessingModule = FALSE
  bModule = CHOOSE(UPPER(SUB(ModuleQ.szModuleName,-4,4))='.CLW',TRUE,FALSE)
  qRecs = RECORDS(MapSourceQueue)
  LOOP qPtr = 1 TO qREcs
     GET(MapSourceQueue,qPtr)
     SourceFile.Record.sText = MapSourceQueue.sText
     szUpper = MapSourceQueue.szUpper
     glo:lLineNum = MapSourceQueue.LineNo

     IF bProcessingModule
        IF CLIP(LEFT(szUpper)) = 'END' OR |
           CLIP(LEFT(szUpper)) = '.'
              bProcessingModule = FALSE
        END
     END

     IF bProcessingModule
        !First parameter is class name
        pToken = INSTRING('PROCEDURE(',szUpper,1)
        IF pToken
           pToken += 10
        ELSE
           pToken = INSTRING('FUNCTION(',szUpper,1)
           IF pToken
              pToken += 9
           END
        END
        IF pToken <> 0
           szTemp = CLIP(LEFT(SourceFile.Record.sText[pToken : LEN(SourceFile.Record.sText)]))
           pSpace = INSTRING(' ',szTemp,1)
           IF pSpace
              pComma = INSTRING(',',szTemp,1)
              IF pComma AND pComma < pSpace
                 ClassQ.szClassName = szTemp[1 : pComma-1]
              ELSE
                 ClassQ.szClassName = szTemp[1 : pSpace-1]
              END
           ELSE
              pComma = INSTRING(',',szTemp,1)
              IF pComma
                 ClassQ.szClassName = szTemp[1 : pComma-1]
              ELSE
                 pParen = INSTRING(')',szTemp,1)
?               ASSERT(pParen <> 0)
                 ClassQ.szClassName = szTemp[1 : pParen-1]
              END
           END
           !see if valid class
           szTemp = ClassQ.szClassName
           SORT(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)
           ClassQ.szClassSort = UPPER(szTemp)
           ClassQ.lModuleId = ModuleQ.lModuleId
           GET(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)
           IF ~ERRORCODE()
              !if it is, add this as a method of the class
              pSpace = INSTRING(' ',SourceFile.Record.sText) - 1
              MethodQ.lClassID = ClassQ.lClassID
              MethodQ.szMethodName = SourceFile.Record.sText[1 : pSpace]
              MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
              GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
              IF ERRORCODE()
                 fAdd = TRUE
              ELSE
                 fAdd = FALSE
              END

              MethodQ.szPrototype = srcGetPrototype(SourceFile.Record.sText)
              pToken = INSTRING(ClassQ.szClassSort,UPPER(MethodQ.szPrototype),1)
              IF pToken
                 MethodQ.szPrototype = MethodQ.szPrototype[1 : pToken-1] & MethodQ.szPrototype[pToken+LEN(ClassQ.szClassSort) : LEN(MethodQ.szPrototype)]
                 pToken = INSTRING(',',MethodQ.szPrototype)
                 IF pToken
                    MethodQ.szPrototype = '(' & MethodQ.szPrototype[pToken+1 : LEN(MethodQ.szPrototype)]
                 END
              END

              MethodQ.bPrivate = TRUE
              MethodQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
              MethodQ.bVirtual = CHOOSE(INSTRING(',VIRTUAL',szUpper,1))
              MethodQ.lLineNum = glo:lLineNum
              MethodQ.lSourceLine = srcGetSourceLine(ClassQ.lModuleId,ClassQ.szClassName & '.' & MethodQ.szMethodName,MethodQ.szPrototype)
              MethodQ.lClassID = ClassQ.lClassID
              MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
              MethodQ.bModule = bModule
              !Begin 2004.12.14 -----------------------------------------------
              MethodQ.bExtends = bExtends
              MethodQ.bFinal = bFinal
              MethodQ.bProc = CHOOSE(INSTRING(',PROC',szUpper,1))
              MethodQ.szDLL = srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
              MethodQ.szExtName = srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
              MethodQ.szCallConv = srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
              MethodQ.szReturnType = srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
              !End   2004.12.14 -----------------------------------------------
              IF fAdd
                 IF MethodQ.lSourceLine
                    ADD(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
                 ELSE
                    DO AddModuleLevelMethod
                 END
              ELSE
                 PUT(MethodQ)
              END
           ELSE
           !otherwise it is module level procedure for
           !all the classes in the file
              DO AddModuleLevelMethod
           END
        END
     ELSE
        pToken = INSTRING('MODULE(',szUpper,1)
        IF pToken
           pToken += 8
           szTemp = CLIP(LEFT(SourceFile.Record.sText[pToken : LEN(SourceFile.Record.sText)]))
           pToken = INSTRING('''',szTemp,1)
           IF pToken
              ModuleQ.szModuleName = szTemp[1 : pToken-1]
              IF UPPER(SUB(ModuleQ.szModuleName,-4,4)) <> '.CLW'
                 ModuleQ.szModuleName = ModuleQ.szModuleName & '.CLW'
              END
              GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
              IF ERRORCODE()
                 !Get Module Date and Time
                 FREE(TempQ)
                 DIRECTORY(TempQ,ModuleQ.szModulePath & ModuleQ.szModuleName,0)
                 IF RECORDS(TempQ)
                    GET(TempQ,1)
                    ModuleQ.lDate        = TempQ.Date
                    ModuleQ.lTime        = TempQ.Time
                    lLastModuleId += 1
                    ModuleQ.lModuleId = lLastModuleId
                    ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                    ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
                    bProcessingModule = TRUE
                 ELSE
                    ModuleQ.lModuleId = 0    !because it doesn't exist
                 END
              END
           END
        END
     END
  END   !LOOP
  FREE(MapSourceQueue)
  EXIT

AddModuleLevelMethod    ROUTINE
  DATA
pSpace  LONG
pQueue  LONG

  CODE
  pSpace = INSTRING(' ',SourceFile.Record.sText) - 1
  MethodQ.szMethodName = SourceFile.Record.sText[1 : pSpace]
  MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
  MethodQ.szPrototype = srcGetPrototype(SourceFile.Record.sText)
  MethodQ.bPrivate = TRUE
  MethodQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
  MethodQ.bVirtual = CHOOSE(INSTRING(',VIRTUAL',szUpper,1))
  MethodQ.lLineNum = glo:lLineNum
  MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
  MethodQ.bModule = bModule
  MethodQ.lSourceLine = srcGetSourceLine(ModuleQ.lModuleId,MethodQ.szMethodName,MethodQ.szPrototype)
  !Begin 2004.12.14 -----------------------------------------------
  MethodQ.bExtends = bExtends
  MethodQ.bFinal = bFinal
  MethodQ.bProc = CHOOSE(INSTRING(',PROC',szUpper,1))
  MethodQ.szDLL = srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
  MethodQ.szExtName = srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
  MethodQ.szCallConv = srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
  MethodQ.szReturnType = srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
  !End   2004.12.14 -----------------------------------------------
  LOOP pQueue = 1 TO RECORDS(ClassQ)
     GET(ClassQ,pQueue)
     IF ClassQ.lModuleId = ModuleQ.lModuleId
        MethodQ.lClassID = ClassQ.lClassID
        ADD(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5300
PROPERTY:END
ProcessClass ROUTINE
  DATA
bEndCount   BYTE

  CODE
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bProcessingClass = FALSE
  ELSE
     !property or method
     K = INSTRING(' PROCEDURE',szUpper,1)
     IF ~K
        K = INSTRING(' FUNCTION',szUpper,1)
     END
     IF K AND INSTRING('''',szUpper[1 : K])
        K = 0
     END
     IF K
        K = INSTRING(' ',SourceFile.Record.sText) - 1
        MethodQ.szMethodName = SourceFile.Record.sText[1 : K]

        COMPILE('ENDCOMPILE',_debug_)
        IF UPPER(MethodQ.szMethodName) = 'GROUP'
           x#=0
        END
        !ENDCOMPILE

        MethodQ.szPrototype = srcGetPrototype(SourceFile.Record.sText)
        MethodQ.bPrivate = CHOOSE(INSTRING(',PRIVATE',szUpper,1))
        MethodQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
        MethodQ.bVirtual = CHOOSE(INSTRING(',VIRTUAL',szUpper,1))
        MethodQ.lLineNum = glo:lLineNum
        MethodQ.lSourceLine = srcGetSourceLine(ClassQ.lModuleId,ClassQ.szClassName & '.' & MethodQ.szMethodName,MethodQ.szPrototype)
        MethodQ.lClassID = ClassQ.lClassID
        MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
        MethodQ.bModule = FALSE
        !Begin 2004.12.14 -----------------------------------------------
        MethodQ.bExtends = bExtends
        MethodQ.bFinal = bFinal
        MethodQ.bProc = CHOOSE(INSTRING(',PROC',szUpper,1))
        MethodQ.szDLL = srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
        MethodQ.szExtName = srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
        MethodQ.szCallConv = srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
        MethodQ.szReturnType = srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
        !End   2004.12.14 -----------------------------------------------
        ADD(MethodQ)
     ELSE
        !look for include statement
        K = INSTRING(' INCLUDE',szUpper,1)
        IF K !AND ~bProcessingInclude
           K = INSTRING('''',szUpper)
           IF K
              IncludeQ.szName = CLIP(szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1])
              IncludeQ.szPath = ProcessQ.szPath
              GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
              IF ERRORCODE()
                 !ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                 ADD(IncludeQ)
              END
           END
        ELSE
           !price                   decimal(10,2),PRIVATE
           K = INSTRING(' ',SourceFile.Record.sText) - 1
           PropertyQ.szPropertyName = SourceFile.Record.sText[1 : K]

           PropertyQ.szDataType =  LEFT(SUB(SourceFile.Record.sText,K+1,LEN(SourceFile.Record.sText)-K))

           IF (UPPER(SUB(PropertyQ.szDataType,1,7)) = 'DECIMAL') OR (UPPER(SUB(PropertyQ.szDataType,1,8)) = 'PDECIMAL')
              K = INSTRING(')',PropertyQ.szDataType) + 1
           ELSE
              K = INSTRING(',',PropertyQ.szDataType)
           END

           IF K
              PropertyQ.szDataType = PropertyQ.szDataType[1 : K-1]
           END
           PropertyQ.szDataType = CLIP(PropertyQ.szDataType)

           IF (CLIP(PropertyQ.szPropertyName) OR   |
              (PropertyQ.szPropertyName = '' AND (SUB(UPPER(PropertyQ.szDataType),1,5) = 'GROUP' OR SUB(UPPER(PropertyQ.szDataType),1,5) = 'QUEUE')))

              PropertyQ.bPrivate = CHOOSE(INSTRING(',PRIVATE',szUpper,1))
              PropertyQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
              PropertyQ.lLineNum = glo:lLineNum
              PropertyQ.lClassID = ClassQ.lClassID
              PropertyQ.szPropertySort = UPPER(PropertyQ.szPropertyName)
              PropertyQ.bModule = FALSE
              ADD(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)

              !!check for queue or group
              !!and bypass records until end found
              CASE SUB(UPPER(PropertyQ.szDataType),1,5)
              OF 'GROUP' OROF 'QUEUE'
                 bEndCount = 1
?              ASSERT(LEN(szUpper) <> 0)
                 IF szUpper[LEN(szUpper)] <> '.' AND szUpper[LEN(szUpper)-2 : LEN(szUpper)] <> 'END'
                    LOOP
                       IF bMultiStatement = TRUE
                          SourceFile.Record.sText = save:sMultiStatement
                          bMultiStatement = FALSE
                       ELSE
                          NEXT(SourceFile)
                       END
                       IF ERRORCODE()
                          lFilePctComplete = 100
                          FileProgressBox{PROP:Width} = lFilePctComplete*2
                          DISPLAY(FileProgressBox)
                          BREAK
                       ELSE

                          !!! remove extra whitespace from SourceFile.Record.sText here !!!
                          SourceFile.Record.sText = srcRemoveWhitespace(SourceFile.Record.sText)

                          glo:lLineNum += 1

                          lFileBytesProcessed = POINTER(SourceFile)
                          lFilePctComplete = (lFileBytesProcessed/lFileBytesToProcess)*100
                          IF lFileLastPct <> INT(lFilePctComplete/10)
                             lFileLastPct = INT(lFilePctComplete/10)
                             FileProgressBox{PROP:Width} = lFilePctComplete*2
                             DISPLAY(FileProgressBox)
                          END

                          szUpper = UPPER(CLIP(LEFT(SourceFile.Record.sText)))
                          !K = INSTRING('!',szUpper)
                          K = srcFindComment(szUpper)
                          IF K
                             szUpper[K] = '<0>'
                             szUpper = CLIP(szUpper)
                          END
                          IF INSTRING(' GROUP',szUpper,1) |
                          OR INSTRING(' QUEUE',szUpper,1)
                             bEndCount += 1
                          END
                          IF CLIP(LEFT(szUpper)) = 'END' OR |
                             CLIP(LEFT(szUpper)) = '.'
                             bEndCount -= 1
                             IF bEndCount = 0
                                BREAK
                             END
                          END
                       END
                    END
                 END
              END
           END
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5400
PROPERTY:END
ProcessStructure    ROUTINE
  IF INSTRING(' GROUP',szUpper,1) OR |
     INSTRING(' QUEUE',szUpper,1)
     bStructureCount += 1
  END
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bStructureCount -= 1
     IF bStructureCount = 0
        bProcessingStructure = FALSE
     END
  ELSE
     StructureQ.szDataLabel = srcGetLabel(SourceFile.Record.sText)
     StructureQ.szDataType = srcGetStatement(SourceFile.Record.sText)
?    ASSERT(LEN(StructureQ.szDataType) <> 0)
     IF StructureQ.szDataType[LEN(StructureQ.szDataType)] = '.'
        StructureQ.szDataType[LEN(StructureQ.szDataType)] = '<0>'
        bStructureCount -= 1
        IF bStructureCount = 0
           bProcessingStructure = FALSE
        END
     END
     ModuleQ.szModulePath = ProcessQ.szPath
     ModuleQ.szModuleName = ProcessQ.szName
     ModuleQ.lDate        = ProcessQ.lDate
     ModuleQ.lTime        = ProcessQ.lTime
     GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
     IF ERRORCODE()
        lLastModuleId += 1
        ModuleQ.lModuleId = lLastModuleId
        ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
        ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
     ELSE
        ModuleQ.lDate        = ProcessQ.lDate
        ModuleQ.lTime        = ProcessQ.lTime
        PUT(ModuleQ)
     END
     StructureQ.lModuleId = ModuleQ.lModuleId

     StructureQ.lLineNum = glo:lLineNum
     StructureQ.bPrivate = FALSE
     ADD(StructureQ)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
ProcessEquate    ROUTINE
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bProcessingEquate = FALSE
  ELSE
     IF EnumQ.szEnumPrefix
        EnumQ.szEnumLabel  = EnumQ.szEnumPrefix & ':' & srcGetLabel(SourceFile.Record.sText)
     ELSE
        EnumQ.szEnumLabel  = srcGetLabel(SourceFile.Record.sText)
     END

     K = INSTRING(' EQUATE',szUpper,1)  !start value specified?
     IF K
        K = INSTRING('(',szUpper,1,K+7)  !start value specified?
     END
     IF K AND szUpper[K+1] <> ')'
        K += 1
        M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
        EnumQ.szEnumValue = SourceFile.Record.sText[K : M]
        IF INSTRING('(',EnumQ.szEnumValue)
           EnumQ.szEnumValue = EnumQ.szEnumValue & ')'
        END
        EnumQ.bIsHexValue = FALSE
        IF EnumQ.szEnumValue[1] <> ''''
           IF ~NUMERIC(EnumQ.szEnumValue)
              EnumQ.szEnumValue = srcGetEquateValue(EnumQ.szEnumValue,EnumQ.bIsHexValue)
           END
        END
        lEnumValue = EnumQ.szEnumValue
     ELSE
        lEnumValue += 1
        EnumQ.szEnumValue = lEnumValue
     END

     IF K AND ~EnumQ.szEnumValue
        EnumQ.szEnumValue = SourceFile.Record.sText[K : M]
        IF INSTRING('(',EnumQ.szEnumValue)
           EnumQ.szEnumValue = EnumQ.szEnumValue & ')'
        END
     END

     ModuleQ.szModulePath = ProcessQ.szPath
     ModuleQ.szModuleName = ProcessQ.szName
     ModuleQ.lDate        = ProcessQ.lDate
     ModuleQ.lTime        = ProcessQ.lTime
     GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
     IF ERRORCODE()
        lLastModuleId += 1
        ModuleQ.lModuleId = lLastModuleId
        ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
        ADD(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
     ELSE
        ModuleQ.lDate        = ProcessQ.lDate
        ModuleQ.lTime        = ProcessQ.lTime
        PUT(ModuleQ)
     END
     EnumQ.lModuleId = ModuleQ.lModuleId

     EnumQ.lLineNum     = glo:lLineNum
     EnumQ.bIsEquate    = FALSE
     ADD(EnumQ)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
AddInterfaceMethods ROUTINE
  DATA
Ptr LONG

  CODE
  Ptr = 1
  LOOP
     K = INSTRING(',IMPLEMENTS(',szUpper,1,Ptr)
     IF ~K
        K = INSTRING(', IMPLEMENTS(',szUpper,1,Ptr)
        IF K
           K += 13
        END
     ELSE
        K += 12
     END
     IF K
        Ptr = K
        ClassInterfaceQ.lClassId = ClassQ.lClassID
        ClassInterfaceQ.szInterface = SourceFile.Record.sText[K : INSTRING(')',SourceFile.Record.sText,1,K+1)-1]
        GET(ClassInterfaceQ,+ClassInterfaceQ.lClassId,+ClassInterfaceQ.szInterface)
        IF ERRORCODE()
           ADD(ClassInterfaceQ,+ClassInterfaceQ.lClassId,+ClassInterfaceQ.szInterface)
        END
     ELSE
        BREAK
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FillSearchQ     ROUTINE
  IF EXISTS(glo:szRedFilePath)
     FREE(SearchQ)
     srcGetSearchFoldersFromRedFile(SearchQ, glo:szRedFilePath)
  ELSE
     MESSAGE('Redirection File [' & glo:szRedFilePath & '] not found','Redirection File Error',ICON:HAND)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FindAllModules  ROUTINE
  DO FillSearchQ
  J = RECORDS(SearchQ)
  LOOP I = 1 TO J
    GET(SearchQ,I)
    DIRECTORY(FileQ,SearchQ.szPath & '*.inc',0)
    N = RECORDS(FileQ)
    LOOP M = 1 TO N
      GET(FileQ,M)
      ProcessQ.szName = CLIP(UPPER(FileQ.name))
      ProcessQ.szPath = UPPER(SearchQ.szPath)
      ProcessQ.bProcessed = FALSE
      ProcessQ.lDate = FileQ.Date
      ProcessQ.lTime = FileQ.Time
      GET(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
      IF ERRORCODE()
         ADD(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
      END
    END
    FREE(FileQ)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FindChangedModules  ROUTINE
  DATA
P               LONG
X               LONG
loc:szFileName  CSTRING(256)

  CODE
  X = RECORDS(ModuleQ)
  LOOP P = 1 TO X
     GET(ModuleQ,P)
     FREE(TempQ)
     DIRECTORY(TempQ,ModuleQ.szModulePath & ModuleQ.szModuleName,0)
     IF RECORDS(TempQ)
        GET(TempQ,1)
        IF TempQ.Date <> ModuleQ.lDate OR TempQ.Time <> ModuleQ.lTime
           IF SUB(UPPER(ModuleQ.szModuleName),LEN(ModuleQ.szModuleName)-2,3) = 'INC'
              ProcessQ.szName = UPPER(ModuleQ.szModuleName)
              ProcessQ.szPath = UPPER(ModuleQ.szModulePath)
              ProcessQ.bProcessed = FALSE
              ProcessQ.lDate = TempQ.Date
              ProcessQ.lTime = TempQ.Time
              GET(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
              IF ERRORCODE()
                 ADD(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
              END
           ELSIF SUB(UPPER(ModuleQ.szModuleName),LEN(ModuleQ.szModuleName)-2,3) = 'CLW'
              ProcessQ.szName = SUB(UPPER(ModuleQ.szModuleName),1,LEN(ModuleQ.szModuleName)-3) & 'INC'
              ProcessQ.szPath = UPPER(ModuleQ.szModulePath)

              !make sure inc file exists
              loc:szFileName = ProcessQ.szPath & ProcessQ.szName
              IF _access(loc:szFileName,0) = 0     !INC file does exist
                 ProcessQ.bProcessed = FALSE
                 ProcessQ.lDate = TempQ.Date
                 ProcessQ.lTime = TempQ.Time
                 GET(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
                 IF ERRORCODE()
                    ADD(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
                 END

                 IncludeQ.szName = UPPER(ModuleQ.szModuleName)
                 IncludeQ.szPath = UPPER(ModuleQ.szModulePath)
                 GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                 IF ERRORCODE()
                    IncludeQ.bDelete = TRUE
                    !ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                    ADD(IncludeQ)
                 END
              ELSE
                 IncludeQ.szName = UPPER(ModuleQ.szModuleName)
                 IncludeQ.szPath = UPPER(ModuleQ.szModulePath)
                 GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                 IF ERRORCODE()
                    IncludeQ.bDelete = FALSE
                    !ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                    ADD(IncludeQ)
                 END
              END

           ELSE
              IncludeQ.szName = UPPER(ModuleQ.szModuleName)
              IncludeQ.szPath = UPPER(ModuleQ.szModulePath)
              GET(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
              IF ERRORCODE()
                 IncludeQ.bDelete = FALSE
                 !ADD(IncludeQ,+IncludeQ.szName,+IncludeQ.szPath)
                 ADD(IncludeQ)
              END
           END
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
RemoveChangedModules    ROUTINE
  DATA
X   LONG
Z   LONG

  CODE
  X = RECORDS(ProcessQ)
  LOOP Z = 1 TO X
     GET(ProcessQ,Z)
     ModuleQ.szModuleName = ProcessQ.szName
     ModuleQ.szModulePath = ProcessQ.szPath
     DO RemoveChangedModule
  END

  X = RECORDS(IncludeQ)
  LOOP Z = X TO 1 BY -1
     GET(IncludeQ,Z)
     ModuleQ.szModuleName = IncludeQ.szName
     ModuleQ.szModulePath = IncludeQ.szPath
     DO RemoveChangedModule
     IF IncludeQ.bDelete = TRUE
        DELETE(IncludeQ)                         !<<<<========= THIS IS THE STATEMENT ON WHICH THE GPF IS OCCURING
     END
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
RemoveChangedModule    ROUTINE
  DATA
P   LONG
C   LONG
S   LONG
E   LONG
X   LONG
Y   LONG

  CODE
  GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
  IF ~ERRORCODE()
     !remove classes
     LOOP C = RECORDS(ClassQ) TO 1 BY -1
        GET(ClassQ,C)
        IF ClassQ.lModuleId = ModuleQ.lModuleId OR   |
           ClassQ.lIncludeId = ModuleQ.lModuleId
           !CategoryQ
           CategoryQ.szClassName = ClassQ.szClassName
           GET(CategoryQ,+CategoryQ.szClassName)
           IF ~ERRORCODE()
              DELETE(CategoryQ)
           END
           !PropertyQ
           LOOP P = RECORDS(PropertyQ) TO 1 BY -1
              GET(PropertyQ,P)
              IF PropertyQ.lClassID = ClassQ.lClassID
                 DELETE(PropertyQ)
              END
           END
           !MethodQ
           LOOP P = RECORDS(MethodQ) TO 1 BY -1
              GET(MethodQ,P)
              IF MethodQ.lClassID = ClassQ.lClassID
                 DELETE(MethodQ)
              END
           END
           !CallQ
           LOOP P = RECORDS(CallQ) TO 1 BY -1
              GET(CallQ,P)
              IF SUB(CallQ.szCallingMethod,1,INSTRING('.',CallQ.szCallingMethod)-1) = ClassQ.szClassName
                 DELETE(CallQ)
              END
           END

           DELETE(ClassQ)
        END
     END

     !Remove Structures
     LOOP S = RECORDS(StructureQ) TO 1 BY -1
        GET(StructureQ,S)
        IF StructureQ.lModuleId = ModuleQ.lModuleId
           DELETE(StructureQ)
        END
     END

     !Remove Enums
     LOOP E = RECORDS(EnumQ) TO 1 BY -1
        GET(EnumQ,E)
        IF EnumQ.lModuleId = ModuleQ.lModuleId
           DELETE(EnumQ)
        END
     END

     FileNameQ.sFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
     GET(FileNameQ,+FileNameQ.sFileName)
     IF ~ERRORCODE()                           !file has not been scanned
        Y = RECORDS(SourceLineQ)
        LOOP X = Y TO 1 BY -1
           GET(SourceLineQ,X)
           IF SourceLineQ.sFileName = FileNameQ.sFileName
              DELETE(SourceLineQ)
           END
        END
        Y = RECORDS(LineCommentQ)
        LOOP X = Y TO 1 BY -1
           GET(LineCommentQ,X)
           IF LineCommentQ.sFileName = FileNameQ.sFileName
              DELETE(LineCommentQ)
           END
        END
        DELETE(FileNameQ)
     END

     DELETE(ModuleQ)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FindNewModules  ROUTINE
  DATA
szSavePath  CSTRING(256)
szFullPath  CSTRING(256)
pszFilePart LONG
cc          LONG

  CODE
  DO FillSearchQ
  J = RECORDS(SearchQ)
  LOOP I = 1 TO J
    GET(SearchQ,I)
    DIRECTORY(FileQ,SearchQ.szPath & '*.inc',0)
    N = RECORDS(FileQ)
    LOOP M = 1 TO N
      GET(FileQ,M)

      ModuleQ.szModuleName = CLIP(UPPER(FileQ.name))
      ModuleQ.szModulePath = UPPER(SearchQ.szPath)
      GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
      IF ERRORCODE()
         ProcessQ.szName = CLIP(UPPER(FileQ.name))
         ProcessQ.szPath = UPPER(SearchQ.szPath)
         ProcessQ.bProcessed = FALSE
         ProcessQ.lDate = FileQ.Date
         ProcessQ.lTime = FileQ.Time
         GET(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
         IF ERRORCODE()
            ADD(ProcessQ,+ProcessQ.szPath,+ProcessQ.szName)
         END
      END
    END
    FREE(FileQ)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FixupEnumQ  ROUTINE
!==============================================================================
! This routine attempts for find a common prefix for unlabelled enumeration
! types to try and give them a more meaningful name.
!==============================================================================
  DATA
Q_Records           LONG,AUTO
ptrQ                LONG,AUTO
ptrStrutureStart    LONG,AUTO
ptrStrutureEnd      LONG,AUTO
ptrToken            LONG,AUTO
sav:szEnumSort      LIKE(EnumQ.szEnumSort),AUTO
sav:szEnumName      LIKE(EnumQ.szEnumName),AUTO
sav:lModuleId       LIKE(EnumQ.lModuleId),AUTO

  CODE
  ! sort the enumq
  SORT(EnumQ,+EnumQ.szEnumSort,+EnumQ.lModuleId,+EnumQ.szEnumLabel)

  !look for '_U'nlabelled Types
  Q_Records = RECORDS(EnumQ)
  LOOP ptrQ = 1 TO Q_Records
     GET(EnumQ,ptrQ)
     IF EnumQ.szEnumSort[1 : 2] = '_U'
        !found one
        IF EnumQ.szEnumLabel = ''
           sav:szEnumSort = EnumQ.szEnumSort
           sav:szEnumName = EnumQ.szEnumLabel
           sav:lModuleId  = EnumQ.lModuleId
           ptrStrutureStart = ptrQ

           ! find the end of this structure
           LOOP
              IF ptrQ < Q_Records
                 ptrQ += 1
                 GET(EnumQ,ptrQ)
                 IF EnumQ.szEnumSort = sav:szEnumSort AND EnumQ.lModuleId = sav:lModuleId
                    IF sav:szEnumName = ''
                       ptrToken = INSTRING(':',EnumQ.szEnumLabel)
                       IF ptrToken
                          sav:szEnumName = EnumQ.szEnumLabel[1 : ptrToken-1]
                       ELSE
                          ptrToken = INSTRING('_',EnumQ.szEnumLabel)
                          IF ptrToken
                             sav:szEnumName = EnumQ.szEnumLabel[1 : ptrToken-1]
                          END
                       END
                    END
                 ELSE
                    ptrStrutureEnd = ptrQ - 1
                    BREAK
                 END
              ELSE
                 ptrStrutureEnd = Q_Records
                 BREAK
              END
           END

           IF sav:szEnumName
              ! see if they all match
              LOOP ptrQ = ptrStrutureStart+1 TO ptrStrutureEnd
                 GET(EnumQ,ptrQ)
                 IF EnumQ.szEnumLabel[1 : LEN(sav:szEnumName)] <> sav:szEnumName
                    BREAK  !break early on no match
                 END
              END

              IF ptrQ > ptrStrutureEnd     ! if they all matched
                 LOOP ptrQ = ptrStrutureStart TO ptrStrutureEnd
                    GET(EnumQ,ptrQ)
                    EnumQ.szEnumName = sav:szEnumName
                    EnumQ.szEnumSort = UPPER(sav:szEnumName)
                    PUT(EnumQ)
                 END
              END
           END

           ptrQ = ptrStrutureEnd
           GET(EnumQ,ptrQ)
       END
     END
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
CopyStructureQ   ROUTINE
!need to create a copy of the structure queue when doing a scan
!this copy is used for fixing up pointers to structures
!doing this allows the program to identify structures that may not have been 'found' yet
!particularly when doing a full scan as the StructureQ is freed.
  DATA
I       LONG,AUTO
J       LONG,AUTO

  CODE
    FREE(glo:StructureQCopy)
    J = RECORDS(StructureQ)
    LOOP I = 1 TO J
       GET(StructureQ,I)
       glo:StructureQCopy = StructureQ
       ADD(glo:StructureQCopy)
    END
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Window WINDOW,AT(,,260,60),CENTER,WALLPAPER('WALLPAPER.GIF'),GRAY,DOUBLE,PALETTE(256)
       PANEL,AT(0,0,260,60),USE(?Panel2),BEVEL(-1,-1)
       STRING('Building Class Hierarchy'),AT(4,8,252,10),USE(?ProcessString),TRN,CENTER
       STRING('Scanning:'),AT(4,45,252,10),USE(?ScanString),TRN,CENTER
       STRING(@n_4),AT(211,45),USE(glo:lLineNum),TRN,HIDE
       PANEL,AT(29,23,202,16),USE(?Panel1),BEVEL(-1,-1)
       BOX,AT(30,24,0,14),USE(?ProgressBox),COLOR(COLOR:Red),FILL(COLOR:Red)
     END

AddDerivedClasses:I             LONG
AddDerivedClasses:J             LONG
A                               LONG
I                               LONG
J                               LONG
K                               LONG
M                               LONG
N                               LONG
P                               LONG
lClassPointer                   LONG
sav:ClassQ:szParentClassName    LIKE(ClassQ.szParentClassName)
lStructureQRecords              LONG
lStructureQPointer              LONG
ThisClass                       LIKE(ClassQ)
lMethodQPointer                 LONG
lMethodQRecords                 LONG
bProcessFile                    BYTE
bProcessingMap                  BYTE
bProcessingModule               BYTE
bProcessingClass                BYTE
bProcessingStructure            BYTE
bProcessingEquate               BYTE
bProcessingInclude              BYTE
bABC                            BYTE
lLastClassId                    LONG
lLastModuleId                   LONG
lEnumValue                      LONG
szCategory                      CSTRING(64)
szSection                       CSTRING(64)
szSearchPath                    CSTRING(4096),AUTO
FileQ                           QUEUE(File:queue),PRE(Q)
                                END
TempQ                           QUEUE(File:queue),PRE(TQ)
                                END
SearchQ                         QUEUE(SEARCHQTYPE),PRE(SQ)
                                END
ProcessQ                        QUEUE,PRE(PQ)
szName                            CSTRING(256)
szPath                            CSTRING(512)
bProcessed                        BYTE
lDate                             LONG
lTime                             LONG
                                END
IncludeQ                        QUEUE,PRE(IQ)
szName                            CSTRING(256)
szPath                            CSTRING(512)
lDate                             LONG
lTime                             LONG
bDelete                           BYTE
                                END

lFileBytesToProcess             LONG
lFileBytesProcessed             LONG
lFilePctComplete                LONG
lFileLastPct                    LONG

lPctComplete                    LONG
lLastPct                        LONG
szUpper                         CSTRING(1024)       !UPPER(CLIP(Source.Record.sText))
ClassInterfaceQ                 QUEUE,PRE()
lClassId                          LIKE(ClassQ.lClassID)
szInterface                       CSTRING(64)
                                END
lUnlabelledCount                LONG(0)
save:sText                      CSTRING(1024)
szLastEnumName                  LIKE(EnumQ.szEnumName)
lSaveModuleId                   LIKE(EnumQ.lModuleId)
bProcessInclude                 BYTE
bStructureCount                 BYTE
szOmitTerminator                CSTRING(64)
ReturnValue                     LONG
loc:sCurrentCursor              STRING(4)
bMultiStatement                 BYTE(0)         !true = processing multi statement line
save:sMultiStatement            CSTRING(1024)   !save area for multiple statement source line
hProcess                        LONG
bResult                         BYTE
lCount                          LONG
bModule                         BYTE
MapSourceQueue                  QUEUE,PRE(MapSourceQueue)
sText                             LIKE(SourceFile.Record.sText)
szUpper                           LIKE(szUpper)
LineNo                            LIKE(glo:lLineNum)
                                END

bFinal                          BYTE
bExtends                        BYTE
loc:szCompactAsciiFilename      cstring(65)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
HandleRedirectionMacros ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO
N       LONG,AUTO

  CODE
    N = RECORDS(RedirectionQueue)
    LOOP I = 1 TO N
       GET(RedirectionQueue,I)
       LOOP
          J = INSTRING(RedirectionQueue.Token,UPPER(SearchQ.szPath),1)
          IF J
             SearchQ.szPath = SUB(SearchQ.szPath,1,J-1) & RedirectionQueue.Path & SUB(SearchQ.szPath,J+LEN(RedirectionQueue.Token),LEN(SearchQ.szPath)-J+LEN(RedirectionQueue.Token)-1)
          ELSE
             BREAK
          END
       END
    END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcBuildCallQueue
srcFindComment
srcGetEquateValue
srcGetLabel
srcGetPrototype
srcGetPrototypeAttr
srcGetSearchFoldersFromRedFile
srcGetSourceLine
srcGetStatement
srcRefreshTree
srcRemoveWhitespace
winAdditionalFiles
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddDerivedClass
PROTOTYPE '(STRING szParentClass, LONG lTreeLevel)'
PARAMETERS '(sParentClass,  lTreeLevel)'
[COMMON]
DESCRIPTION 'Add Derived Class to Tree'
FROM ABC Source
MODIFIED '2017/07/02' ' 8:31:50'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !save our position
  lPosition = POSITION(ClassQ)

  ClassQ.szParentClassSort = UPPER(sParentClass)
  GET(ClassQ,+ClassQ.szParentClassSort)

  IF ~ERRORCODE()
     I = POINTER(ClassQ)
     J = RECORDS(ClassQ)
     LOOP I = I TO J
       GET(ClassQ,I)
       IF ERRORCODE() OR ClassQ.szParentClassSort <> UPPER(sParentClass)
          BREAK
       ELSE
          !see  if it is in the class hierarchy
          Q = RECORDS(ClassHierarchyQueue)
          IF Q
             LOOP P = 1 TO Q
                GET(ClassHierarchyQueue,P)
                IF ClassHierarchyQueue.szClassName = ClassQ.szClassName
                   DO AddClassToTree
                   BREAK
                END
             END
          ELSE
             DO AddClassToTree
          END
       END
     END
  END

  !restore saved position
  GET(ClassQ,lPosition)

  RETURN
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lPosition       LONG
I               LONG
J               LONG
K               LONG
M               LONG
N               LONG
P               LONG
Q               LONG
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
AddClassToTree  ROUTINE
  CategoryQ.szClassName = ClassQ.szClassName
  GET(CategoryQ,+CategoryQ.szClassName)
  IF ClassQ.bPrivate = TRUE AND glo:bShowPrivate = FALSE
     !Do not add to tree and return
  ELSIF CategoryQ:bDetailLevel > glo:bDetailLevel
     !Do not add to tree and return
  !ELSIF glo:bABCOnly = 1 AND ~ClassQ.bIsABC
     !Do not add to tree and return
  !ELSIF glo:bABCOnly = 2 AND ClassQ.bIsABC
     !Do not add to tree and return
  ELSE
     TreeQ.szText = ClassQ.szClassName & '(' & ClassQ.szParentClassName & ')'
     TreeQ.lLevel = lTreeLevel+1
     OldClassQ.szClassName = ClassQ.szClassName
     GET(OldClassQ,+OldClassQ.szClassName)
     IF ERRORCODE()
        TreeQ.lStyle = CHOOSE(ClassQ.bPrivate = FALSE,STYLE:NORMAL_NEW,STYLE:PRIVATE_NEW)
        TreeQ.wIcon  = CHOOSE(ClassQ.bInterface = FALSE,ICON:NEWCLASS,ICON:NEWINTERFACEFOLDER)
     ELSE
        TreeQ.lStyle = CHOOSE(ClassQ.bPrivate = FALSE,STYLE:NORMAL,STYLE:PRIVATE)
        TreeQ.wIcon  = CHOOSE(ClassQ.bInterface = FALSE,ICON:CLASS,ICON:INTERFACEFOLDER)
     END
     TreeQ.szSearch = ClassQ.szClassName
     TreeQ.szClassName = ClassQ.szClassName
     IF ClassQ.bIsABC
        IF SUB(ClassQ.szClassName,-5,5) = 'Class'
           TreeQ.szContextString = ClassQ.szClassName
        ELSE
           TreeQ.szContextString = ClassQ.szClassName & 'Class'
        END
        CASE glo:bClarionVersion
          OF CWVERSION_C2
             TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
          OF CWVERSION_C4
             TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
          OF CWVERSION_C5 OROF CWVERSION_C5EE
             TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
          OF CWVERSION_C55 OROF CWVERSION_C55EE
             TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
          OF CWVERSION_C60 OROF CWVERSION_C60EE
             TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
          OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
             TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
        ELSE
             TreeQ.szHelpFile = ''
        END
     ELSE
        TreeQ.szContextString = ClassQ.szClassName
        TreeQ.szHelpFile = ''
     END
     TreeQ.lLineNum = ClassQ.lLineNum
     TreeQ.lSourceLine = 0
     TreeQ.lIncludeId = ClassQ.lIncludeId
     TreeQ.lModuleId  = ClassQ.lModuleId
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
     K = TreeQ.lLevel  !K is parent level
     srcAddProperties(K)
     srcAddMethods(K)
     srcAddInterfaces(K)
     srcAddDerivedClass(ClassQ.szClassName,K)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S   STRING(256)
X   LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcAddDerivedClass
srcAddInterfaces
srcAddMethods
srcAddProperties
srcGetLineComments
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcRefreshTree
[COMMON]
DESCRIPTION 'Refresh the Class Hierarchy Tree'
FROM ABC Source
MODIFIED '2017/07/02' ' 9:11:46'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                   LONG
J                   LONG
K                   LONG
lLastLevel          LONG
bContract           BYTE
szLastCallName      LIKE(CallNameQ.szCallName)
loc:sCurrentCursor  STRING(4)
bFirstTime          BYTE(1),STATIC
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  IF bFirstTime
     bFirstTime = FALSE
     RETURN
  END
  loc:sCurrentCursor = glo:sCurrentCursor
  glo:sCurrentCursor = CURSOR:WAIT
  SETCURSOR(glo:sCurrentCursor)

  SORT(ClassQ,+ClassQ.szParentClassSort,+ClassQ.szClassSort)
  szClassSort = 'SORT(ClassQ,+ClassQ.szParentClassSort,+ClassQ.szClassSort)'
  SORT(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
  SORT(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
  SORT(StructureQ,+StructureQ.szStructureSort,+StructureQ.lModuleId,+StructureQ.lLineNum)
  !SORT(EnumQ,+EnumQ.szEnumSort,+EnumQ.lModuleId,+EnumQ.szEnumLabel)   !+EnumQ.lLineNum)
  SORT(EnumQ,+EnumQ.lModuleId,+EnumQ.szEnumSort,+EnumQ.szEnumLabel)   !+EnumQ.lLineNum)
  SORT(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  FREE(TreeQ)
  DISPLAY()

  CASE glo:bCurrentView
    OF VIEW:CLASSES OROF VIEW:INTERFACES
       J = RECORDS(ClassQ)
       ClassQ.szParentClassSort = ''
       ClassQ.szClassSort = UPPER(glo:szParentClassName)
       GET(ClassQ,+ClassQ.szParentClassSort,+ClassQ.szClassSort)
       IF ERRORCODE()
          I = 1
       ELSE
          I = POINTER(ClassQ)
       END
       LOOP I = I TO J
         GET(ClassQ,I)
         !*** temporary bug fix
         IF ~ClassQ.szClassName
            CYCLE
         END
         !***
         !should have found the parent record ---------------------------------
         IF ClassQ.szClassSort <> UPPER(glo:szParentClassName)
            BREAK
         END
         !---------------------------------------------------------------------
         IF ClassQ.szParentClassName     !If Derived Class
            BREAK
         ELSE                            !Else Add Base Classes
            CategoryQ.szClassName = ClassQ.szClassName
            GET(CategoryQ,+CategoryQ.szClassName)
            IF ClassQ.bPrivate = TRUE AND glo:bShowPrivate = FALSE
               CYCLE
            ELSIF glo:bCurrentView = VIEW:CLASSES AND ClassQ.bInterface = TRUE
               CYCLE
            ELSIF glo:bCurrentView = VIEW:INTERFACES AND ClassQ.bInterface = FALSE
               CYCLE
            ELSIF glo:bCurrentView = VIEW:CLASSES AND CategoryQ:bDetailLevel > glo:bDetailLevel
               CYCLE
            ELSIF glo:bCurrentView = VIEW:CLASSES AND glo:szParentClassName AND |
                  ClassQ.szClassSort <> UPPER(glo:szParentClassName)
               CYCLE
            ELSIF glo:bCurrentView = VIEW:INTERFACES AND glo:szParentClassName AND |
                  ClassQ.szClassSort <> UPPER(glo:szParentClassName)
               CYCLE
            ELSE
               CASE glo:bABCOnly
               OF 1  !abc
                  IF ~ClassQ.bIsABC
                     CYCLE
                  END
               OF 2  !non-abc
                  IF ClassQ.bIsABC
                     CYCLE
                  END
               END
               TreeQ.szText = ClassQ.szClassName
               TreeQ.lLevel = 1
               TreeQ.lStyle = CHOOSE(ClassQ.bPrivate = FALSE,STYLE:NORMAL,STYLE:PRIVATE)
               OldClassQ.szClassName = ClassQ.szClassName
               GET(OldClassQ,+OldClassQ.szClassName)
               IF ERRORCODE()
                  TreeQ.lStyle = CHOOSE(ClassQ.bPrivate = FALSE,STYLE:NORMAL_NEW,STYLE:PRIVATE_NEW)
                  TreeQ.wIcon  = CHOOSE(ClassQ.bInterface = FALSE,ICON:NEWCLASS,ICON:NEWINTERFACEFOLDER)
               ELSE
                  TreeQ.lStyle = CHOOSE(ClassQ.bPrivate = FALSE,STYLE:NORMAL,STYLE:PRIVATE)
                  TreeQ.wIcon  = CHOOSE(ClassQ.bInterface = FALSE,ICON:CLASS,ICON:INTERFACEFOLDER)
               END
               TreeQ.szSearch = ClassQ.szClassName
               TreeQ.szClassName = ClassQ.szClassName
               IF ClassQ.bIsABC
                  IF SUB(ClassQ.szClassName,-5,5) = 'Class'
                     TreeQ.szContextString = ClassQ.szClassName
                  ELSE
                     TreeQ.szContextString = ClassQ.szClassName & 'Class'
                  END
                  CASE glo:bClarionVersion
                    OF CWVERSION_C2
                       TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
                    OF CWVERSION_C4
                       TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
                    OF CWVERSION_C5 OROF CWVERSION_C5EE
                       TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
                    OF CWVERSION_C55 OROF CWVERSION_C55EE
                       TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
                    OF CWVERSION_C60 OROF CWVERSION_C60EE
                       TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
                    OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
                       TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
                  ELSE
                       TreeQ.szHelpFile = ''
                  END
               ELSE
                  TreeQ.szContextString = ClassQ.szClassName
                  TreeQ.szHelpFile = ''
               END
               TreeQ.lLineNum = ClassQ:lLineNum
               TreeQ.lSourceLine = 0
               TreeQ.lIncludeId = ClassQ.lIncludeId
               TreeQ.lModuleId  = ClassQ.lModuleId

               NoteQ.bClarionVersion = glo:bClarionVersion
               IF TreeQ.szContextString
                  NoteQ.szLookup = UPPER(TreeQ.szContextString)
               ELSE
                  NoteQ.szLookup = UPPER(TreeQ.szText)
               END
               GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
               IF ERRORCODE()
                  TreeQ.wNoteIcon = 0
                  TreeQ.szNoteTip = ''
               ELSE
                  TreeQ.wNoteIcon = ICON:NOTE
                  TreeQ.szNoteTip = NoteQ:szNote
                  srcWordWrap(TreeQ.szNoteTip,64)
               END
               DO SetTipText

               ADD(TreeQ)
               K = TreeQ.lLevel
               srcAddProperties(K)
               srcAddMethods(K)
               srcAddInterfaces(K)
               srcAddDerivedClass(ClassQ.szClassName,K)
            END
         END
       END
    OF VIEW:STRUCTURES
       srcAddStructures()
    OF VIEW:EQUATES
       srcAddEquates()
    OF VIEW:CALLS
       IF RECORDS(MethodQ)
          J = RECORDS(CallNameQ)
          IF J
             K = POINTER(CallNameQ)
             LOOP I = 1 TO J
               GET(CallNameQ,I)
               CallNameQ.bExpandedAbove = FALSE
               PUT(CallNameQ)
             END
             LOOP I = K TO J
                GET(CallNameQ,I)
                IF INSTRING('.',CallNameQ.szCallName)
                   BREAK
                END
             END
          ELSE
             CallNameQ.szCallName = 'WindowManager.Run'
          END
          SORT(ClassQ,+ClassQ.szClassSort)

          szLastCallName = CallNameQ.szCallName
          srcAddCalls('',CallNameQ.szCallName,1)
          CallNameQ.szCallName = szLastCallName
          GET(CallNameQ,+CallNameQ.szCallName)
       END
  END

  SORT(ClassQ,+ClassQ.szClassSort)
  SORT(StructureQ,+StructureQ.szStructureName,+StructureQ.szDataLabel)
  SORT(EnumQ,+EnumQ.szEnumName,+EnumQ.szEnumLabel)

  DO ContractTree
  GET(TreeQ,1)

  glo:sCurrentCursor = loc:sCurrentCursor
  SETCURSOR(glo:sCurrentCursor)

  omit('end_omit')
  IF ERRORCODE()
     CASE glo:bCurrentView
     OF VIEW:CLASSES
        MESSAGE('Nothing to display for this category/detail level.|Try using a different category or a higher detail level.','Class Viewer Hint')
     OF VIEW:INTERFACES
        MESSAGE('No Interfaces to display','Class Viewer')
     OF VIEW:STRUCTURES
        MESSAGE('No Structures to display','Class Viewer')
     OF VIEW:EQUATES
        MESSAGE('No Equates to display','Class Viewer')
     OF VIEW:CALLS
        MESSAGE('Nothing to display for ' & CallNameQ.szCallName & '|Try setting the Protected or Private attribute checkboxes.','Class Viewer Hint')
     ELSE
     END
  END
  !end_omit

  RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ContractTree    ROUTINE
  DATA
ABS:TreeQ:lLevel    LIKE(TreeQ.lLevel)
  CODE
  J = RECORDS(TreeQ)
  GET(TreeQ,J)
  lLastLevel = ABS(TreeQ.lLevel)
  LOOP I = J TO 1 BY -1
    GET(TreeQ,I)
    ABS:TreeQ:lLevel = ABS(TreeQ.lLevel)
    IF ABS:TreeQ:lLevel > lLastLevel
       lLastLevel = ABS:TreeQ:lLevel
       TreeQ.lLevel = ABS:TreeQ:lLevel
    ELSIF ABS:TreeQ:lLevel < lLastLevel
       lLastLevel = ABS:TreeQ:lLevel
       TreeQ.lLevel = -1 * ABS:TreeQ:lLevel
    ELSE
       TreeQ.lLevel = ABS:TreeQ:lLevel
    END
    PUT(TreeQ)
  END
  EXIT
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S           STRING(256)
X           LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcAddCalls
srcAddDerivedClass
srcAddEquates
srcAddInterfaces
srcAddMethods
srcAddProperties
srcAddStructures
srcGetLineComments
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddProperties
PROTOTYPE '(LONG lTreeLevel)'
PARAMETERS '(lTreeLevel)'
[COMMON]
DESCRIPTION 'Add Class Properties to Tree'
FROM ABC Source
MODIFIED '2015/03/04' '17:31:00'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  PropertyQ.lClassID = ClassQ.lClassID
  PropertyQ.szPropertyName = ''
  GET(PropertyQ,+PropertyQ.lClassID)
  IF ~ERRORCODE()                       !If we found a property for this class
     !Add Properties Folder
     TreeQ.szText = 'Properties'
     TreeQ.wIcon  = ICON:PROPERTYFOLDER
     TreeQ.lLevel = lTreeLevel+1
     TreeQ.lStyle = STYLE:NORMAL
     TreeQ.szSearch = ''
     TreeQ.szClassName = ClassQ.szClassName
     TreeQ.szContextString = ''
     TreeQ.lLineNum = ClassQ.lLineNum
     TreeQ.lSourceLine = 0
     TreeQ.lIncludeId = ClassQ.lIncludeId
     TreeQ.lModuleId  = ClassQ.lModuleId
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
     !Add Current Property
     TreeQ.szText = PropertyQ.szPropertyName & ' - ' & PropertyQ.szDataType
     TreeQ.wIcon  = ICON:PROPERTY
     TreeQ.lLevel = lTreeLevel+2
     TreeQ.lStyle = CHOOSE(PropertyQ.bPrivate,STYLE:PRIVATE,STYLE:NORMAL)
     TreeQ.lStyle = CHOOSE(PropertyQ.bProtected,STYLE:PROTECTED,TreeQ.lStyle)
     TreeQ.lStyle = CHOOSE(PropertyQ.bModule,STYLE:MODULE,TreeQ.lStyle)

     DO CheckForHyperlink

     TreeQ.szSearch = PropertyQ.szPropertyName
     TreeQ.szClassName = ClassQ.szClassName
     IF ClassQ.bIsABC
        IF SUB(ClassQ.szClassName,-5,5) = 'Class'
           TreeQ.szContextString = PropertyQ.szPropertyName & ':' & ClassQ.szClassName
        ELSE
           TreeQ.szContextString = PropertyQ.szPropertyName & ':' & ClassQ.szClassName & 'Class'
        END
        CASE glo:bClarionVersion
          OF CWVERSION_C2
             TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
          OF CWVERSION_C4
             TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
          OF CWVERSION_C5 OROF CWVERSION_C5EE
             TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
          OF CWVERSION_C55 OROF CWVERSION_C55EE
             TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
          OF CWVERSION_C60 OROF CWVERSION_C60EE
             TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
          OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
             TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
        ELSE
             TreeQ.szHelpFile = ''
        END
     ELSE
        TreeQ.szContextString = PropertyQ.szPropertyName & ':' & ClassQ.szClassName
        TreeQ.szHelpFile = ''
     END
     TreeQ.lLineNum = PropertyQ.lLineNum
     TreeQ.lSourceLine = 0
     IF PropertyQ.bModule
        TreeQ.lIncludeId = ClassQ.lModuleId
     ELSE
        TreeQ.lIncludeId = ClassQ.lIncludeId
     END
     TreeQ.lModuleId  = ClassQ.lModuleId
     IF PropertyQ.bPrivate OR PropertyQ.bModule
        TreeQ.szContextString = ''
        TreeQ.szHelpFile = ''
        IF glo:bShowPrivate
           IF PropertyQ.bModule
              IF glo:bShowModule
                 DO SetNoteIcon
                 DO SetTipText
                 ADD(TreeQ)
              END
           ELSE
              DO SetNoteIcon
              DO SetTipText
              ADD(TreeQ)
           END
        END
     ELSIF PropertyQ.bProtected
        IF glo:bShowProtected
           DO SetNoteIcon
           DO SetTipText
           ADD(TreeQ)
        END
     ELSE
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END

     I = POINTER(PropertyQ) + 1
     J = RECORDS(PropertyQ)
     LOOP I = I TO J
       GET(PropertyQ,I)
       IF ERRORCODE() OR PropertyQ.lClassID <> ClassQ.lClassID
          BREAK
       !ELSIF PropertyQ.bModule
       !   CYCLE
       ELSE
          TreeQ.szText = PropertyQ.szPropertyName & ' - ' & PropertyQ.szDataType
          TreeQ.wIcon  = ICON:PROPERTY
          TreeQ.lLevel = lTreeLevel+2
          TreeQ.lStyle = CHOOSE(PropertyQ.bPrivate,STYLE:PRIVATE,STYLE:NORMAL)
          TreeQ.lStyle = CHOOSE(PropertyQ.bProtected,STYLE:PROTECTED,TreeQ.lStyle)
          TreeQ.lStyle = CHOOSE(PropertyQ.bModule,STYLE:MODULE,TreeQ.lStyle)

          DO CheckForHyperlink

          TreeQ.szSearch = PropertyQ.szPropertyName
          TreeQ.szClassName = ClassQ.szClassName
          IF ClassQ.bIsABC
             IF SUB(ClassQ.szClassName,-5,5) = 'Class'
                TreeQ.szContextString = PropertyQ.szPropertyName & ':' & ClassQ.szClassName
             ELSE
                TreeQ.szContextString = PropertyQ.szPropertyName & ':' & ClassQ.szClassName & 'Class'
             END
             CASE glo:bClarionVersion
               OF CWVERSION_C2
                  TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
               OF CWVERSION_C4
                  TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
               OF CWVERSION_C5 OROF CWVERSION_C5EE
                  TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
               OF CWVERSION_C55 OROF CWVERSION_C55EE
                  TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
               OF CWVERSION_C60 OROF CWVERSION_C60EE
                  TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
               OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
                  TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
             ELSE
                  TreeQ.szHelpFile = ''
             END
          ELSE
             TreeQ.szContextString = PropertyQ.szPropertyName & ':' & ClassQ.szClassName
             TreeQ.szHelpFile = ''
          END
          TreeQ.lLineNum = PropertyQ.lLineNum
          TreeQ.lSourceLine = 0
          IF PropertyQ.bModule
             TreeQ.lIncludeId = ClassQ.lModuleId
          ELSE
             TreeQ.lIncludeId = ClassQ.lIncludeId
          END
          TreeQ.lModuleId  = ClassQ.lModuleId
          IF PropertyQ.bPrivate OR PropertyQ.bModule
             TreeQ.szContextString = ''
             TreeQ.szHelpFile = ''
             IF glo:bShowPrivate
                IF PropertyQ.bModule
                   IF glo:bShowModule
                      DO SetNoteIcon
                      DO SetTipText
                      ADD(TreeQ)
                   END
                ELSE
                   DO SetNoteIcon
                   DO SetTipText
                   ADD(TreeQ)
                END
             END
          ELSIF PropertyQ.bProtected
             IF glo:bShowProtected
                DO SetNoteIcon
                DO SetTipText
                ADD(TreeQ)
             END
          ELSE
             DO SetNoteIcon
             DO SetTipText
             ADD(TreeQ)
          END
       END
     END
  END
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG
J               LONG
szObjectName    CSTRING(61)
lObjectId       LONG
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S   STRING(256)
X   LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
     ModuleQ.lModuleId = TreeQ.lIncludeId
     GET(ModuleQ,ModuleQ.lModuleId)
     IF ERRORCODE()
        ModuleQ:szModulePath = '**UNDEFINED**'
        ModuleQ:szModuleName = ''
     END
     TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
     DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckForHyperlink   ROUTINE
  IF INSTRING('&',TreeQ.szText)
     IF srcIsClassReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName,lObjectId)
        DO SetHyperlinkStyle
     ELSIF srcIsStructureReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName)
        DO SetHyperlinkStyle
     END
  ELSIF INSTRING('LIKE(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('LIKE(',UPPER(TreeQ.szText),1)+5 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          DO SetHyperlinkStyle
       END
  ELSIF INSTRING('GROUP(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('GROUP(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          DO SetHyperlinkStyle
       END
  ELSIF INSTRING('QUEUE(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('QUEUE(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          DO SetHyperlinkStyle
       END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetHyperlinkStyle   ROUTINE
  CASE TreeQ.lStyle
  OF STYLE:NORMAL
     TreeQ.lStyle = STYLE:NORMAL_HYPERLINK
  OF STYLE:PRIVATE
     TreeQ.lStyle = STYLE:PRIVATE_HYPERLINK
  OF STYLE:PROTECTED
     TreeQ.lStyle = STYLE:PROTECTED_HYPERLINK
  OF STYLE:MODULE
     TreeQ.lStyle = STYLE:MODULE_HYPERLINK
  OF STYLE:NORMAL_NEW
     TreeQ.lStyle = STYLE:NORMAL_NEW_HYPERLINK
  OF STYLE:PRIVATE_NEW
     TreeQ.lStyle = STYLE:PRIVATE_NEW_HYPERLINK
  OF STYLE:PROTECTED_NEW
     TreeQ.lStyle = STYLE:PROTECTED_NEW_HYPERLINK
  OF STYLE:MODULE_NEW
     TreeQ.lStyle = STYLE:MODULE_NEW_HYPERLINK
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetLineComments
srcIsClassReference
srcIsInterfaceReference
srcIsStructureReference
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddMethods
PROTOTYPE '(LONG lTreeLevel)'
PARAMETERS '(lTreeLevel)'
[COMMON]
DESCRIPTION 'Add Class Methods to Tree'
FROM ABC Source
MODIFIED '2015/03/04' '17:31:42'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG
J               LONG
K               LONG
szInterfaceName CSTRING(64)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  SORT(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
  J = RECORDS(MethodQ)
  LOOP I = 1 TO J
     GET(MethodQ,I)
     IF MethodQ.lClassID < ClassQ.lClassID
        CYCLE
     ELSIF MethodQ.lClassID > ClassQ.lClassID
        BREAK
     ELSE
        !Add Methods Folder
        IF glo:bCurrentView <> VIEW:INTERFACES
           TreeQ.szText = 'Methods'
           TreeQ.wIcon  = ICON:METHODFOLDER
           TreeQ.lLevel = lTreeLevel+1
           TreeQ.lStyle = STYLE:NORMAL
           TreeQ.szSearch = ''
           TreeQ.szClassName = ClassQ.szClassName
           TreeQ.szContextString = ''
           TreeQ.lLineNum = ClassQ.lLineNum
           TreeQ.lSourceLine = 0
           TreeQ.lIncludeId = ClassQ.lIncludeId
           TreeQ.lModuleId  = ClassQ.lModuleId
           DO SetNoteIcon
           DO SetTipText
           ADD(TreeQ)
        END
        !Look For Interface Name
        DO LookForInterface
        IF ~szInterfaceName
           !Add Current Method
           DO AddMethod
           I = POINTER(MethodQ) + 1
           J = RECORDS(MethodQ)
           LOOP I = I TO J
             GET(MethodQ,I)
             IF ERRORCODE() OR MethodQ.lClassID <> ClassQ.lClassID
                BREAK
             ELSE
                DO LookForInterface
                IF ~szInterfaceName
                   DO AddMethod
                END
             END
           END
        ELSE
           DELETE(TreeQ)
        END
        !BREAK
     END
  END

LookForInterface    ROUTINE
  K = INSTRING('.',MethodQ.szMethodName)
  IF K   !Add Interface Folder
     IF szInterfaceName <> MethodQ.szMethodName[1 : K-1]
        szInterfaceName = MethodQ.szMethodName[1 : K-1]
        !DO AddInterfaceFolder
     END
  ELSE
     szInterfaceName = ''
  END
  EXIT

AddInterfaceFolder  ROUTINE
  TreeQ.szText = szInterfaceName
  TreeQ.wIcon  = ICON:INTERFACEFOLDER
  TreeQ.lLevel = lTreeLevel+2
  TreeQ.lStyle = STYLE:NORMAL
  TreeQ.szSearch = ClassQ.szClassName & '.' & szInterfaceName
  TreeQ.szClassName = ClassQ.szClassName
  IF ClassQ.bIsABC
     IF SUB(ClassQ.szClassName,-5,5) = 'Class'
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     ELSE
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName & 'Class'
     END
     CASE glo:bClarionVersion
       OF CWVERSION_C2
          TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
       OF CWVERSION_C4
          TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
       OF CWVERSION_C5 OROF CWVERSION_C5EE
          TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
       OF CWVERSION_C55 OROF CWVERSION_C55EE
          TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
       OF CWVERSION_C60 OROF CWVERSION_C60EE
          TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
       OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
          TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
     ELSE
          TreeQ.szHelpFile = ''
     END
  ELSE
     TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     TreeQ.szHelpFile = ''
  END
  TreeQ.lLineNum = ClassQ.lLineNum
  TreeQ.lSourceLine = 0
  TreeQ.lIncludeId = ClassQ.lIncludeId
  TreeQ.lModuleId  = ClassQ.lModuleId
  IF ClassQ.bPrivate
     TreeQ.szContextString = ''
     TreeQ.szHelpFile = ''
     IF glo:bShowPrivate
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END
  ELSE
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
  END
  EXIT

AddMethod   ROUTINE
  TreeQ.szText = MethodQ.szMethodName & ' ' & MethodQ.szPrototype
  TreeQ.lLevel = CHOOSE(glo:bCurrentView <> VIEW:INTERFACES,lTreeLevel+2,lTreeLevel+1)
  TreeQ.wIcon  = ICON:METHOD
  TreeQ.lStyle = CHOOSE(MethodQ.bPrivate,STYLE:PRIVATE,STYLE:NORMAL)
  TreeQ.lStyle = CHOOSE(MethodQ.bProtected,STYLE:PROTECTED,TreeQ.lStyle)
  TreeQ.lStyle = CHOOSE(MethodQ.bModule,STYLE:MODULE,TreeQ.lStyle)
  IF glo:bCurrentView = VIEW:INTERFACES OR szInterfaceName <> ''
     TreeQ.lStyle = STYLE:VIRTUAL
  ELSE
     TreeQ.lStyle = CHOOSE(MethodQ.bVirtual,STYLE:VIRTUAL,TreeQ.lStyle)
  END
  TreeQ.szSearch = ClassQ.szClassName & '.' & MethodQ.szMethodName
  IF ClassQ.bIsABC
     IF SUB(ClassQ.szClassName,-5,5) = 'Class'
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     ELSE
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName & 'Class'
     END
     CASE glo:bClarionVersion
       OF CWVERSION_C2
          TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
       OF CWVERSION_C4
          TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
       OF CWVERSION_C5 OROF CWVERSION_C5EE
          TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
       OF CWVERSION_C55 OROF CWVERSION_C55EE
          TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
       OF CWVERSION_C60 OROF CWVERSION_C60EE
          TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
       OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
          TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
     ELSE
        TreeQ.szHelpFile = ''
     END
  ELSE
     TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     TreeQ.szHelpFile = ''
  END
  TreeQ.lLineNum = MethodQ.lLineNum
  TreeQ.lSourceLine = MethodQ:lSourceLine
  IF MethodQ.bModule
     TreeQ.lIncludeId = ClassQ.lModuleId
  ELSE
     TreeQ.lIncludeId = ClassQ.lIncludeId
  END
  TreeQ.lModuleId  = ClassQ.lModuleId
  IF MethodQ.bPrivate OR MethodQ.bModule
     TreeQ.szContextString = ''
     TreeQ.szHelpFile = ''
     IF glo:bShowPrivate
        IF MethodQ.bModule
           IF glo:bShowModule
              DO SetNoteIcon
              DO SetTipText
              ADD(TreeQ)
           END
        ELSE
           DO SetNoteIcon
           DO SetTipText
           ADD(TreeQ)
        END
     END
  ELSIF MethodQ.bProtected
     IF glo:bShowProtected
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END
  ELSE
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
  END
  EXIT
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S   STRING(256)
X   LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetLineComments
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winOptions
PROTOTYPE '(),BYTE'
[COMMON]
DESCRIPTION 'Edit User Preferences'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:51:21'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('92e486ac-0a5d-4c63-aa11-1c75b44071c5'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('b Return Value:'),USE(?bReturnValue:Prompt)
! ENTRY(@n3),USE(bReturnValue)
[REPORTCONTROLS]
! STRING(@n3),USE(bReturnValue)
bReturnValue             BYTE
!!> GUID('3eb72be0-a870-4681-8e32-22d8edf439dd'),INITIAL('FALSE'),PROMPT('b Return Value:'),HEADER('b Return Value'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s63),USE(loc:szRedFileName)
[REPORTCONTROLS]
! STRING(@s63),USE(loc:szRedFileName)
loc:szRedFileName        CSTRING(64)
!!> GUID('a2240616-4ba1-4803-9036-7d2abe356d63'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('loc : sz Red File Path:'),USE(?loc:szRedFilePath:Prompt)
! TEXT,USE(loc:szRedFilePath)
[REPORTCONTROLS]
! TEXT,USE(loc:szRedFilePath)
loc:szRedFilePath        CSTRING(256)
!!> GUID('5bdb141b-3b24-43f8-a8e2-b9ebe630d37b'),PROMPT('loc : sz Red File Path:'),HEADER('loc : sz Red File Path'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s42),USE(szCompactRedFilePath)
[REPORTCONTROLS]
! STRING(@s42),USE(szCompactRedFilePath)
loc:szCompactRedFilePath CSTRING(43)
!!> GUID('e6d29998-881d-44f3-ba95-ac22ad4f5368'),PROMPT('loc : sz Compact Red File Path:'),HEADER('loc : sz Compact Red File Path'),PICTURE(@s42)
[SCREENCONTROLS]
! PROMPT('loc : Background:'),USE(?loc:Background:Prompt)
! ENTRY(@n3),USE(loc:Background)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:Background)
loc:Background           BYTE
!!> GUID('134ed35d-7c43-4191-86f7-2627260f79df'),PROMPT('loc : Background:'),HEADER('loc : Background'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('loc : Color 1:'),USE(?loc:Color1:Prompt)
! ENTRY(@n-14),USE(loc:Color1),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:Color1),RIGHT(1)
loc:Color1               LONG
!!> GUID('1409c9f6-83d1-4079-8994-faa7851462de'),PROMPT('loc : Color 1:'),HEADER('loc : Color 1'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('loc : Color 2:'),USE(?loc:Color2:Prompt)
! ENTRY(@n-14),USE(loc:Color2),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:Color2),RIGHT(1)
loc:Color2               LONG
!!> GUID('a66b5c4d-4d89-4b5c-9cbe-d89a79115817'),PROMPT('loc : Color 2:'),HEADER('loc : Color 2'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('loc : s Color 1:'),USE(?loc:sColor1:Prompt)
! ENTRY(@s30),USE(loc:sColor1)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sColor1)
loc:sColor1              STRING(30)
!!> GUID('d4c417c3-0324-4019-98d9-f601984e6b4c'),PROMPT('loc : s Color 1:'),HEADER('loc : s Color 1'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('loc : s Color 2:'),USE(?loc:sColor2:Prompt)
! ENTRY(@s30),USE(loc:sColor2)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sColor2)
loc:sColor2              STRING(30)
!!> GUID('d3b8d1f5-0a7b-4e19-859a-4abcfe7fdbfd'),PROMPT('loc : s Color 2:'),HEADER('loc : s Color 2'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('Wallpaper 1:'),USE(?loc:szWallpaper1:Prompt),TRN
! ENTRY(@s255),USE(loc:szWallpaper1)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:szWallpaper1)
loc:szWallpaper1         LIKE(glo:szWallpaper1)
!!> GUID('ae91220e-65d8-496c-9d76-cb010eff9c3d'),PROMPT('Wallpaper 1:'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Wallpaper 2:'),USE(?loc:szWallpaper2:Prompt),TRN
! ENTRY(@s255),USE(loc:szWallpaper2)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:szWallpaper2)
loc:szWallpaper2         LIKE(glo:szWallpaper2)
!!> GUID('cef42888-1cc2-4640-8b7f-87e642cb8ee9'),PROMPT('Wallpaper 2:'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Tiled'),USE(loc:Tiled1)
[REPORTCONTROLS]
! CHECK('Tiled'),USE(loc:Tiled1)
loc:Tiled1               BYTE
!!> GUID('180af9a8-b234-4f61-806b-e3c294b4968d'),VALID(BOOLEAN),PROMPT('Tiled'),HEADER('Tiled'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK('Tiled'),USE(loc:Tiled2)
[REPORTCONTROLS]
! CHECK('Tiled'),USE(loc:Tiled2)
loc:Tiled2               BYTE
!!> GUID('f932fe40-0039-4a82-9474-6f25610ac96d'),VALID(BOOLEAN),PROMPT('Tiled'),HEADER('Tiled'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s31),USE(loc:Typeface)
[REPORTCONTROLS]
! STRING(@s31),USE(loc:Typeface)
loc:Typeface             STRING(31)
!!> GUID('bf3b2d74-b9de-4b35-9c60-daf4a1fd5168'),PICTURE(@s31)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:FontSize)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:FontSize)
loc:FontSize             LONG
!!> GUID('7363b6bd-28a6-4a5f-91a4-4b316599a292'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:FontColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:FontColor)
loc:FontColor            LONG
!!> GUID('288d90a0-2f63-46df-88b6-ccac63572501'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc : s Font Color:'),USE(?loc:sFontColor:Prompt)
! ENTRY(@s30),USE(loc:sFontColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sFontColor)
loc:sFontColor           STRING(30)
!!> GUID('98eb3c06-25a2-41d8-9521-b0a807deec6d'),PROMPT('loc : s Font Color:'),HEADER('loc : s Font Color'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:FontStyle)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:FontStyle)
loc:FontStyle            LONG
!!> GUID('23e03d6e-1bb0-4232-9933-34137206e0e4'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('Font:'),USE(?loc:szFont:Prompt)
! ENTRY(@s255),USE(loc:szFont),SKIP,DISABLE,COLOR(COLOR:White),READONLY
[REPORTCONTROLS]
! TEXT,USE(loc:szFont)
loc:szFont               CSTRING(256)
!!> GUID('e1b85215-d4d3-45bc-be92-3350017e9069'),PROMPT('Font:'),HEADER('Font'),PICTURE(@s255),READONLY
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lModuleColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lModuleColor)
loc:lModuleColor         LONG
!!> GUID('b2faa028-cee1-4496-b657-42533efff88e'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sModuleColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sModuleColor)
loc:sModuleColor         STRING(30)
!!> GUID('26320042-a50a-4cc9-9f68-115c75fd6bcd'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lPrivateColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lPrivateColor)
loc:lPrivateColor        LONG
!!> GUID('8375da16-36cc-4fb6-aa54-3c6cd02621d7'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sPrivateColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sPrivateColor)
loc:sPrivateColor        STRING(30)
!!> GUID('b6033333-4ecf-4739-ad80-300e52985fba'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lProtectedColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lProtectedColor)
loc:lProtectedColor      LONG
!!> GUID('ee064350-d4e5-467e-b270-2417e9b877ec'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sProtectedColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sProtectedColor)
loc:sProtectedColor      STRING(30)
!!> GUID('60d5dfeb-ba4a-4ba4-a561-2a27484f23e2'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lVirtualColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lVirtualColor)
loc:lVirtualColor        LONG
!!> GUID('a595281c-f01b-4d49-a58e-43573a6a031e'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sVirtualColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sVirtualColor)
loc:sVirtualColor        STRING(30)
!!> GUID('35db3018-0890-4798-ba5b-8ba28f839eff'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lSelectedBack)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lSelectedBack)
loc:lSelectedBack        LONG
!!> GUID('b7ef5b40-c67a-44b2-8419-c448e3b82817'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sSelectedBack)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sSelectedBack)
loc:sSelectedBack        STRING(30)
!!> GUID('9db4141e-f922-4b1b-9e07-eef57dc6defa'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lSelectedFore)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lSelectedFore)
loc:lSelectedFore        LONG
!!> GUID('1690c88d-962b-4875-8960-03384512fffe'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sSelectedFore)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sSelectedFore)
loc:sSelectedFore        STRING(30)
!!> GUID('a4986c6c-9964-4e91-aee1-a189aa34585a'),PICTURE(@s30)
[SCREENCONTROLS]
! PROMPT('&Note Color:'),USE(?loc:lNoteColor:Prompt)
! ENTRY(@n-14),USE(loc:lNoteColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lNoteColor),RIGHT(1)
loc:lNoteColor           LONG
!!> GUID('f056ae24-7dff-491b-bcd7-3fbcf52479c7'),PROMPT('&Note Color:'),HEADER('Note Color'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sNoteColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sNoteColor)
loc:sNoteColor           STRING(30)
!!> GUID('38d97688-81ae-425a-98d6-1a2d0f788084'),HEADER('Note Color'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lHighlightColor1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lHighlightColor1)
loc:lHighlightColor1     LONG
!!> GUID('05449dcf-1d3c-4fe9-9943-2757da315898'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sHighlightColor1)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sHighlightColor1)
loc:sHighlightColor1     STRING(30)
!!> GUID('51a34742-acd5-4d79-8d00-aef1046aec06'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lHighlightColor2)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lHighlightColor2)
loc:lHighlightColor2     LONG
!!> GUID('980ce816-ac2b-48d1-b69b-bc145f1521b2'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sHighlightColor2)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sHighlightColor2)
loc:sHighlightColor2     STRING(30)
!!> GUID('6b9f7435-a7f8-4599-9c5e-f9c2c518aabf'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sHyperlinkColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sHyperlinkColor)
loc:sHyperlinkColor      STRING(30)
!!> GUID('f5838e95-005f-4dcd-9403-54e75782e6e0'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(loc:lHyperlinkColor)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:lHyperlinkColor)
loc:lHyperlinkColor      LONG
!!> GUID('2712fbd0-b720-4e41-a66d-6c44efb69427'),PICTURE(@n-14)
[SCREENCONTROLS]
! LIST,USE(loc:bClarionVersion),DROP(6),FROM('Clarion 5|Clarion 5  Enterprise Edition|Clarion 5.5|Clarion 5.5  Enterprise Edit' &|
!   'ion|Clarion 6.0|Clarion 6.0  Enterprise Edition')
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bClarionVersion)
loc:bClarionVersion      BYTE
!!> GUID('74bfa190-1289-4416-a273-1749efe4a2b4'),VALID(NOCHECKS('Clarion 5|Clarion 5  Enterprise Edition|Clarion 5.5|Clarion 5.5  Enterprise Edition|Clarion 6.0|Clarion 6.0  Enterprise Edition')),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('loc : b Show Tips:'),USE(?loc:bShowTips:Prompt)
! ENTRY(@n3),USE(loc:bShowTips)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bShowTips)
loc:bShowTips            BYTE
!!> GUID('01f31fa4-1562-4b79-8461-8c6b5a73791d'),PROMPT('loc : b Show Tips:'),HEADER('loc : b Show Tips'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK('O&paque Check Box'),USE(loc:bOpaqueCheckBox),TIP('Use opaque check boxes.<13,10>Check this option if you are using XP Manifest files<13,10>a' &|
!   'nd the check boxes look like big black squares.')
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bOpaqueCheckBox)
loc:bOpaqueCheckBox      BYTE
!!> GUID('b2ee677e-c9c8-442e-8a39-6e1ff0c97079'),PROMPT('O&paque Check Box:'),HEADER('Opaque Check Box'),TOOLTIP('Use opaque check boxes.<0DH,0AH>Check this option if you are using XP Manifest files<0DH,0AH>and the check boxes look like big black squares.'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK('&Force Edit'),USE(loc:bForceEdit),TIP('Force Edit on View Load')
[REPORTCONTROLS]
! CHECK('&Force Edit'),USE(loc:bForceEdit)
loc:bForceEdit           BYTE
!!> GUID('952e2926-cd1d-41d5-9b05-1a7dcb80bc27'),VALID(BOOLEAN),PROMPT('&Force Edit:'),HEADER('Force Edit'),TOOLTIP('Force Edit on View Load'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK('Use Association'),USE(loc:bUseAssociation),MSG('Use Windows File Association'),TIP('Use Windows File Association')
[REPORTCONTROLS]
! CHECK('Use Association'),USE(loc:bUseAssociation)
loc:bUseAssociation      BYTE !Use WIndows File Association
!!> GUID('436ba7ce-833c-4fa2-a983-45c9489e4a57'),VALID(BOOLEAN),PROMPT('Use Association:'),HEADER('Use Association'),MESSAGE('Use Windows File Association'),TOOLTIP('Use Windows File Association'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('loc : sz Editor Command:'),USE(?loc:szEditorCommand:Prompt)
! ENTRY(@s20),USE(loc:szEditorCommand)
[REPORTCONTROLS]
! STRING(@s20),USE(loc:szEditorCommand)
loc:szEditorCommand      LIKE(glo:szEditorCommand)
!!> GUID('ebb1e166-03c9-4b48-96da-babfa82a866c'),PROMPT('loc : sz Editor Command:'),HEADER('loc : sz Editor Command'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s20),USE(sav:szEditorCommand)
[REPORTCONTROLS]
! STRING(@s20),USE(sav:szEditorCommand)
sav:szEditorCommand      LIKE(glo:szEditorCommand)
!!> GUID('27ba1696-5b33-4f0d-9455-dedbac8c6808'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s255),USE(Q)
[REPORTCONTROLS]
! STRING(@s255),USE(Q)
Q                        QUEUE,PRE(Q) !Queue of Module Names
!!> GUID('3c704372-2833-44d6-b4da-ff18c77361e4'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(Q:szModuleName)
[REPORTCONTROLS]
! STRING(@s63),USE(Q:szModuleName)
szModuleName               CSTRING(64)
!!> GUID('f739bd03-21ea-4c0d-b642-0287c4beca0e'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(Q:szModulePath)
[REPORTCONTROLS]
! TEXT,USE(Q:szModulePath)
szModulePath               CSTRING(256)
!!> GUID('9b8a3c32-e55a-4182-a221-d70f5f3bb77a'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('b Clarion Version:'),USE(?Q:bClarionVersion:Prompt)
! ENTRY(@n3),USE(Q:bClarionVersion)
[REPORTCONTROLS]
! STRING(@n3),USE(Q:bClarionVersion)
bClarionVersion            BYTE
!!> GUID('da5e0516-67b9-4d31-b6b9-3799b9799645'),PROMPT('b Clarion Version:'),HEADER('b Clarion Version'),PICTURE(@n3)
                         END
!!> GUID('2df37d58-0720-42da-81bb-ea86dca584ef')
[SCREENCONTROLS]
! ENTRY(@s1),USE(szNull)
[REPORTCONTROLS]
! STRING(@s1),USE(szNull)
szNull                   CSTRING(2)
!!> GUID('b954f82a-f0a1-4d9b-bf01-833d44dd07a0'),PICTURE(@s1)
[SCREENCONTROLS]
! TEXT,USE(szURL)
[REPORTCONTROLS]
! TEXT,USE(szURL)
szURL                    CSTRING(256)
!!> GUID('b97d733e-e9a6-43b3-b89b-4e7b223555f7'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(loc:szRoot)
[REPORTCONTROLS]
! TEXT,USE(loc:szRoot)
loc:szRoot               CSTRING(256)
!!> GUID('bf5d03c5-88e1-4c36-a07b-dfc94d3cb29b'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK(' EQUATES.CLW'),USE(loc:bEquates)
[REPORTCONTROLS]
! CHECK(' EQUATES.CLW'),USE(loc:bEquates)
loc:bEquates             BYTE
!!> GUID('d5f7c05f-cd54-487b-addb-376465e68383'),VALID(BOOLEAN),PROMPT(' EQUATES.CLW'),HEADER('loc : b Equates'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' ERRORS.CLW'),USE(loc:bErrors)
[REPORTCONTROLS]
! CHECK(' ERRORS.CLW'),USE(loc:bErrors)
loc:bErrors              BYTE
!!> GUID('dd3fa0e7-9b07-40dc-8e50-8256a72d3410'),VALID(BOOLEAN),PROMPT(' ERRORS.CLW'),HEADER('loc : b Errors'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' PROPERTY.CLW'),USE(loc:bProperty)
[REPORTCONTROLS]
! CHECK(' PROPERTY.CLW'),USE(loc:bProperty)
loc:bProperty            BYTE
!!> GUID('c977cf8f-72d4-4109-adfd-9f5d2f851589'),VALID(BOOLEAN),PROMPT(' PROPERTY.CLW'),HEADER('loc : b Property'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' PRNPROP.CLW'),USE(loc:bPrnProp)
[REPORTCONTROLS]
! CHECK(' PRNPROP.CLW'),USE(loc:bPrnProp)
loc:bPrnProp             BYTE
!!> GUID('f9d0fc27-e2ab-41ed-b4bb-c4a21e3c0bac'),VALID(BOOLEAN),PROMPT(' PRNPROP.CLW'),HEADER('loc : b Prn Prop'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' KEYCODES.CLW'),USE(loc:bKeycodes)
[REPORTCONTROLS]
! CHECK(' KEYCODES.CLW'),USE(loc:bKeycodes)
loc:bKeycodes            BYTE
!!> GUID('dd6b3578-0684-4782-9600-8a088fb3b8a9'),VALID(BOOLEAN),PROMPT(' KEYCODES.CLW'),HEADER('loc : b Keycodes'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' TPLEQU.CLW'),USE(loc:bTplEqu)
[REPORTCONTROLS]
! CHECK(' TPLEQU.CLW'),USE(loc:bTplEqu)
loc:bTplEqu              BYTE
!!> GUID('9d7be56d-9b78-48ab-81cb-145d226bdfb1'),VALID(BOOLEAN),PROMPT(' TPLEQU.CLW'),HEADER('loc : b Tpl Equ'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' WINEQU.CLW'),USE(loc:bWinEqu)
[REPORTCONTROLS]
! CHECK(' WINEQU.CLW'),USE(loc:bWinEqu)
loc:bWinEqu              BYTE
!!> GUID('ba4c29b3-c572-4a35-9b01-1db3d3204d7d'),VALID(BOOLEAN),PROMPT(' WINEQU.CLW'),HEADER('loc : b Win Equ'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' WINDOWS.INC'),USE(loc:bWindows)
[REPORTCONTROLS]
! CHECK(' WINDOWS.INC'),USE(loc:bWindows)
loc:bWindows             BYTE
!!> GUID('26a656a3-d72b-42d8-8f95-906b2a2c246a'),VALID(BOOLEAN),PROMPT(' WINDOWS.INC'),HEADER('loc : b Windows'),PICTURE(@n3)
[SCREENCONTROLS]
! CHECK(' Auto Expand'),USE(loc:bAutoExpand),MSG('Automatically expand the selected object.'),TIP('Automatically expand the selected object.')
[REPORTCONTROLS]
! CHECK(' Auto Expand'),USE(loc:bAutoExpand)
loc:bAutoExpand          BYTE !Automatically expand the selected object.
!!> GUID('845305f1-1b18-4295-8b13-03af5ab75c8e'),VALID(BOOLEAN),PROMPT(' Auto Expand'),HEADER('Auto Expand'),MESSAGE('Automatically expand the selected object.'),TOOLTIP('Automatically expand the selected object.'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bUseHTMLHelp)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bUseHTMLHelp)
loc:bUseHTMLHelp         BYTE
!!> GUID('53658755-3417-4bb6-ac24-55c4895af22a'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('loc : b Show Sparse Trees:'),USE(?loc:bShowSparseTrees:Prompt)
! ENTRY(@n3),USE(loc:bShowSparseTrees)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bShowSparseTrees)
loc:bShowSparseTrees     BYTE
!!> GUID('903d1c2f-1b7b-4747-9dce-2f02e3ae5490'),PROMPT('loc : b Show Sparse Trees:'),HEADER('loc : b Show Sparse Trees'),PICTURE(@n3)
[SCREENCONTROLS]
! TEXT,USE(loc:szXmlStyleSheet)
[REPORTCONTROLS]
! TEXT,USE(loc:szXmlStyleSheet)
loc:szXmlStyleSheet      CSTRING(256)
!!> GUID('3b677631-9b69-4a09-9ca4-b4ab377d05b7'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Editor Q:'),USE(?EditorQ:Prompt)
! ENTRY(@s255),USE(EditorQ),MSG('List of good shareware editors.'),TIP('List of good shareware editors.')
[REPORTCONTROLS]
! STRING(@s255),USE(EditorQ)
EditorQ                  QUEUE,PRE(eq) !List of good shareware editors.
!!> GUID('18d2bdeb-6b92-4fb6-a0b6-228a314815a4'),PROMPT('Editor Q:'),HEADER('Editor Q'),MESSAGE('List of good shareware editors.'),TOOLTIP('List of good shareware editors.'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Web Address:'),USE(?eq:szWebAddress:Prompt)
! TEXT,USE(eq:szWebAddress)
[REPORTCONTROLS]
! TEXT,USE(eq:szWebAddress)
szWebAddress               CSTRING(256)
!!> GUID('f9061109-1709-413f-89c7-917e642403bf'),PROMPT('Web Address:'),HEADER('Web Address'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Command Line Example:'),USE(?eq:szCommandLineExample:Prompt)
! ENTRY(@s128),USE(eq:szCommandLineExample),MSG('example command line'),TIP('example command line')
[REPORTCONTROLS]
! STRING(@s128),USE(eq:szCommandLineExample)
szCommandLineExample       CSTRING(129) !example command line
!!> GUID('6d91f00d-2a6d-47ad-8964-94b51a63e6d4'),PROMPT('Command Line Example:'),HEADER('Command Line Example'),MESSAGE('example command line'),TOOLTIP('example command line'),PICTURE(@s128)
                         END
!!> GUID('c0eb6f82-b63e-44fb-a0e7-627f98759434')
[SCREENCONTROLS]
! ENTRY(@s1),USE(loc:ViewerStyles)
[REPORTCONTROLS]
! STRING(@s1),USE(loc:ViewerStyles)
loc:ViewerStyles         GROUP(COLORGROUPTYPE),PRE()
!!> GUID('22d6a7ed-5bb4-4cb4-a0d5-a4572414966c'),PICTURE(@s1)
                         END
!!> GUID('1c84ce20-e553-4009-bc95-534d2ae24292')
[SCREENCONTROLS]
! PROMPT('loc : Style Group:'),USE(?loc:StyleGroup:Prompt)
! ENTRY(@s1),USE(loc:StyleGroup)
[REPORTCONTROLS]
! STRING(@s1),USE(loc:StyleGroup)
loc:StyleGroup           GROUP(STYLEGROUPTYPE),PRE(sg)
!!> GUID('4a267fc2-35c4-45e0-9506-398e4b1c2596'),PROMPT('loc : Style Group:'),HEADER('loc : Style Group'),PICTURE(@s1)
                         END
!!> GUID('e092d96f-e950-40e0-b8c3-08c90c8c8adf')
[SCREENCONTROLS]
! TEXT,USE(loc:szViewerFont)
[REPORTCONTROLS]
! TEXT,USE(loc:szViewerFont)
loc:szViewerFont         CSTRING(256)
!!> GUID('00a77627-7a90-46d4-b40f-202df0d35247'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sViewerForeColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sViewerForeColor)
loc:sViewerForeColor     STRING(30)
!!> GUID('54c1aa69-52bb-4c2f-87a5-05d4f1e717f2'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@s30),USE(loc:sViewerBackColor)
[REPORTCONTROLS]
! STRING(@s30),USE(loc:sViewerBackColor)
loc:sViewerBackColor     STRING(30)
!!> GUID('3b6499da-964d-4dbf-a4ab-4cb541d082ea'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@s64),USE(loc:sViewerSample)
[REPORTCONTROLS]
! STRING(@s64),USE(loc:sViewerSample)
loc:sViewerSample        CSTRING(65)
!!> GUID('fa48f9a0-077b-467f-a015-3897ba584dbb'),PICTURE(@s64)
[SCREENCONTROLS]
! ENTRY(@s34),USE(OptionQ)
[REPORTCONTROLS]
! STRING(@s34),USE(OptionQ)
OptionQ                  QUEUE,PRE(Tree)
!!> GUID('0b539039-ba44-464e-96c2-cd307e09a4ce'),PROMPT('Option Q:'),HEADER('Option Q'),PICTURE(@s34)
[SCREENCONTROLS]
! ENTRY(@s31),USE(Tree:szText)
[REPORTCONTROLS]
! STRING(@s31),USE(Tree:szText)
szText                     CSTRING(32)
!!> GUID('05582752-bab3-4461-9876-8d5e38562f18'),PICTURE(@s31)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(Tree:Icon)
[REPORTCONTROLS]
! STRING(@n-7),USE(Tree:Icon)
Icon                       SHORT
!!> GUID('09f898db-5f58-49dd-a793-8e0e1df1ec0b'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(Tree:Level)
[REPORTCONTROLS]
! STRING(@n-7),USE(Tree:Level)
Level                      LONG
!!> GUID('a34a0be3-c76c-4bb8-a02c-d9c83408724c'),PICTURE(@n-7)
[SCREENCONTROLS]
! PROMPT('Style:'),USE(?Tree:Style:Prompt)
! ENTRY(@n-14),USE(Tree:Style),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(Tree:Style),RIGHT(1)
Style                      LONG
!!> GUID('1830e820-7939-4fa6-a8b8-7cc58f0bfe41'),PROMPT('Style:'),HEADER('Style'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(Tree:Feq)
[REPORTCONTROLS]
! STRING(@n-14),USE(Tree:Feq)
Feq                        LONG
!!> GUID('401a1259-007c-4f19-8cb4-8afc80eac17b'),PICTURE(@n-14)
                         END
!!> GUID('924b6fa3-859e-4e6e-ae80-4d3aea80d781')
[SCREENCONTROLS]
! ENTRY(@s32),USE(Heading1)
[REPORTCONTROLS]
! STRING(@s32),USE(Heading1)
Heading1                 CSTRING(33)
!!> GUID('19b940e1-2f47-466d-b616-d6ef57ee4463'),PICTURE(@s32)
[SCREENCONTROLS]
! ENTRY(@s32),USE(Heading2)
[REPORTCONTROLS]
! STRING(@s32),USE(Heading2)
Heading2                 CSTRING(33)
!!> GUID('23d922b1-20fb-46aa-8831-82a8d2f07d22'),PICTURE(@s32)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(Sheet2Choice)
[REPORTCONTROLS]
! STRING(@n-14),USE(Sheet2Choice)
Sheet2Choice             LONG
!!> GUID('35c76969-723a-4257-aba1-02dcd7a4bcbf'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('loc : b Max MRU:'),USE(?loc:bMaxMRU:Prompt)
! ENTRY(@n3),USE(loc:bMaxMRU)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bMaxMRU)
loc:bMaxMRU              BYTE
!!> GUID('6d5a526f-8e3e-4cf7-9778-7b7dbb8181a2'),PROMPT('loc : b Max MRU:'),HEADER('loc : b Max MRU'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('loc : Category Drop Count:'),USE(?loc:CategoryDropCount:Prompt)
! ENTRY(@n3),USE(loc:CategoryDropCount)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:CategoryDropCount)
loc:CategoryDropCount    BYTE
!!> GUID('9f9a88fd-d491-4af8-8e9b-7da07ca36473'),PROMPT('loc : Category Drop Count:'),HEADER('loc : Category Drop Count'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : Layout:'),USE(?loc:Layout:Prompt)
! ENTRY(@n3),USE(loc:Layout)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:Layout)
loc:Layout               BYTE
!!> GUID('e2a5e67a-eba6-41a7-a382-cb78e6df550c'),PROMPT('loc : Layout:'),HEADER('loc : Layout'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s254),USE(szSubKey)
[REPORTCONTROLS]
! STRING(@s254),USE(szSubKey)
szSubKey                 CSTRING(255)
!!> GUID('8cf3eb29-4a02-44cc-acf4-ddf0f5800e34'),PICTURE(@s254)
[SCREENCONTROLS]
! ENTRY(@s254),USE(szValueName)
[REPORTCONTROLS]
! STRING(@s254),USE(szValueName)
szValueName              CSTRING(255)
!!> GUID('f09929df-50f5-4597-9d2f-aeb2c6115894'),PICTURE(@s254)
[SCREENCONTROLS]
! ENTRY(@s254),USE(szValue)
[REPORTCONTROLS]
! STRING(@s254),USE(szValue)
szValue                  CSTRING(255)
!!> GUID('62a1934c-3431-4a36-8ff1-10506e13b8ae'),PICTURE(@s254)
[SCREENCONTROLS]
! ENTRY(@n13),USE(hKeyExtension)
[REPORTCONTROLS]
! STRING(@n13),USE(hKeyExtension)
hKeyExtension            ULONG
!!> GUID('48e59933-d579-4cc2-b7cd-4ff7767ebfe4'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(pType)
[REPORTCONTROLS]
! STRING(@n13),USE(pType)
pType                    ULONG
!!> GUID('2f5dd237-c16e-40d3-9ab5-e8bbe25f2597'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n13),USE(pData)
[REPORTCONTROLS]
! STRING(@n13),USE(pData)
pData                    ULONG
!!> GUID('1a63c71c-d95f-42fa-81c3-f5f45b1714a5'),PICTURE(@n13)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(RetVal)
[REPORTCONTROLS]
! STRING(@n-14),USE(RetVal)
RetVal                   LONG
!!> GUID('abb8cac1-f0fd-4c80-975a-335b187fe6fb'),PICTURE(@n-14)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (bReturnValue)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 121
WHEN  ('') ('No Special Action')
WHEN  ('?AdditionalFilesButton') ('No Special Action')
WHEN  ('?Application:Tab') ('No Special Action')
WHEN  ('?ApplicationGroup') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?Clarion:Tab') ('No Special Action')
WHEN  ('?ClarionEditorButton') ('No Special Action')
WHEN  ('?ClarionGroup') ('No Special Action')
WHEN  ('?Color1:Lookup') ('No Special Action')
WHEN  ('?Color2:Lookup') ('No Special Action')
WHEN  ('?Color:Tab') ('No Special Action')
WHEN  ('?ColorGroup') ('No Special Action')
WHEN  ('?ColorPreferencesGroup') ('No Special Action')
WHEN  ('?Editor:Tab') ('No Special Action')
WHEN  ('?EditorGroup') ('No Special Action')
WHEN  ('?EditorList') ('No Special Action')
WHEN  ('?FavoritesMenuButton') ('No Special Action')
WHEN  ('?FontLookupButton') ('No Special Action')
WHEN  ('?Heading1') ('No Special Action')
WHEN  ('?Heading1Box') ('No Special Action')
WHEN  ('?Heading2') ('No Special Action')
WHEN  ('?Heading2Box') ('No Special Action')
WHEN  ('?HighlightColor1:Button') ('No Special Action')
WHEN  ('?HighlightColor2:Button') ('No Special Action')
WHEN  ('?HyperlinkColorButton') ('No Special Action')
WHEN  ('?LookupEditor') ('No Special Action')
WHEN  ('?LookupRedPath:Button') ('No Special Action')
WHEN  ('?ModuleColorButton') ('No Special Action')
WHEN  ('?NoteColor:Button') ('No Special Action')
WHEN  ('?OKButton') ('No Special Action')
WHEN  ('?OptionsGroup') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')
WHEN  ('?Panel2') ('No Special Action')
WHEN  ('?Panel3') ('No Special Action')
WHEN  ('?Panel3:2') ('No Special Action')
WHEN  ('?PrivateColorButton') ('No Special Action')
WHEN  ('?Prompt14') ('No Special Action')
WHEN  ('?ProtectedColorButton') ('No Special Action')
WHEN  ('?ResetButton') ('No Special Action')
WHEN  ('?SampleGroup') ('No Special Action')
WHEN  ('?SampleText') ('No Special Action')
WHEN  ('?SelectedBackColorButton') ('No Special Action')
WHEN  ('?SelectedForeColorButton') ('No Special Action')
WHEN  ('?Sheet1') ('No Special Action')
WHEN  ('?Sheet2') ('No Special Action')
WHEN  ('?StandardEquateGroup') ('No Special Action')
WHEN  ('?TemplateGroup') ('No Special Action')
WHEN  ('?Templates:Tab') ('No Special Action')
WHEN  ('?TreeList') ('No Special Action')
WHEN  ('?ViewerBackColorButton') ('No Special Action')
WHEN  ('?ViewerFontLookupButton') ('No Special Action')
WHEN  ('?ViewerForeColorButton') ('No Special Action')
WHEN  ('?ViewerGroup') ('No Special Action')
WHEN  ('?VirtualColorButton') ('No Special Action')
WHEN  ('?Wallpaper1:LookupFile') ('No Special Action')
WHEN  ('?Wallpaper2:LookupFile') ('No Special Action')
WHEN  ('?WallpaperGroup') ('No Special Action')
WHEN  ('?XMLStyleSheet:Lookup') ('No Special Action')
WHEN  ('?clwTemplatesButton') ('No Special Action')
WHEN  ('?glo:Background:Prompt') ('No Special Action')
WHEN  ('?glo:lPrivateColor:Prompt') ('No Special Action')
WHEN  ('?glo:lProtectedColor:Prompt') ('No Special Action')
WHEN  ('?glo:lSelectedBack:Prompt') ('No Special Action')
WHEN  ('?glo:lSelectedFore:Prompt') ('No Special Action')
WHEN  ('?incTemplatesButton') ('No Special Action')
WHEN  ('?lHighlightColor1:Prompt') ('No Special Action')
WHEN  ('?lHighlightColor2:Prompt') ('No Special Action')
WHEN  ('?lHyperlinkColor:Prompt:') ('No Special Action')
WHEN  ('?lVirtualColor:Prompt') ('No Special Action')
WHEN  ('?loc:Background') ('No Special Action')
WHEN  ('?loc:Background1:Prompt') ('No Special Action')
WHEN  ('?loc:Layout') ('No Special Action')
WHEN  ('?loc:Layout:Radio1') ('No Special Action')
WHEN  ('?loc:Layout:Radio2') ('No Special Action')
WHEN  ('?loc:StyleGroup:CaseOpt') ('No Special Action')
WHEN  ('?loc:bAutoExpand') ('No Special Action')
WHEN  ('?loc:bEquates') ('No Special Action')
WHEN  ('?loc:bForceEdit') ('No Special Action')
WHEN  ('?loc:bForceEdit:Prompt') ('No Special Action')
WHEN  ('?loc:bForceEdit:Radio1') ('No Special Action')
WHEN  ('?loc:bForceEdit:Radio2') ('No Special Action')
WHEN  ('?loc:bMaxMRU') ('No Special Action')
WHEN  ('?loc:bMaxMRU:Prompt') ('No Special Action')
WHEN  ('?loc:bPrnProp') ('No Special Action')
WHEN  ('?loc:bShowSparseTrees') ('No Special Action')
WHEN  ('?loc:bShowTips') ('No Special Action')
WHEN  ('?loc:bUseAssociation') ('No Special Action')
WHEN  ('?loc:sColor1') ('No Special Action')
WHEN  ('?loc:sColor1Box') ('No Special Action')
WHEN  ('?loc:sColor2') ('No Special Action')
WHEN  ('?loc:sColor2Box') ('No Special Action')
WHEN  ('?loc:sHighlightColor1Box') ('No Special Action')
WHEN  ('?loc:sHighlightColor2') ('No Special Action')
WHEN  ('?loc:sHighlightColor2Box') ('No Special Action')
WHEN  ('?loc:sHyperlinkColor') ('No Special Action')
WHEN  ('?loc:sModuleColorBox') ('No Special Action')
WHEN  ('?loc:sNoteColor') ('No Special Action')
WHEN  ('?loc:sNoteColorBox') ('No Special Action')
WHEN  ('?loc:sPrivateColor') ('No Special Action')
WHEN  ('?loc:sPrivateColorBox') ('No Special Action')
WHEN  ('?loc:sProtectedColor') ('No Special Action')
WHEN  ('?loc:sProtectedColorBox') ('No Special Action')
WHEN  ('?loc:sSelectedBack') ('No Special Action')
WHEN  ('?loc:sSelectedBackBox') ('No Special Action')
WHEN  ('?loc:sSelectedForeBox') ('No Special Action')
WHEN  ('?loc:sViewerBackColor') ('No Special Action')
WHEN  ('?loc:sViewerForeColor') ('No Special Action')
WHEN  ('?loc:sVirtualColor') ('No Special Action')
WHEN  ('?loc:sVirtualColorBox') ('No Special Action')
WHEN  ('?loc:szBackground2:Prompt') ('No Special Action')
WHEN  ('?loc:szCompactRedFilePath') ('No Special Action')
WHEN  ('?loc:szEditorCommand') ('No Special Action')
WHEN  ('?loc:szEditorCommand:Prompt') ('No Special Action')
WHEN  ('?loc:szFont') ('No Special Action')
WHEN  ('?loc:szFont:Prompt') ('No Special Action')
WHEN  ('?loc:szViewerFont') ('No Special Action')
WHEN  ('?loc:szWallpaper1') ('No Special Action')
WHEN  ('?loc:szWallpaper2') ('No Special Action')
WHEN  ('?loc:szXmlStyleSheet') ('No Special Action')
WHEN  ('?loc:szXmlStyleSheet:Prompt') ('No Special Action')
WHEN  ('?tplTemplatesButton') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 26
WHEN  ('?AdditionalFilesButton') ('')
WHEN  ('?CancelButton') ('')
WHEN  ('?ClarionEditorButton') ('')
WHEN  ('?Color1:Lookup') ('')
WHEN  ('?Color2:Lookup') ('')
WHEN  ('?FavoritesMenuButton') ('')
WHEN  ('?FontLookupButton') ('')
WHEN  ('?HighlightColor1:Button') ('')
WHEN  ('?HighlightColor2:Button') ('')
WHEN  ('?HyperlinkColorButton') ('')
WHEN  ('?LookupEditor') ('')
WHEN  ('?LookupRedPath:Button') ('')
WHEN  ('?NoteColor:Button') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?PrivateColorButton') ('')
WHEN  ('?ProtectedColorButton') ('')
WHEN  ('?ResetButton') ('')
WHEN  ('?SelectedBackColorButton') ('')
WHEN  ('?SelectedForeColorButton') ('')
WHEN  ('?ViewerFontLookupButton') ('')
WHEN  ('?VirtualColorButton') ('')
WHEN  ('?Wallpaper1:LookupFile') ('')
WHEN  ('?Wallpaper2:LookupFile') ('')
WHEN  ('?XMLStyleSheet:Lookup') ('')
WHEN  ('?clwTemplatesButton') ('')
WHEN  ('?incTemplatesButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 25
WHEN  ('?AdditionalFilesButton') ('')
WHEN  ('?CancelButton') ('')
WHEN  ('?Color1:Lookup') ('')
WHEN  ('?Color2:Lookup') ('')
WHEN  ('?FavoritesMenuButton') ('')
WHEN  ('?FontLookupButton') ('')
WHEN  ('?HighlightColor1:Button') ('')
WHEN  ('?HighlightColor2:Button') ('')
WHEN  ('?HyperlinkColorButton') ('')
WHEN  ('?LookupEditor') ('')
WHEN  ('?LookupRedPath:Button') ('')
WHEN  ('?NoteColor:Button') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?PrivateColorButton') ('')
WHEN  ('?ProtectedColorButton') ('')
WHEN  ('?ResetButton') ('')
WHEN  ('?SelectedBackColorButton') ('')
WHEN  ('?SelectedForeColorButton') ('')
WHEN  ('?ViewerFontLookupButton') ('')
WHEN  ('?VirtualColorButton') ('')
WHEN  ('?Wallpaper1:LookupFile') ('')
WHEN  ('?Wallpaper2:LookupFile') ('')
WHEN  ('?XMLStyleSheet:Lookup') ('')
WHEN  ('?clwTemplatesButton') ('')
WHEN  ('?incTemplatesButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 26
WHEN  ('?AdditionalFilesButton') ()
WHEN  ('?CancelButton') ()
WHEN  ('?ClarionEditorButton') ()
WHEN  ('?Color1:Lookup') ()
WHEN  ('?Color2:Lookup') ()
WHEN  ('?FavoritesMenuButton') ()
WHEN  ('?FontLookupButton') ()
WHEN  ('?HighlightColor1:Button') ()
WHEN  ('?HighlightColor2:Button') ()
WHEN  ('?HyperlinkColorButton') ()
WHEN  ('?LookupEditor') ()
WHEN  ('?LookupRedPath:Button') ()
WHEN  ('?NoteColor:Button') ()
WHEN  ('?OKButton') ()
WHEN  ('?PrivateColorButton') ()
WHEN  ('?ProtectedColorButton') ()
WHEN  ('?ResetButton') ()
WHEN  ('?SelectedBackColorButton') ()
WHEN  ('?SelectedForeColorButton') ()
WHEN  ('?ViewerFontLookupButton') ()
WHEN  ('?VirtualColorButton') ()
WHEN  ('?Wallpaper1:LookupFile') ()
WHEN  ('?Wallpaper2:LookupFile') ()
WHEN  ('?XMLStyleSheet:Lookup') ()
WHEN  ('?clwTemplatesButton') ()
WHEN  ('?incTemplatesButton') ()

%ButtonThread DEPEND %Control LONG TIMES 26
WHEN  ('?AdditionalFilesButton') (0)
WHEN  ('?CancelButton') (0)
WHEN  ('?ClarionEditorButton') (0)
WHEN  ('?Color1:Lookup') (0)
WHEN  ('?Color2:Lookup') (0)
WHEN  ('?FavoritesMenuButton') (0)
WHEN  ('?FontLookupButton') (0)
WHEN  ('?HighlightColor1:Button') (0)
WHEN  ('?HighlightColor2:Button') (0)
WHEN  ('?HyperlinkColorButton') (0)
WHEN  ('?LookupEditor') (0)
WHEN  ('?LookupRedPath:Button') (0)
WHEN  ('?NoteColor:Button') (0)
WHEN  ('?OKButton') (0)
WHEN  ('?PrivateColorButton') (0)
WHEN  ('?ProtectedColorButton') (0)
WHEN  ('?ResetButton') (0)
WHEN  ('?SelectedBackColorButton') (0)
WHEN  ('?SelectedForeColorButton') (0)
WHEN  ('?ViewerFontLookupButton') (0)
WHEN  ('?VirtualColorButton') (0)
WHEN  ('?Wallpaper1:LookupFile') (0)
WHEN  ('?Wallpaper2:LookupFile') (0)
WHEN  ('?XMLStyleSheet:Lookup') (0)
WHEN  ('?clwTemplatesButton') (0)
WHEN  ('?incTemplatesButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 121
WHEN  ('') ('25000')
WHEN  ('?AdditionalFilesButton') ('25000')
WHEN  ('?Application:Tab') ('25000')
WHEN  ('?ApplicationGroup') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?Clarion:Tab') ('25000')
WHEN  ('?ClarionEditorButton') ('25000')
WHEN  ('?ClarionGroup') ('25000')
WHEN  ('?Color1:Lookup') ('25000')
WHEN  ('?Color2:Lookup') ('25000')
WHEN  ('?Color:Tab') ('25000')
WHEN  ('?ColorGroup') ('25000')
WHEN  ('?ColorPreferencesGroup') ('25000')
WHEN  ('?Editor:Tab') ('25000')
WHEN  ('?EditorGroup') ('25000')
WHEN  ('?EditorList') ('25000')
WHEN  ('?FavoritesMenuButton') ('25000')
WHEN  ('?FontLookupButton') ('25000')
WHEN  ('?Heading1') ('25000')
WHEN  ('?Heading1Box') ('25000')
WHEN  ('?Heading2') ('25000')
WHEN  ('?Heading2Box') ('25000')
WHEN  ('?HighlightColor1:Button') ('25000')
WHEN  ('?HighlightColor2:Button') ('25000')
WHEN  ('?HyperlinkColorButton') ('25000')
WHEN  ('?LookupEditor') ('25000')
WHEN  ('?LookupRedPath:Button') ('25000')
WHEN  ('?ModuleColorButton') ('25000')
WHEN  ('?NoteColor:Button') ('25000')
WHEN  ('?OKButton') ('25000')
WHEN  ('?OptionsGroup') ('25000')
WHEN  ('?Panel1') ('25000')
WHEN  ('?Panel2') ('25000')
WHEN  ('?Panel3') ('25000')
WHEN  ('?Panel3:2') ('25000')
WHEN  ('?PrivateColorButton') ('25000')
WHEN  ('?Prompt14') ('25000')
WHEN  ('?ProtectedColorButton') ('25000')
WHEN  ('?ResetButton') ('25000')
WHEN  ('?SampleGroup') ('25000')
WHEN  ('?SampleText') ('25000')
WHEN  ('?SelectedBackColorButton') ('25000')
WHEN  ('?SelectedForeColorButton') ('25000')
WHEN  ('?Sheet1') ('25000')
WHEN  ('?Sheet2') ('25000')
WHEN  ('?StandardEquateGroup') ('25000')
WHEN  ('?TemplateGroup') ('25000')
WHEN  ('?Templates:Tab') ('25000')
WHEN  ('?TreeList') ('25000')
WHEN  ('?ViewerBackColorButton') ('25000')
WHEN  ('?ViewerFontLookupButton') ('25000')
WHEN  ('?ViewerForeColorButton') ('25000')
WHEN  ('?ViewerGroup') ('25000')
WHEN  ('?VirtualColorButton') ('25000')
WHEN  ('?Wallpaper1:LookupFile') ('25000')
WHEN  ('?Wallpaper2:LookupFile') ('25000')
WHEN  ('?WallpaperGroup') ('25000')
WHEN  ('?XMLStyleSheet:Lookup') ('25000')
WHEN  ('?clwTemplatesButton') ('25000')
WHEN  ('?glo:Background:Prompt') ('25000')
WHEN  ('?glo:lPrivateColor:Prompt') ('25000')
WHEN  ('?glo:lProtectedColor:Prompt') ('25000')
WHEN  ('?glo:lSelectedBack:Prompt') ('25000')
WHEN  ('?glo:lSelectedFore:Prompt') ('25000')
WHEN  ('?incTemplatesButton') ('25000')
WHEN  ('?lHighlightColor1:Prompt') ('25000')
WHEN  ('?lHighlightColor2:Prompt') ('25000')
WHEN  ('?lHyperlinkColor:Prompt:') ('25000')
WHEN  ('?lVirtualColor:Prompt') ('25000')
WHEN  ('?loc:Background') ('25000')
WHEN  ('?loc:Background1:Prompt') ('25000')
WHEN  ('?loc:Layout') ('25000')
WHEN  ('?loc:Layout:Radio1') ('25000')
WHEN  ('?loc:Layout:Radio2') ('25000')
WHEN  ('?loc:StyleGroup:CaseOpt') ('25000')
WHEN  ('?loc:bAutoExpand') ('25000')
WHEN  ('?loc:bEquates') ('25000')
WHEN  ('?loc:bForceEdit') ('25000')
WHEN  ('?loc:bForceEdit:Prompt') ('25000')
WHEN  ('?loc:bForceEdit:Radio1') ('25000')
WHEN  ('?loc:bForceEdit:Radio2') ('25000')
WHEN  ('?loc:bMaxMRU') ('25000')
WHEN  ('?loc:bMaxMRU:Prompt') ('25000')
WHEN  ('?loc:bPrnProp') ('25000')
WHEN  ('?loc:bShowSparseTrees') ('25000')
WHEN  ('?loc:bShowTips') ('25000')
WHEN  ('?loc:bUseAssociation') ('25000')
WHEN  ('?loc:sColor1') ('25000')
WHEN  ('?loc:sColor1Box') ('25000')
WHEN  ('?loc:sColor2') ('25000')
WHEN  ('?loc:sColor2Box') ('25000')
WHEN  ('?loc:sHighlightColor1Box') ('25000')
WHEN  ('?loc:sHighlightColor2') ('25000')
WHEN  ('?loc:sHighlightColor2Box') ('25000')
WHEN  ('?loc:sHyperlinkColor') ('25000')
WHEN  ('?loc:sModuleColorBox') ('25000')
WHEN  ('?loc:sNoteColor') ('25000')
WHEN  ('?loc:sNoteColorBox') ('25000')
WHEN  ('?loc:sPrivateColor') ('25000')
WHEN  ('?loc:sPrivateColorBox') ('25000')
WHEN  ('?loc:sProtectedColor') ('25000')
WHEN  ('?loc:sProtectedColorBox') ('25000')
WHEN  ('?loc:sSelectedBack') ('25000')
WHEN  ('?loc:sSelectedBackBox') ('25000')
WHEN  ('?loc:sSelectedForeBox') ('25000')
WHEN  ('?loc:sViewerBackColor') ('25000')
WHEN  ('?loc:sViewerForeColor') ('25000')
WHEN  ('?loc:sVirtualColor') ('25000')
WHEN  ('?loc:sVirtualColorBox') ('25000')
WHEN  ('?loc:szBackground2:Prompt') ('25000')
WHEN  ('?loc:szCompactRedFilePath') ('25000')
WHEN  ('?loc:szEditorCommand') ('25000')
WHEN  ('?loc:szEditorCommand:Prompt') ('25000')
WHEN  ('?loc:szFont') ('25000')
WHEN  ('?loc:szFont:Prompt') ('25000')
WHEN  ('?loc:szViewerFont') ('25000')
WHEN  ('?loc:szWallpaper1') ('25000')
WHEN  ('?loc:szWallpaper2') ('25000')
WHEN  ('?loc:szXmlStyleSheet') ('25000')
WHEN  ('?loc:szXmlStyleSheet:Prompt') ('25000')
WHEN  ('?tplTemplatesButton') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 26
WHEN  ('?AdditionalFilesButton') ('')
WHEN  ('?CancelButton') ('')
WHEN  ('?ClarionEditorButton') ('')
WHEN  ('?Color1:Lookup') ('')
WHEN  ('?Color2:Lookup') ('')
WHEN  ('?FavoritesMenuButton') ('')
WHEN  ('?FontLookupButton') ('')
WHEN  ('?HighlightColor1:Button') ('')
WHEN  ('?HighlightColor2:Button') ('')
WHEN  ('?HyperlinkColorButton') ('')
WHEN  ('?LookupEditor') ('')
WHEN  ('?LookupRedPath:Button') ('')
WHEN  ('?NoteColor:Button') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?PrivateColorButton') ('')
WHEN  ('?ProtectedColorButton') ('')
WHEN  ('?ResetButton') ('')
WHEN  ('?SelectedBackColorButton') ('')
WHEN  ('?SelectedForeColorButton') ('')
WHEN  ('?ViewerFontLookupButton') ('')
WHEN  ('?VirtualColorButton') ('')
WHEN  ('?Wallpaper1:LookupFile') ('')
WHEN  ('?Wallpaper2:LookupFile') ('')
WHEN  ('?XMLStyleSheet:Lookup') ('')
WHEN  ('?clwTemplatesButton') ('')
WHEN  ('?incTemplatesButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 26
WHEN  ('?AdditionalFilesButton') ()
WHEN  ('?CancelButton') ()
WHEN  ('?ClarionEditorButton') ()
WHEN  ('?Color1:Lookup') ()
WHEN  ('?Color2:Lookup') ()
WHEN  ('?FavoritesMenuButton') ()
WHEN  ('?FontLookupButton') ()
WHEN  ('?HighlightColor1:Button') ()
WHEN  ('?HighlightColor2:Button') ()
WHEN  ('?HyperlinkColorButton') ()
WHEN  ('?LookupEditor') ()
WHEN  ('?LookupRedPath:Button') ()
WHEN  ('?NoteColor:Button') ()
WHEN  ('?OKButton') ()
WHEN  ('?PrivateColorButton') ()
WHEN  ('?ProtectedColorButton') ()
WHEN  ('?ResetButton') ()
WHEN  ('?SelectedBackColorButton') ()
WHEN  ('?SelectedForeColorButton') ()
WHEN  ('?ViewerFontLookupButton') ()
WHEN  ('?VirtualColorButton') ()
WHEN  ('?Wallpaper1:LookupFile') ()
WHEN  ('?Wallpaper2:LookupFile') ()
WHEN  ('?XMLStyleSheet:Lookup') ()
WHEN  ('?clwTemplatesButton') ()
WHEN  ('?incTemplatesButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 26
WHEN  ('?AdditionalFilesButton') (0)
WHEN  ('?CancelButton') (0)
WHEN  ('?ClarionEditorButton') (0)
WHEN  ('?Color1:Lookup') (0)
WHEN  ('?Color2:Lookup') (0)
WHEN  ('?FavoritesMenuButton') (0)
WHEN  ('?FontLookupButton') (0)
WHEN  ('?HighlightColor1:Button') (0)
WHEN  ('?HighlightColor2:Button') (0)
WHEN  ('?HyperlinkColorButton') (0)
WHEN  ('?LookupEditor') (0)
WHEN  ('?LookupRedPath:Button') (0)
WHEN  ('?NoteColor:Button') (0)
WHEN  ('?OKButton') (0)
WHEN  ('?PrivateColorButton') (0)
WHEN  ('?ProtectedColorButton') (0)
WHEN  ('?ResetButton') (0)
WHEN  ('?SelectedBackColorButton') (0)
WHEN  ('?SelectedForeColorButton') (0)
WHEN  ('?ViewerFontLookupButton') (0)
WHEN  ('?VirtualColorButton') (0)
WHEN  ('?Wallpaper1:LookupFile') (0)
WHEN  ('?Wallpaper2:LookupFile') (0)
WHEN  ('?XMLStyleSheet:Lookup') (0)
WHEN  ('?clwTemplatesButton') (0)
WHEN  ('?incTemplatesButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 121
WHEN  ('') ('None')
WHEN  ('?AdditionalFilesButton') ('None')
WHEN  ('?Application:Tab') ('None')
WHEN  ('?ApplicationGroup') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?Clarion:Tab') ('None')
WHEN  ('?ClarionEditorButton') ('None')
WHEN  ('?ClarionGroup') ('None')
WHEN  ('?Color1:Lookup') ('None')
WHEN  ('?Color2:Lookup') ('None')
WHEN  ('?Color:Tab') ('None')
WHEN  ('?ColorGroup') ('None')
WHEN  ('?ColorPreferencesGroup') ('None')
WHEN  ('?Editor:Tab') ('None')
WHEN  ('?EditorGroup') ('None')
WHEN  ('?EditorList') ('None')
WHEN  ('?FavoritesMenuButton') ('None')
WHEN  ('?FontLookupButton') ('None')
WHEN  ('?Heading1') ('None')
WHEN  ('?Heading1Box') ('None')
WHEN  ('?Heading2') ('None')
WHEN  ('?Heading2Box') ('None')
WHEN  ('?HighlightColor1:Button') ('None')
WHEN  ('?HighlightColor2:Button') ('None')
WHEN  ('?HyperlinkColorButton') ('None')
WHEN  ('?LookupEditor') ('None')
WHEN  ('?LookupRedPath:Button') ('None')
WHEN  ('?ModuleColorButton') ('None')
WHEN  ('?NoteColor:Button') ('None')
WHEN  ('?OKButton') ('None')
WHEN  ('?OptionsGroup') ('None')
WHEN  ('?Panel1') ('None')
WHEN  ('?Panel2') ('None')
WHEN  ('?Panel3') ('None')
WHEN  ('?Panel3:2') ('None')
WHEN  ('?PrivateColorButton') ('None')
WHEN  ('?Prompt14') ('None')
WHEN  ('?ProtectedColorButton') ('None')
WHEN  ('?ResetButton') ('None')
WHEN  ('?SampleGroup') ('None')
WHEN  ('?SampleText') ('None')
WHEN  ('?SelectedBackColorButton') ('None')
WHEN  ('?SelectedForeColorButton') ('None')
WHEN  ('?Sheet1') ('None')
WHEN  ('?Sheet2') ('None')
WHEN  ('?StandardEquateGroup') ('None')
WHEN  ('?TemplateGroup') ('None')
WHEN  ('?Templates:Tab') ('None')
WHEN  ('?TreeList') ('None')
WHEN  ('?ViewerBackColorButton') ('None')
WHEN  ('?ViewerFontLookupButton') ('None')
WHEN  ('?ViewerForeColorButton') ('None')
WHEN  ('?ViewerGroup') ('None')
WHEN  ('?VirtualColorButton') ('None')
WHEN  ('?Wallpaper1:LookupFile') ('None')
WHEN  ('?Wallpaper2:LookupFile') ('None')
WHEN  ('?WallpaperGroup') ('None')
WHEN  ('?XMLStyleSheet:Lookup') ('None')
WHEN  ('?clwTemplatesButton') ('None')
WHEN  ('?glo:Background:Prompt') ('None')
WHEN  ('?glo:lPrivateColor:Prompt') ('None')
WHEN  ('?glo:lProtectedColor:Prompt') ('None')
WHEN  ('?glo:lSelectedBack:Prompt') ('None')
WHEN  ('?glo:lSelectedFore:Prompt') ('None')
WHEN  ('?incTemplatesButton') ('None')
WHEN  ('?lHighlightColor1:Prompt') ('None')
WHEN  ('?lHighlightColor2:Prompt') ('None')
WHEN  ('?lHyperlinkColor:Prompt:') ('None')
WHEN  ('?lVirtualColor:Prompt') ('None')
WHEN  ('?loc:Background') ('None')
WHEN  ('?loc:Background1:Prompt') ('None')
WHEN  ('?loc:Layout') ('None')
WHEN  ('?loc:Layout:Radio1') ('None')
WHEN  ('?loc:Layout:Radio2') ('None')
WHEN  ('?loc:StyleGroup:CaseOpt') ('None')
WHEN  ('?loc:bAutoExpand') ('None')
WHEN  ('?loc:bEquates') ('None')
WHEN  ('?loc:bForceEdit') ('None')
WHEN  ('?loc:bForceEdit:Prompt') ('None')
WHEN  ('?loc:bForceEdit:Radio1') ('None')
WHEN  ('?loc:bForceEdit:Radio2') ('None')
WHEN  ('?loc:bMaxMRU') ('None')
WHEN  ('?loc:bMaxMRU:Prompt') ('None')
WHEN  ('?loc:bPrnProp') ('None')
WHEN  ('?loc:bShowSparseTrees') ('None')
WHEN  ('?loc:bShowTips') ('None')
WHEN  ('?loc:bUseAssociation') ('None')
WHEN  ('?loc:sColor1') ('None')
WHEN  ('?loc:sColor1Box') ('None')
WHEN  ('?loc:sColor2') ('None')
WHEN  ('?loc:sColor2Box') ('None')
WHEN  ('?loc:sHighlightColor1Box') ('None')
WHEN  ('?loc:sHighlightColor2') ('None')
WHEN  ('?loc:sHighlightColor2Box') ('None')
WHEN  ('?loc:sHyperlinkColor') ('None')
WHEN  ('?loc:sModuleColorBox') ('None')
WHEN  ('?loc:sNoteColor') ('None')
WHEN  ('?loc:sNoteColorBox') ('None')
WHEN  ('?loc:sPrivateColor') ('None')
WHEN  ('?loc:sPrivateColorBox') ('None')
WHEN  ('?loc:sProtectedColor') ('None')
WHEN  ('?loc:sProtectedColorBox') ('None')
WHEN  ('?loc:sSelectedBack') ('None')
WHEN  ('?loc:sSelectedBackBox') ('None')
WHEN  ('?loc:sSelectedForeBox') ('None')
WHEN  ('?loc:sViewerBackColor') ('None')
WHEN  ('?loc:sViewerForeColor') ('None')
WHEN  ('?loc:sVirtualColor') ('None')
WHEN  ('?loc:sVirtualColorBox') ('None')
WHEN  ('?loc:szBackground2:Prompt') ('None')
WHEN  ('?loc:szCompactRedFilePath') ('None')
WHEN  ('?loc:szEditorCommand') ('None')
WHEN  ('?loc:szEditorCommand:Prompt') ('None')
WHEN  ('?loc:szFont') ('None')
WHEN  ('?loc:szFont:Prompt') ('None')
WHEN  ('?loc:szViewerFont') ('None')
WHEN  ('?loc:szWallpaper1') ('None')
WHEN  ('?loc:szWallpaper2') ('None')
WHEN  ('?loc:szXmlStyleSheet') ('None')
WHEN  ('?loc:szXmlStyleSheet:Prompt') ('None')
WHEN  ('?tplTemplatesButton') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 26
WHEN  ('?AdditionalFilesButton') ('')
WHEN  ('?CancelButton') ('')
WHEN  ('?ClarionEditorButton') ('')
WHEN  ('?Color1:Lookup') ('')
WHEN  ('?Color2:Lookup') ('')
WHEN  ('?FavoritesMenuButton') ('')
WHEN  ('?FontLookupButton') ('')
WHEN  ('?HighlightColor1:Button') ('')
WHEN  ('?HighlightColor2:Button') ('')
WHEN  ('?HyperlinkColorButton') ('')
WHEN  ('?LookupEditor') ('')
WHEN  ('?LookupRedPath:Button') ('')
WHEN  ('?NoteColor:Button') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?PrivateColorButton') ('')
WHEN  ('?ProtectedColorButton') ('')
WHEN  ('?ResetButton') ('')
WHEN  ('?SelectedBackColorButton') ('')
WHEN  ('?SelectedForeColorButton') ('')
WHEN  ('?ViewerFontLookupButton') ('')
WHEN  ('?VirtualColorButton') ('')
WHEN  ('?Wallpaper1:LookupFile') ('')
WHEN  ('?Wallpaper2:LookupFile') ('')
WHEN  ('?XMLStyleSheet:Lookup') ('')
WHEN  ('?clwTemplatesButton') ('')
WHEN  ('?incTemplatesButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 26
WHEN  ('?AdditionalFilesButton') ()
WHEN  ('?CancelButton') ()
WHEN  ('?ClarionEditorButton') ()
WHEN  ('?Color1:Lookup') ()
WHEN  ('?Color2:Lookup') ()
WHEN  ('?FavoritesMenuButton') ()
WHEN  ('?FontLookupButton') ()
WHEN  ('?HighlightColor1:Button') ()
WHEN  ('?HighlightColor2:Button') ()
WHEN  ('?HyperlinkColorButton') ()
WHEN  ('?LookupEditor') ()
WHEN  ('?LookupRedPath:Button') ()
WHEN  ('?NoteColor:Button') ()
WHEN  ('?OKButton') ()
WHEN  ('?PrivateColorButton') ()
WHEN  ('?ProtectedColorButton') ()
WHEN  ('?ResetButton') ()
WHEN  ('?SelectedBackColorButton') ()
WHEN  ('?SelectedForeColorButton') ()
WHEN  ('?ViewerFontLookupButton') ()
WHEN  ('?VirtualColorButton') ()
WHEN  ('?Wallpaper1:LookupFile') ()
WHEN  ('?Wallpaper2:LookupFile') ()
WHEN  ('?XMLStyleSheet:Lookup') ()
WHEN  ('?clwTemplatesButton') ()
WHEN  ('?incTemplatesButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 19
WHEN  ('?loc:bMaxMRU') ()
WHEN  ('?loc:sColor1') ()
WHEN  ('?loc:sColor2') ()
WHEN  ('?loc:sHighlightColor2') ()
WHEN  ('?loc:sHyperlinkColor') ()
WHEN  ('?loc:sNoteColor') ()
WHEN  ('?loc:sPrivateColor') ()
WHEN  ('?loc:sProtectedColor') ()
WHEN  ('?loc:sSelectedBack') ()
WHEN  ('?loc:sViewerBackColor') ()
WHEN  ('?loc:sViewerForeColor') ()
WHEN  ('?loc:sVirtualColor') ()
WHEN  ('?loc:szCompactRedFilePath') ()
WHEN  ('?loc:szEditorCommand') ()
WHEN  ('?loc:szFont') ()
WHEN  ('?loc:szViewerFont') ()
WHEN  ('?loc:szWallpaper1') ()
WHEN  ('?loc:szWallpaper2') ()
WHEN  ('?loc:szXmlStyleSheet') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 19
WHEN  ('?loc:bMaxMRU') ()
WHEN  ('?loc:sColor1') ()
WHEN  ('?loc:sColor2') ()
WHEN  ('?loc:sHighlightColor2') ()
WHEN  ('?loc:sHyperlinkColor') ()
WHEN  ('?loc:sNoteColor') ()
WHEN  ('?loc:sPrivateColor') ()
WHEN  ('?loc:sProtectedColor') ()
WHEN  ('?loc:sSelectedBack') ()
WHEN  ('?loc:sViewerBackColor') ()
WHEN  ('?loc:sViewerForeColor') ()
WHEN  ('?loc:sVirtualColor') ()
WHEN  ('?loc:szCompactRedFilePath') ()
WHEN  ('?loc:szEditorCommand') ()
WHEN  ('?loc:szFont') ()
WHEN  ('?loc:szViewerFont') ()
WHEN  ('?loc:szWallpaper1') ()
WHEN  ('?loc:szWallpaper2') ()
WHEN  ('?loc:szXmlStyleSheet') ()

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 19
WHEN  ('?loc:bMaxMRU') ()
WHEN  ('?loc:sColor1') ()
WHEN  ('?loc:sColor2') ()
WHEN  ('?loc:sHighlightColor2') ()
WHEN  ('?loc:sHyperlinkColor') ()
WHEN  ('?loc:sNoteColor') ()
WHEN  ('?loc:sPrivateColor') ()
WHEN  ('?loc:sProtectedColor') ()
WHEN  ('?loc:sSelectedBack') ()
WHEN  ('?loc:sViewerBackColor') ()
WHEN  ('?loc:sViewerForeColor') ()
WHEN  ('?loc:sVirtualColor') ()
WHEN  ('?loc:szCompactRedFilePath') ()
WHEN  ('?loc:szEditorCommand') ()
WHEN  ('?loc:szFont') ()
WHEN  ('?loc:szViewerFont') ()
WHEN  ('?loc:szWallpaper1') ()
WHEN  ('?loc:szWallpaper2') ()
WHEN  ('?loc:szXmlStyleSheet') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 19
WHEN  ('?loc:bMaxMRU') ()
WHEN  ('?loc:sColor1') ()
WHEN  ('?loc:sColor2') ()
WHEN  ('?loc:sHighlightColor2') ()
WHEN  ('?loc:sHyperlinkColor') ()
WHEN  ('?loc:sNoteColor') ()
WHEN  ('?loc:sPrivateColor') ()
WHEN  ('?loc:sProtectedColor') ()
WHEN  ('?loc:sSelectedBack') ()
WHEN  ('?loc:sViewerBackColor') ()
WHEN  ('?loc:sViewerForeColor') ()
WHEN  ('?loc:sVirtualColor') ()
WHEN  ('?loc:szCompactRedFilePath') ()
WHEN  ('?loc:szEditorCommand') ()
WHEN  ('?loc:szFont') ()
WHEN  ('?loc:szViewerFont') ()
WHEN  ('?loc:szWallpaper1') ()
WHEN  ('?loc:szWallpaper2') ()
WHEN  ('?loc:szXmlStyleSheet') ()

%PostLookupDuringValidate DEPEND %Control LONG TIMES 121
WHEN  ('') (1)
WHEN  ('?AdditionalFilesButton') (1)
WHEN  ('?Application:Tab') (1)
WHEN  ('?ApplicationGroup') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?Clarion:Tab') (1)
WHEN  ('?ClarionEditorButton') (1)
WHEN  ('?ClarionGroup') (1)
WHEN  ('?Color1:Lookup') (1)
WHEN  ('?Color2:Lookup') (1)
WHEN  ('?Color:Tab') (1)
WHEN  ('?ColorGroup') (1)
WHEN  ('?ColorPreferencesGroup') (1)
WHEN  ('?Editor:Tab') (1)
WHEN  ('?EditorGroup') (1)
WHEN  ('?EditorList') (1)
WHEN  ('?FavoritesMenuButton') (1)
WHEN  ('?FontLookupButton') (1)
WHEN  ('?Heading1') (1)
WHEN  ('?Heading1Box') (1)
WHEN  ('?Heading2') (1)
WHEN  ('?Heading2Box') (1)
WHEN  ('?HighlightColor1:Button') (1)
WHEN  ('?HighlightColor2:Button') (1)
WHEN  ('?HyperlinkColorButton') (1)
WHEN  ('?LookupEditor') (1)
WHEN  ('?LookupRedPath:Button') (1)
WHEN  ('?NoteColor:Button') (1)
WHEN  ('?OKButton') (1)
WHEN  ('?OptionsGroup') (1)
WHEN  ('?Panel1') (1)
WHEN  ('?Panel2') (1)
WHEN  ('?Panel3') (1)
WHEN  ('?Panel3:2') (1)
WHEN  ('?PrivateColorButton') (1)
WHEN  ('?Prompt14') (1)
WHEN  ('?ProtectedColorButton') (1)
WHEN  ('?ResetButton') (1)
WHEN  ('?SampleGroup') (1)
WHEN  ('?SampleText') (1)
WHEN  ('?SelectedBackColorButton') (1)
WHEN  ('?SelectedForeColorButton') (1)
WHEN  ('?Sheet1') (1)
WHEN  ('?Sheet2') (1)
WHEN  ('?StandardEquateGroup') (1)
WHEN  ('?TemplateGroup') (1)
WHEN  ('?Templates:Tab') (1)
WHEN  ('?TreeList') (1)
WHEN  ('?ViewerFontLookupButton') (1)
WHEN  ('?ViewerGroup') (1)
WHEN  ('?VirtualColorButton') (1)
WHEN  ('?Wallpaper1:LookupFile') (1)
WHEN  ('?Wallpaper2:LookupFile') (1)
WHEN  ('?WallpaperGroup') (1)
WHEN  ('?XMLStyleSheet:Lookup') (1)
WHEN  ('?clwTemplatesButton') (1)
WHEN  ('?glo:Background:Prompt') (1)
WHEN  ('?glo:lPrivateColor:Prompt') (1)
WHEN  ('?glo:lProtectedColor:Prompt') (1)
WHEN  ('?glo:lSelectedBack:Prompt') (1)
WHEN  ('?glo:lSelectedFore:Prompt') (1)
WHEN  ('?incTemplatesButton') (1)
WHEN  ('?lHighlightColor1:Prompt') (1)
WHEN  ('?lHighlightColor2:Prompt') (1)
WHEN  ('?lHyperlinkColor:Prompt:') (1)
WHEN  ('?lVirtualColor:Prompt') (1)
WHEN  ('?loc:Background') (1)
WHEN  ('?loc:Background1:Prompt') (1)
WHEN  ('?loc:CategoryDropCount') (1)
WHEN  ('?loc:Layout') (1)
WHEN  ('?loc:Layout:Radio1') (1)
WHEN  ('?loc:Layout:Radio2') (1)
WHEN  ('?loc:StyleGroup:CaseOpt') (1)
WHEN  ('?loc:bAutoExpand') (1)
WHEN  ('?loc:bEquates') (1)
WHEN  ('?loc:bForceEdit') (1)
WHEN  ('?loc:bForceEdit:Prompt') (1)
WHEN  ('?loc:bForceEdit:Radio1') (1)
WHEN  ('?loc:bForceEdit:Radio2') (1)
WHEN  ('?loc:bMaxMRU') (1)
WHEN  ('?loc:bMaxMRU:Prompt') (1)
WHEN  ('?loc:bPrnProp') (1)
WHEN  ('?loc:bShowSparseTrees') (1)
WHEN  ('?loc:bShowTips') (1)
WHEN  ('?loc:bUseAssociation') (1)
WHEN  ('?loc:sColor1') (1)
WHEN  ('?loc:sColor1Box') (1)
WHEN  ('?loc:sColor2') (1)
WHEN  ('?loc:sColor2Box') (1)
WHEN  ('?loc:sHighlightColor1') (1)
WHEN  ('?loc:sHighlightColor1Box') (1)
WHEN  ('?loc:sHighlightColor2') (1)
WHEN  ('?loc:sHighlightColor2Box') (1)
WHEN  ('?loc:sHyperlinkColor') (1)
WHEN  ('?loc:sModuleColor') (1)
WHEN  ('?loc:sModuleColorBox') (1)
WHEN  ('?loc:sNoteColor') (1)
WHEN  ('?loc:sNoteColorBox') (1)
WHEN  ('?loc:sPrivateColor') (1)
WHEN  ('?loc:sPrivateColorBox') (1)
WHEN  ('?loc:sProtectedColor') (1)
WHEN  ('?loc:sProtectedColorBox') (1)
WHEN  ('?loc:sSelectedBack') (1)
WHEN  ('?loc:sSelectedBackBox') (1)
WHEN  ('?loc:sSelectedFore') (1)
WHEN  ('?loc:sSelectedForeBox') (1)
WHEN  ('?loc:sViewerBackColor') (1)
WHEN  ('?loc:sViewerForeColor') (1)
WHEN  ('?loc:sVirtualColor') (1)
WHEN  ('?loc:sVirtualColorBox') (1)
WHEN  ('?loc:szBackground2:Prompt') (1)
WHEN  ('?loc:szCompactRedFilePath') (1)
WHEN  ('?loc:szEditorCommand') (1)
WHEN  ('?loc:szEditorCommand:Prompt') (1)
WHEN  ('?loc:szFont') (1)
WHEN  ('?loc:szFont:Prompt') (1)
WHEN  ('?loc:szViewerFont') (1)
WHEN  ('?loc:szWallpaper1') (1)
WHEN  ('?loc:szWallpaper2') (1)
WHEN  ('?loc:szXmlStyleSheet') (1)
WHEN  ('?loc:szXmlStyleSheet:Prompt') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 117
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?Application:Tab')TIMES 0
WHEN  ('?ApplicationGroup')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Clarion:Tab')TIMES 0
WHEN  ('?ClarionEditorButton')TIMES 0
WHEN  ('?ClarionGroup')TIMES 0
WHEN  ('?Color1:Lookup')TIMES 0
WHEN  ('?Color2:Lookup')TIMES 0
WHEN  ('?Color:Tab')TIMES 0
WHEN  ('?ColorGroup')TIMES 0
WHEN  ('?ColorPreferencesGroup')TIMES 0
WHEN  ('?Editor:Tab')TIMES 0
WHEN  ('?EditorGroup')TIMES 0
WHEN  ('?EditorList')TIMES 0
WHEN  ('?FavoritesMenuButton')TIMES 0
WHEN  ('?FontLookupButton')TIMES 0
WHEN  ('?Heading1')TIMES 0
WHEN  ('?Heading1Box')TIMES 0
WHEN  ('?Heading2')TIMES 0
WHEN  ('?Heading2Box')TIMES 0
WHEN  ('?HighlightColor1:Button')TIMES 0
WHEN  ('?HighlightColor2:Button')TIMES 0
WHEN  ('?HyperlinkColorButton')TIMES 0
WHEN  ('?LookupEditor')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?NoteColor:Button')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?OptionsGroup')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Panel2')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel3:2')TIMES 0
WHEN  ('?PrivateColorButton')TIMES 0
WHEN  ('?Prompt14')TIMES 0
WHEN  ('?ProtectedColorButton')TIMES 0
WHEN  ('?ResetButton')TIMES 0
WHEN  ('?SampleGroup')TIMES 0
WHEN  ('?SampleText')TIMES 0
WHEN  ('?SelectedBackColorButton')TIMES 0
WHEN  ('?SelectedForeColorButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Sheet2')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?TemplateGroup')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?ViewerFontLookupButton')TIMES 0
WHEN  ('?ViewerGroup')TIMES 0
WHEN  ('?VirtualColorButton')TIMES 0
WHEN  ('?Wallpaper1:LookupFile')TIMES 0
WHEN  ('?Wallpaper2:LookupFile')TIMES 0
WHEN  ('?WallpaperGroup')TIMES 0
WHEN  ('?XMLStyleSheet:Lookup')TIMES 0
WHEN  ('?clwTemplatesButton')TIMES 0
WHEN  ('?glo:Background:Prompt')TIMES 0
WHEN  ('?glo:lPrivateColor:Prompt')TIMES 0
WHEN  ('?glo:lProtectedColor:Prompt')TIMES 0
WHEN  ('?glo:lSelectedBack:Prompt')TIMES 0
WHEN  ('?glo:lSelectedFore:Prompt')TIMES 0
WHEN  ('?incTemplatesButton')TIMES 0
WHEN  ('?lHighlightColor1:Prompt')TIMES 0
WHEN  ('?lHighlightColor2:Prompt')TIMES 0
WHEN  ('?lHyperlinkColor:Prompt:')TIMES 0
WHEN  ('?lVirtualColor:Prompt')TIMES 0
WHEN  ('?loc:Background')TIMES 0
WHEN  ('?loc:Background1:Prompt')TIMES 0
WHEN  ('?loc:Layout')TIMES 0
WHEN  ('?loc:Layout:Radio1')TIMES 0
WHEN  ('?loc:Layout:Radio2')TIMES 0
WHEN  ('?loc:StyleGroup:CaseOpt')TIMES 0
WHEN  ('?loc:bAutoExpand')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bForceEdit')TIMES 0
WHEN  ('?loc:bForceEdit:Prompt')TIMES 0
WHEN  ('?loc:bForceEdit:Radio1')TIMES 0
WHEN  ('?loc:bForceEdit:Radio2')TIMES 0
WHEN  ('?loc:bMaxMRU')TIMES 0
WHEN  ('?loc:bMaxMRU:Prompt')TIMES 0
WHEN  ('?loc:bPrnProp')TIMES 0
WHEN  ('?loc:bShowSparseTrees')TIMES 0
WHEN  ('?loc:bShowTips')TIMES 0
WHEN  ('?loc:bUseAssociation')TIMES 0
WHEN  ('?loc:sColor1')TIMES 0
WHEN  ('?loc:sColor1Box')TIMES 0
WHEN  ('?loc:sColor2')TIMES 0
WHEN  ('?loc:sColor2Box')TIMES 0
WHEN  ('?loc:sHighlightColor1Box')TIMES 0
WHEN  ('?loc:sHighlightColor2')TIMES 0
WHEN  ('?loc:sHighlightColor2Box')TIMES 0
WHEN  ('?loc:sHyperlinkColor')TIMES 0
WHEN  ('?loc:sModuleColorBox')TIMES 0
WHEN  ('?loc:sNoteColor')TIMES 0
WHEN  ('?loc:sNoteColorBox')TIMES 0
WHEN  ('?loc:sPrivateColor')TIMES 0
WHEN  ('?loc:sPrivateColorBox')TIMES 0
WHEN  ('?loc:sProtectedColor')TIMES 0
WHEN  ('?loc:sProtectedColorBox')TIMES 0
WHEN  ('?loc:sSelectedBack')TIMES 0
WHEN  ('?loc:sSelectedBackBox')TIMES 0
WHEN  ('?loc:sSelectedForeBox')TIMES 0
WHEN  ('?loc:sViewerBackColor')TIMES 0
WHEN  ('?loc:sViewerForeColor')TIMES 0
WHEN  ('?loc:sVirtualColor')TIMES 0
WHEN  ('?loc:sVirtualColorBox')TIMES 0
WHEN  ('?loc:szBackground2:Prompt')TIMES 0
WHEN  ('?loc:szCompactRedFilePath')TIMES 0
WHEN  ('?loc:szEditorCommand')TIMES 0
WHEN  ('?loc:szEditorCommand:Prompt')TIMES 0
WHEN  ('?loc:szFont')TIMES 0
WHEN  ('?loc:szFont:Prompt')TIMES 0
WHEN  ('?loc:szViewerFont')TIMES 0
WHEN  ('?loc:szWallpaper1')TIMES 0
WHEN  ('?loc:szWallpaper2')TIMES 0
WHEN  ('?loc:szXmlStyleSheet')TIMES 0
WHEN  ('?loc:szXmlStyleSheet:Prompt')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 117
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?Application:Tab')TIMES 0
WHEN  ('?ApplicationGroup')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Clarion:Tab')TIMES 0
WHEN  ('?ClarionEditorButton')TIMES 0
WHEN  ('?ClarionGroup')TIMES 0
WHEN  ('?Color1:Lookup')TIMES 0
WHEN  ('?Color2:Lookup')TIMES 0
WHEN  ('?Color:Tab')TIMES 0
WHEN  ('?ColorGroup')TIMES 0
WHEN  ('?ColorPreferencesGroup')TIMES 0
WHEN  ('?Editor:Tab')TIMES 0
WHEN  ('?EditorGroup')TIMES 0
WHEN  ('?EditorList')TIMES 0
WHEN  ('?FavoritesMenuButton')TIMES 0
WHEN  ('?FontLookupButton')TIMES 0
WHEN  ('?Heading1')TIMES 0
WHEN  ('?Heading1Box')TIMES 0
WHEN  ('?Heading2')TIMES 0
WHEN  ('?Heading2Box')TIMES 0
WHEN  ('?HighlightColor1:Button')TIMES 0
WHEN  ('?HighlightColor2:Button')TIMES 0
WHEN  ('?HyperlinkColorButton')TIMES 0
WHEN  ('?LookupEditor')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?NoteColor:Button')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?OptionsGroup')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Panel2')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel3:2')TIMES 0
WHEN  ('?PrivateColorButton')TIMES 0
WHEN  ('?Prompt14')TIMES 0
WHEN  ('?ProtectedColorButton')TIMES 0
WHEN  ('?ResetButton')TIMES 0
WHEN  ('?SampleGroup')TIMES 0
WHEN  ('?SampleText')TIMES 0
WHEN  ('?SelectedBackColorButton')TIMES 0
WHEN  ('?SelectedForeColorButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Sheet2')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?TemplateGroup')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?ViewerFontLookupButton')TIMES 0
WHEN  ('?ViewerGroup')TIMES 0
WHEN  ('?VirtualColorButton')TIMES 0
WHEN  ('?Wallpaper1:LookupFile')TIMES 0
WHEN  ('?Wallpaper2:LookupFile')TIMES 0
WHEN  ('?WallpaperGroup')TIMES 0
WHEN  ('?XMLStyleSheet:Lookup')TIMES 0
WHEN  ('?clwTemplatesButton')TIMES 0
WHEN  ('?glo:Background:Prompt')TIMES 0
WHEN  ('?glo:lPrivateColor:Prompt')TIMES 0
WHEN  ('?glo:lProtectedColor:Prompt')TIMES 0
WHEN  ('?glo:lSelectedBack:Prompt')TIMES 0
WHEN  ('?glo:lSelectedFore:Prompt')TIMES 0
WHEN  ('?incTemplatesButton')TIMES 0
WHEN  ('?lHighlightColor1:Prompt')TIMES 0
WHEN  ('?lHighlightColor2:Prompt')TIMES 0
WHEN  ('?lHyperlinkColor:Prompt:')TIMES 0
WHEN  ('?lVirtualColor:Prompt')TIMES 0
WHEN  ('?loc:Background')TIMES 0
WHEN  ('?loc:Background1:Prompt')TIMES 0
WHEN  ('?loc:Layout')TIMES 0
WHEN  ('?loc:Layout:Radio1')TIMES 0
WHEN  ('?loc:Layout:Radio2')TIMES 0
WHEN  ('?loc:StyleGroup:CaseOpt')TIMES 0
WHEN  ('?loc:bAutoExpand')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bForceEdit')TIMES 0
WHEN  ('?loc:bForceEdit:Prompt')TIMES 0
WHEN  ('?loc:bForceEdit:Radio1')TIMES 0
WHEN  ('?loc:bForceEdit:Radio2')TIMES 0
WHEN  ('?loc:bMaxMRU')TIMES 0
WHEN  ('?loc:bMaxMRU:Prompt')TIMES 0
WHEN  ('?loc:bPrnProp')TIMES 0
WHEN  ('?loc:bShowSparseTrees')TIMES 0
WHEN  ('?loc:bShowTips')TIMES 0
WHEN  ('?loc:bUseAssociation')TIMES 0
WHEN  ('?loc:sColor1')TIMES 0
WHEN  ('?loc:sColor1Box')TIMES 0
WHEN  ('?loc:sColor2')TIMES 0
WHEN  ('?loc:sColor2Box')TIMES 0
WHEN  ('?loc:sHighlightColor1Box')TIMES 0
WHEN  ('?loc:sHighlightColor2')TIMES 0
WHEN  ('?loc:sHighlightColor2Box')TIMES 0
WHEN  ('?loc:sHyperlinkColor')TIMES 0
WHEN  ('?loc:sModuleColorBox')TIMES 0
WHEN  ('?loc:sNoteColor')TIMES 0
WHEN  ('?loc:sNoteColorBox')TIMES 0
WHEN  ('?loc:sPrivateColor')TIMES 0
WHEN  ('?loc:sPrivateColorBox')TIMES 0
WHEN  ('?loc:sProtectedColor')TIMES 0
WHEN  ('?loc:sProtectedColorBox')TIMES 0
WHEN  ('?loc:sSelectedBack')TIMES 0
WHEN  ('?loc:sSelectedBackBox')TIMES 0
WHEN  ('?loc:sSelectedForeBox')TIMES 0
WHEN  ('?loc:sViewerBackColor')TIMES 0
WHEN  ('?loc:sViewerForeColor')TIMES 0
WHEN  ('?loc:sVirtualColor')TIMES 0
WHEN  ('?loc:sVirtualColorBox')TIMES 0
WHEN  ('?loc:szBackground2:Prompt')TIMES 0
WHEN  ('?loc:szCompactRedFilePath')TIMES 0
WHEN  ('?loc:szEditorCommand')TIMES 0
WHEN  ('?loc:szEditorCommand:Prompt')TIMES 0
WHEN  ('?loc:szFont')TIMES 0
WHEN  ('?loc:szFont:Prompt')TIMES 0
WHEN  ('?loc:szViewerFont')TIMES 0
WHEN  ('?loc:szWallpaper1')TIMES 0
WHEN  ('?loc:szWallpaper2')TIMES 0
WHEN  ('?loc:szXmlStyleSheet')TIMES 0
WHEN  ('?loc:szXmlStyleSheet:Prompt')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 117
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?Application:Tab')TIMES 0
WHEN  ('?ApplicationGroup')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Clarion:Tab')TIMES 0
WHEN  ('?ClarionEditorButton')TIMES 0
WHEN  ('?ClarionGroup')TIMES 0
WHEN  ('?Color1:Lookup')TIMES 0
WHEN  ('?Color2:Lookup')TIMES 0
WHEN  ('?Color:Tab')TIMES 0
WHEN  ('?ColorGroup')TIMES 0
WHEN  ('?ColorPreferencesGroup')TIMES 0
WHEN  ('?Editor:Tab')TIMES 0
WHEN  ('?EditorGroup')TIMES 0
WHEN  ('?EditorList')TIMES 0
WHEN  ('?FavoritesMenuButton')TIMES 0
WHEN  ('?FontLookupButton')TIMES 0
WHEN  ('?Heading1')TIMES 0
WHEN  ('?Heading1Box')TIMES 0
WHEN  ('?Heading2')TIMES 0
WHEN  ('?Heading2Box')TIMES 0
WHEN  ('?HighlightColor1:Button')TIMES 0
WHEN  ('?HighlightColor2:Button')TIMES 0
WHEN  ('?HyperlinkColorButton')TIMES 0
WHEN  ('?LookupEditor')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?NoteColor:Button')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?OptionsGroup')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Panel2')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel3:2')TIMES 0
WHEN  ('?PrivateColorButton')TIMES 0
WHEN  ('?Prompt14')TIMES 0
WHEN  ('?ProtectedColorButton')TIMES 0
WHEN  ('?ResetButton')TIMES 0
WHEN  ('?SampleGroup')TIMES 0
WHEN  ('?SampleText')TIMES 0
WHEN  ('?SelectedBackColorButton')TIMES 0
WHEN  ('?SelectedForeColorButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Sheet2')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?TemplateGroup')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?ViewerFontLookupButton')TIMES 0
WHEN  ('?ViewerGroup')TIMES 0
WHEN  ('?VirtualColorButton')TIMES 0
WHEN  ('?Wallpaper1:LookupFile')TIMES 0
WHEN  ('?Wallpaper2:LookupFile')TIMES 0
WHEN  ('?WallpaperGroup')TIMES 0
WHEN  ('?XMLStyleSheet:Lookup')TIMES 0
WHEN  ('?clwTemplatesButton')TIMES 0
WHEN  ('?glo:Background:Prompt')TIMES 0
WHEN  ('?glo:lPrivateColor:Prompt')TIMES 0
WHEN  ('?glo:lProtectedColor:Prompt')TIMES 0
WHEN  ('?glo:lSelectedBack:Prompt')TIMES 0
WHEN  ('?glo:lSelectedFore:Prompt')TIMES 0
WHEN  ('?incTemplatesButton')TIMES 0
WHEN  ('?lHighlightColor1:Prompt')TIMES 0
WHEN  ('?lHighlightColor2:Prompt')TIMES 0
WHEN  ('?lHyperlinkColor:Prompt:')TIMES 0
WHEN  ('?lVirtualColor:Prompt')TIMES 0
WHEN  ('?loc:Background')TIMES 0
WHEN  ('?loc:Background1:Prompt')TIMES 0
WHEN  ('?loc:Layout')TIMES 0
WHEN  ('?loc:Layout:Radio1')TIMES 0
WHEN  ('?loc:Layout:Radio2')TIMES 0
WHEN  ('?loc:StyleGroup:CaseOpt')TIMES 0
WHEN  ('?loc:bAutoExpand')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bForceEdit')TIMES 0
WHEN  ('?loc:bForceEdit:Prompt')TIMES 0
WHEN  ('?loc:bForceEdit:Radio1')TIMES 0
WHEN  ('?loc:bForceEdit:Radio2')TIMES 0
WHEN  ('?loc:bMaxMRU')TIMES 0
WHEN  ('?loc:bMaxMRU:Prompt')TIMES 0
WHEN  ('?loc:bPrnProp')TIMES 0
WHEN  ('?loc:bShowSparseTrees')TIMES 0
WHEN  ('?loc:bShowTips')TIMES 0
WHEN  ('?loc:bUseAssociation')TIMES 0
WHEN  ('?loc:sColor1')TIMES 0
WHEN  ('?loc:sColor1Box')TIMES 0
WHEN  ('?loc:sColor2')TIMES 0
WHEN  ('?loc:sColor2Box')TIMES 0
WHEN  ('?loc:sHighlightColor1Box')TIMES 0
WHEN  ('?loc:sHighlightColor2')TIMES 0
WHEN  ('?loc:sHighlightColor2Box')TIMES 0
WHEN  ('?loc:sHyperlinkColor')TIMES 0
WHEN  ('?loc:sModuleColorBox')TIMES 0
WHEN  ('?loc:sNoteColor')TIMES 0
WHEN  ('?loc:sNoteColorBox')TIMES 0
WHEN  ('?loc:sPrivateColor')TIMES 0
WHEN  ('?loc:sPrivateColorBox')TIMES 0
WHEN  ('?loc:sProtectedColor')TIMES 0
WHEN  ('?loc:sProtectedColorBox')TIMES 0
WHEN  ('?loc:sSelectedBack')TIMES 0
WHEN  ('?loc:sSelectedBackBox')TIMES 0
WHEN  ('?loc:sSelectedForeBox')TIMES 0
WHEN  ('?loc:sViewerBackColor')TIMES 0
WHEN  ('?loc:sViewerForeColor')TIMES 0
WHEN  ('?loc:sVirtualColor')TIMES 0
WHEN  ('?loc:sVirtualColorBox')TIMES 0
WHEN  ('?loc:szBackground2:Prompt')TIMES 0
WHEN  ('?loc:szCompactRedFilePath')TIMES 0
WHEN  ('?loc:szEditorCommand')TIMES 0
WHEN  ('?loc:szEditorCommand:Prompt')TIMES 0
WHEN  ('?loc:szFont')TIMES 0
WHEN  ('?loc:szFont:Prompt')TIMES 0
WHEN  ('?loc:szViewerFont')TIMES 0
WHEN  ('?loc:szWallpaper1')TIMES 0
WHEN  ('?loc:szWallpaper2')TIMES 0
WHEN  ('?loc:szXmlStyleSheet')TIMES 0
WHEN  ('?loc:szXmlStyleSheet:Prompt')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 117
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?Application:Tab')TIMES 0
WHEN  ('?ApplicationGroup')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Clarion:Tab')TIMES 0
WHEN  ('?ClarionEditorButton')TIMES 0
WHEN  ('?ClarionGroup')TIMES 0
WHEN  ('?Color1:Lookup')TIMES 0
WHEN  ('?Color2:Lookup')TIMES 0
WHEN  ('?Color:Tab')TIMES 0
WHEN  ('?ColorGroup')TIMES 0
WHEN  ('?ColorPreferencesGroup')TIMES 0
WHEN  ('?Editor:Tab')TIMES 0
WHEN  ('?EditorGroup')TIMES 0
WHEN  ('?EditorList')TIMES 0
WHEN  ('?FavoritesMenuButton')TIMES 0
WHEN  ('?FontLookupButton')TIMES 0
WHEN  ('?Heading1')TIMES 0
WHEN  ('?Heading1Box')TIMES 0
WHEN  ('?Heading2')TIMES 0
WHEN  ('?Heading2Box')TIMES 0
WHEN  ('?HighlightColor1:Button')TIMES 0
WHEN  ('?HighlightColor2:Button')TIMES 0
WHEN  ('?HyperlinkColorButton')TIMES 0
WHEN  ('?LookupEditor')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?NoteColor:Button')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?OptionsGroup')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Panel2')TIMES 0
WHEN  ('?Panel3')TIMES 0
WHEN  ('?Panel3:2')TIMES 0
WHEN  ('?PrivateColorButton')TIMES 0
WHEN  ('?Prompt14')TIMES 0
WHEN  ('?ProtectedColorButton')TIMES 0
WHEN  ('?ResetButton')TIMES 0
WHEN  ('?SampleGroup')TIMES 0
WHEN  ('?SampleText')TIMES 0
WHEN  ('?SelectedBackColorButton')TIMES 0
WHEN  ('?SelectedForeColorButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Sheet2')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?TemplateGroup')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?TreeList')TIMES 0
WHEN  ('?ViewerFontLookupButton')TIMES 0
WHEN  ('?ViewerGroup')TIMES 0
WHEN  ('?VirtualColorButton')TIMES 0
WHEN  ('?Wallpaper1:LookupFile')TIMES 0
WHEN  ('?Wallpaper2:LookupFile')TIMES 0
WHEN  ('?WallpaperGroup')TIMES 0
WHEN  ('?XMLStyleSheet:Lookup')TIMES 0
WHEN  ('?clwTemplatesButton')TIMES 0
WHEN  ('?glo:Background:Prompt')TIMES 0
WHEN  ('?glo:lPrivateColor:Prompt')TIMES 0
WHEN  ('?glo:lProtectedColor:Prompt')TIMES 0
WHEN  ('?glo:lSelectedBack:Prompt')TIMES 0
WHEN  ('?glo:lSelectedFore:Prompt')TIMES 0
WHEN  ('?incTemplatesButton')TIMES 0
WHEN  ('?lHighlightColor1:Prompt')TIMES 0
WHEN  ('?lHighlightColor2:Prompt')TIMES 0
WHEN  ('?lHyperlinkColor:Prompt:')TIMES 0
WHEN  ('?lVirtualColor:Prompt')TIMES 0
WHEN  ('?loc:Background')TIMES 0
WHEN  ('?loc:Background1:Prompt')TIMES 0
WHEN  ('?loc:Layout')TIMES 0
WHEN  ('?loc:Layout:Radio1')TIMES 0
WHEN  ('?loc:Layout:Radio2')TIMES 0
WHEN  ('?loc:StyleGroup:CaseOpt')TIMES 0
WHEN  ('?loc:bAutoExpand')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bForceEdit')TIMES 0
WHEN  ('?loc:bForceEdit:Prompt')TIMES 0
WHEN  ('?loc:bForceEdit:Radio1')TIMES 0
WHEN  ('?loc:bForceEdit:Radio2')TIMES 0
WHEN  ('?loc:bMaxMRU')TIMES 0
WHEN  ('?loc:bMaxMRU:Prompt')TIMES 0
WHEN  ('?loc:bPrnProp')TIMES 0
WHEN  ('?loc:bShowSparseTrees')TIMES 0
WHEN  ('?loc:bShowTips')TIMES 0
WHEN  ('?loc:bUseAssociation')TIMES 0
WHEN  ('?loc:sColor1')TIMES 0
WHEN  ('?loc:sColor1Box')TIMES 0
WHEN  ('?loc:sColor2')TIMES 0
WHEN  ('?loc:sColor2Box')TIMES 0
WHEN  ('?loc:sHighlightColor1Box')TIMES 0
WHEN  ('?loc:sHighlightColor2')TIMES 0
WHEN  ('?loc:sHighlightColor2Box')TIMES 0
WHEN  ('?loc:sHyperlinkColor')TIMES 0
WHEN  ('?loc:sModuleColorBox')TIMES 0
WHEN  ('?loc:sNoteColor')TIMES 0
WHEN  ('?loc:sNoteColorBox')TIMES 0
WHEN  ('?loc:sPrivateColor')TIMES 0
WHEN  ('?loc:sPrivateColorBox')TIMES 0
WHEN  ('?loc:sProtectedColor')TIMES 0
WHEN  ('?loc:sProtectedColorBox')TIMES 0
WHEN  ('?loc:sSelectedBack')TIMES 0
WHEN  ('?loc:sSelectedBackBox')TIMES 0
WHEN  ('?loc:sSelectedForeBox')TIMES 0
WHEN  ('?loc:sViewerBackColor')TIMES 0
WHEN  ('?loc:sViewerForeColor')TIMES 0
WHEN  ('?loc:sVirtualColor')TIMES 0
WHEN  ('?loc:sVirtualColorBox')TIMES 0
WHEN  ('?loc:szBackground2:Prompt')TIMES 0
WHEN  ('?loc:szCompactRedFilePath')TIMES 0
WHEN  ('?loc:szEditorCommand')TIMES 0
WHEN  ('?loc:szEditorCommand:Prompt')TIMES 0
WHEN  ('?loc:szFont')TIMES 0
WHEN  ('?loc:szFont:Prompt')TIMES 0
WHEN  ('?loc:szViewerFont')TIMES 0
WHEN  ('?loc:szWallpaper1')TIMES 0
WHEN  ('?loc:szWallpaper2')TIMES 0
WHEN  ('?loc:szXmlStyleSheet')TIMES 0
WHEN  ('?loc:szXmlStyleSheet:Prompt')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 19
WHEN  ('?loc:bMaxMRU') ('')
WHEN  ('?loc:sColor1') ('')
WHEN  ('?loc:sColor2') ('')
WHEN  ('?loc:sHighlightColor2') ('')
WHEN  ('?loc:sHyperlinkColor') ('')
WHEN  ('?loc:sNoteColor') ('')
WHEN  ('?loc:sPrivateColor') ('')
WHEN  ('?loc:sProtectedColor') ('')
WHEN  ('?loc:sSelectedBack') ('')
WHEN  ('?loc:sViewerBackColor') ('')
WHEN  ('?loc:sViewerForeColor') ('')
WHEN  ('?loc:sVirtualColor') ('')
WHEN  ('?loc:szCompactRedFilePath') ('')
WHEN  ('?loc:szEditorCommand') ('')
WHEN  ('?loc:szFont') ('')
WHEN  ('?loc:szViewerFont') ('')
WHEN  ('?loc:szWallpaper1') ('')
WHEN  ('?loc:szWallpaper2') ('')
WHEN  ('?loc:szXmlStyleSheet') ('')

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 19
WHEN  ('?loc:bMaxMRU') ('')
WHEN  ('?loc:sColor1') ('')
WHEN  ('?loc:sColor2') ('')
WHEN  ('?loc:sHighlightColor2') ('')
WHEN  ('?loc:sHyperlinkColor') ('')
WHEN  ('?loc:sNoteColor') ('')
WHEN  ('?loc:sPrivateColor') ('')
WHEN  ('?loc:sProtectedColor') ('')
WHEN  ('?loc:sSelectedBack') ('')
WHEN  ('?loc:sViewerBackColor') ('')
WHEN  ('?loc:sViewerForeColor') ('')
WHEN  ('?loc:sVirtualColor') ('')
WHEN  ('?loc:szCompactRedFilePath') ('')
WHEN  ('?loc:szEditorCommand') ('')
WHEN  ('?loc:szFont') ('')
WHEN  ('?loc:szViewerFont') ('')
WHEN  ('?loc:szWallpaper1') ('')
WHEN  ('?loc:szWallpaper2') ('')
WHEN  ('?loc:szXmlStyleSheet') ('')

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('Default')
WHEN  ('?Sheet1') ('Default')
WHEN  ('?Sheet2') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 21
WHEN  ('') ('Off')
WHEN  ('?Heading1Box') ('Off')
WHEN  ('?Heading2Box') ('Off')
WHEN  ('?Panel1') ('Off')
WHEN  ('?Panel2') ('Off')
WHEN  ('?Panel3') ('Off')
WHEN  ('?Panel3:2') ('Off')
WHEN  ('?loc:sColor1Box') ('Off')
WHEN  ('?loc:sColor2Box') ('Off')
WHEN  ('?loc:sHighlightColor1Box') ('Off')
WHEN  ('?loc:sHighlightColor2Box') ('Off')
WHEN  ('?loc:sHyperlinkColorBox') ('Off')
WHEN  ('?loc:sModuleColorBox') ('Off')
WHEN  ('?loc:sNoteColorBox') ('Off')
WHEN  ('?loc:sPrivateColorBox') ('Off')
WHEN  ('?loc:sProtectedColorBox') ('Off')
WHEN  ('?loc:sSelectedBackBox') ('Off')
WHEN  ('?loc:sSelectedForeBox') ('Off')
WHEN  ('?loc:sViewerBackColorBox') ('Off')
WHEN  ('?loc:sViewerForeColorBox') ('Off')
WHEN  ('?loc:sVirtualColorBox') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 21
WHEN  ('') ('')
WHEN  ('?Heading1Box') ('')
WHEN  ('?Heading2Box') ('')
WHEN  ('?Panel1') ('')
WHEN  ('?Panel2') ('')
WHEN  ('?Panel3') ('')
WHEN  ('?Panel3:2') ('')
WHEN  ('?loc:sColor1Box') ('')
WHEN  ('?loc:sColor2Box') ('')
WHEN  ('?loc:sHighlightColor1Box') ('')
WHEN  ('?loc:sHighlightColor2Box') ('')
WHEN  ('?loc:sHyperlinkColorBox') ('')
WHEN  ('?loc:sModuleColorBox') ('')
WHEN  ('?loc:sNoteColorBox') ('')
WHEN  ('?loc:sPrivateColorBox') ('')
WHEN  ('?loc:sProtectedColorBox') ('')
WHEN  ('?loc:sSelectedBackBox') ('')
WHEN  ('?loc:sSelectedForeBox') ('')
WHEN  ('?loc:sViewerBackColorBox') ('')
WHEN  ('?loc:sViewerForeColorBox') ('')
WHEN  ('?loc:sVirtualColorBox') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 21
WHEN  ('') (0)
WHEN  ('?Heading1Box') (0)
WHEN  ('?Heading2Box') (0)
WHEN  ('?Panel1') (0)
WHEN  ('?Panel2') (0)
WHEN  ('?Panel3') (0)
WHEN  ('?Panel3:2') (0)
WHEN  ('?loc:sColor1Box') (0)
WHEN  ('?loc:sColor2Box') (0)
WHEN  ('?loc:sHighlightColor1Box') (0)
WHEN  ('?loc:sHighlightColor2Box') (0)
WHEN  ('?loc:sHyperlinkColorBox') (0)
WHEN  ('?loc:sModuleColorBox') (0)
WHEN  ('?loc:sNoteColorBox') (0)
WHEN  ('?loc:sPrivateColorBox') (0)
WHEN  ('?loc:sProtectedColorBox') (0)
WHEN  ('?loc:sSelectedBackBox') (0)
WHEN  ('?loc:sSelectedForeBox') (0)
WHEN  ('?loc:sViewerBackColorBox') (0)
WHEN  ('?loc:sViewerForeColorBox') (0)
WHEN  ('?loc:sVirtualColorBox') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 21
WHEN  ('') (-1)
WHEN  ('?Heading1Box') (-1)
WHEN  ('?Heading2Box') (-1)
WHEN  ('?Panel1') (-1)
WHEN  ('?Panel2') (-1)
WHEN  ('?Panel3') (-1)
WHEN  ('?Panel3:2') (-1)
WHEN  ('?loc:sColor1Box') (-1)
WHEN  ('?loc:sColor2Box') (-1)
WHEN  ('?loc:sHighlightColor1Box') (-1)
WHEN  ('?loc:sHighlightColor2Box') (-1)
WHEN  ('?loc:sHyperlinkColorBox') (-1)
WHEN  ('?loc:sModuleColorBox') (-1)
WHEN  ('?loc:sNoteColorBox') (-1)
WHEN  ('?loc:sPrivateColorBox') (-1)
WHEN  ('?loc:sProtectedColorBox') (-1)
WHEN  ('?loc:sSelectedBackBox') (-1)
WHEN  ('?loc:sSelectedForeBox') (-1)
WHEN  ('?loc:sViewerBackColorBox') (-1)
WHEN  ('?loc:sViewerForeColorBox') (-1)
WHEN  ('?loc:sVirtualColorBox') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 21
WHEN  ('') (0)
WHEN  ('?Heading1Box') (0)
WHEN  ('?Heading2Box') (0)
WHEN  ('?Panel1') (0)
WHEN  ('?Panel2') (0)
WHEN  ('?Panel3') (0)
WHEN  ('?Panel3:2') (0)
WHEN  ('?loc:sColor1Box') (0)
WHEN  ('?loc:sColor2Box') (0)
WHEN  ('?loc:sHighlightColor1Box') (0)
WHEN  ('?loc:sHighlightColor2Box') (0)
WHEN  ('?loc:sHyperlinkColorBox') (0)
WHEN  ('?loc:sModuleColorBox') (0)
WHEN  ('?loc:sNoteColorBox') (0)
WHEN  ('?loc:sPrivateColorBox') (0)
WHEN  ('?loc:sProtectedColorBox') (0)
WHEN  ('?loc:sSelectedBackBox') (0)
WHEN  ('?loc:sSelectedForeBox') (0)
WHEN  ('?loc:sViewerBackColorBox') (0)
WHEN  ('?loc:sViewerForeColorBox') (0)
WHEN  ('?loc:sVirtualColorBox') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 21
WHEN  ('') (-1)
WHEN  ('?Heading1Box') (-1)
WHEN  ('?Heading2Box') (-1)
WHEN  ('?Panel1') (-1)
WHEN  ('?Panel2') (-1)
WHEN  ('?Panel3') (-1)
WHEN  ('?Panel3:2') (-1)
WHEN  ('?loc:sColor1Box') (-1)
WHEN  ('?loc:sColor2Box') (-1)
WHEN  ('?loc:sHighlightColor1Box') (-1)
WHEN  ('?loc:sHighlightColor2Box') (-1)
WHEN  ('?loc:sHyperlinkColorBox') (-1)
WHEN  ('?loc:sModuleColorBox') (-1)
WHEN  ('?loc:sNoteColorBox') (-1)
WHEN  ('?loc:sPrivateColorBox') (-1)
WHEN  ('?loc:sProtectedColorBox') (-1)
WHEN  ('?loc:sSelectedBackBox') (-1)
WHEN  ('?loc:sSelectedForeBox') (-1)
WHEN  ('?loc:sViewerBackColorBox') (-1)
WHEN  ('?loc:sViewerForeColorBox') (-1)
WHEN  ('?loc:sVirtualColorBox') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 21
WHEN  ('') (0)
WHEN  ('?Heading1Box') (0)
WHEN  ('?Heading2Box') (0)
WHEN  ('?Panel1') (0)
WHEN  ('?Panel2') (0)
WHEN  ('?Panel3') (0)
WHEN  ('?Panel3:2') (0)
WHEN  ('?loc:sColor1Box') (0)
WHEN  ('?loc:sColor2Box') (0)
WHEN  ('?loc:sHighlightColor1Box') (0)
WHEN  ('?loc:sHighlightColor2Box') (0)
WHEN  ('?loc:sHyperlinkColorBox') (0)
WHEN  ('?loc:sModuleColorBox') (0)
WHEN  ('?loc:sNoteColorBox') (0)
WHEN  ('?loc:sPrivateColorBox') (0)
WHEN  ('?loc:sProtectedColorBox') (0)
WHEN  ('?loc:sSelectedBackBox') (0)
WHEN  ('?loc:sSelectedForeBox') (0)
WHEN  ('?loc:sViewerBackColorBox') (0)
WHEN  ('?loc:sViewerForeColorBox') (0)
WHEN  ('?loc:sVirtualColorBox') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?TreeList')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
loc:szRedFilePath     = glo:szRedFilePath
loc:bAutoExpand       = glo:bAutoExpand
loc:lModuleColor      = glo:lModuleColor
loc:lPrivateColor     = glo:lPrivateColor
loc:lProtectedColor   = glo:lProtectedColor
loc:lVirtualColor     = glo:lVirtualColor
loc:lSelectedBack     = glo:lSelectedBack
loc:lSelectedFore     = glo:lSelectedFore
loc:lNoteColor        = glo:lNoteColor
loc:lHighlightColor1  = glo:lHighlightColor1
loc:lHighlightColor2  = glo:lHighlightColor2
loc:lHyperlinkColor   = glo:lHyperlinkColor
loc:bClarionVersion   = glo:bClarionVersion
loc:bShowTips         = glo:bShowTips
loc:bOpaqueCheckBox   = glo:bOpaqueCheckBox
loc:bForceEdit        = glo:bForceEdit
loc:bUseAssociation   = glo:bUseAssociation
loc:Background        = glo:Background
loc:Color1            = glo:Color1
loc:Color2            = glo:Color2
loc:szWallpaper1      = glo:szWallpaper1
loc:szWallpaper2      = glo:szWallpaper2
loc:Tiled1            = glo:Tiled1
loc:Tiled2            = glo:Tiled2
loc:Typeface          = glo:Typeface
loc:FontSize          = glo:FontSize
loc:FontColor         = glo:FontColor
loc:FontStyle         = glo:FontStyle
loc:szEditorCommand   = glo:szEditorCommand
loc:bUseHTMLHelp      = glo:bUseHTMLHelp
loc:szXmlStyleSheet   = glo:szXmlStyleSheet
loc:bShowSparseTrees  = glo:bShowSparseTrees
loc:bMaxMRU           = glo:bMaxMRU
loc:CategoryDropCount = glo:CategoryDropCount
loc:Layout            = glo:Layout
FREE(Q)
J = RECORDS(ExtraModuleQ)
LOOP I = J TO 1 BY -1
  GET(ExtraModuleQ,I)
  Q = ExtraModuleQ
  loc:szFileName = Q.szModulePath & Q.szModuleName
  IF _access(loc:szFileName,0) = 0
     ADD(Q,+Q.szModuleName,+Q.szModulePath)
     CASE UPPER(Q.szModuleName)
     OF 'EQUATES.CLW'
        loc:bEquates = TRUE
     OF 'ERRORS.CLW'
        loc:bErrors = TRUE
     OF 'PROPERTY.CLW'
        loc:bProperty = TRUE
     OF 'PRNPROP.CLW'
        loc:bPrnProp = TRUE
     OF 'KEYCODES.CLW'
        loc:bKeycodes = TRUE
     OF 'TPLEQU.CLW'
        loc:bTplEqu = TRUE
     OF 'WINEQU.CLW'
        loc:bWinEqu = TRUE
     OF 'WINDOWS.INC'
        loc:bWindows = TRUE
     END
  ELSE
     DELETE(ExtraModuleQ)
  END
END

FREE(EditorQ)
EditorQ.szWebAddress = 'www.editplus.com'
EditorQ.szCommandLineExample ='c:\program files\editplus 2\editplus.exe %1 -cursor %2'
ADD(EditorQ)
EditorQ.szWebAddress = 'www.schofieldcomputer.com/cgi-bin/download.cgi?path=/misc/&file=Ced.zip'
EditorQ.szCommandLineExample ='c:\program files\ced\ced.exe %1 %2'
ADD(EditorQ)
EditorQ.szWebAddress = 'www.textpad.com'
EditorQ.szCommandLineExample ='c:\program files\textpad 4\textpad.exe -q -am"%1"(%2)'
ADD(EditorQ)
EditorQ.szWebAddress = 'www.ultraedit.com'
EditorQ.szCommandLineExample ='c:\program files\ultraedit\uedit32.exe %1 -l%2'
ADD(EditorQ)

OptionQ.Level = 1
OptionQ.Style = 1
OptionQ.Icon = 2
OptionQ.szText = 'Clarion'
OptionQ.Feq = ?Clarion:Tab
ADD(OptionQ)
OptionQ.Level = 1
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Application'
OptionQ.Feq = ?Application:Tab
ADD(OptionQ)
OptionQ.Level = 1
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Color Preferences'
OptionQ.Feq = ?Color:Tab
ADD(OptionQ)
OptionQ.Level = 1
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Editor'
OptionQ.Feq = ?Editor:Tab
ADD(OptionQ)
OptionQ.Level = 1
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Templates'
OptionQ.Feq = ?Templates:Tab
ADD(OptionQ)
OptionQ.Level = -1
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Viewer'
OptionQ.Feq = ?DefaultTab   !?Viewer:Tab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Default'
OptionQ.Feq = ?DefaultTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Label'
OptionQ.Feq = ?LabelTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Comment'
OptionQ.Feq = ?CommentTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'String'
OptionQ.Feq = ?StringTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Identifier'
OptionQ.Feq = ?IdentifierTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Integer Constant'
OptionQ.Feq = ?IntegerTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Real Constant'
OptionQ.Feq = ?RealTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Picture String'
OptionQ.Feq = ?PictureTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Keyword'
OptionQ.Feq = ?KeywordTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Compiler Directive'
OptionQ.Feq = ?CompilerTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Runtime Expression'
OptionQ.Feq = ?RuntimeTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'BuiltIn Procedure'
OptionQ.Feq = ?BuiltInTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Structure'
OptionQ.Feq = ?StructureTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Attribute'
OptionQ.Feq = ?AttributeTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Equate'
OptionQ.Feq = ?EquateTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Error'
OptionQ.Feq = ?ErrorTab
ADD(OptionQ)
OptionQ.Level = 2
OptionQ.Style = 1
OptionQ.Icon = 1
OptionQ.szText = 'Deprecated'
OptionQ.Feq = ?DeprecatedTab
ADD(OptionQ)

Heading1 = 'Clarion'
Heading2 = 'Default'
GET(OptionQ,1)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
LABEL
PROPERTY:END
  Window{PROP:Buffer} = 1
  CASE loc:Background
  OF 1  !Color
     window{PROP:Wallpaper} = ''
     window{PROP:Color} = loc:Color2
  OF 2  !Wallpaper
     window{PROP:Wallpaper} = loc:szWallpaper2
     window{PROP:Tiled} = loc:Tiled2
     window{PROP:Color} = COLOR:NONE
  OF 3  !None
     window{PROP:Wallpaper} = ''
     window{PROP:Color} = COLOR:NONE
  END
  ?TreeList{PROP:SELECTED} = 1
  ?TreeList{PROP:IconList,1} = '~CLSDFOLD.ICO'
  ?TreeList{PROP:IconList,2} = '~OPENFOLD.ICO'
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8050
PROPERTY:END
CASE glo:bClarionVersion
  OF CWVERSION_C2
     loc:szSection = 'Clarion for Windows V2.0'
     loc:szRedFileName = '\bin\cw20.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 2'
  OF CWVERSION_C4
     loc:szSection = 'Clarion 4'
     loc:szRedFileName = '\bin\clarion4.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 4'
  OF CWVERSION_C5
     loc:szSection = 'Clarion 5'
     loc:szRedFileName = '\bin\clarion5.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 5'
  OF CWVERSION_C5EE
     loc:szSection = 'Clarion 5  Enterprise Edition'
     loc:szRedFileName = '\bin\clarion5.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 5 EE'
  OF CWVERSION_C55
     loc:szSection = 'Clarion 5.5'
     loc:szRedFileName = '\bin\c55pe.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 5.5'
  OF CWVERSION_C55EE
     loc:szSection = 'Clarion 5.5  Enterprise Edition'
     loc:szRedFileName = '\bin\c55ee.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 5.5 EE'
  OF CWVERSION_C60
     loc:szSection = 'Clarion 6.0'
     loc:szRedFileName = '\bin\c60pe.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 6.0'
  OF CWVERSION_C60EE
     loc:szSection = 'Clarion 6.0  Enterprise Edition'
     loc:szRedFileName = '\bin\c60ee.red'
     ?Clarion:Tab{PROP:Text} = 'Clarion 6.0 EE'
  OF CWVERSION_C70
     loc:szSection = 'Clarion 7.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) = loc:build
           loc:szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END
     ?Clarion:Tab{PROP:Text} = glo:VersionQ.VersionName   !'Clarion 7.0'
  OF CWVERSION_C80
     loc:szSection = 'Clarion 8.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) = loc:build
           loc:szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END
     ?Clarion:Tab{PROP:Text} = glo:VersionQ.VersionName   !'Clarion 8.0'
  OF CWVERSION_C90
     loc:szSection = 'Clarion 9.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) = loc:build
           loc:szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END
     ?Clarion:Tab{PROP:Text} = glo:VersionQ.VersionName   !'Clarion 9.0'

  OF CWVERSION_C100
     loc:szSection = 'Clarion 10.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(loc:szSection))) = UPPER(loc:szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(loc:szSection)+3,4) = loc:build
           loc:szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END
     ?Clarion:Tab{PROP:Text} = glo:VersionQ.VersionName   !'Clarion 10.0'

END

IF glo:bClarionVersion < CWVERSION_C70
   loc:szRoot = GETINI(loc:szSection,'root')                              !get root directory
   IF loc:szRoot[LEN(loc:szRoot)] = '\'
      loc:szRoot[LEN(loc:szRoot)] = '<0>'                                 !remove trailing backslash
   END
   IF glo:szRedFilePath
      loc:szRedFilePath = glo:szRedFilePath
   ELSE
      loc:szRedFilePath = loc:szRoot & loc:szRedFileName
   END
ELSE
   loc:szRoot = glo:VersionQ.Root
   IF glo:szRedFilePath
      loc:szRedFilePath = glo:szRedFilePath
   ELSE
      loc:szRedFilePath = glo:VersionQ.RedDir & loc:szRedFileName
   END
END
PathCompactPathEx(loc:szCompactRedFilePath, loc:szRedFilePath, SIZE(loc:szCompactRedFilePath),0)


loc:ViewerStyles = glo:ViewerStyles
DO GetColors
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9500
PROPERTY:END
IF glo:bClarionVersion > CWVERSION_C60EE
   subFolder = 'win\'
ELSE
   subFolder = ''
END

DISABLE(?loc:bEquates,?loc:bWindows)
LOOP I = 1 TO 8
  CASE I
  OF 1
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'equates.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bEquates{PROP:Disable} = FALSE
     END
  OF 2
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'errors.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bErrors{PROP:Disable} = FALSE
     END
  OF 3
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'property.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bProperty{PROP:Disable} = FALSE
     END
  OF 4
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'prnprop.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bPrnProp{PROP:Disable} = FALSE
     END
  OF 5
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'keycodes.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bKeycodes{PROP:Disable} = FALSE
     END
  OF 6
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'tplequ.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bTplEqu{PROP:Disable} = FALSE
     END
  OF 7
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'winequ.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bWinEqu{PROP:Disable} = FALSE
     END
  OF 8
     loc:szFileName = loc:szRoot & '\libsrc\' & subFolder & 'windows.inc'
     IF _access(loc:szFileName,0) = 0
        ?loc:bWindows{PROP:Disable} = FALSE
     END
  END
END

IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM')
      oHH.SetTopic('Edit_Options.htm')
   END
END
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 900
PROPERTY:END
CASE loc:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = loc:Color2
   HIDE(?WallpaperGroup)
   UNHIDE(?ColorGroup)
OF 2  !Wallpaper
   window{PROP:Wallpaper} = loc:szWallpaper2
   window{PROP:Tiled} = loc:Tiled2
   window{PROP:Color} = COLOR:NONE
   HIDE(?ColorGroup)
   UNHIDE(?WallpaperGroup)
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
   HIDE(?ColorGroup)
   HIDE(?WallpaperGroup)
END

! 2003.12.18 RR - Not Needed
!IF loc:FontSize > 10
!   ?Sheet1{PROP:Join} = TRUE
!ELSE
!   ?Sheet1{PROP:Join} = FALSE
!END

J = LASTFIELD()
LOOP I = 0 TO J
   CASE I
   OF ?String3 OROF ?String4 OROF ?String5 OROF ?EditorList |
   OROF ?Heading1 OROF ?Heading2
      !Do Nothing
   OF ?Prompt14 !OROF ?TreeList
      SETFONT(I,loc:Typeface,8,loc:FontColor,loc:FontStyle,0)

   OF ?StandardEquateGroup
      SETFONT(I,loc:Typeface,loc:FontSize,loc:FontColor,loc:FontStyle,0)
      !XPStandardEquateGroup.FontName = loc:Typeface
      !XPStandardEquateGroup.FontSize = loc:FontSize
   OF ?OptionsGroup
      SETFONT(I,loc:Typeface,loc:FontSize,loc:FontColor,loc:FontStyle,0)
      !XPOptionsGroup.FontName = loc:Typeface
      !XPOptionsGroup.FontSize = loc:FontSize
   OF ?SampleGroup
      SETFONT(I,loc:Typeface,loc:FontSize,loc:FontColor,loc:FontStyle,0)
      !XPSampleGroup.FontName = loc:Typeface
      !XPSampleGroup.FontSize = loc:FontSize
   OF ?loc:StyleGroup:CaseOpt
      SETFONT(I,loc:Typeface,loc:FontSize,loc:FontColor,loc:FontStyle,0)
      !XPloc:StyleGroup:CaseOpt.FontName = loc:Typeface
      !XPloc:StyleGroup:CaseOpt.FontSize = loc:FontSize
   ELSE
      SETFONT(I,loc:Typeface,loc:FontSize,loc:FontColor,loc:FontStyle,0)
   END
END

loc:sFontColor = srcGetColorString(loc:FontColor)

loc:szFont = CLIP(loc:Typeface) & ',' & loc:FontSize & ','
IF BAND(loc:FontStyle,0FFFh) >= FONT:bold
   loc:szFont = loc:szFont & 'Bold,'
ELSIF BAND(loc:FontStyle,0FFFh) >= FONT:regular
   loc:szFont = loc:szFont & 'Regular,'
ELSE
   loc:szFont = loc:szFont & 'Thin,'
END
IF BAND(loc:FontStyle,FONT:italic) = FONT:italic
   loc:szFont = loc:szFont & 'Italic,'
END
IF BAND(loc:FontStyle,FONT:underline) = FONT:underline
   loc:szFont = loc:szFont & 'Underline,'
END
IF BAND(loc:FontStyle,FONT:strikeout) = FONT:strikeout
   loc:szFont = loc:szFont & 'Strikeout,'
END
loc:szFont = loc:szFont & CLIP(srcGetColorString(loc:FontColor))

loc:sColor1          = srcGetColorString(loc:Color1)
loc:sColor2          = srcGetColorString(loc:Color2)

?loc:sColor1Box{PROP:Fill} = loc:Color1
?loc:sColor2Box{PROP:Fill} = loc:Color2

loc:sModuleColor     = srcGetColorString(loc:lModuleColor)
loc:sPrivateColor    = srcGetColorString(loc:lPrivateColor)
loc:sProtectedColor  = srcGetColorString(loc:lProtectedColor)
loc:sVirtualColor    = srcGetColorString(loc:lVirtualColor)
loc:sHyperlinkColor  = srcGetColorString(loc:lHyperlinkColor)
loc:sSelectedBack    = srcGetColorString(loc:lSelectedBack)
loc:sSelectedFore    = srcGetColorString(loc:lSelectedFore)
loc:sNoteColor       = srcGetColorString(loc:lNoteColor)
loc:sHighlightColor1 = srcGetColorString(loc:lHighlightColor1)
loc:sHighlightColor2 = srcGetColorString(loc:lHighlightColor2)

?loc:sModuleColorBox{PROP:Fill}     = loc:lModuleColor
?loc:sPrivateColorBox{PROP:Fill}    = loc:lPrivateColor
?loc:sProtectedColorBox{PROP:Fill}  = loc:lProtectedColor
?loc:sVirtualColorBox{PROP:Fill}    = loc:lVirtualColor
?loc:sHyperlinkColorBox{PROP:Fill}  = loc:lHyperlinkColor
?loc:sSelectedBackBox{PROP:Fill}    = loc:lSelectedBack
?loc:sSelectedForeBox{PROP:Fill}    = loc:lSelectedFore
?loc:sNoteColorBox{PROP:Fill}       = loc:lNoteColor
?loc:sHighlightColor1Box{PROP:Fill} = loc:lHighlightColor1
?loc:sHighlightColor2Box{PROP:Fill} = loc:lHighlightColor2

IF loc:bUseAssociation
   DISABLE(?loc:szEditorCommand:Prompt,?loc:szEditorCommand)
ELSE
   ENABLE(?loc:szEditorCommand:Prompt,?loc:szEditorCommand)
END

!Viewer Options
!======================================================================================
loc:szViewerFont = CLIP(loc:StyleGroup.Font) & ',' & loc:StyleGroup.FontSize & ','
IF BAND(loc:StyleGroup.FontStyle,0FFFh) >= FONT:bold
   loc:szViewerFont = loc:szViewerFont & 'Bold,'
   loc:StyleGroup.Bold = TRUE
ELSIF BAND(loc:StyleGroup.FontStyle,0FFFh) >= FONT:regular
   loc:szViewerFont = loc:szViewerFont & 'Regular,'
   loc:StyleGroup.Bold = FALSE
ELSE
   loc:szViewerFont = loc:szViewerFont & 'Thin,'
   loc:StyleGroup.Bold = FALSE
END
IF BAND(loc:StyleGroup.FontStyle,FONT:italic) = FONT:italic
   loc:szViewerFont = loc:szViewerFont & 'Italic,'
   loc:StyleGroup.Italic = TRUE
ELSE
   loc:StyleGroup.Italic = FALSE
END
IF BAND(loc:StyleGroup.FontStyle,FONT:underline) = FONT:underline
   loc:szViewerFont = loc:szViewerFont & 'Underline,'
   loc:StyleGroup.Underline = TRUE
ELSE
   loc:StyleGroup.Underline = FALSE
END
!IF BAND(loc:StyleGroup.FontStyle,FONT:strikeout) = FONT:strikeout
!   loc:szViewerFont = loc:szViewerFont & 'Strikeout'
!END
!loc:szViewerFont = loc:szViewerFont & CLIP(srcGetColorString(loc:StyleGroup.Fore))
IF loc:szViewerFont[LEN(loc:szViewerFont)] = ','
   loc:szViewerFont[LEN(loc:szViewerFont)] = '<0>'
END

?loc:sViewerForeColorBox{PROP:Fill} = loc:StyleGroup.Fore
loc:sViewerForeColor = srcGetColorString(loc:StyleGroup.Fore)

?loc:sViewerBackColorBox{PROP:Fill} = loc:StyleGroup.Back
loc:sViewerBackColor = srcGetColorString(loc:StyleGroup.Back)

?SampleText{PROP:FontColor} = loc:StyleGroup.Fore
?SampleText{PROP:Color} = loc:StyleGroup.Back
?SampleText{PROP:Font} = loc:StyleGroup.Font
?SampleText{PROP:FontSize} = loc:StyleGroup.FontSize
?SampleText{PROP:FontStyle} = loc:StyleGroup.FontStyle
CASE loc:StyleGroup:CaseOpt
OF 0
   ?SampleText{PROP:Text} = 'Using Clarion to forge applications!'
OF 1
   ?SampleText{PROP:Text} = 'USING CLARION TO FORGE APPLICATIONS!'
OF 2
   ?SampleText{PROP:Text} = 'using clarion to forge applications!'
END
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OKButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveColors
IF glo:lModuleColor       <> loc:lModuleColor      OR |
   glo:lPrivateColor      <> loc:lPrivateColor     OR |
   glo:lProtectedColor    <> loc:lProtectedColor   OR |
   glo:lVirtualColor      <> loc:lVirtualColor     OR |
   glo:lHyperlinkColor    <> loc:lHyperlinkColor   OR |
   glo:lSelectedBack      <> loc:lSelectedBack     OR |
   glo:lSelectedFore      <> loc:lSelectedFore     OR |
   glo:lNoteColor         <> loc:lNoteColor        OR |
   glo:lHighlightColor1   <> loc:lHighlightColor1  OR |
   glo:lHighlightColor2   <> loc:lHighlightColor2  OR |
   glo:bShowTips          <> loc:bShowTips         OR |
   glo:bOpaqueCheckBox    <> loc:bOpaqueCheckBox   OR |
   glo:bForceEdit         <> loc:bForceEdit        OR |
   glo:bUseAssociation    <> loc:bUseAssociation   OR |
   glo:Background         <> loc:Background        OR |
   glo:Color1             <> loc:Color1            OR |
   glo:Color2             <> loc:Color2            OR |
   glo:szWallpaper1       <> loc:szWallpaper1      OR |
   glo:szWallpaper2       <> loc:szWallpaper2      OR |
   glo:Tiled1             <> loc:Tiled1            OR |
   glo:Tiled2             <> loc:Tiled2            OR |
   glo:Typeface           <> loc:Typeface          OR |
   glo:FontSize           <> loc:FontSize          OR |
   glo:FontColor          <> loc:FontColor         OR |
   glo:FontStyle          <> loc:FontStyle         OR |
   glo:bUseHTMLHelp       <> loc:bUseHTMLHelp      OR |
   glo:szXmlStyleSheet    <> loc:szXmlStyleSheet   OR |
   glo:ViewerStyles       <> loc:ViewerStyles      OR |
   glo:bShowSparseTrees   <> loc:bShowSparseTrees  OR |
   glo:bMaxMRU            <> loc:bMaxMRU           OR |
   glo:CategoryDropCount  <> loc:CategoryDropCount OR |
   glo:Layout             <> loc:Layout
   bReturnValue = 1 !Color Change
ELSE
   bReturnValue = 0 !No Change
END

glo:szRedFilePath     = loc:szRedFilePath
glo:bAutoExpand       = loc:bAutoExpand
glo:lModuleColor      = loc:lModuleColor
glo:lPrivateColor     = loc:lPrivateColor
glo:lProtectedColor   = loc:lProtectedColor
glo:lVirtualColor     = loc:lVirtualColor
glo:lHyperlinkColor   = loc:lHyperlinkColor
glo:lSelectedBack     = loc:lSelectedBack
glo:lSelectedFore     = loc:lSelectedFore
glo:lNoteColor        = loc:lNoteColor
glo:lHighlightColor1  = loc:lHighlightColor1
glo:lHighlightColor2  = loc:lHighlightColor2
!glo:bClarionVersion   = loc:bClarionVersion
glo:bShowTips         = loc:bShowTips
glo:bOpaqueCheckBox   = loc:bOpaqueCheckBox
glo:bForceEdit        = loc:bForceEdit
glo:bUseAssociation   = loc:bUseAssociation
glo:Background        = loc:Background
glo:Color1            = loc:Color1
glo:Color2            = loc:Color2
glo:szWallpaper1      = loc:szWallpaper1
glo:szWallpaper2      = loc:szWallpaper2
glo:Tiled1            = loc:Tiled1
glo:Tiled2            = loc:Tiled2
glo:Typeface          = loc:Typeface
glo:FontSize          = loc:FontSize
glo:FontColor         = loc:FontColor
glo:FontStyle         = loc:FontStyle
glo:szEditorCommand   = loc:szEditorCommand
glo:bUseHTMLHelp      = loc:bUseHTMLHelp
glo:szXmlStyleSheet   = loc:szXmlStyleSheet
glo:ViewerStyles      = loc:ViewerStyles
glo:bShowSparseTrees  = loc:bShowSparseTrees
glo:bMaxMRU           = loc:bMaxMRU
glo:CategoryDropCount = loc:CategoryDropCount
glo:Layout            = loc:Layout

INIMgr.Update('Options','Module Color',glo:lModuleColor)
INIMgr.Update('Options','Private Color',glo:lPrivateColor)
INIMgr.Update('Options','Protected Color',glo:lProtectedColor)
INIMgr.Update('Options','Virtual Color',glo:lVirtualColor)
INIMgr.Update('Options','Selected Color',glo:lSelectedBack)
INIMgr.Update('Options','Selected Text',glo:lSelectedFore)
INIMgr.Update('Options','Note Color',glo:lNoteColor)
INIMgr.Update('Options','Highlight Color 1',glo:lHighlightColor1)
INIMgr.Update('Options','Highlight Color 2',glo:lHighlightColor2)
INIMgr.Update('Options','Hyperlink Color',glo:lHyperlinkColor)
INIMgr.Update('Options','Clarion Version',glo:bClarionVersion)
INIMgr.Update('Options','ABC Only',glo:bABCOnly)
INIMgr.Update('Options','Show Module',glo:bShowModule)
INIMgr.Update('Options','Show Private',glo:bShowPrivate)
INIMgr.Update('Options','Show Protected',glo:bShowProtected)
INIMgr.Update('Options','Current View',glo:bCurrentView)
INIMgr.Update('Options','Show Tips',glo:bShowTips)
INIMgr.Update('Options','Opaque Check Box',glo:bOpaqueCheckBox)
INIMgr.Update('Options','Force Edit',glo:bForceEdit)
INIMgr.Update('Options','Use Association',glo:bUseAssociation)
INIMgr.Update('Options','Editor Command',glo:szEditorCommand)
INIMgr.Update('Options','Background',glo:Background)
INIMgr.Update('Options','Color 1',glo:Color1)
INIMgr.Update('Options','Color 2',glo:Color2)
INIMgr.Update('Options','Wallpaper 1',glo:szWallpaper1)
INIMgr.Update('Options','Wallpaper 2',glo:szWallpaper2)
INIMgr.Update('Options','Tiled 1',glo:Tiled1)
INIMgr.Update('Options','Tiled 2',glo:Tiled2)
INIMgr.Update('Options','Typeface',glo:Typeface)
INIMgr.Update('Options','FontSize',glo:FontSize)
INIMgr.Update('Options','FontColor',glo:FontColor)
INIMgr.Update('Options','FontStyle',glo:FontStyle)
INIMgr.Update('Options','DetailLevel',glo:bDetailLevel)
INIMgr.Update('Options','Category',glo:szCategory)
INIMgr.Update('Options','CategoryDropCount',glo:CategoryDropCount)
INIMgr.Update('Options','Current Directory',glo:szCurrentDir)
INIMgr.Update('Options','RED File Path ' & glo:bClarionVersion,glo:szRedFilePath)
INIMgr.Update('Options','AutoExpand',glo:bAutoExpand)
INIMgr.Update('Options','UseHTMLHelp',glo:bUseHTMLHelp)
INIMgr.Update('Options','XmlStyleSheet',glo:szXmlStyleSheet)
INIMgr.Update('Options','EnumSort',glo:bEnumSort)
INIMgr.Update('Options','ShowSparseTrees',glo:bShowSparseTrees)
INIMgr.Update('Options','MaxMRU',glo:bMaxMRU)
INIMgr.Update('Splitter','Layout',glo:Layout)

FREE(ExtraModuleQ)
J = RECORDS(Q)
LOOP I = 1 TO J
  GET(Q,I)
  ExtraModuleQ = Q
  ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
END
[GROUP]
PRIORITY 5000
INSTANCE 1
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
WHEN '?PrivateColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COLORDIALOG('Private Attribute Color',loc:lPrivateColor)
ThisWindow.Reset()
[END]
[END]
WHEN '?SelectedBackColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COLORDIALOG('Selected Back Color',loc:lSelectedBack)
ThisWindow.Reset()
[END]
[END]
WHEN '?ProtectedColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COLORDIALOG('Protected Attribute Color',loc:lProtectedColor)
ThisWindow.Reset()
[END]
[END]
WHEN '?VirtualColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COLORDIALOG('Virtual Method Color',loc:lVirtualColor)
ThisWindow.Reset()
[END]
[END]
WHEN '?AdditionalFilesButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Window{PROP:Hide} = TRUE
winAdditionalFiles(Q,loc:bClarionVersion)
Window{PROP:Hide} = FALSE
ThisWindow.Reset()
[END]
[END]
WHEN '?loc:szWallpaper2'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
window{PROP:Wallpaper} = loc:szWallpaper2
window{PROP:Tiled} = loc:Tiled2
[END]
[END]
WHEN '?Wallpaper2:LookupFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
Wallpaper2FileLookup.DefaultDirectory = ''
Wallpaper2FileLookup.DefaultFile = ''
J = LEN(loc:szWallpaper2)
LOOP I = J TO 1 BY -1
   IF loc:szWallpaper2[I] = '\'
      Wallpaper2FileLookup.DefaultDirectory = loc:szWallpaper2[1 : I]
      Wallpaper2FileLookup.DefaultFile = loc:szWallpaper2[I+1 : J]
      BREAK
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
IF loc:szWallpaper2
   window{PROP:Wallpaper} = loc:szWallpaper2
   window{PROP:Tiled} = loc:Tiled2
ELSE
   loc:szWallpaper2 = Wallpaper2FileLookup.DefaultDirectory & Wallpaper2FileLookup.DefaultFile
   DISPLAY(?loc:szWallpaper2)
END
[END]
[END]
WHEN '?Wallpaper1:LookupFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
Wallpaper1FileLookup.DefaultDirectory = ''
Wallpaper1FileLookup.DefaultFile = ''
J = LEN(loc:szWallpaper1)
LOOP I = J TO 1 BY -1
   IF loc:szWallpaper1[I] = '\'
      Wallpaper1FileLookup.DefaultDirectory = loc:szWallpaper1[1 : I]
      Wallpaper1FileLookup.DefaultFile = loc:szWallpaper1[I+1 : J]
      BREAK
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
IF ~loc:szWallpaper1
   loc:szWallpaper1 = Wallpaper1FileLookup.DefaultDirectory & Wallpaper1FileLookup.DefaultFile
   DISPLAY(?loc:szWallpaper1)
END
[END]
[END]
WHEN '?FontLookupButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF FONTDIALOG('Choose Display Font',loc:Typeface,loc:FontSize,loc:FontColor,loc:FontStyle,0)
   ThisWindow.Reset()
END
[END]
[END]
WHEN '?loc:Background'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE loc:Background
OF 1  !Color
   loc:bOpaqueCheckBox = TRUE
OF 2  !Wallpaper
   loc:bOpaqueCheckBox = FALSE
OF 3  !None
   loc:bOpaqueCheckBox = TRUE
END
ThisWindow.Reset()
[END]
[END]
WHEN '?Color1:Lookup'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Background Color 1',loc:Color1)
ThisWindow.Reset()
[END]
[END]
WHEN '?Color2:Lookup'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Background Color 2',loc:Color2)
window{PROP:Color} = glo:Color2
ThisWindow.Reset()
[END]
[END]
WHEN '?NoteColor:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COLORDIALOG('Note Color',loc:lNoteColor)
ThisWindow.Reset()
[END]
[END]
WHEN '?HighlightColor1:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Highlight Color 1',loc:lHighlightColor1)
ThisWindow.Reset()
[END]
[END]
WHEN '?HighlightColor2:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Highlight Color 2',loc:lHighlightColor2)
ThisWindow.Reset()
[END]
[END]
WHEN '?loc:bUseAssociation'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?loc:bEquates'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bEquates
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bErrors'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bErrors
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bKeycodes'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bKeycodes
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bPrnProp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bPrnProp
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bProperty'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bProperty
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bTplEqu'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bTplEqu
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bWindows'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bWindows
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?loc:bWinEqu'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
Q.szModulePath = loc:szRoot & '\LIBSRC\' & subFolder
Q.bClarionVersion = glo:bClarionVersion
IF loc:bWinEqu
   ADD(Q,+Q.szModuleName,+Q.szModulePath)
ELSE
   GET(Q,+Q.szModuleName,+Q.szModulePath)
   IF ~ERRORCODE()
      DELETE(Q)
   END
END
[END]
[END]
WHEN '?LookupEditor'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
sav:szEditorCommand = loc:szEditorCommand
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
IF ~loc:szEditorCommand
   loc:szEditorCommand = sav:szEditorCommand
   DISPLAY(?loc:szEditorCommand)
END
[END]
[END]
WHEN '?LookupRedPath:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 IF ~FILEDIALOG('Select Redirection File',loc:szRedFilePath,'Redrection File (*.RED)|*.RED|All Files (*.*)|*.*',File:KeepDir+File:LongName)
    IF glo:szRedFilePath
       loc:szRedFilePath = glo:szRedFilePath
    ELSE
       IF glo:bClarionVersion < CWVERSION_C70
          loc:szRedFilePath = loc:szRoot & loc:szRedFileName
       ELSE
          loc:szRedFilePath = glo:VersionQ.RedDir & loc:szRedFileName
       END
    END
 END
 PathCompactPathEx(loc:szCompactRedFilePath, loc:szRedFilePath, SIZE(loc:szCompactRedFilePath),0)
 DISPLAY(?loc:szCompactRedFilePath)
[END]
[END]
WHEN '?HyperlinkColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Hyperlink Color',loc:lHyperlinkColor)
ThisWindow.Reset()
[END]
[END]
WHEN '?EditorList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
CASE KEYCODE()
OF MouseLeft2
   CASE ?EditorList{PROPLIST:MouseDownField}
   OF 1
      GET(EditorQ,CHOICE(?EditorList))
      IF SUB(EditorQ.szWebAddress,-4,1) = '.'
         szURL = 'http://' & EditorQ.szWebAddress
      ELSE
         szURL = 'http://' & EditorQ.szWebAddress & '/'
      END
      szNull = ''
      ShellExecute(window{prop:handle},0,szURL,0,szNull,1)
   OF 2
      GET(EditorQ,CHOICE(?EditorList))
      loc:szEditorCommand = EditorQ.szCommandLineExample
      DISPLAY(?loc:szEditorCommand)
   END
END
[END]
[END]
WHEN '?incTemplatesButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
winTemplateFiles(incTemplateQ,'Class Include File Templates')
[END]
[END]
WHEN '?clwTemplatesButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
winTemplateFiles(clwTemplateQ,'Class Source File Templates')
[END]
[END]
WHEN '?FavoritesMenuButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
winFavoritesMenu(FavoritesQ)
[END]
[END]
WHEN '?ModuleColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Module Attribute Color',loc:lModuleColor)
ThisWindow.Reset()
[END]
[END]
WHEN '?Sheet2'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
PROPERTY:END
DO GetColors
[END]
WHEN 'TabChanging'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
LABEL
PROPERTY:END
?      MESSAGE('we should not be here!')
       DO SaveColors      
[END]
[END]
WHEN '?ViewerFontLookupButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF FONTDIALOG('Choose Font',loc:StyleGroup.Font,loc:StyleGroup.FontSize,loc:StyleGroup.Fore,loc:StyleGroup.FontStyle,0)
   ThisWindow.Reset()
END
[END]
[END]
WHEN '?ViewerForeColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Fore Color',loc:StyleGroup.Fore)
ThisWindow.Reset()
[END]
[END]
WHEN '?ViewerBackColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
COLORDIALOG('Back Color',loc:StyleGroup.Back)
ThisWindow.Reset()
[END]
[END]
WHEN '?loc:StyleGroup:CaseOpt'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?ResetButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE MESSAGE('What defaults do you want to apply?','Apply Defaults',ICON:QUESTION, |
             '&Font|&Background|&All|Cancel',4)
OF 1
   loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1] = loc:StyleGroup
   LOOP I = 2 TO SCE_CLW_LAST
      loc:ViewerStyles.StyleGroup[I].Font = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].Font
      loc:ViewerStyles.StyleGroup[I].FontSize = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].FontSize
      loc:ViewerStyles.StyleGroup[I].FontStyle = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].FontStyle
      loc:ViewerStyles.StyleGroup[I].Bold = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].Bold
      loc:ViewerStyles.StyleGroup[I].Italic = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].Italic
      loc:ViewerStyles.StyleGroup[I].Underline = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].Underline
   END
OF 2
   loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1] = loc:StyleGroup
   LOOP I = 2 TO SCE_CLW_LAST
      loc:ViewerStyles.StyleGroup[I].Back = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1].Back
   END
OF 3
   loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1] = loc:StyleGroup
   LOOP I = 2 TO SCE_CLW_LAST
      loc:ViewerStyles.StyleGroup[I] = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT+1]
   END
OF 4
END
[END]
[END]
WHEN '?ClarionEditorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF glo:bClarionVersion < CWVERSION_C70
   CASE MESSAGE('What Clarion Editor Colors do you want to load?','Clarion Editor',ICON:QUESTION, |
                '&Current|&Default|Cancel',3)
   OF 1
      DO SaveColors
      srcGetCedtColors(loc:ViewerStyles,FALSE)
      DO GetColors
      SELF.Reset()
   OF 2
      DO SaveColors
      srcGetCedtColors(loc:ViewerStyles,TRUE)
      DO GetColors
      SELF.Reset()
   OF 3
   END
ELSE
   CASE MESSAGE('What Clarion Editor Colors do you want to load?','Clarion Editor',ICON:QUESTION, |
                '&Current|Cancel',2)
   OF 1
      DO SaveColors
      srcGetCedtColors(loc:ViewerStyles,FALSE)
      DO GetColors
      SELF.Reset()
   OF 2
   END
END
[END]
[END]
WHEN '?TreeList'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
DO SaveColors
OptionQ.Icon = 1
PUT(OptionQ)
GET(OptionQ,CHOICE(?TreeList))
SELECT(OptionQ.Feq)
CASE ABS(OptionQ.Level)
OF 1
  Heading1 = OptionQ.szText
  IF Heading1 = 'Viewer' AND OptionQ.Level = 1
     J = RECORDS(OptionQ)
     LOOP I = CHOICE(?TreeList)+1 TO J
       GET(OptionQ,I)
       IF OptionQ.szText = Heading2
          BREAK
       END
     END
     IF I > J
        I = 1
        GET(OptionQ,I)
     END
     ?TreeList{PROP:Selected} = I
  END
OF 2
  Heading1 = 'Viewer'
  Heading2 = OptionQ.szText
END

IF OptionQ.Level > 0
   OptionQ.Icon = 2
   PUT(OptionQ)
END

IF ?Viewer:Tab{PROP:VISIBLE}
   ?Heading2Box{PROP:Hide} = FALSE
   ?Heading2{PROP:Hide} = FALSE
ELSE
   ?Heading2Box{PROP:Hide} = TRUE
   ?Heading2{PROP:Hide} = TRUE
END
SELECT(?TreeList)
[END]
WHEN 'Expanded'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
OptionQ.Icon = 1
PUT(OptionQ)
MouseDownRow = ?TreeList{PROPLIST:MouseDownRow}
GET(OptionQ,MouseDownRow)
OptionQ.Level = 1
OptionQ.Icon = 2
PUT(OptionQ)
J = RECORDS(OptionQ)
LOOP I = 1 TO J
  GET(OptionQ,I)
  IF OptionQ.szText = Heading2
     BREAK
  END
END
IF I > J
   I = 1
   GET(OptionQ,I)
END
?TreeList{PROP:Selected} = I
POST(EVENT:NewSelection,?TreeList)
[END]
WHEN 'Contracted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
OptionQ.Icon = 1
PUT(OptionQ)
MouseDownRow = ?TreeList{PROPLIST:MouseDownRow}
GET(OptionQ,MouseDownRow)
OptionQ.Level = -1
OptionQ.Icon = 1
PUT(OptionQ)
[END]
[END]
WHEN '?loc:Tiled1'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?loc:Tiled2'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?SelectedForeColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
COLORDIALOG('Selected Back Color',loc:lSelectedFore)
ThisWindow.Reset()
[END]
[END]
WHEN '?tplTemplatesButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
winTemplateFiles(tplTemplateQ,'Wrapper Generator Templates')
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
loc:build           CSTRING(5)
loc:Selection       BYTE
loc:Selections      BYTE
loc:CWVersions      CSTRING(256)
loc:szSection       CSTRING(32)
loc:szFileName      CSTRING(261)
loc:szXMLFileName   CSTRING(261)
cc                  LONG
I                   LONG
J                   LONG
[END]
[END]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
I           LONG
J           LONG
msgButton   LONG
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
I              LONG,AUTO
J              LONG,AUTO
MouseDownRow   LONG,AUTO
[END]
[END]
WHEN 'TakeNewSelection'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
GetColors   ROUTINE
  CASE ?Sheet2{PROP:ChoiceFeq}
  OF ?DefaultTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT + 1]
  OF ?LabelTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_LABEL + 1]
  OF ?CommentTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_COMMENT + 1]
  OF ?StringTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_STRING + 1]
  OF ?IdentifierTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_USER_IDENTIFIER + 1]
  OF ?IntegerTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_INTEGER_CONSTANT + 1]
  OF ?RealTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_REAL_CONSTANT + 1]
  OF ?PictureTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_PICTURE_STRING + 1]
  OF ?KeywordTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_KEYWORD + 1]
  OF ?CompilerTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_COMPILER_DIRECTIVE + 1]
  OF ?RuntimeTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_RUNTIME_EXPRESSIONS + 1]
  OF ?BuiltInTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_BUILTIN_PROCEDURES_FUNCTION + 1]
  OF ?StructureTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_STRUCTURE_DATA_TYPE + 1]
  OF ?AttributeTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_ATTRIBUTE + 1]
  OF ?EquateTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_STANDARD_EQUATE + 1]
  OF ?ErrorTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_ERROR + 1]
  OF ?DeprecatedTab
     loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_DEPRECATED + 1]
  END
  !ThisWindow.Reset()
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SaveColors  ROUTINE
  CASE ?Sheet2{PROP:ChoiceFeq}
  OF ?DefaultTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT + 1] = loc:StyleGroup
  OF ?LabelTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_LABEL + 1] = loc:StyleGroup
  OF ?CommentTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_COMMENT + 1] = loc:StyleGroup
  OF ?StringTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_STRING + 1] = loc:StyleGroup
  OF ?IdentifierTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_USER_IDENTIFIER + 1] = loc:StyleGroup
  OF ?IntegerTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_INTEGER_CONSTANT + 1] = loc:StyleGroup
  OF ?RealTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_REAL_CONSTANT + 1] = loc:StyleGroup
  OF ?PictureTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_PICTURE_STRING + 1] = loc:StyleGroup
  OF ?KeywordTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_KEYWORD + 1] = loc:StyleGroup
  OF ?CompilerTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_COMPILER_DIRECTIVE + 1] = loc:StyleGroup
  OF ?RuntimeTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_RUNTIME_EXPRESSIONS + 1] = loc:StyleGroup
  OF ?BuiltInTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_BUILTIN_PROCEDURES_FUNCTION + 1] = loc:StyleGroup
  OF ?StructureTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_STRUCTURE_DATA_TYPE + 1] = loc:StyleGroup
  OF ?AttributeTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_ATTRIBUTE + 1] = loc:StyleGroup
  OF ?EquateTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_STANDARD_EQUATE + 1] = loc:StyleGroup
  OF ?ErrorTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_ERROR + 1] = loc:StyleGroup
  OF ?DeprecatedTab
     loc:ViewerStyles.StyleGroup[SCE_CLW_DEPRECATED + 1] = loc:StyleGroup
  END
  EXIT
[END]
EMBED %ListboxStyleAfterDefine
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?TreeList{PROPSTYLE:TextColor,STYLE:NORMAL} = COLOR:BLACK
?TreeList{PROPSTYLE:BackColor,STYLE:NORMAL} = COLOR:WHITE
?TreeList{PROPSTYLE:TextSelected,STYLE:NORMAL} = glo:lSelectedFore    !COLOR:HIGHLIGHTTEXT  !COLOR:BLACK
?TreeList{PROPSTYLE:BackSelected,STYLE:NORMAL} = glo:lSelectedBack
?TreeList{PROPSTYLE:FontName,STYLE:NORMAL} = glo:Typeface
?TreeList{PROPSTYLE:FontSize,STYLE:NORMAL} = glo:FontSize
?TreeList{PROPSTYLE:FontStyle,STYLE:NORMAL} = glo:FontStyle
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
subFolder            CSTRING(5)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 9
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Edit_Options.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
%DisableMinimizeBox LONG  (0)
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 1
[INSTANCE]
INSTANCE 2
[ADDITION]
NAME ABC DOSFileLookup
[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select Wallpaper 1')
%DOSFileField FIELD  (loc:szWallpaper1)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Windows Bitmaps (*.bmp)')
%DOSMask DEFAULT  ('*.bmp')
%DOSMoreMasks MULTI LONG  (1, 5, 2, 4, 3, 6)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 6
WHEN  (1) ('GIF files')
WHEN  (2) ('JPEG files (*.jpg)')
WHEN  (3) ('Windows Metafiles (*.wmf)')
WHEN  (4) ('PCX files')
WHEN  (5) ('Icons (*.ico)')
WHEN  (6) ('All files')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 6
WHEN  (1) ('*.GIF')
WHEN  (2) ('*.JPG')
WHEN  (3) ('*.WMF')
WHEN  (4) ('*.PCX')
WHEN  (5) ('*.ICO')
WHEN  (6) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Wallpaper1FileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 5
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select Wallpaper 2')
%DOSFileField FIELD  (loc:szWallpaper2)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Windows Bitmaps (*.bmp)')
%DOSMask DEFAULT  ('*.BMP')
%DOSMoreMasks MULTI LONG  (1, 4, 2, 5, 3, 6)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 6
WHEN  (1) ('GIF files')
WHEN  (2) ('JPEG files (*.jpg)')
WHEN  (3) ('Windows Metafiles (*.wmf)')
WHEN  (4) ('Icons (*.ico)')
WHEN  (5) ('PCX files')
WHEN  (6) ('All files')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 6
WHEN  (1) ('*.GIF')
WHEN  (2) ('*.JPG')
WHEN  (3) ('*.WMF')
WHEN  (4) ('*.ico')
WHEN  (5) ('*.pcx')
WHEN  (6) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Wallpaper2FileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 7
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select Editor')
%DOSFileField FIELD  (loc:szEditorCommand)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Programs (*.exe)')
%DOSMask DEFAULT  ('*.exe')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('FileLookup7')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 10
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML StyleSheet')
%DOSFileField FIELD  (loc:szXmlStyleSheet)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('abcview.xsl')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('All Files')
%DOSMask DEFAULT  ('*.*')
%DOSMoreMasks MULTI LONG  ()
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 0

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 0

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('FileLookup10')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 6
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%UseBalloonTips LONG  (1)
%ToolTipControls MULTI LONG  (3, 39, 40, 4, 5, 6, 7, 8, 9, 10, 50, 38, 11, 12, 13, |
  18, 19, 20, 14, 15, 23, 16, 17, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, |
  47, 48, 49, 51)
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 39
WHEN  (3) ('?AdditionalFilesButton')
WHEN  (4) ('?FontLookupButton')
WHEN  (5) ('?loc:Background')
WHEN  (6) ('?Color1:Lookup')
WHEN  (7) ('?Color2:Lookup')
WHEN  (8) ('?Wallpaper1:LookupFile')
WHEN  (9) ('?Wallpaper2:LookupFile')
WHEN  (10) ('?SelectedBackColorButton')
WHEN  (11) ('?PrivateColorButton')
WHEN  (12) ('?ProtectedColorButton')
WHEN  (13) ('?VirtualColorButton')
WHEN  (14) ('?loc:szEditorCommand')
WHEN  (15) ('?loc:bShowTips')
WHEN  (16) ('?OKButton')
WHEN  (17) ('?CancelButton')
WHEN  (18) ('?NoteColor:Button')
WHEN  (19) ('?HighlightColor1:Button')
WHEN  (20) ('?HighlightColor2:Button')
WHEN  (23) ('?loc:bUseAssociation')
WHEN  (31) ('?loc:bForceEdit:Radio1')
WHEN  (32) ('?loc:bForceEdit:Radio2')
WHEN  (34) ('?loc:bAutoExpand')
WHEN  (35) ('?HyperlinkColorButton')
WHEN  (36) ('?EditorList')
WHEN  (37) ('?loc:bUseHTMLHelp')
WHEN  (38) ('?ModuleColorButton')
WHEN  (39) ('?loc:szCompactRedFilePath')
WHEN  (40) ('?LookupRedPath:Button')
WHEN  (41) ('?loc:szXmlStyleSheet')
WHEN  (42) ('?XMLStyleSheet:Lookup')
WHEN  (43) ('?FavoritesMenuButton')
WHEN  (44) ('?incTemplatesButton')
WHEN  (45) ('?clwTemplatesButton')
WHEN  (46) ('?ViewerFontLookupButton')
WHEN  (47) ('?ViewerForeColorButton')
WHEN  (48) ('?ViewerBackColorButton')
WHEN  (49) ('?loc:bShowSparseTrees')
WHEN  (50) ('?SelectedForeColorButton')
WHEN  (51) ('?loc:bMaxMRU')

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 39
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)
WHEN  (13) (0)
WHEN  (14) (0)
WHEN  (15) (1)
WHEN  (16) (0)
WHEN  (17) (0)
WHEN  (18) (0)
WHEN  (19) (1)
WHEN  (20) (1)
WHEN  (23) (0)
WHEN  (31) (0)
WHEN  (32) (0)
WHEN  (34) (0)
WHEN  (35) (0)
WHEN  (36) (1)
WHEN  (37) (1)
WHEN  (38) (0)
WHEN  (39) (0)
WHEN  (40) (0)
WHEN  (41) (0)
WHEN  (42) (0)
WHEN  (43) (0)
WHEN  (44) (0)
WHEN  (45) (0)
WHEN  (46) (0)
WHEN  (47) (0)
WHEN  (48) (0)
WHEN  (49) (1)
WHEN  (50) (1)
WHEN  (51) (1)

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 39
WHEN  (3) ('Use Tip Text')
WHEN  (4) ('Use Tip Text')
WHEN  (5) ('Use Tip Text')
WHEN  (6) ('Use Tip Text')
WHEN  (7) ('Use Tip Text')
WHEN  (8) ('Use Tip Text')
WHEN  (9) ('Use Tip Text')
WHEN  (10) ('Use Tip Text')
WHEN  (11) ('Use Tip Text')
WHEN  (12) ('Use Tip Text')
WHEN  (13) ('Use Tip Text')
WHEN  (14) ('Use Tip Text')
WHEN  (15) ('Use Tip Text')
WHEN  (16) ('Use Tip Text')
WHEN  (17) ('Use Tip Text')
WHEN  (18) ('Use Tip Text')
WHEN  (19) ('Use Tip Text')
WHEN  (20) ('Use Tip Text')
WHEN  (23) ('Use Tip Text')
WHEN  (31) ('Use Tip Text')
WHEN  (32) ('Use Tip Text')
WHEN  (34) ('Use Tip Text')
WHEN  (35) ('Use Tip Text')
WHEN  (36) ('Use Tip Text')
WHEN  (37) ('Use Tip Text')
WHEN  (38) ('Use Tip Text')
WHEN  (39) ('Use Tip Text')
WHEN  (40) ('Use Tip Text')
WHEN  (41) ('Use Tip Text')
WHEN  (42) ('Use Tip Text')
WHEN  (43) ('Use Tip Text')
WHEN  (44) ('Use Tip Text')
WHEN  (45) ('Use Tip Text')
WHEN  (46) ('Use Tip Text')
WHEN  (47) ('Use Tip Text')
WHEN  (48) ('Use Tip Text')
WHEN  (49) ('Use Tip Text')
WHEN  (50) ('Use Tip Text')
WHEN  (51) ('Use Tip Text')

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 39
WHEN  (3) ('FilesOpened')
WHEN  (4) ('FilesOpened')
WHEN  (5) ('FilesOpened')
WHEN  (6) ('FilesOpened')
WHEN  (7) ('FilesOpened')
WHEN  (8) ('FilesOpened')
WHEN  (9) ('FilesOpened')
WHEN  (10) ('FilesOpened')
WHEN  (11) ('FilesOpened')
WHEN  (12) ('FilesOpened')
WHEN  (13) ('FilesOpened')
WHEN  (14) ('FilesOpened')
WHEN  (15) ('FilesOpened')
WHEN  (16) ('FilesOpened')
WHEN  (17) ('FilesOpened')
WHEN  (18) ('FilesOpened')
WHEN  (19) ('FilesOpened')
WHEN  (20) ('FilesOpened')
WHEN  (23) ('FilesOpened')
WHEN  (31) ('FilesOpened')
WHEN  (32) ('FilesOpened')
WHEN  (34) ('FilesOpened')
WHEN  (35) ('FilesOpened')
WHEN  (36) ('FilesOpened')
WHEN  (37) ('FilesOpened')
WHEN  (38) ('FilesOpened')
WHEN  (39) ('FilesOpened')
WHEN  (40) ('FilesOpened')
WHEN  (41) ('FilesOpened')
WHEN  (42) ('FilesOpened')
WHEN  (43) ('FilesOpened')
WHEN  (44) ('FilesOpened')
WHEN  (45) ('FilesOpened')
WHEN  (46) ('FilesOpened')
WHEN  (47) ('FilesOpened')
WHEN  (48) ('FilesOpened')
WHEN  (49) ('FilesOpened')
WHEN  (50) ('FilesOpened')
WHEN  (51) ('FilesOpened')

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 39
WHEN  (3) ('szRoot')
WHEN  (4) ('szRoot')
WHEN  (5) ('szRoot')
WHEN  (6) ('szRoot')
WHEN  (7) ('szRoot')
WHEN  (8) ('szRoot')
WHEN  (9) ('szRoot')
WHEN  (10) ('szRoot')
WHEN  (11) ('szRoot')
WHEN  (12) ('szRoot')
WHEN  (13) ('szRoot')
WHEN  (14) ('szRoot')
WHEN  (15) ('szRoot')
WHEN  (16) ('szRoot')
WHEN  (17) ('szRoot')
WHEN  (18) ('szRoot')
WHEN  (19) ('szRoot')
WHEN  (20) ('szRoot')
WHEN  (23) ('szRoot')
WHEN  (31) ('szRoot')
WHEN  (32) ('szRoot')
WHEN  (34) ('glo:hwnd_main')
WHEN  (35) ('glo:hwnd_main')
WHEN  (36) ('glo:hwnd_main')
WHEN  (37) ('glo:hwnd_main')
WHEN  (38) ('glo:hwnd_main')
WHEN  (39) ('glo:hwnd_main')
WHEN  (40) ('glo:hwnd_main')
WHEN  (41) ('glo:hwnd_main')
WHEN  (42) ('glo:hwnd_main')
WHEN  (43) ('glo:hwnd_main')
WHEN  (44) ('glo:hwnd_main')
WHEN  (45) ('glo:hwnd_main')
WHEN  (46) ('glo:hwnd_main')
WHEN  (47) ('glo:hwnd_main')
WHEN  (48) ('glo:hwnd_main')
WHEN  (49) ('glo:hwnd_main')
WHEN  (50) ('glo:hwnd_main')
WHEN  (51) ('glo:hwnd_main')

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 39
WHEN  (3) (1)
WHEN  (4) (1)
WHEN  (5) (1)
WHEN  (6) (1)
WHEN  (7) (1)
WHEN  (8) (1)
WHEN  (9) (1)
WHEN  (10) (1)
WHEN  (11) (1)
WHEN  (12) (1)
WHEN  (13) (1)
WHEN  (14) (1)
WHEN  (15) (1)
WHEN  (16) (1)
WHEN  (17) (1)
WHEN  (18) (1)
WHEN  (19) (1)
WHEN  (20) (1)
WHEN  (23) (1)
WHEN  (31) (1)
WHEN  (32) (1)
WHEN  (34) (1)
WHEN  (35) (1)
WHEN  (36) (1)
WHEN  (37) (1)
WHEN  (38) (1)
WHEN  (39) (1)
WHEN  (40) (1)
WHEN  (41) (1)
WHEN  (42) (1)
WHEN  (43) (1)
WHEN  (44) (1)
WHEN  (45) (1)
WHEN  (46) (1)
WHEN  (47) (1)
WHEN  (48) (1)
WHEN  (49) (1)
WHEN  (50) (1)
WHEN  (51) (1)

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 39
WHEN  (3) ('?AdditionalFilesButton')
WHEN  (4) ('?FontLookupButton')
WHEN  (5) ('?loc:Background')
WHEN  (6) ('?Color1:Lookup')
WHEN  (7) ('?Color2:Lookup')
WHEN  (8) ('?Wallpaper1:LookupFile')
WHEN  (9) ('?Wallpaper2:LookupFile')
WHEN  (10) ('?SelectedBackColorButton')
WHEN  (11) ('?PrivateColorButton')
WHEN  (12) ('?ProtectedColorButton')
WHEN  (13) ('?VirtualColorButton')
WHEN  (14) ('?loc:szEditorCommand')
WHEN  (15) ('?loc:bShowTips')
WHEN  (16) ('?OKButton')
WHEN  (17) ('?CancelButton')
WHEN  (18) ('?NoteColor:Button')
WHEN  (19) ('?HighlightColor1:Button')
WHEN  (20) ('?HighlightColor2:Button')
WHEN  (23) ('?loc:bUseAssociation')
WHEN  (31) ('?loc:bForceEdit:Radio1')
WHEN  (32) ('?loc:bForceEdit:Radio2')
WHEN  (34) ('?loc:bAutoExpand')
WHEN  (35) ('?HyperlinkColorButton')
WHEN  (36) ('?EditorList')
WHEN  (37) ('?loc:bUseHTMLHelp')
WHEN  (38) ('?ModuleColorButton')
WHEN  (39) ('?loc:szCompactRedFilePath')
WHEN  (40) ('?LookupRedPath:Button')
WHEN  (41) ('?loc:szXmlStyleSheet')
WHEN  (42) ('?XMLStyleSheet:Lookup')
WHEN  (43) ('?FavoritesMenuButton')
WHEN  (44) ('?incTemplatesButton')
WHEN  (45) ('?clwTemplatesButton')
WHEN  (46) ('?ViewerFontLookupButton')
WHEN  (47) ('?ViewerForeColorButton')
WHEN  (48) ('?ViewerBackColorButton')
WHEN  (49) ('?loc:bShowSparseTrees')
WHEN  (50) ('?SelectedForeColorButton')
WHEN  (51) ('?loc:bMaxMRU')

%DontApply LONG  (0)
%ApplyAsRegularTip LONG  (0)
%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 11
PARENT 6
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 8
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME KCR KCR_SubClassWindow
[INSTANCE]
INSTANCE 12
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?loc:szEditorCommand')
[INSTANCE]
INSTANCE 14
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?TreeList')
[ADDITION]
NAME KCR KCR_PaintWindowFrame
[INSTANCE]
INSTANCE 15
PARENT 14
[PROMPTS]
%TplName DEFAULT  ('KCR_PaintWindowFrame (Devuna)')
%TplDescription DEFAULT  ('Paint Window Frame')
%FrameColor LONG  (12164479)
[CALLS]
srcGetCedtColors
srcGetColorString
srcReadClarionProps
winAdditionalFiles
winFavoritesMenu
winTemplateFiles
[WINDOW]
Window  WINDOW('Edit Options'),AT(,,351,200),DOUBLE,TILED,CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          LIST,AT(4,5,100,190),USE(?TreeList),FONT(,8,COLOR:Black,,CHARSET:ANSI),VSCROLL,COLOR(COLOR:White, |
            COLOR:HIGHLIGHTTEXT,COLOR:HIGHLIGHT),FLAT,FORMAT('68L(2)IYT@s31@'),FROM(OptionQ), |
            #FIELDS(Tree:szText),#ORIG(?List3),#ORDINAL(1)
          STRING(@s32),AT(117,9),USE(Heading1),FONT(,,COLOR:Black,FONT:bold,CHARSET:ANSI), |
            TRN,#ORIG(?String6),#ORDINAL(2)
          STRING(@s32),AT(127,31),USE(Heading2),FONT(,,COLOR:Black,FONT:bold,CHARSET:ANSI), |
            HIDE,TRN,#ORIG(?String6),#ORDINAL(3)
          SHEET,AT(109,4,238,174),USE(?Sheet1),COLOR(COLOR:BTNFACE),WIZARD,#ORIG(?Sheet1), |
            #ORDINAL(4)
            TAB('Clarion'),USE(?Clarion:Tab),#ORIG(?Tab4),#ORDINAL(5)
              GROUP,AT(113,18,230,156),USE(?ClarionGroup),BOXED,#ORIG(?Group4),#ORDINAL(6)
                GROUP('Include Standard Equate Files'),AT(119,23,218,57),USE(?StandardEquateGroup), |
                  BOXED,#ORIG(?Group7),#ORDINAL(7)
                  CHECK(' EQUATES.CLW'),AT(124,34),USE(loc:bEquates),#ORIG(loc:bEquates),#ORDINAL(8)
                  CHECK(' KEYCODES.CLW'),AT(124,55),USE(loc:bKeycodes),#ORIG(loc:bKeycodes), |
                    #ORDINAL(9)
                  CHECK(' ERRORS.CLW'),AT(124,44),USE(loc:bErrors),#ORIG(loc:bErrors),#ORDINAL(10)
                  CHECK(' TPLEQU.CLW'),AT(215,44),USE(loc:bTplEqu),#ORIG(loc:bTplEqu),#ORDINAL(11)
                  CHECK(' PROPERTY.CLW'),AT(215,34),USE(loc:bProperty),#ORIG(loc:bProperty), |
                    #ORDINAL(12)
                  CHECK(' WINEQU.CLW'),AT(215,66),USE(loc:bWinEqu),#ORIG(loc:bWinEqu),#ORDINAL(13)
                  CHECK(' PRNPROP.CLW'),AT(124,66),USE(loc:bPrnProp),#ORIG(loc:bPrnProp),#ORDINAL(14)
                  CHECK(' WINDOWS.INC'),AT(215,55),USE(loc:bWindows),#ORIG(loc:bWindows),#ORDINAL(15)
                END
                BUTTON('Additional &Files...'),AT(119,84,68,11),USE(?AdditionalFilesButton), |
                  TIP('Select Additional Files for Processing'),#ORIG(?Button7),#ORDINAL(16)
                PANEL,AT(113,100,230,1),USE(?Panel1),BEVEL(0,0,9),#ORIG(?Panel1),#ORDINAL(17)
                PROMPT('&Redirection File:'),AT(119,108),USE(?szRedFilePath:Prompt),TRN,#ORDINAL(18)
                ENTRY(@s42),AT(185,108,138,10),USE(loc:szCompactRedFilePath),COLOR(COLOR:White), |
                  DISABLE,READONLY,SKIP,#ORDINAL(19)
                BUTTON('...'),AT(327,108,10,10),USE(?LookupRedPath:Button),TIP('Select the' & |
                  ' Redirection file to use.'),#ORDINAL(20)
              END
            END
            TAB('Application'),USE(?Application:Tab),#ORIG(?Tab1),#ORDINAL(21)
              GROUP,AT(113,18,230,156),USE(?ApplicationGroup),BOXED,#ORIG(?Group3),#ORDINAL(22)
                PROMPT('&Font:'),AT(119,26),USE(?loc:szFont:Prompt),TRN,#LINK(?loc:szFont), |
                  #ORIG(?loc:szFont:Prompt),#ORDINAL(23)
                ENTRY(@s255),AT(183,26,140,10),USE(loc:szFont),COLOR(COLOR:White),DISABLE, |
                  READONLY,SKIP,#LINK(?loc:szFont:Prompt),#ORIG(loc:szFont),#ORDINAL(24)
                BUTTON('...'),AT(327,26,11,10),USE(?FontLookupButton),TIP('Select Appli' & |
                  'cation Font'),#ORIG(?Button10),#ORDINAL(25)
                PROMPT('&Background:'),AT(119,40),USE(?glo:Background:Prompt),TRN,#LINK(?loc:Background), |
                  #ORIG(?glo:Background:Prompt),#ORDINAL(26)
                LIST,AT(183,40,,10),USE(loc:Background),COLOR(COLOR:White),DROP(5),FROM('Color|#1|W' & |
                  'allpaper|#2|None|#3'),TIP('Choose Application Background Type'),#LINK(?glo:Background:Prompt), |
                  #ORIG(glo:Background),#ORDINAL(27)
                GROUP,AT(117,54,222,26),USE(?ColorGroup),HIDE,#ORDINAL(28)
                  PROMPT('Color &1:'),AT(119,54),USE(?loc:Color1:Prompt),#LINK(?loc:sColor1), |
                    #ORIG(?loc:Color1:Prompt),#ORDINAL(29)
                  BOX,AT(183,54,11,10),USE(?loc:sColor1Box),COLOR(00B99D7Fh),FILL(00C08080h), |
                    LINEWIDTH(1),ROUND,#ORIG(?Box8),#ORDINAL(30)
                  ENTRY(@s30),AT(197,54,126,10),USE(loc:sColor1),COLOR(COLOR:White),DISABLE, |
                    READONLY,SKIP,#LINK(?loc:Color1:Prompt),#ORIG(loc:Color1),#ORDINAL(31)
                  BUTTON('...'),AT(327,54,11,10),USE(?Color1:Lookup),TIP('Select Main W' & |
                    'indow Background Color'),#ORIG(?Color1:Lookup),#ORDINAL(32)
                  PROMPT('Color &2:'),AT(119,68),USE(?loc:Color2:Prompt),#LINK(?loc:sColor2), |
                    #ORIG(?loc:Color2:Prompt),#ORDINAL(33)
                  BOX,AT(183,68,11,10),USE(?loc:sColor2Box),COLOR(00B99D7Fh),FILL(COLOR:Gray), |
                    LINEWIDTH(1),ROUND,#ORIG(?Box8),#ORDINAL(34)
                  ENTRY(@s30),AT(197,68,126,10),USE(loc:sColor2),COLOR(COLOR:White),DISABLE, |
                    READONLY,SKIP,#LINK(?loc:Color2:Prompt),#ORIG(loc:Color2),#ORDINAL(35)
                  BUTTON('...'),AT(327,68,11,10),USE(?Color2:Lookup),TIP('Select Other ' & |
                    'Window Background Color'),#ORIG(?Color2:Lookup),#ORDINAL(36)
                END
                GROUP,AT(117,54,222,26),USE(?WallpaperGroup),HIDE,#ORDINAL(37)
                  PROMPT('Image1:'),AT(119,54),USE(?loc:Background1:Prompt),#LINK(?loc:szWallpaper1), |
                    #ORIG(?loc:szWallpaper1:Prompt),#ORDINAL(38)
                  CHECK(' Tiled'),AT(154,54,27,10),USE(loc:Tiled1),#ORIG(loc:Tiled1),#ORDINAL(39)
                  ENTRY(@s255),AT(183,54,140,10),USE(loc:szWallpaper1),COLOR(COLOR:White), |
                    #LINK(?loc:Background1:Prompt),#ORIG(loc:szWallpaper1),#ORDINAL(40)
                  BUTTON('...'),AT(327,54,11,10),USE(?Wallpaper1:LookupFile),TIP('Select Mai' & |
                    'n Window Wallpaper'),#ORIG(?LookupFile),#SEQ(3),#ORDINAL(41)
                  PROMPT('Image2:'),AT(119,68),USE(?loc:szBackground2:Prompt),#LINK(?loc:szWallpaper2), |
                    #ORIG(?loc:szWallpaper2:Prompt),#ORDINAL(42)
                  CHECK(' Tiled'),AT(154,68,27,10),USE(loc:Tiled2),#ORIG(loc:Tiled2),#ORDINAL(43)
                  ENTRY(@s255),AT(183,68,140,10),USE(loc:szWallpaper2),COLOR(COLOR:White), |
                    #LINK(?loc:szBackground2:Prompt),#ORIG(loc:szWallpaper2),#ORDINAL(44)
                  BUTTON('...'),AT(327,68,11,10),USE(?Wallpaper2:LookupFile),TIP('Select Oth' & |
                    'er Window Wallpaper'),#ORIG(?LookupFile),#SEQ(5),#ORDINAL(45)
                END
                PANEL,AT(113,81,230,1),USE(?Panel2),BEVEL(0,0,9),#ORIG(?Panel2),#ORDINAL(46)
                PROMPT('Dou&bleClick Action:'),AT(119,83),USE(?loc:bForceEdit:Prompt),TRN, |
                  #ORIG(?Prompt17),#ORDINAL(47)
                OPTION,AT(192,82,146,10),USE(loc:bForceEdit),#ORIG(?Option2),#ORDINAL(48)
                  RADIO(' &View'),AT(197,83,47,10),USE(?loc:bForceEdit:Radio1),TIP('Start the ' & |
                    'Ascii Fileviewer when double clicking on tree'),VALUE('0'),#ORIG(?loc:bForceEdit:Radio1), |
                    #ORDINAL(49)
                  RADIO(' &Edit'),AT(245,83,47,10),USE(?loc:bForceEdit:Radio2),TIP('Start the ' & |
                    'Editor when double clicking on tree'),VALUE('1'),#ORIG(?loc:bForceEdit:Radio2), |
                    #ORDINAL(50)
                  RADIO(' &Disabled'),AT(293,83),USE(?loc:bForceEdit:Radio3),TIP('Ignore dou' & |
                    'ble clicking on the tree'),VALUE('2'),#ORIG(?loc:bForceEdit:Radio3),#ORDINAL(51)
                END
                PANEL,AT(113,94,230,1),USE(?Panel3),BEVEL(0,0,9),#ORIG(?Panel3),#ORDINAL(52)
                CHECK(' Enable Balloon &Tips'),AT(119,96),USE(loc:bShowTips),TIP('Check to e' & |
                  'nable Balloon ToolTips (requires application restart)'),#ORIG(loc:bShowTips), |
                  #ORDINAL(53)
                CHECK(' &Auto Expand'),AT(119,108),USE(loc:bAutoExpand),MSG('Automatica' & |
                  'lly expand the selected object.'),TIP('Automatically expand the sele' & |
                  'cted object.'),#ORIG(loc:bAutoExpand),#ORDINAL(54)
                CHECK(' &Show Sparse Trees'),AT(212,96),USE(loc:bShowSparseTrees),MSG('Show direc' & |
                  't lineage if set otherwise show the whole family'),TIP('Show direct ' & |
                  'lineage in tree if set <0DH,0AH>otherwise show the whole family'),#ORIG(glo:bShowSparseTrees), |
                  #ORDINAL(55)
                CHECK(' Use &HTML Help'),AT(212,108),USE(loc:bUseHTMLHelp),TIP('Check to u' & |
                  'se HTML Help<0DH,0AH>Uncheck to use Windows Help'),#ORIG(glo:bUseHTMLHelp), |
                  #ORDINAL(56)
                PANEL,AT(113,120,230,1),USE(?Panel3:2),BEVEL(0,0,9),#ORIG(?Panel3),#ORDINAL(57)
                PROMPT('&MRU Maximum:'),AT(119,124),USE(?loc:bMaxMRU:Prompt),#ORIG(?Prompt25), |
                  #ORDINAL(58)
                SPIN(@n02),AT(183,124,20,10),USE(loc:bMaxMRU),RIGHT,COLOR(COLOR:White),RANGE(0, |
                  99),STEP(1),TIP('Maximum Number of Records for the<0DH,0AH>Recent Fil' & |
                  'e list on the File menu.'),#ORIG(?Spin1),#ORDINAL(59)
                PROMPT('&Category Drop Count:'),AT(223,124),USE(?loc:CategoryDropCount:Prompt), |
                  #ORDINAL(60)
                SPIN(@n02),AT(303,124,20,10),USE(loc:CategoryDropCount),RIGHT,COLOR(COLOR:White), |
                  RANGE(0,99),STEP(1),TIP('Number of elements displayed in the<0DH,0AH>' & |
                  'Category drop list on the Main window.'),#ORDINAL(61)
                OPTION,AT(192,154,146,10),USE(loc:Layout),#ORIG(?Option3),#ORDINAL(62)
                  RADIO(' Classic'),AT(197,154),USE(?loc:Layout:Radio1),VALUE('0'),#ORIG(?Option3:Radio1), |
                    #ORDINAL(63)
                  RADIO(' Vertical'),AT(245,154),USE(?loc:Layout:Radio2),VALUE('1'),#ORIG(?Option3:Radio2), |
                    #ORDINAL(64)
                END
                PROMPT('&Layout:'),AT(119,154),USE(?loc:Layout:Prompt),#ORIG(?Prompt26),#ORDINAL(65)
                PROMPT('XML StyleSheet:'),AT(119,140),USE(?loc:szXmlStyleSheet:Prompt),TRN, |
                  #ORIG(?loc:szBackground2:Prompt),#ORDINAL(66)
                ENTRY(@s255),AT(183,140,140,10),USE(loc:szXmlStyleSheet),COLOR(COLOR:White), |
                  DISABLE,READONLY,SKIP,#ORIG(loc:szWallpaper1),#ORDINAL(67)
                BUTTON('...'),AT(327,140,11,10),USE(?XMLStyleSheet:Lookup),TIP('Browse for' & |
                  ' an XML Style sheet.'),#ORIG(?LookupFile),#SEQ(10),#ORDINAL(68)
                BUTTON('Fa&vorites Menu...'),AT(109,182,76,14),USE(?FavoritesMenuButton),TIP('Press this' & |
                  ' button to maintain the Favorites Menu.'),#ORIG(?clwTemplatesButton),#ORDINAL(69)
              END
            END
            TAB('Color Preferences'),USE(?Color:Tab),#ORIG(?Tab2),#ORDINAL(70)
              GROUP,AT(113,18,230,156),USE(?ColorPreferencesGroup),BOXED,#ORIG(?Group1),#ORDINAL(71)
                PROMPT('&Selected Background:'),AT(119,28,,8),USE(?glo:lSelectedBack:Prompt), |
                  #ORIG(?glo:lSelectedBack:Prompt),#ORDINAL(72)
                BOX,AT(192,28,9,8),USE(?loc:sSelectedBackBox),COLOR(00B99D7Fh),FILL(COLOR:Black), |
                  LINEWIDTH(1),ROUND,#ORIG(?Box1),#ORDINAL(73)
                ENTRY(@s30),AT(204,28,120,8),USE(loc:sSelectedBack),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(glo:lSelectedBack),#ORDINAL(74)
                BUTTON('...'),AT(329,28,9,8),USE(?SelectedBackColorButton),TIP('Select Lis' & |
                  'tbox Selected Background Color'),#ORIG(?Button3),#ORDINAL(75)
                PROMPT('S&elected Foreground:'),AT(119,40,,8),USE(?glo:lSelectedFore:Prompt), |
                  #ORIG(?glo:lSelectedBack:Prompt),#ORDINAL(76)
                BOX,AT(192,40,9,8),USE(?loc:sSelectedForeBox),COLOR(00B99D7Fh),FILL(COLOR:White), |
                  LINEWIDTH(1),ROUND,#ORIG(?Box1),#ORDINAL(77)
                ENTRY(@s30),AT(204,40,120,8),USE(loc:sSelectedFore),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(loc:sSelectedFore),#ORDINAL(78)
                BUTTON('...'),AT(329,40,9,8),USE(?SelectedForeColorButton),TIP('Select Lis' & |
                  'tbox Selected Foreground Color'),#ORIG(?SelectedForeColorButton),#ORDINAL(79)
                PROMPT('&Module Color:'),AT(119,52,45,8),USE(?glo:lModuleColor:Prompt),#ORIG(?glo:lModuleColor:Prompt), |
                  #ORDINAL(80)
                BOX,AT(192,52,9,8),USE(?loc:sModuleColorBox),COLOR(00B99D7Fh),FILL(COLOR:Purple), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sModuleBox),#ORDINAL(81)
                ENTRY(@s30),AT(204,52,120,8),USE(loc:sModuleColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(glo:lModuleColor),#ORDINAL(82)
                BUTTON('...'),AT(329,52,9,8),USE(?ModuleColorButton),TIP('Select Color ' & |
                  'for Module Attribute'),#ORIG(?ModuleColorButton),#ORDINAL(83)
                PROMPT('&Private Color:'),AT(119,64,44,8),USE(?glo:lPrivateColor:Prompt),#ORIG(?glo:lPrivateColor:Prompt), |
                  #ORDINAL(84)
                BOX,AT(192,64,9,8),USE(?loc:sPrivateColorBox),COLOR(00B99D7Fh),FILL(COLOR:Red), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sSelectedBackBox),#ORDINAL(85)
                ENTRY(@s30),AT(204,64,120,8),USE(loc:sPrivateColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(glo:lPrivateColor),#ORDINAL(86)
                BUTTON('...'),AT(329,64,9,8),USE(?PrivateColorButton),TIP('Select Color' & |
                  ' for Private Attribute'),#ORIG(?Button4),#ORDINAL(87)
                PROMPT('P&rotected Color:'),AT(119,76,52,8),USE(?glo:lProtectedColor:Prompt), |
                  #ORIG(?glo:lProtectedColor:Prompt),#ORDINAL(88)
                BOX,AT(192,76,9,8),USE(?loc:sProtectedColorBox),COLOR(00B99D7Fh),FILL(COLOR:Maroon), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sSelectedBackBox:2),#ORDINAL(89)
                ENTRY(@s30),AT(204,76,120,8),USE(loc:sProtectedColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(glo:lProtectedColor),#ORDINAL(90)
                BUTTON('...'),AT(329,76,9,8),USE(?ProtectedColorButton),TIP('Select Col' & |
                  'or for Protected Attribute'),#ORIG(?Button5),#ORDINAL(91)
                PROMPT('&Virtual Color:'),AT(119,88,42,8),USE(?lVirtualColor:Prompt),#ORIG(?lVirtualColor:Prompt), |
                  #ORDINAL(92)
                BOX,AT(192,88,9,8),USE(?loc:sVirtualColorBox),COLOR(00B99D7Fh),FILL(COLOR:Fuchsia), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sSelectedBackBox:3),#ORDINAL(93)
                ENTRY(@s30),AT(204,88,120,8),USE(loc:sVirtualColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(lVirtualColor),#ORDINAL(94)
                BUTTON('...'),AT(329,88,9,8),USE(?VirtualColorButton),TIP('Select Color' & |
                  ' for Virtual Attribute'),#ORIG(?Button6),#ORDINAL(95)
                PROMPT('&Hyperlink Color:'),AT(119,100,52,8),USE(?lHyperlinkColor:Prompt:), |
                  #ORIG(?lVirtualColor:Prompt),#ORDINAL(96)
                BOX,AT(192,100,9,8),USE(?loc:sHyperlinkColorBox),COLOR(00B99D7Fh),FILL(COLOR:Lime), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sHyperlinkColorBox),#ORDINAL(97)
                ENTRY(@s30),AT(204,100,120,8),USE(loc:sHyperlinkColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(loc:sHyperlinkColor),#ORDINAL(98)
                BUTTON('...'),AT(329,100,9,8),USE(?HyperlinkColorButton),TIP('Select Col' & |
                  'or for Hyperlinks'),#ORIG(?HyperlinkColorButton),#ORDINAL(99)
                PROMPT('&Note Color:'),AT(119,112,36,8),USE(?lNoteColor:Prompt),#ORIG(?Prompt13), |
                  #ORDINAL(100)
                BOX,AT(192,112,9,8),USE(?loc:sNoteColorBox),COLOR(00B99D7Fh),FILL(COLOR:White), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sSelectedBackBox:4),#ORDINAL(101)
                ENTRY(@s30),AT(204,112,120,8),USE(loc:sNoteColor),COLOR(COLOR:White),DISABLE, |
                  SKIP,#ORIG(loc:sNoteColor),#ORDINAL(102)
                BUTTON('...'),AT(329,112,9,8),USE(?NoteColor:Button),TIP('Select Note Color'), |
                  #ORIG(?Button13),#ORDINAL(103)
                PROMPT('Highlight Color &1:'),AT(119,124,56,8),USE(?lHighlightColor1:Prompt), |
                  TRN,#ORIG(?Prompt14),#ORDINAL(104)
                BOX,AT(192,124,9,8),USE(?loc:sHighlightColor1Box),COLOR(00B99D7Fh),FILL(COLOR:Blue), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sSelectedBackBox:5),#ORDINAL(105)
                ENTRY(@s30),AT(204,124,120,8),USE(loc:sHighlightColor1),COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(loc:sHighlightColor1),#ORDINAL(106)
                BUTTON('...'),AT(329,124,9,8),USE(?HighlightColor1:Button),TIP('Select Asc' & |
                  'ii Viewer highlight color 1<0DH,0AH>used to highlight the object of interest.'), |
                  #ORIG(?Button14),#ORDINAL(107)
                PROMPT('Highlight Color &2:'),AT(119,136,56,8),USE(?lHighlightColor2:Prompt), |
                  FONT(,,,,CHARSET:ANSI),TRN,#ORIG(?Prompt15),#ORDINAL(108)
                BOX,AT(192,136,9,8),USE(?loc:sHighlightColor2Box),COLOR(00B99D7Fh),FILL(COLOR:Teal), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sSelectedBackBox:6),#ORDINAL(109)
                ENTRY(@s30),AT(204,136,120,8),USE(loc:sHighlightColor2),COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(loc:sHighlightColor2),#ORDINAL(110)
                BUTTON('...'),AT(329,136,9,8),USE(?HighlightColor2:Button),TIP('Select Asc' & |
                  'ii Viewer highlight color 2<0DH,0AH>used to highlight references to ' & |
                  'the <0DH,0AH>object of interest.'),#ORIG(?Button15),#ORDINAL(111)
              END
            END
            TAB('Editor'),USE(?Editor:Tab),#ORIG(?Tab3),#ORDINAL(112)
              GROUP,AT(113,18,230,156),USE(?EditorGroup),BOXED,#ORIG(?Group2),#ORDINAL(113)
                CHECK(' Use Windows &Associations'),AT(117,24),USE(loc:bUseAssociation),COLOR(COLOR:BTNFACE), |
                  MSG('Use Windows File Association'),TIP('Use Windows File Association'), |
                  #ORIG(loc:bUseAssociation),#ORDINAL(114)
                PROMPT('Co&mmand Line:'),AT(117,36),USE(?loc:szEditorCommand:Prompt),#LINK(?loc:szEditorCommand), |
                  #ORIG(?glo:szEditorCommand:Prompt),#ORDINAL(115)
                ENTRY(@S255),AT(117,46,206,10),USE(loc:szEditorCommand),COLOR(COLOR:White), |
                  FLAT,MSG('File Editor Command Line'),TIP('File Editor Command Line'),#LINK(?loc:szEditorCommand:Prompt), |
                  #ORIG(glo:szEditorCommand),#ORDINAL(116)
                PROMPT('Looking for a great shareware source editor that does color cod' & |
                  'ing and more?  The list below contains some suggestions.  To find ou' & |
                  't more and download the latest version for free click on the web add' & |
                  'ress in the list.'),AT(191,60,137,34),USE(?Prompt14),FONT('Tahoma',8,,FONT:regular, |
                  CHARSET:ANSI),TRN,#ORIG(?Prompt14),#ORDINAL(117)
                LIST,AT(117,96,220,74),USE(?EditorList),FONT('Tahoma',8,,FONT:regular,CHARSET:ANSI), |
                  VSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White),FORMAT('60L(2)|M~Web Addr' & |
                  'ess~@s64@120L(2)~Command Line Example~@s128@'),FROM(EditorQ),TIP('Double Cli' & |
                  'ck on Web Address to go to the web page.<0DH,0AH>Double Click on Com' & |
                  'mand Line Example to paste into command line.'),#FIELDS(eq:szWebAddress, |
                  eq:szCommandLineExample),#ORIG(?List2),#ORDINAL(118)
                BUTTON('...'),AT(326,46,11,10),USE(?LookupEditor),TIP('Browse for an Editor.'), |
                  #ORIG(?LookupFile),#SEQ(7),#ORDINAL(119)
                STRING('Editor Command Macros'),AT(117,60),USE(?String3),FONT('Tahoma',8,, |
                  FONT:underline),#ORIG(?String3),#ORDINAL(120)
                STRING('%1 = Filename to edit'),AT(117,68),USE(?String4),FONT('Tahoma',8), |
                  #ORIG(?String4),#ORDINAL(121)
                STRING('%2 = Current Line'),AT(117,76),USE(?String5),FONT('Tahoma',8),#ORIG(?String5), |
                  #ORDINAL(122)
              END
            END
            TAB('Templates'),USE(?Templates:Tab),#ORIG(?Tab5),#ORDINAL(123)
              GROUP,AT(113,18,230,156),USE(?TemplateGroup),BOXED,#ORIG(?Group5),#ORDINAL(124)
                BUTTON('Class Include File Templates...'),AT(117,26,116,14),USE(?incTemplatesButton), |
                  TIP('Press this button to maintain the list of inc Templates.'),#ORIG(?incTemplatesButton), |
                  #ORDINAL(125)
                BUTTON('Class Source File Templates...'),AT(117,44,116,14),USE(?clwTemplatesButton), |
                  TIP('Press this button to maintain the list of clw Templates.'),#ORIG(?clwTemplatesButton), |
                  #ORDINAL(126)
                BUTTON('Wrapper Generator Templates...'),AT(117,62,116,14),USE(?tplTemplatesButton), |
                  TIP('Press this button to maintain the list of tpl Templates.'),#ORIG(?tplTemplatesButton), |
                  #ORDINAL(127)
              END
            END
            TAB('Viewer'),USE(?Viewer:Tab),#ORIG(?Tab6),#ORDINAL(128)
              GROUP,AT(113,18,230,156),USE(?ViewerGroup),BOXED,#ORIG(?Group6),#ORDINAL(129)
                PROMPT('Fo&nt:'),AT(123,45),USE(?loc:StyleGroup:Font:Prompt),TRN,#LINK(?loc:szViewerFont), |
                  #ORIG(?loc:szViewerFont:Prompt),#ORDINAL(130)
                ENTRY(@s255),AT(169,45,150,10),USE(loc:szViewerFont),COLOR(COLOR:White),DISABLE, |
                  READONLY,SKIP,#LINK(?loc:StyleGroup:Font:Prompt),#ORIG(loc:szViewerFont), |
                  #ORDINAL(131)
                BUTTON('...'),AT(322,45,11,10),USE(?ViewerFontLookupButton),TIP('Select App' & |
                  'lication Font'),#ORIG(?Button10),#ORDINAL(132)
                PROMPT('Fo&re Color:'),AT(123,59),USE(?loc:StyleGroup:Fore:Prompt),#ORIG(?glo:lViewerForeColor:Prompt), |
                  #ORDINAL(133)
                BOX,AT(169,59,11,10),USE(?loc:sViewerForeColorBox),COLOR(00B99D7Fh),FILL(COLOR:Red), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sViewerForeBox),#ORDINAL(134)
                ENTRY(@s30),AT(182,59,137,10),USE(loc:sViewerForeColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(glo:lViewerForeColor),#ORDINAL(135)
                BUTTON('...'),AT(322,59,11,10),USE(?ViewerForeColorButton),TIP('Select Fore Color'), |
                  #ORIG(?Button4),#ORDINAL(136)
                PROMPT('&Back Color:'),AT(123,73),USE(?loc:StyleGroup:Back:Prompt),#ORIG(?glo:lViewerBackColor:Prompt), |
                  #ORDINAL(137)
                BOX,AT(169,73,11,10),USE(?loc:sViewerBackColorBox),COLOR(00B99D7Fh),FILL(COLOR:Maroon), |
                  LINEWIDTH(1),ROUND,#ORIG(?loc:sViewerBackBox:2),#ORDINAL(138)
                ENTRY(@s30),AT(182,73,137,10),USE(loc:sViewerBackColor),LEFT,COLOR(COLOR:White), |
                  DISABLE,SKIP,#ORIG(glo:lViewerBackColor),#ORDINAL(139)
                BUTTON('...'),AT(322,73,11,10),USE(?ViewerBackColorButton),TIP('Select Back Color'), |
                  #ORIG(?Button5),#ORDINAL(140)
                OPTION('&Case'),AT(123,84,210,20),USE(loc:StyleGroup:CaseOpt),BOXED,#ORIG(loc:CaseOpt), |
                  #ORDINAL(141)
                  RADIO(' &Mixed'),AT(161,91),USE(?loc:StyleGroup:CaseOpt:Radio1),VALUE('0'), |
                    #ORIG(?loc:CaseOpt:Radio1),#ORDINAL(142)
                  RADIO(' &Upper'),AT(219,91),USE(?loc:StyleGroup:CaseOpt:Radio2),VALUE('1'), |
                    #ORIG(?loc:CaseOpt:Radio2),#ORDINAL(143)
                  RADIO(' &Lower'),AT(279,91),USE(?loc:StyleGroup:CaseOpt:Radio3),VALUE('2'), |
                    #ORIG(?loc:CaseOpt:Radio3),#ORDINAL(144)
                END
                GROUP('Op&tions'),AT(123,104,210,20),USE(?OptionsGroup),BOXED,#ORIG(?Group10), |
                  #ORDINAL(145)
                  CHECK(' EOL &Filled'),AT(161,111),USE(loc:StyleGroup:EolFilled),#ORIG(loc:EolFilled), |
                    #ORDINAL(146)
                  CHECK(' &Visible'),AT(219,111),USE(loc:StyleGroup:Visible),RIGHT,#ORIG(loc:Visible), |
                    #ORDINAL(147)
                  CHECK(' &Hot Spot'),AT(279,111),USE(loc:StyleGroup:HotSpot),RIGHT,#ORIG(loc:HotSpot), |
                    #ORDINAL(148)
                END
                GROUP('Sample'),AT(123,124,210,20),USE(?SampleGroup),BOXED,#ORIG(?Group11), |
                  #ORDINAL(149)
                  STRING('Using Clarion to Forge Applications...'),AT(127,132,203,8),USE(?SampleText), |
                    CENTER,#ORIG(?String6),#ORDINAL(150)
                END
                SHEET,AT(119,26,218,144),USE(?Sheet2),WIZARD,#ORIG(?Sheet2),#ORDINAL(151)
                  TAB('Default'),USE(?DefaultTab),#ORIG(?Tab1),#ORDINAL(152)
                    BUTTON('&Apply Defaults'),AT(109,182,60,14),USE(?ResetButton),TIP('Apply Defa' & |
                      'ult Settings to All Styles.'),#ORIG(?Button27),#ORDINAL(153)
                    BUTTON('Clarion &Editor'),AT(175,182,60,14),USE(?ClarionEditorButton), |
                      TIP('Retrieve colors from the CxxEDT.INI file.'),#ORIG(?ResetButton), |
                      #ORDINAL(154)
                  END
                  TAB('Label'),USE(?LabelTab),#ORIG(?Tab2),#ORDINAL(155)
                  END
                  TAB('Comment'),USE(?CommentTab),#ORIG(?Tab3),#ORDINAL(156)
                  END
                  TAB('String'),USE(?StringTab),#ORIG(?Tab4),#ORDINAL(157)
                  END
                  TAB('Identifier'),USE(?IdentifierTab),#ORIG(?Tab5),#ORDINAL(158)
                  END
                  TAB('Integer Constant'),USE(?IntegerTab),#ORIG(?Tab6),#ORDINAL(159)
                  END
                  TAB('Real Constant'),USE(?RealTab),#ORIG(?Tab7),#ORDINAL(160)
                  END
                  TAB('Picture String'),USE(?PictureTab),#ORIG(?Tab8),#ORDINAL(161)
                  END
                  TAB('Keyword'),USE(?KeywordTab),#ORIG(?Tab9),#ORDINAL(162)
                  END
                  TAB('Compiler Directive'),USE(?CompilerTab),#ORIG(?Tab10),#ORDINAL(163)
                  END
                  TAB('Runtime Expression'),USE(?RuntimeTab),#ORIG(?Tab11),#ORDINAL(164)
                  END
                  TAB('BuiltIn Procedure'),USE(?BuiltInTab),#ORIG(?Tab12),#ORDINAL(165)
                  END
                  TAB('Structure'),USE(?StructureTab),#ORIG(?Tab13),#ORDINAL(166)
                  END
                  TAB('Attribute'),USE(?AttributeTab),#ORIG(?Tab14),#ORDINAL(167)
                  END
                  TAB('Equate'),USE(?EquateTab),#ORIG(?Tab15),#ORDINAL(168)
                  END
                  TAB('Error'),USE(?ErrorTab),#ORIG(?Tab16),#ORDINAL(169)
                  END
                  TAB('Deprecated'),USE(?DeprecatedTab),#ORIG(?Tab17),#ORDINAL(170)
                  END
                END
              END
            END
          END
          BOX,AT(113,8,230,10),USE(?Heading1Box),COLOR(00743C00h),FILL(COLOR:White),LINEWIDTH(1), |
            ROUND,#ORIG(?Box14),#ORDINAL(171)
          BOX,AT(123,30,210,10),USE(?Heading2Box),COLOR(00743C00h),FILL(COLOR:White),HIDE, |
            LINEWIDTH(1),ROUND,#ORIG(?Box14),#ORDINAL(172)
          BUTTON('&OK'),AT(252,182,45,14),USE(?OKButton),TIP('Save Changes and Close the Window'), |
            #ORIG(?Button1),#ORDINAL(173)
          BUTTON('Cancel'),AT(302,182,45,14),USE(?CancelButton),TIP('Ignore Changes and' & |
            ' Close the Window'),#ORIG(?Button2),#ORDINAL(174)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetColorString
PROTOTYPE '(long lColor),STRING'
PARAMETERS '(lColor)'
[COMMON]
DESCRIPTION 'Return Color String'
FROM ABC Source
MODIFIED '2001/01/09' '17:59:03'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
sReturn     CSTRING(31)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  CASE lColor
    OF COLOR:NONE
       sReturn = 'COLOR:NONE'
    OF COLOR:SCROLLBAR
       sReturn = 'COLOR:SCROLLBAR'
    OF COLOR:BACKGROUND
       sReturn = 'COLOR:BACKGROUND'
    OF COLOR:ACTIVECAPTION
       sReturn = 'COLOR:ACTIVECAPTION'
    OF COLOR:INACTIVECAPTION
       sReturn = 'COLOR:INACTIVECAPTION'
    OF COLOR:MENU
       sReturn = 'COLOR:MENU'
    OF COLOR:WINDOW
       sReturn = 'COLOR:WINDOW'
    OF COLOR:WINDOWFRAME
       sReturn = 'COLOR:WINDOWFRAME'
    OF COLOR:MENUTEXT
       sReturn = 'COLOR:MENUTEXT'
    OF COLOR:WINDOWTEXT
       sReturn = 'COLOR:WINDOWTEXT'
    OF COLOR:CAPTIONTEXT
       sReturn = 'COLOR:CAPTIONTEXT'
    OF COLOR:ACTIVEBORDER
       sReturn = 'COLOR:ACTIVEBORDER'
    OF COLOR:INACTIVEBORDER
       sReturn = 'COLOR:INACTIVEBORDER'
    OF COLOR:APPWORKSPACE
       sReturn = 'COLOR:APPWORKSPACE'
    OF COLOR:HIGHLIGHT
       sReturn = 'COLOR:HIGHLIGHT'
    OF COLOR:HIGHLIGHTTEXT
       sReturn = 'COLOR:HIGHLIGHTTEXT'
    OF COLOR:BTNFACE
       sReturn = 'COLOR:BTNFACE'
    OF COLOR:BTNSHADOW
       sReturn = 'COLOR:BTNSHADOW'
    OF COLOR:GRAYTEXT
       sReturn = 'COLOR:GRAYTEXT'
    OF COLOR:BTNTEXT
       sReturn = 'COLOR:BTNTEXT'
    OF COLOR:INACTIVECAPTIONTEXT
       sReturn = 'COLOR:INACTIVECAPTIONTEXT'
    OF COLOR:BTNHIGHLIGHT
       sReturn = 'COLOR:BTNHIGHLIGHT'
    OF COLOR:Black
       sReturn = 'COLOR:Black'
    OF COLOR:Maroon
       sReturn = 'COLOR:Maroon'
    OF COLOR:Green
       sReturn = 'COLOR:Green'
    OF COLOR:Olive
       sReturn = 'COLOR:Olive'
    OF COLOR:Navy
       sReturn = 'COLOR:Navy'
    OF COLOR:Purple
       sReturn = 'COLOR:Purple'
    OF COLOR:Teal
       sReturn = 'COLOR:Teal'
    OF COLOR:Gray
       sReturn = 'COLOR:Gray'
    OF COLOR:Silver
       sReturn = 'COLOR:Silver'
    OF COLOR:Red
       sReturn = 'COLOR:Red'
    OF COLOR:Lime
       sReturn = 'COLOR:Lime'
    OF COLOR:Yellow
       sReturn = 'COLOR:Yellow'
    OF COLOR:Blue
       sReturn = 'COLOR:Blue'
    OF COLOR:Fuschia
       sReturn = 'COLOR:Fuschia'
    OF COLOR:Aqua
       sReturn = 'COLOR:Aqua'
    OF COLOR:White
       sReturn = 'COLOR:White'
  ELSE
    ltoa(lColor,sReturn,16)
    sReturn = '0' & UPPER(sReturn) & 'H'
  END
  RETURN(sReturn)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2003/05/28' ' 0:12:45'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winViewAsciiFile
PROTOTYPE '(STRING szFileName, STRING pWhat)'
PARAMETERS '(sFileName, pWhat)'
[COMMON]
DESCRIPTION 'View Ascii File'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:14:51'
[DATA]
[SCREENCONTROLS]
! ENTRY(@s64),USE(sSearchString)
[REPORTCONTROLS]
! STRING(@s64),USE(sSearchString)
sSearchString            STRING(64)
!!> GUID('4865be4c-3b4b-49ed-a91c-27de87b76c74'),PICTURE(@s64)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(lSearchLine)
[REPORTCONTROLS]
! STRING(@n-14),USE(lSearchLine)
lSearchLine              LONG
!!> GUID('f9f1e9c3-4600-4286-a659-f2557a08bb25'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s4),USE(LineNoQueue)
[REPORTCONTROLS]
! STRING(@s4),USE(LineNoQueue)
LineNoQueue              QUEUE,PRE(LNQ)
!!> GUID('70770e92-247d-44ce-b143-f2e7140819bc'),PICTURE(@s4)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(LNQ:LineNo)
[REPORTCONTROLS]
! STRING(@n-14),USE(LNQ:LineNo)
LineNo                     LONG
!!> GUID('dc4c1209-8bf8-48c7-8a43-1b680d2bd619'),PICTURE(@n-14)
                         END
!!> GUID('43334a96-15e0-4044-8ed1-66fa07898a58')
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('216a773e-f6ef-4bb9-9cac-ff89cd50d21d'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! TEXT,USE(TextField),HVSCROLL
[REPORTCONTROLS]
! TEXT,USE(TextField)
TextField                CSTRING(4001)
!!> GUID('b155792a-77bb-4286-bd6f-97e52f044978'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('l Style:'),USE(?lStyle:Prompt)
! ENTRY(@n-14),USE(lStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(lStyle),RIGHT(1)
lStyle                   LONG
!!> GUID('8389a1e8-c2d4-427b-a15c-d611fdb08d01'),PROMPT('l Style:'),HEADER('l Style'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 1
WHEN  ('Default') ()

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('No Special Action')
WHEN  ('?AsciiBox') ('No Special Action')
WHEN  ('?CloseButton') ('No Special Action')
WHEN  ('?EditButton') ('No Special Action')
WHEN  ('?FindButton') ('No Special Action')
WHEN  ('?GoToButton') ('No Special Action')
WHEN  ('?Image1') ('No Special Action')
WHEN  ('?ListTextModeButton') ('No Special Action')
WHEN  ('?MoveBottomButton') ('No Special Action')
WHEN  ('?MovePageDownButton') ('No Special Action')
WHEN  ('?MovePageUpButton') ('No Special Action')
WHEN  ('?MoveTopButton') ('No Special Action')
WHEN  ('?PrintButton') ('No Special Action')
WHEN  ('?TextField') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 10
WHEN  ('?CloseButton') ('')
WHEN  ('?EditButton') ('')
WHEN  ('?FindButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?ListTextModeButton') ('')
WHEN  ('?MoveBottomButton') ('')
WHEN  ('?MovePageDownButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')
WHEN  ('?PrintButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 10
WHEN  ('?CloseButton') ('')
WHEN  ('?EditButton') ('')
WHEN  ('?FindButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?ListTextModeButton') ('')
WHEN  ('?MoveBottomButton') ('')
WHEN  ('?MovePageDownButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')
WHEN  ('?PrintButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 10
WHEN  ('?CloseButton') ()
WHEN  ('?EditButton') ()
WHEN  ('?FindButton') ()
WHEN  ('?GoToButton') ()
WHEN  ('?ListTextModeButton') ()
WHEN  ('?MoveBottomButton') ()
WHEN  ('?MovePageDownButton') ()
WHEN  ('?MovePageUpButton') ()
WHEN  ('?MoveTopButton') ()
WHEN  ('?PrintButton') ()

%ButtonThread DEPEND %Control LONG TIMES 10
WHEN  ('?CloseButton') (0)
WHEN  ('?EditButton') (0)
WHEN  ('?FindButton') (0)
WHEN  ('?GoToButton') (0)
WHEN  ('?ListTextModeButton') (0)
WHEN  ('?MoveBottomButton') (0)
WHEN  ('?MovePageDownButton') (0)
WHEN  ('?MovePageUpButton') (0)
WHEN  ('?MoveTopButton') (0)
WHEN  ('?PrintButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('25000')
WHEN  ('?AsciiBox') ('25000')
WHEN  ('?CloseButton') ('25000')
WHEN  ('?EditButton') ('25000')
WHEN  ('?FindButton') ('25000')
WHEN  ('?GoToButton') ('25000')
WHEN  ('?Image1') ('25000')
WHEN  ('?ListTextModeButton') ('25000')
WHEN  ('?MoveBottomButton') ('25000')
WHEN  ('?MovePageDownButton') ('25000')
WHEN  ('?MovePageUpButton') ('25000')
WHEN  ('?MoveTopButton') ('25000')
WHEN  ('?PrintButton') ('25000')
WHEN  ('?TextField') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 10
WHEN  ('?CloseButton') ('')
WHEN  ('?EditButton') ('')
WHEN  ('?FindButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?ListTextModeButton') ('')
WHEN  ('?MoveBottomButton') ('')
WHEN  ('?MovePageDownButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')
WHEN  ('?PrintButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 10
WHEN  ('?CloseButton') ()
WHEN  ('?EditButton') ()
WHEN  ('?FindButton') ()
WHEN  ('?GoToButton') ()
WHEN  ('?ListTextModeButton') ()
WHEN  ('?MoveBottomButton') ()
WHEN  ('?MovePageDownButton') ()
WHEN  ('?MovePageUpButton') ()
WHEN  ('?MoveTopButton') ()
WHEN  ('?PrintButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 10
WHEN  ('?CloseButton') (0)
WHEN  ('?EditButton') (0)
WHEN  ('?FindButton') (0)
WHEN  ('?GoToButton') (0)
WHEN  ('?ListTextModeButton') (0)
WHEN  ('?MoveBottomButton') (0)
WHEN  ('?MovePageDownButton') (0)
WHEN  ('?MovePageUpButton') (0)
WHEN  ('?MoveTopButton') (0)
WHEN  ('?PrintButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 14
WHEN  ('') ('None')
WHEN  ('?AsciiBox') ('None')
WHEN  ('?CloseButton') ('None')
WHEN  ('?EditButton') ('None')
WHEN  ('?FindButton') ('None')
WHEN  ('?GoToButton') ('None')
WHEN  ('?Image1') ('None')
WHEN  ('?ListTextModeButton') ('None')
WHEN  ('?MoveBottomButton') ('None')
WHEN  ('?MovePageDownButton') ('None')
WHEN  ('?MovePageUpButton') ('None')
WHEN  ('?MoveTopButton') ('None')
WHEN  ('?PrintButton') ('None')
WHEN  ('?TextField') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 10
WHEN  ('?CloseButton') ('')
WHEN  ('?EditButton') ('')
WHEN  ('?FindButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?ListTextModeButton') ('')
WHEN  ('?MoveBottomButton') ('')
WHEN  ('?MovePageDownButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')
WHEN  ('?PrintButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 10
WHEN  ('?CloseButton') ()
WHEN  ('?EditButton') ()
WHEN  ('?FindButton') ()
WHEN  ('?GoToButton') ()
WHEN  ('?ListTextModeButton') ()
WHEN  ('?MoveBottomButton') ()
WHEN  ('?MovePageDownButton') ()
WHEN  ('?MovePageUpButton') ()
WHEN  ('?MoveTopButton') ()
WHEN  ('?PrintButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 14
WHEN  ('') (1)
WHEN  ('?AsciiBox') (1)
WHEN  ('?CloseButton') (1)
WHEN  ('?EditButton') (1)
WHEN  ('?FindButton') (1)
WHEN  ('?GoToButton') (1)
WHEN  ('?Image1') (1)
WHEN  ('?ListTextModeButton') (1)
WHEN  ('?MoveBottomButton') (1)
WHEN  ('?MovePageDownButton') (1)
WHEN  ('?MovePageUpButton') (1)
WHEN  ('?MoveTopButton') (1)
WHEN  ('?PrintButton') (1)
WHEN  ('?TextField') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 14
WHEN  ('')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?EditButton')TIMES 0
WHEN  ('?FindButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?Image1')TIMES 0
WHEN  ('?ListTextModeButton')TIMES 0
WHEN  ('?MoveBottomButton')TIMES 0
WHEN  ('?MovePageDownButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?PrintButton')TIMES 0
WHEN  ('?TextField')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 14
WHEN  ('')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?EditButton')TIMES 0
WHEN  ('?FindButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?Image1')TIMES 0
WHEN  ('?ListTextModeButton')TIMES 0
WHEN  ('?MoveBottomButton')TIMES 0
WHEN  ('?MovePageDownButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?PrintButton')TIMES 0
WHEN  ('?TextField')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 14
WHEN  ('')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?EditButton')TIMES 0
WHEN  ('?FindButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?Image1')TIMES 0
WHEN  ('?ListTextModeButton')TIMES 0
WHEN  ('?MoveBottomButton')TIMES 0
WHEN  ('?MovePageDownButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?PrintButton')TIMES 0
WHEN  ('?TextField')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 14
WHEN  ('')TIMES 0
WHEN  ('?AsciiBox')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?EditButton')TIMES 0
WHEN  ('?FindButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?Image1')TIMES 0
WHEN  ('?ListTextModeButton')TIMES 0
WHEN  ('?MoveBottomButton')TIMES 0
WHEN  ('?MovePageDownButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?PrintButton')TIMES 0
WHEN  ('?TextField')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('AIBtn0')
WHEN  ('?Image1') ('AIBtn13')

%AIEnableMimicControl DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?Image1') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('?AsciiBox')
WHEN  ('?Image1') ('?AsciiBox')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Image1') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Image1') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Image1') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Image1') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ViewerMethodCodeSection
[INSTANCES]
WHEN '1'
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(FILE AsciiFile,*STRING FileLine,*STRING Filename,UNSIGNED ListBox,ErrorClass ErrHandler,BYTE Enables=0),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
ListBox{PROP:HScroll} = FALSE !?AsciiBox
ListBox{PROP:FORMAT} = '24L(2)|@n05@250L(2)YS(1024)@s255@'
ListBox{PROPLIST:BackColor,1} = COLOR:BTNFACE

ListBox{PROPSTYLE:TextColor,1} = COLOR:BLACK
ListBox{PROPSTYLE:BackColor,1} = COLOR:WHITE
ListBox{PROPSTYLE:TextSelected,1} = glo:lSelectedFore !COLOR:BLACK
ListBox{PROPSTYLE:BackSelected,1} = glo:lSelectedBack
ListBox{PROPSTYLE:FontName,1} = 'Courier New'
ListBox{PROPSTYLE:FontSize,1} = glo:FontSize
ListBox{PROPSTYLE:FontStyle,1} = glo:FontStyle

ListBox{PROPSTYLE:TextColor,2} = glo:lHighlightColor2
ListBox{PROPSTYLE:BackColor,2} = COLOR:BTNFACE
ListBox{PROPSTYLE:TextSelected,2} = glo:lHighlightColor2
ListBox{PROPSTYLE:BackSelected,2} = glo:lSelectedBack
ListBox{PROPSTYLE:FontName,2} = 'Courier New'
ListBox{PROPSTYLE:FontSize,2} = glo:FontSize
ListBox{PROPSTYLE:FontStyle,2} = glo:FontStyle

ListBox{PROPSTYLE:TextColor,3} = glo:lHighlightColor1
ListBox{PROPSTYLE:BackColor,3} = COLOR:BTNFACE
ListBox{PROPSTYLE:TextSelected,3} = glo:lHighlightColor1
ListBox{PROPSTYLE:BackSelected,3} = glo:lSelectedBack
ListBox{PROPSTYLE:FontName,3} = 'Courier New'
ListBox{PROPSTYLE:FontSize,3} = glo:FontSize
ListBox{PROPSTYLE:FontStyle,3} = glo:FontStyle

SELF.Popup.AddMenu('~&Find|~&Print|&Edit|-|&Move{{&Top|Page &Up|Page &Down|Bottom}|-|&Goto')
SELF.Popup.SetItemEnable('Find',CHOOSE(BAND(Enables,EnableSearch)))
SELF.Popup.SetItemEnable('Print',CHOOSE(BAND(Enables,EnablePrint)))
SELF.Popup.AddItemEvent('Top',EVENT:ScrollTop,ListBox)
SELF.Popup.AddItemEvent('PageUp',EVENT:PageUp,ListBox)
SELF.Popup.AddItemEvent('PageDown',EVENT:PageDown,ListBox)
SELF.Popup.AddItemEvent('Bottom',EVENT:ScrollBottom,ListBox)
[END]
[END]
WHEN 'SetDisplayQueueStyle'
[INSTANCES]
WHEN '(LONG LineNo,*LONG Style)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
Style = CHOOSE(LineNo=lSearchLine,3,lStyle)
[END]
[END]
WHEN 'FormatLine'
[INSTANCES]
WHEN '(*STRING TextLine,LONG LineNo)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF RECORDS(LineNoQueue)
   LineNoQueue.LineNo = LineNo
   GET(LineNoQueue,+LineNoQueue.LineNo)
   IF ERRORCODE()
      lStyle = 1
      GET(LineNoQueue,1)        !Force ERRORCODE to Clear
   ELSE
      I = INSTRING('.',TreeQ.szSearch)
      IF I
         sz = TreeQ.szSearch[I : LEN(TreeQ.szSearch)]
         IF INSTRING(sz & ' ',TextLine,1)
            lStyle = 2
         ELSIF INSTRING(sz & '(',TextLine,1)
            lStyle = 2
         ELSE
            lStyle = 1
         END
      ELSE
         lStyle = 1
      END
   END
END
[END]
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CloseButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
WHEN '?FindButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
Viewer1.Searcher.Ask(CHOOSE(CHOICE(?AsciiBox)>0,Viewer1.TopLine+CHOICE(?AsciiBox)-1,1))
[END]
[END]
WHEN '?GoToButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
Viewer1.AskGotoLine
[END]
[END]
WHEN '?EditButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
IF glo:bUseAssociation
   szFilename = CLIP(sFilename)
   szNull = ''
   ShellExecute(window{prop:handle},0,szFilename,0,szNull,1)
ELSE
   szCommandline = 'Notepad.exe ' & CLIP(sFilename)
   IF glo:szEditorCommand
      szCommandLine = glo:szEditorCommand
      I = INSTRING('.EXE ',UPPER(szCommandLine),1)
      IF I
         szCommandLine = SHORTPATH(szCommandLine[i : I+3]) & szCommandLine[I+4 : LEN(szCommandLine)]
      END
      !look for filename parameter token
      I = INSTRING('%1',szCommandLine,1)
      IF I
         szCommandLine = SUB(szCommandLine,1,I-1) & |
                         CLIP(sFilename) & |
                         SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
      END
      !look for line number parameter token
      I = INSTRING('%2',szCommandLine,1)
      IF I
         szCommandLine = SUB(szCommandLine,1,I-1) & |
                         lSearchLine & |
                         SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
      END
   END
   RUN(szCommandLine)
   IF RUNCODE() = -4   !Failed to execute
     CASE MESSAGE('An error occurred trying to execute the following command:||' & szCommandLine & |
             '||Do you want to use Notepad?',ERROR(),ICON:EXCLAMATION, |
             BUTTON:YES+BUTTON:NO,BUTTON:YES)
     OF BUTTON:YES
        RUN('Notepad.exe ' & CLIP(sFilename))
     END
   END
END
[END]
[END]
WHEN '?PrintButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
Viewer1.Printer.Ask
[END]
[END]
WHEN '?MoveBottomButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
POST(EVENT:ScrollBottom,?AsciiBox)
[END]
[END]
WHEN '?MovePageDownButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
POST(EVENT:PageDown,?AsciiBox)
[END]
[END]
WHEN '?MovePageUpButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
POST(EVENT:PageUp,?AsciiBox)
[END]
[END]
WHEN '?MoveTopButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
POST(EVENT:ScrollTop,?AsciiBox)
[END]
[END]
WHEN '?ListTextModeButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF ?TextField{PROP:Hide} = TRUE
   !?ListTextModeButton{PROP:Text} = 'Lis&t'
   ?ListTextModeButton{PROP:Icon} = '~LIST.ICO'
   IF glo:bShowTips
      tt.updatetiptext(?ListTextModeButton{PROP:HANDLE},'List View',0)
   ELSE
      ?ListTextModeButton{PROP:Tip} = 'List View'
   END
   ?AsciiBox{PROP:Hide} = TRUE
   ?TextField{PROP:Hide} = FALSE
ELSE
   !?ListTextModeButton{PROP:Text} = '&Text'
   ?ListTextModeButton{PROP:Icon} = '~TEXT.ICO'
   IF glo:bShowTips
      tt.updatetiptext(?ListTextModeButton{PROP:HANDLE},'Text View',0)
   ELSE
      ?ListTextModeButton{PROP:Tip} = 'Text View'
   END
   ?TextField{PROP:Hide} = TRUE
   ?AsciiBox{PROP:Hide} = FALSE
END
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
K = POINTER(CallQ)
J = RECORDS(CallQ)
LOOP I = 1 TO J
  GET(CallQ,I)
  IF CallQ.szCalledMethod = TreeQ.szSearch
     LineNoQueue.LineNo = CallQ.lLineNum
     ADD(LineNoQueue,+LineNoQueue.LineNo)
  END
END
GET(CallQ,K)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
window{PROP:Text} = 'View File [' & CLIP(sFilename) & ']' !& ' [' & pWhat & ']'
?AsciiBox{PROP:SelectedColor} = glo:lSelectedFore !COLOR:BLACK
?AsciiBox{PROP:SelectedFillColor} = glo:lSelectedBack
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 0 TO J
   CASE I
   OF ?AsciiBox OROF ?TextField
      SETFONT(I,,glo:FontSize,glo:FontColor,glo:FontStyle,0)
   ELSE
      SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
IF NUMERIC(pWhat)
   sSearchString = ''
   lSearchLine = pWhat
   LineNoQueue.LineNo = lSearchLine
   ADD(LineNoQueue,+LineNoQueue.LineNo)
ELSE
   sSearchString = pWhat
   lSearchLine = 0
END

AsciiFileName1 = sFileName
OMIT('CLEAR(AsciiFilename1)')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8501
LABEL
PROPERTY:END
  ?AsciiBox{PROP:Alrt,250} = MouseLeft2
  ?TextField{PROP:Alrt,250} = MouseLeft2
  ?TextField{PROP:LeftOffset} = 2

  POST(EVENT:USER)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9001
PROPERTY:END
IF glo:bForceEdit = 1
   POST(EVENT:Accepted,?EditButton)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Ascii_File_Viewer.htm')
   END
END
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
  IF EVENT() = EVENT:USER
     Viewer1.GetLastLineNo()
     IF sSearchString
        Find.What = sSearchString
        Find.MatchCase = TRUE
        Find.Direction = 'Down'
        Viewer1.Searcher.Setup(Find)
        Viewer1.DisplayPage(Viewer1.Searcher.Next())
     ELSE
        Viewer1.DisplayPage(lSearchLine)
     END
     DO FillTextField
  END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
Find                GROUP(AsciiFindGroup),PRE(Find)
                    END
[END]
[END]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
szNull          CSTRING(2)
szFilename      CSTRING(256)
szCommandLine   CSTRING(256),AUTO
I               LONG,AUTO
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
K   LONG,AUTO
[END]
[END]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
I                   LONG
J                   LONG
TextLine            CSTRING(255)
sz                  CSTRING(65)
LastLine            LONG
StartLine           LONG
Find                GROUP(AsciiFindGroup),PRE(Find)
                    END
[END]
[END]
[END]
EMBED %NewMethodCodeSection
[INSTANCES]
WHEN '1'
[INSTANCES]
WHEN 'Default'
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF FIELD() = ?AsciiBox
   CASE EventNo
   OF EVENT:AlertKey
      CASE KEYCODE()
      OF MouseLeft2
         !GETPOSITION(?AsciiBox,X,Y,W,H)
         !SETPOSITION(?TextField,X,Y,W,H)
         POST(EVENT:Accepted,?ListTextModeButton)
      OF MouseRightUp
         CASE SELF.Popup.Ask()
         OF 'Find'
            SELF.Searcher.Ask(CHOOSE(CHOICE(?AsciiBox)>0,Viewer1.TopLine+CHOICE(?AsciiBox)-1,1))
         OF 'Print'
            SELF.Printer.Ask
         OF 'Edit'
            POST(EVENT:Accepted,?EditButton)   !RUN('Notepad.exe ' & sFilename)
         OF 'Goto'
            SELF.AskGotoLine
         END
         ReturnValue = Level:Notify
      ELSE
         ReturnValue = PARENT.TakeEvent(EventNo)
      END
   ELSE
      ReturnValue = PARENT.TakeEvent(EventNo)
   END
ELSE
   ReturnValue = PARENT.TakeEvent(EventNo)
END

DO FillTextField

RETURN ReturnValue
[END]
[END]
[END]
[END]
EMBED %NewMethodDataSection
[INSTANCES]
WHEN '1'
[INSTANCES]
WHEN 'Default'
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ReturnValue          BYTE,AUTO
I                    LONG,AUTO
J                    LONG,AUTO
X                    SHORT,AUTO
Y                    SHORT,AUTO
W                    SHORT,AUTO
H                    SHORT,AUTO
[END]
[END]
[END]
[END]
EMBED %ControlHandling
[INSTANCES]
WHEN '?TextField'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6800
PROPERTY:END
OF EVENT:AlertKey
   IF KEYCODE() = MouseLeft2
      POST(EVENT:Accepted,?ListTextModeButton)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
   FORWARDKEY(?AsciiBox)
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillTextField   ROUTINE
  DATA
I   LONG,AUTO
J   LONG,AUTO

  CODE
  TextField = ''
  J = Viewer1.TopLine + ?AsciiBox{PROP:Items} !- 1
  LOOP I = Viewer1.TopLine TO J
     TextField = TextField & CLIP(Viewer1.GetLine(I)) & '<13,10>'
  END
  DISPLAY(?TextField)
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'Restore'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Window{PROP:Iconize} = FALSE
[END]
WHEN 'Iconize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Window{PROP:Iconize} = TRUE
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
OF CtrlE
   POST(EVENT:Accepted,?EditButton)
OF CtrlG
   POST(EVENT:Accepted,?GoToButton)
OF CtrlL
   IF ?TextField{PROP:Hide} = FALSE
      POST(EVENT:Accepted,?ListTextModeButton)
   END
OF CtrlP
   POST(EVENT:Accepted,?PrintButton)
OF CtrlT
   IF ?TextField{PROP:Hide} = TRUE
      POST(EVENT:Accepted,?ListTextModeButton)
   END
OF AltF3 OROF CtrlF
   POST(EVENT:Accepted,?FindButton)
OF F3Key
   Viewer1.Searcher.GetLastSearch(Find,LastLine)
   IF Find.What
      Find.Direction = 'Down'
      Viewer1.Searcher.Setup(Find,Viewer1.TopLine)

      StartLine = Viewer1.Searcher.Next()
      IF ~StartLine
         CASE GlobalErrors.Throw(Msg:SearchReachedEnd)
         OF Level:Benign
            Viewer1.Searcher.Setup(Find,1)
            Viewer1.DisplayPage(Viewer1.Searcher.Next())
            DO FillTextField
         OF Level:Cancel
            !do nothing
         ELSE
            ASSERT(False) !Unexpected return value from ErrorMgr.Throw()
         END
      ELSE
         Viewer1.DisplayPage(StartLine)
         DO FillTextField
      END

   ELSE
      POST(EVENT:Accepted,?FindButton)
   END

OF ShiftF3
   Viewer1.Searcher.GetLastSearch(Find,LastLine)
   IF Find.What
      Find.Direction = 'Up'
      Viewer1.Searcher.Setup(Find,Viewer1.TopLine)

      StartLine = Viewer1.Searcher.Next()
      IF ~StartLine
         CASE GlobalErrors.Throw(Msg:SearchReachedBeginning)
         OF Level:Benign
            Viewer1.Searcher.Setup(Find,Viewer1.GetLastLineNo())
            Viewer1.DisplayPage(Viewer1.Searcher.Next())
            DO FillTextField
         OF Level:Cancel
            !Do nothing
         ELSE
            ASSERT(False) !Unexpected return value from ErrorMgr.Throw()
         END
      ELSE
         Viewer1.DisplayPage(Viewer1.Searcher.Next())
         DO FillTextField
      END

   ELSE
      POST(EVENT:Accepted,?FindButton)
   END

OF CtrlF3
   J = RECORDS(LineNoQueue)
   IF J
      Viewer1.Searcher.GetLastSearch(Find,LastLine)
      Find.Direction = 'Down'
      Viewer1.Searcher.Setup(Find,Viewer1.TopLine)

      !StartLine = Viewer1.Searcher.Next()
      I = INSTRING('.',TreeQ.szSearch)
      sz = TreeQ.szSearch[I : LEN(TreeQ.szSearch)]
      StartLine = 0
      LOOP I = 1 TO J
         GET(LineNoQueue,I)
         IF LineNoQueue.LineNo > Viewer1.TopLine
            TextLine = Viewer1.GetLine(LineNoQueue.LineNo)
            IF INSTRING(sz & ' ',TextLine,1)
               StartLine = LineNoQueue.LineNo
               BREAK
            ELSIF INSTRING(sz & '(',TextLine,1)
               StartLine = LineNoQueue.LineNo
               BREAK
            END
         END
      END

      IF ~StartLine
         CASE GlobalErrors.Throw(Msg:SearchReachedEnd)
         OF Level:Benign
            Viewer1.Searcher.Setup(Find,1)
            !Viewer1.DisplayPage(Viewer1.Searcher.Next())
            Viewer1.TopLine = 1
            LOOP I = 1 TO J
               GET(LineNoQueue,I)
               IF LineNoQueue.LineNo > Viewer1.TopLine
                  TextLine = Viewer1.GetLine(LineNoQueue.LineNo)
                  IF INSTRING(sz & ' ',TextLine,1)
                     StartLine = LineNoQueue.LineNo
                     BREAK
                  ELSIF INSTRING(sz & '(',TextLine,1)
                     StartLine = LineNoQueue.LineNo
                     BREAK
                  END
               END
            END
            Viewer1.DisplayPage(StartLine)
            DO FillTextField
         OF Level:Cancel
            !do nothing
         ELSE
            ASSERT(False) !Unexpected return value from ErrorMgr.Throw()
         END
      ELSE
         Viewer1.DisplayPage(StartLine)
         DO FillTextField
      END
   END

OF CtrlShiftF3
   J = RECORDS(LineNoQueue)
   IF J
      Viewer1.Searcher.GetLastSearch(Find,LastLine)
      Find.Direction = 'Up'
      Viewer1.Searcher.Setup(Find,Viewer1.TopLine)

      !StartLine = Viewer1.Searcher.Next()
      I = INSTRING('.',TreeQ.szSearch)
      sz = TreeQ.szSearch[I : LEN(TreeQ.szSearch)]
      StartLine = 0
      LOOP I = J TO 1 BY -1
         GET(LineNoQueue,I)
         IF LineNoQueue.LineNo < Viewer1.TopLine
            TextLine = Viewer1.GetLine(LineNoQueue.LineNo)
            IF INSTRING(sz & ' ',TextLine,1)
               StartLine = LineNoQueue.LineNo
               BREAK
            ELSIF INSTRING(sz & '(',TextLine,1)
               StartLine = LineNoQueue.LineNo
               BREAK
            END
         END
      END

      IF ~StartLine
         CASE GlobalErrors.Throw(Msg:SearchReachedEnd)
         OF Level:Benign
            Viewer1.Searcher.Setup(Find,1)
            !Viewer1.DisplayPage(Viewer1.Searcher.Next())
            Viewer1.TopLine = Viewer1.GetLastLineNo()
            LOOP I = J TO 1 BY -1
               GET(LineNoQueue,I)
               IF LineNoQueue.LineNo < Viewer1.TopLine
                  TextLine = Viewer1.GetLine(LineNoQueue.LineNo)
                  IF INSTRING(sz & ' ',TextLine,1)
                     StartLine = LineNoQueue.LineNo
                     BREAK
                  ELSIF INSTRING(sz & '(',TextLine,1)
                     StartLine = LineNoQueue.LineNo
                     BREAK
                  END
               END
            END
            Viewer1.DisplayPage(StartLine)
            DO FillTextField
         OF Level:Cancel
            !do nothing
         ELSE
            ASSERT(False) !Unexpected return value from ErrorMgr.Throw()
         END
      ELSE
         Viewer1.DisplayPage(StartLine)
         DO FillTextField
      END
   END
END
[END]
[END]
EMBED %ResizerMethodCodeSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
?TextField{PROP:XPos} = ?AsciiBox{PROP:XPos}
?TextField{PROP:YPos} = ?AsciiBox{PROP:YPos}
[END]
[END]
[END]
[END]
EMBED %ViewerMethodDataSection
[INSTANCES]
WHEN '1'
[INSTANCES]
WHEN 'FormatLine'
[INSTANCES]
WHEN '(*STRING TextLine,LONG LineNo)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
sz  CSTRING(256)
[END]
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 6
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Ascii_File_Viewer.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC AsciiViewInListBox
[INSTANCE]
INSTANCE 1
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('AsciiViewerClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('FormatLine {13}PROCEDURE(*STRING TextLine,LONG LineNo),DERIVED', |
  'Init {19}PROCEDURE(FILE AsciiFile,*STRING FileLine,*STRING Filename,UNSIGNED ListBox,ErrorClass ErrHandler,BYTE Enables=0),BYTE', |
  'SetDisplayQueueStyle   PROCEDURE(LONG LineNo,*LONG Style),DERIVED')

%ListBoxFieldToUse DEFAULT  ('?AsciiBox')
%InitializeViewer DEFAULT  ('On Open Window')
%BrowseFile DEFAULT  ('')
%AllowSearch LONG  (1)
%AllowPrint LONG  (1)
%ReAssignCheck LONG  (0)
%AssignQueue DEFAULT  ('')
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Viewer1')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('kcrAsciiViewerClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 1
WHEN  ('Default') (1)

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 1
WHEN  ('Default')TIMES 1
WHEN  (1) ('TakeEvent')

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 1
WHEN  ('Default')TIMES 1
WHEN  (1) ('(LONG EventNo),BYTE,PROC')

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 1
WHEN  ('Default') ()

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%UseBalloonTips LONG  (1)
%ToolTipControls MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 10
WHEN  (1) ('?MoveTopButton')
WHEN  (2) ('?MovePageUpButton')
WHEN  (3) ('?MovePageDownButton')
WHEN  (4) ('?MoveBottomButton')
WHEN  (5) ('?GoToButton')
WHEN  (6) ('?FindButton')
WHEN  (7) ('?PrintButton')
WHEN  (8) ('?EditButton')
WHEN  (9) ('?ListTextModeButton')
WHEN  (10) ('?CloseButton')

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 10
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 10
WHEN  (1) ('Use Tip Text')
WHEN  (2) ('Use Tip Text')
WHEN  (3) ('Use Tip Text')
WHEN  (4) ('Use Tip Text')
WHEN  (5) ('Use Tip Text')
WHEN  (6) ('Use Tip Text')
WHEN  (7) ('Use Tip Text')
WHEN  (8) ('Use Tip Text')
WHEN  (9) ('Specify Text')
WHEN  (10) ('Use Tip Text')

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 10
WHEN  (1) ('FilesOpened')
WHEN  (2) ('FilesOpened')
WHEN  (3) ('FilesOpened')
WHEN  (4) ('FilesOpened')
WHEN  (5) ('FilesOpened')
WHEN  (6) ('FilesOpened')
WHEN  (7) ('FilesOpened')
WHEN  (8) ('FilesOpened')
WHEN  (9) ('FilesOpened')
WHEN  (10) ('FilesOpened')

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 10
WHEN  (1) ('szRoot')
WHEN  (2) ('szRoot')
WHEN  (3) ('szRoot')
WHEN  (4) ('szRoot')
WHEN  (5) ('szRoot')
WHEN  (6) ('szRoot')
WHEN  (7) ('szRoot')
WHEN  (8) ('szRoot')
WHEN  (9) ('szRoot')
WHEN  (10) ('szRoot')

%TTText DEPEND %ToolTipControls DEFAULT TIMES 1
WHEN  (9) ('Text View')

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 10
WHEN  (1) (1)
WHEN  (2) (1)
WHEN  (3) (1)
WHEN  (4) (1)
WHEN  (5) (1)
WHEN  (6) (1)
WHEN  (7) (1)
WHEN  (8) (1)
WHEN  (9) (1)
WHEN  (10) (1)

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 10
WHEN  (1) ('?MoveTopButton')
WHEN  (2) ('?MovePageUpButton')
WHEN  (3) ('?MovePageDownButton')
WHEN  (4) ('?MoveBottomButton')
WHEN  (5) ('?GoToButton')
WHEN  (6) ('?FindButton')
WHEN  (7) ('?PrintButton')
WHEN  (8) ('?EditButton')
WHEN  (9) ('?ListTextModeButton')
WHEN  (10) ('?CloseButton')

%DontApply LONG  (0)
%ApplyAsRegularTip LONG  (0)
%ToolTipTextColour LONG  (0)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 7
PARENT 4
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 13
WHEN  (1) ('?AsciiBox')
WHEN  (2) ('?TextField')
WHEN  (3) ('?MoveTopButton')
WHEN  (4) ('?MovePageUpButton')
WHEN  (5) ('?MovePageDownButton')
WHEN  (6) ('?MoveBottomButton')
WHEN  (7) ('?GoToButton')
WHEN  (8) ('?FindButton')
WHEN  (9) ('?PrintButton')
WHEN  (10) ('?EditButton')
WHEN  (11) ('?ListTextModeButton')
WHEN  (12) ('?CloseButton')
WHEN  (13) ('?Image1')

%DisableResize DEPEND %OverrideControls LONG TIMES 13
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)
WHEN  (13) (1)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 13
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Constant Right Border')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Lock Width')
WHEN  (5) ('Lock Width')
WHEN  (6) ('Lock Width')
WHEN  (7) ('Lock Width')
WHEN  (8) ('Lock Width')
WHEN  (9) ('Lock Width')
WHEN  (10) ('Lock Width')
WHEN  (11) ('Lock Width')
WHEN  (12) ('Lock Width')
WHEN  (13) ('Resize')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 13
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Constant Bottom Border')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')
WHEN  (7) ('Lock Height')
WHEN  (8) ('Lock Height')
WHEN  (9) ('Lock Height')
WHEN  (10) ('Lock Height')
WHEN  (11) ('Lock Height')
WHEN  (12) ('Lock Height')
WHEN  (13) ('Resize')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 13
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Left')
WHEN  (6) ('Fix Left')
WHEN  (7) ('Fix Left')
WHEN  (8) ('Fix Left')
WHEN  (9) ('Fix Left')
WHEN  (10) ('Fix Left')
WHEN  (11) ('Fix Left')
WHEN  (12) ('Fix Right')
WHEN  (13) ('Move')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 13
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Top')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')
WHEN  (6) ('Fix Bottom')
WHEN  (7) ('Fix Bottom')
WHEN  (8) ('Fix Bottom')
WHEN  (9) ('Fix Bottom')
WHEN  (10) ('Fix Bottom')
WHEN  (11) ('Fix Bottom')
WHEN  (12) ('Fix Bottom')
WHEN  (13) ('Move')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 5
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[WINDOW]
Window  WINDOW('View text file'),AT(,,298,212),FONT('Microsoft Sans Serif',10,,FONT:regular, |
          CHARSET:DEFAULT),RESIZE,TILED,ALRT(AltF3),ALRT(F3Key),ALRT(ShiftF3),ALRT(CtrlG), |
          ALRT(CtrlP),ALRT(CtrlE),ALRT(CtrlT),ALRT(CtrlL),ALRT(CtrlF),ALRT(CtrlF3),ALRT(CtrlShiftF3), |
          CENTER,ICON('data16.ico'),GRAY,IMM,MAX,PALETTE(256),SYSTEM,WALLPAPER('WALLPAPER.GIF')
          LIST,AT(4,4,290,185),USE(?AsciiBox),FONT('Courier New',9,,FONT:bold,CHARSET:ANSI), |
            COLOR(COLOR:White),#ORDINAL(1)
          TEXT,AT(6,6,290,185),USE(TextField),FONT('Courier New',9,,FONT:bold,CHARSET:ANSI), |
            LEFT,HSCROLL,BOXED,COLOR(COLOR:White),HIDE,#ORIG(TextField),#ORDINAL(2)
          BUTTON,AT(4,194,14,14),USE(?MoveTopButton),ICON('vcrfirst.ico'),TIP('Move To First Line'), |
            #ORIG(?Button5),#ORDINAL(3)
          BUTTON,AT(20,194,14,14),USE(?MovePageUpButton),ICON('vcrprior.ico'),TIP('Page Up'), |
            #ORIG(?Button6),#ORDINAL(4)
          BUTTON,AT(36,194,14,14),USE(?MovePageDownButton),ICON('vcrnext.ico'),TIP('Page Down'), |
            #ORIG(?Button7),#ORDINAL(5)
          BUTTON,AT(52,194,14,14),USE(?MoveBottomButton),ICON('vcrlast.ico'),TIP('Move to Last Line'), |
            #ORIG(?Button8),#ORDINAL(6)
          BUTTON,AT(72,194,14,14),USE(?GoToButton),ICON('GoToLine.ico'),TIP('Go to Line'), |
            #ORIG(?Button9),#ORDINAL(7)
          BUTTON,AT(88,194,14,14),USE(?FindButton),ICON('find.ico'),TIP('Find'),#ORIG(?Button2), |
            #ORDINAL(8)
          BUTTON,AT(108,194,14,14),USE(?PrintButton),ICON('print.ico'),TIP('Print'),#ORIG(?Button3), |
            #ORDINAL(9)
          BUTTON,AT(128,194,14,14),USE(?EditButton),ICON('edit.ico'),TIP('Edit'),#ORIG(?Button4), |
            #ORDINAL(10)
          BUTTON,AT(148,194,14,14),USE(?ListTextModeButton),ICON('text.ico'),TIP('Text View'), |
            #ORIG(?Button10),#ORDINAL(11)
          BUTTON('Cl&ose'),AT(249,194,45,14),USE(?CloseButton),TIP('Close File Viewer window.'), |
            #ORDINAL(12)
          IMAGE('list.ico'),AT(163,194,14,14),USE(?Image1),CENTERED,HIDE,#ORIG(?Image1),#ORDINAL(13)
        END

[PROCEDURE]
NAME srcViewAsciiFile
PROTOTYPE '(LONG lModuleId, *? pWhat, *THREADQTYPE pThreadQ)'
PARAMETERS '(lModuleId, pWhat,pThreadQ)'
[COMMON]
FROM ABC Source
MODIFIED '2013/01/10' '12:41:49'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  IF lModuleId
     SORT(ModuleQ,+ModuleQ.lModuleId)
     ModuleQ.lModuleId = lModuleId
     GET(ModuleQ,+ModuleQ.lModuleId)
    ASSERT(~ERRORCODE())
     CASE glo:bForceEdit
     OF 0
        OMIT('***',_Scintilla_)
        winViewAsciiFile(ModuleQ.szModulePath & ModuleQ.szModuleName, pWhat)
        !***
        COMPILE('***',_Scintilla_)
        winSciViewAsciiFile(ModuleQ.szModulePath & ModuleQ.szModuleName, pWhat)
        ! szWhat = pWhat
        ! start(winSciViewAsciiFile,25000,ModuleQ.szModulePath & ModuleQ.szModuleName, szWhat)
        !***
     OF 1
        sFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
        IF glo:bUseAssociation
           szNull = ''
           ShellExecute(0{prop:handle},0,sFileName,0,szNull,1)
        ELSE
           IF NUMERIC(pWhat)
              lSearchLine = pWhat
           END
           szCommandline = 'Notepad.exe ' & CLIP(sFilename)
           IF glo:szEditorCommand
              szCommandLine = glo:szEditorCommand
              I = INSTRING('.EXE ',UPPER(szCommandLine),1)
              IF I
                 szCommandLine = SHORTPATH(szCommandLine[1 : I+3]) & szCommandLine[I+4 : LEN(szCommandLine)]
              END
              !look for filename parameter token
              I = INSTRING('%1',szCommandLine,1)
              IF I
                 szCommandLine = SUB(szCommandLine,1,I-1) & |
                                 CLIP(sFilename) & |
                                 SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
              END
              !look for line number parameter token
              I = INSTRING('%2',szCommandLine,1)
              IF I
                 szCommandLine = SUB(szCommandLine,1,I-1) & |
                                 lSearchLine & |
                                 SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
              END
           END
           RUN(szCommandLine)
           IF RUNCODE() = -4   !Failed to execute
             CASE MESSAGE('An error occurred trying to execute the following command:||' & szCommandLine & |
                     '||Do you want to use Notepad?',ERROR(),ICON:EXCLAMATION, |
                     BUTTON:YES+BUTTON:NO,BUTTON:YES)
             OF BUTTON:YES
                RUN('Notepad.exe ' & CLIP(sFilename))
             END
           END
        END
     ELSE
     END
  END
  RETURN
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
sFilename       CSTRING(256)
szCommandLine   CSTRING(256)
lSearchLine     LONG
I               LONG
J               LONG
szNull          CSTRING(2)
szWhat          STRING(10)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
winSciViewAsciiFile
winViewAsciiFile
[PROCEDURE]
NAME winSciViewAsciiFile
PROTOTYPE '(STRING sFileName, LONG LineNo)'
PARAMETERS '(STRING sFileName, LONG LineNo)'
[COMMON]
DESCRIPTION 'Scintilla Ascii File Viewer'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:15:26'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('1c82b8e7-ece7-41eb-a958-fcd90605451e'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(I)
[REPORTCONTROLS]
! STRING(@n-14),USE(I)
I                        LONG
!!> GUID('0238b713-9880-48d2-ad00-e9156ce5bd88'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(J)
[REPORTCONTROLS]
! STRING(@n-14),USE(J)
J                        LONG
!!> GUID('8963052e-bd79-4e07-bd2b-c4bea817d8fb'),PICTURE(@n-14)
[SCREENCONTROLS]
! PROMPT('K:'),USE(?K:Prompt)
! ENTRY(@n-14),USE(K),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(K),RIGHT(1)
K                        LONG
!!> GUID('ab06b22c-24e9-4ba5-97d7-fdb4568a9a7b'),PROMPT('K:'),HEADER('K'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@s20),USE(bControlInitialised)
[REPORTCONTROLS]
! STRING(@s20),USE(bControlInitialised)
bControlInitialised      BOOL
!!> GUID('d3b1c661-0388-43e7-a2c5-7d596d8e2515'),PICTURE(@s20)
[SCREENCONTROLS]
! TEXT,USE(loc:szViewerStyle)
[REPORTCONTROLS]
! TEXT,USE(loc:szViewerStyle)
loc:szViewerStyle        CSTRING(256)
!!> GUID('e91a6ac6-5b93-464f-ad52-128d3f84d019'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s20),USE(ViewerActive)
[REPORTCONTROLS]
! STRING(@s20),USE(ViewerActive)
ViewerActive             BOOL
!!> GUID('2115047f-8d7e-47be-bc04-5b629b5efbb7'),PICTURE(@s20)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 13
WHEN  ('') ('No Special Action')
WHEN  ('?CloseButton') ('No Special Action')
WHEN  ('?EditButton') ('No Special Action')
WHEN  ('?FindButton') ('No Special Action')
WHEN  ('?GoToButton') ('No Special Action')
WHEN  ('?LineDownButton') ('No Special Action')
WHEN  ('?LineUpButton') ('No Special Action')
WHEN  ('?MoveBottomButton') ('No Special Action')
WHEN  ('?MovePageDownButton') ('No Special Action')
WHEN  ('?MovePageUpButton') ('No Special Action')
WHEN  ('?MoveTopButton') ('No Special Action')
WHEN  ('?PrintButton') ('No Special Action')
WHEN  ('?sciControl:Region') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CloseButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CloseButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 4
WHEN  ('?CloseButton') ()
WHEN  ('?GoToButton') ()
WHEN  ('?MovePageUpButton') ()
WHEN  ('?MoveTopButton') ()

%ButtonThread DEPEND %Control LONG TIMES 4
WHEN  ('?CloseButton') (0)
WHEN  ('?GoToButton') (0)
WHEN  ('?MovePageUpButton') (0)
WHEN  ('?MoveTopButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 13
WHEN  ('') ('25000')
WHEN  ('?CloseButton') ('25000')
WHEN  ('?EditButton') ('25000')
WHEN  ('?FindButton') ('25000')
WHEN  ('?GoToButton') ('25000')
WHEN  ('?LineDownButton') ('25000')
WHEN  ('?LineUpButton') ('25000')
WHEN  ('?MoveBottomButton') ('25000')
WHEN  ('?MovePageDownButton') ('25000')
WHEN  ('?MovePageUpButton') ('25000')
WHEN  ('?MoveTopButton') ('25000')
WHEN  ('?PrintButton') ('25000')
WHEN  ('?sciControl:Region') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CloseButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 4
WHEN  ('?CloseButton') ()
WHEN  ('?GoToButton') ()
WHEN  ('?MovePageUpButton') ()
WHEN  ('?MoveTopButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 4
WHEN  ('?CloseButton') (0)
WHEN  ('?GoToButton') (0)
WHEN  ('?MovePageUpButton') (0)
WHEN  ('?MoveTopButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 13
WHEN  ('') ('None')
WHEN  ('?CloseButton') ('None')
WHEN  ('?EditButton') ('None')
WHEN  ('?FindButton') ('None')
WHEN  ('?GoToButton') ('None')
WHEN  ('?LineDownButton') ('None')
WHEN  ('?LineUpButton') ('None')
WHEN  ('?MoveBottomButton') ('None')
WHEN  ('?MovePageDownButton') ('None')
WHEN  ('?MovePageUpButton') ('None')
WHEN  ('?MoveTopButton') ('None')
WHEN  ('?PrintButton') ('None')
WHEN  ('?sciControl:Region') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CloseButton') ('')
WHEN  ('?GoToButton') ('')
WHEN  ('?MovePageUpButton') ('')
WHEN  ('?MoveTopButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 4
WHEN  ('?CloseButton') ()
WHEN  ('?GoToButton') ()
WHEN  ('?MovePageUpButton') ()
WHEN  ('?MoveTopButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 6
WHEN  ('') (1)
WHEN  ('?CloseButton') (1)
WHEN  ('?GoToButton') (1)
WHEN  ('?MovePageUpButton') (1)
WHEN  ('?MoveTopButton') (1)
WHEN  ('?sciControl:Region') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?GoToButton')TIMES 0
WHEN  ('?MovePageUpButton')TIMES 0
WHEN  ('?MoveTopButton')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?CloseButton') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?CloseButton')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?CloseButton')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?sciControl:Region')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CloseButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 1
[END]
[END]
WHEN '?MovePageUpButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:PageUp,?sciControl:Region)
[END]
[END]
WHEN '?MovePageDownButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:PageDown,?sciControl:Region)
[END]
[END]
WHEN '?MoveBottomButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:ScrollBottom,?sciControl:Region)
[END]
[END]
WHEN '?GoToButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SciControl.AskGotoLine()
[END]
[END]
WHEN '?FindButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SciControl.SearchAsk()
[END]
[END]
WHEN '?PrintButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SciControl.PrintAsk()
[END]
[END]
WHEN '?EditButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF glo:bUseAssociation
   szFilename = CLIP(sFilename)
   szNull = ''
   ShellExecute(window{prop:handle},0,szFilename,0,szNull,1)
ELSE
   szCommandline = 'Notepad.exe ' & CLIP(sFilename)
   IF glo:szEditorCommand
      szCommandLine = glo:szEditorCommand
      I = INSTRING('.EXE ',UPPER(szCommandLine),1)
      IF I
         szCommandLine = SHORTPATH(szCommandLine[1 : I+3]) & szCommandLine[I+4 : LEN(szCommandLine)]
      END
      !look for filename parameter token
      I = INSTRING('%1',szCommandLine,1)
      IF I
         szCommandLine = SUB(szCommandLine,1,I-1) & |
                         CLIP(sFilename) & |
                         SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
      END
      !look for line number parameter token
      I = INSTRING('%2',szCommandLine,1)
      IF I
         szCommandLine = SUB(szCommandLine,1,I-1) & |
                         LineNo & |
                         SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
      END
   END
   RUN(szCommandLine)
   IF RUNCODE() = -4   !Failed to execute
     CASE MESSAGE('An error occurred trying to execute the following command:||' & szCommandLine & |
             '||Do you want to use Notepad?',ERROR(),ICON:EXCLAMATION, |
             BUTTON:YES+BUTTON:NO,BUTTON:YES)
     OF BUTTON:YES
        RUN('Notepad.exe ' & CLIP(sFilename))
     END
   END
END
[END]
[END]
WHEN '?MoveTopButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:ScrollTop,?sciControl:Region)
[END]
[END]
WHEN '?LineUpButton '
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:ScrollUp,?sciControl:Region)
[END]
[END]
WHEN '?LineDownButton '
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:ScrollDown,?sciControl:Region)
[END]
[END]
WHEN '?LineUpButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:ScrollUp,?sciControl:Region)
[END]
[END]
WHEN '?LineDownButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:ScrollDown,?sciControl:Region)
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
! Initialize Styles
!----------------------------------------------------------------------------
LOOP K = 1 TO SCE_CLW_LAST
   EXECUTE K
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,255,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,128,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,8421504,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,16711680,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,8388608,16777215,0,0,1,1'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,32768,16777215,0,0,1,1'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,255,16777215,0,0,1,0'
      loc:szViewerStyle = 'Courier New,10,700,1,0,0,8421376,16777215,0,0,1,0'
   END

   INIMgr.Fetch('Options','ViewerStyle'& FORMAT(K-1,@n02),loc:szViewerStyle)
   I = 1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Font = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].FontSize = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].FontStyle = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Bold = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Italic = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Underline = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Fore = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Back = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].EolFilled = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].CaseOpt = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Visible = loc:szViewerStyle[I : J-1]
   I = J+1
   J = LEN(CLIP(loc:szViewerStyle))
   glo:ViewerStyles.StyleGroup[K].HotSpot = loc:szViewerStyle[I : J]
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
Window{PROP:Buffer} = 1
Window{PROP:Text} = 'View File [' & CLIP(sFilename) & ']' !& ' [' & pWhat & ']'

CASE glo:Background
OF 1  !Color
   Window{PROP:Wallpaper} = ''
   Window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   Window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   Window{PROP:Color} = COLOR:NONE
OF 3  !None
   Window{PROP:Wallpaper} = ''
   Window{PROP:Color} = COLOR:NONE
END

J = LASTFIELD()
LOOP I = 0 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
!XPMoveTopButton.Init(?MoveTopButton, 0, 0)
!XPMoveTopButton.SetIconSize(32, 32)
!XPMovePageUpButton.Init(?MovePageUpButton, 0, 0)
!XPMovePageUpButton.SetIconSize(32, 32)
!XPMovePageDownButton.Init(?MovePageDownButton, 0, 0)
!XPMovePageDownButton.SetIconSize(32, 32)
!XPMoveBottomButton.Init(?MoveBottomButton, 0, 0)
!XPMoveBottomButton.SetIconSize(32, 32)
!XPGoToButton.Init(?GoToButton, 0, 0)
!XPGoToButton.SetIconSize(32, 32)
!XPFindButton.Init(?FindButton, 0, 0)
!XPFindButton.SetIconSize(32, 32)
!XPPrintButton.Init(?PrintButton, 0, 0)
!XPPrintButton.SetIconSize(32, 32)
!XPEditButton.Init(?EditButton, 0, 0)
!XPEditButton.SetIconSize(32, 32)
!XPCloseButton.Init(?CloseButton, 0, 0)
!XPCloseButton.SetIconSize(32, 32)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8104
LABEL
PROPERTY:END
  IF ReturnValue = Level:Benign
     bControlInitialised = TRUE
  ELSE
     bControlInitialised = FALSE
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Ascii_File_Viewer.htm')
   END
END  
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
hwnd = 0    !SciControl.GetWindowHandle()
IF hwnd
   lb.lbStyle = BS_SOLID
   lb.lbColor = 0B99D7FH
   lb.lbHatch = 0
   hBrush = CreateBrushIndirect(lb)
   hDC = getWindowDC(hwnd)
   hOldBrush = SelectObject(hDC,hBrush)
   ExtFloodFill(hDC,0,0,COLOR:BLACK,FLOODFILLSURFACE)
   SelectObject(hDC,hOldBrush)
   DeleteObject(hBrush)
   ReleaseDC(hwnd,hDC)
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
      COMPILE('***',_Scintilla_)
lc  LONG,AUTO
lh  LONG,AUTO
h   LONG,AUTO
h2  LONG,AUTO
      !***
[END]
[END]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
szFilename           CSTRING(261)
szCommandline        CSTRING(261)
szNull               CSTRING(2)
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lb          LIKE(LOGBRUSH)
hOldBrush   UNSIGNED
hBrush      UNSIGNED
hDC         UNSIGNED
hCheckBox   UNSIGNED
rVal        UNSIGNED
hwnd        UNSIGNED
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'PreAlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4999
PROPERTY:END
IF KEYCODE() <> EscKey AND KEYCODE() <> CtrlE
   CYCLE
END
[END]
WHEN 'DoResize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SciControl.Reset(FALSE)
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
CASE KEYCODE()
  OF CtrlE
     POST(EVENT:Accepted,?EditButton)
END
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!==========================================================!
!ToolTip for Scintilla Viewer                              !
!==========================================================!
Viewer_tt            ToolTipClass                          !
hwndViewer_TT        HWND                                  !
!==========================================================!
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
AsciiFilename        STRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
AsciiFile            FILE,DRIVER('ASCII'),NAME(AsciiFilename),PRE(A1),THREAD
RECORD                RECORD,PRE()
TextLine                STRING(255)
                      END
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5050
PROPERTY:END
szClarionKeywords    CSTRING(2048)
szCompilerDirectives CSTRING(2048)
szBuiltinProcsFuncs  CSTRING(2048)
szStructDataTypes    CSTRING(2048)
szAttributes         CSTRING(2048)
szStandardEquates    CSTRING(2048)
[END]
EMBED %SciMethodCodeSection
[INSTANCES]
WHEN '6'
[INSTANCES]
WHEN 'TakeOpenWindow'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF bControlInitialised
   SciControl.UsePopup(FALSE)
   SciControl.SetDefaults()

   szAsciiFilename = CLIP(sFileName)
   SciControl.SetReadOnly(FALSE)
   ViewerActive = SciControl.OpenFile(szAsciiFilename)
   IF ViewerActive = TRUE
      SciControl.SetReadOnly(TRUE)
      sciControl.GoToLine(LineNo + ?sciControl:Region{PROP:LineCount})
      SciControl.GoToLine(LineNo-1)
   END
END
[END]
[END]
WHEN 'OpenFile'
[INSTANCES]
WHEN '(*CSTRING szFileName),BOOL'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
?sciControl:Region{PROP:Use} = SELF.szTextBuffer
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(*WINDOW W,LONG feq,UNSIGNED id,BOOL Themed = 0),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
ReturnValue = PARENT.Init(W,feq,id,TRUE)
OMIT('ReturnValue') 
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
OMIT('***',UseDefaultWordlist=1)
IF srcGetWordList(szClarionKeywords, szCompilerDirectives, szBuiltinProcsFuncs, szStructDataTypes, szAttributes, szStandardEquates)
   IF CLIP(szClarionKeywords)
      SELF.ClarionKeywords     &= szClarionKeywords
   END
   IF CLIP(szCompilerDirectives)
      SELF.CompilerDirectives  &= szCompilerDirectives
   END
   IF CLIP(szBuiltinProcsFuncs)
      SELF.BuiltinProcsFuncs   &= szBuiltinProcsFuncs
   END
   IF CLIP(szStructDataTypes)
      SELF.StructDataTypes     &= szStructDataTypes
   END
   IF CLIP(szAttributes)
      SELF.Attributes          &= szAttributes
   END
   IF CLIP(szStandardEquates)
      IF glo:bClarionVersion >= CWVERSION_C70 !CWVERSION_C80, CWVERSION_C90, CWVERSION_C100
         szStandardEquates = szStandardEquates & |
                             ' BEEP: BUTTON: CHARSET: COLOR: CREATE: CURSOR: DATATYPE: DDE: DOCK: DRIVEROP: '   & |
                             'EVENT: FF_: FILE: FONT: ICON: LISTZONE: MATCH: OCX: PAPER: PAPERBIN: '            & |
                             'PEN: PROP: PROPLIST: PROPPRINT: REJECT: RESOLUTION: STD: TPSREADONLY '            & |
                             'VBXEVENT: WARN:'
      END
      SELF.StandardEquates     &= szStandardEquates
   END
END
!***
SELF.Style = glo:ViewerStyles
IF glo:Typeface
   SELF.SetTypeface(glo:Typeface)
END
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
CASE EVENT()
   OF    SCN_MARGINCLICK
      SELF.ToggleFold(SELF.LineFromPosition(SELF.MarginClickPosition))
   OF    SCN_HOTSPOTCLICK        |
   OROF  SCN_HOTSPOTDOUBLECLICK
      WordEndPosition = SELF.WordEndPosition(SELF.HotSpotClickPosition, 0)
      WordStartPosition = SELF.WordStartPosition(SELF.HotSpotClickPosition, 0)
      SELF.SetCurrentPos(WordStartPosition)
      SELF.SetAnchor(WordEndPosition)
      SELF.GetSelText(szHotClickWord)
      SELF.SetSel(SELF.HotSpotClickPosition,SELF.HotSpotClickPosition)
      CASE glo:bClarionVersion
        OF CWVERSION_C2
           HELP(szRoot & '\bin\CW20help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C4
           HELP(szRoot & '\bin\C4help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C5 OROF CWVERSION_C5EE
           HELP(szRoot & '\bin\C5help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C55 OROF CWVERSION_C55EE
           HELP(szRoot & '\bin\C55help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C60 OROF CWVERSION_C60EE
           HELP(szRoot & '\bin\C60help.hlp',szHotClickWord)
           HELP('abcview.hlp')
        OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
           IF oHH &= NULL
              oHH &= NEW tagHTMLHelp
              oHH.Init(szRoot & '\bin\ClarionHelp.chm')
           ELSE
              oHH.SetHelpFile(szRoot & '\bin\ClarionHelp.chm')
           END
           oHH.KeyWordLookup(szHotClickWord)
           !oHH.ShowTopic(szHotClickWord)
           oHH.SetHelpFile( 'ABCVIEW.CHM' )
      END
END
[END]
[END]
WHEN 'FindWindowTakeOpenWindow'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4500
PROPERTY:END
hwndViewer_tt = Viewer_tt.init(0{PROP:HANDLE},1) !ToolTipClass Initialization
IF hwndViewer_tt
   Fld = 0
   LOOP
      Fld = 0{PROP:NextField,Fld}
      IF Fld = 0
         BREAK
      ELSE
         IF Fld{PROP:TIP}
            IF INSTRING('<13,10>',Fld{PROP:TIP},1,1)
               Viewer_tt.addtip(Fld{PROP:HANDLE},Fld{PROP:TIP},1)
            ELSE
               Viewer_tt.addtip(Fld{PROP:HANDLE},Fld{PROP:TIP},0)
            END!IF
            Fld{PROP:TIP}=''
         END!IF
      END!IF
   END!LOOP
   Viewer_tt.SetTipTextColor(COLOR:NAVY)
END!IF
[END]
[END]
WHEN 'Colourise'
[INSTANCES]
WHEN '(LONG lStart,LONG lEnd)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
OMIT('***',UseDefaultWordlist=1)
IF UPPER(SUB(ModuleQ.szModuleName,-3,3)) = 'CLW'

   FirstLine = lStart
   LastLine = CHOOSE(lEnd = -1, SELF.GetLineCount() - 1, lEnd)

   SaveClass = POINTER(ClassQ)
   LastClass = RECORDS(ClassQ)
   LOOP thisClass = 1 TO LastClass
      GET(ClassQ,thisCLass)
      IF ClassQ.lModuleID = ModuleQ.lModuleID
         N = RECORDS(MethodQ)
         LOOP M = 1 TO N
            GET(MethodQ,M)
            IF MethodQ.lClassID = ClassQ.lClassID
               IF INRANGE(MethodQ:lSourceLine,FirstLine,LastLine)
                  sciControl.SetFoldLevel(MethodQ:lSourceLine-1,BOR(1023,SC_FOLDLEVELHEADERFLAG))
               END
            END
         END
      END
   END
   GET(ClassQ,SaveClass)

   LOOP thisLine = FirstLine TO LastLine
     thisFoldLevel = BAND(SELF.GetFoldLevel(thisLine),SC_FOLDLEVELNUMBERMASK)
     IF thisFoldLevel = 1023
        SELF.SetFoldLevel(thisLine,BOR(1024,SC_FOLDLEVELHEADERFLAG))
        LOOP thisLine = thisLine+1 TO LastLine
           thisFoldLevel = BAND(SELF.GetFoldLevel(thisLine),SC_FOLDLEVELNUMBERMASK)
           IF thisFoldLevel = 1023
              thisLine -= 1
              BREAK
           ELSE
              IF BAND(SELF.GetFoldLevel(thisLine),SC_FOLDLEVELHEADERFLAG)
                 SELF.SetFoldLevel(thisLine,BOR(thisFoldLevel+1,SC_FOLDLEVELHEADERFLAG))
              ELSE
                 SELF.SetFoldLevel(thisLine,thisFoldLevel+1)
              END
           END
        END
     END
   END

END
!***
[END]
[END]
WHEN 'SetBuffer'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetClarionLexer()
[END]
[END]
[END]
[END]
EMBED %SciMethodDataSection
[INSTANCES]
WHEN '6'
[INSTANCES]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
WordEndPosition     LONG,AUTO
WordStartPosition   LONG,AUTO
szHotClickWord      CSTRING(256)
[END]
[END]
WHEN 'FindWindowTakeOpenWindow'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
Fld     LONG,AUTO
[END]
[END]
WHEN 'Colourise'
[INSTANCES]
WHEN '(LONG lStart,LONG lEnd)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
M               LONG
N               LONG
FirstLine       LONG
LastLine        LONG
thisLine        LONG
thisFoldLevel   LONG
thisClass       LONG
LastClass       LONG
SaveClass       LONG
[END]
[END]
[END]
[END]
EMBED %ResizerMethodDataSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Resize'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
vcrXPos        LONG
vcrYPos        LONG
[END]
[END]
[END]
[END]
EMBED %ResizerMethodCodeSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Resize'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
  vcrXPos = 4
  vcrYPos = ?MoveTopButton{PROP:YPos}
  SETPOSITION(?MoveTopButton,vcrXPos,vcrYPos,,)
  vcrXPos += 16
  SETPOSITION(?MovePageUpButton,vcrXPos,vcrYPos,,)
  vcrXPos += 16
  SETPOSITION(?LineUpButton,vcrXPos,vcrYPos,,)
  vcrXPos += 16
  SETPOSITION(?LineDownButton,vcrXPos,vcrYPos,,)
  vcrXPos += 16
  SETPOSITION(?MovePageDownButton,vcrXPos,vcrYPos,,)
  vcrXPos += 16
  SETPOSITION(?MoveBottomButton,vcrXPos,vcrYPos,,)
[END]
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 4
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Ascii_File_Viewer.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 1
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 8
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (16711680)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 9
PARENT 8
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)', |
  'Resize {17}PROCEDURE(),BYTE,PROC,DERIVED')

%AppStrategy DEFAULT  ('Don''t alter controls')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 12
WHEN  (1) ('?sciControl:Region')
WHEN  (2) ('?MoveTopButton')
WHEN  (3) ('?MovePageUpButton')
WHEN  (4) ('?MovePageDownButton')
WHEN  (5) ('?MoveBottomButton')
WHEN  (6) ('?GoToButton')
WHEN  (7) ('?FindButton')
WHEN  (8) ('?PrintButton')
WHEN  (9) ('?EditButton')
WHEN  (10) ('?CloseButton')
WHEN  (11) ('?LineUpButton')
WHEN  (12) ('?LineDownButton')

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 12
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Lock Width')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Lock Width')
WHEN  (5) ('Lock Width')
WHEN  (6) ('Lock Width')
WHEN  (7) ('Lock Width')
WHEN  (8) ('Lock Width')
WHEN  (9) ('Lock Width')
WHEN  (10) ('Lock Width')
WHEN  (11) ('Lock Width')
WHEN  (12) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 12
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')
WHEN  (7) ('Lock Height')
WHEN  (8) ('Lock Height')
WHEN  (9) ('Lock Height')
WHEN  (10) ('Lock Height')
WHEN  (11) ('Lock Height')
WHEN  (12) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 12
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Left')
WHEN  (6) ('Fix Left')
WHEN  (7) ('Fix Left')
WHEN  (8) ('Fix Left')
WHEN  (9) ('Fix Left')
WHEN  (10) ('Fix Right')
WHEN  (11) ('Fix Left')
WHEN  (12) ('Fix Left')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 12
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Bottom')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')
WHEN  (6) ('Fix Bottom')
WHEN  (7) ('Fix Bottom')
WHEN  (8) ('Fix Bottom')
WHEN  (9) ('Fix Bottom')
WHEN  (10) ('Fix Bottom')
WHEN  (11) ('Fix Bottom')
WHEN  (12) ('Fix Bottom')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%AutoTransparent DEFAULT  ('Default')
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%DisableResize DEPEND %OverrideControls LONG TIMES 12
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 5
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME SciTPL CSciControl
[INSTANCE]
INSTANCE 6
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('CSciControl')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciControl')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('CSciControl') ('Colourise {14}PROCEDURE(LONG lStart,LONG lEnd),DERIVED', |
  'FindWindowTakeOpenWindow PROCEDURE(),DERIVED', 'Init {19}PROCEDURE(*WINDOW W,LONG feq,UNSIGNED id,BOOL Themed = 0),BYTE,DERIVED', |
  'OpenFile {15}PROCEDURE(*CSTRING szFileName),BOOL,PROC,DERIVED', 'SetBuffer {14}PROCEDURE(),DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,DERIVED', 'TakeOpenWindow {9}PROCEDURE(),BYTE,DERIVED')

%ControlID DEFAULT  ('1006')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('SciControl')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (0)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciViewer')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%GenerateScintilla LONG  (1)
%OmitWindowsDeclarations LONG  (1)
%NotificationEvent DEFAULT  ('EVENT:USER+1')
[CALLS]
srcGetWordList
[WINDOW]
Window  WINDOW('View text file'),AT(,,298,212),FONT('Microsoft Sans Serif',10,,FONT:regular, |
          CHARSET:DEFAULT),RESIZE,TILED,ALRT(CtrlE),CENTER,ICON('data16.ico'),GRAY,IMM,MAX, |
          MODAL,PALETTE(256),SYSTEM,WALLPAPER('WALLPAPER.GIF')
          TEXT,AT(4,4,290,185),USE(?sciControl:Region),BOXED,#ORIG(?sciControl:Region),#SEQ(6), |
            #ORDINAL(1)
          BUTTON,AT(4,194,14,14),USE(?MoveTopButton),ICON('vcrfirst.ico'),TIP('Move To First Line'), |
            #ORIG(?Button5),#ORDINAL(2)
          BUTTON,AT(20,194,14,14),USE(?MovePageUpButton),ICON('vcrprior.ico'),TIP('Page Up'), |
            #ORIG(?Button6),#ORDINAL(3)
          BUTTON,AT(36,194,14,14),USE(?LineUpButton),ICON('VCRUP.ICO'),#ORDINAL(4)
          BUTTON,AT(52,194,14,14),USE(?LineDownButton),ICON('VCRDOWN.ICO'),#ORDINAL(5)
          BUTTON,AT(68,194,14,14),USE(?MovePageDownButton),ICON('vcrnext.ico'),TIP('Page Down'), |
            #ORIG(?Button7),#ORDINAL(6)
          BUTTON,AT(84,194,14,14),USE(?MoveBottomButton),ICON('vcrlast.ico'),TIP('Move to Last Line'), |
            #ORIG(?Button8),#ORDINAL(7)
          BUTTON,AT(104,194,14,14),USE(?GoToButton),ICON('GoToLine.ico'),TIP('Go to Line'), |
            #ORIG(?Button9),#ORDINAL(8)
          BUTTON,AT(120,194,14,14),USE(?FindButton),ICON('find.ico'),TIP('Find'),#ORIG(?Button2), |
            #ORDINAL(9)
          BUTTON,AT(140,194,14,14),USE(?PrintButton),ICON('print.ico'),TIP('Print'),#ORIG(?Button3), |
            #ORDINAL(10)
          BUTTON,AT(160,194,14,14),USE(?EditButton),ICON('edit.ico'),TIP('Edit'),#ORIG(?Button4), |
            #ORDINAL(11)
          BUTTON('Cl&ose'),AT(249,194,45,14),USE(?CloseButton),TIP('Close File Viewer window.'), |
            #ORDINAL(12)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetSourceLine
PROTOTYPE '(LONG lModuleId, STRING sMethod, STRING sPrototype, <<*CSTRING Buffer>),LONG'
PARAMETERS '(lModuleId, sMethod, sPrototype, Buffer)'
[COMMON]
DESCRIPTION 'Get Method Definition Start Line'
FROM ABC Source
MODIFIED '2013/05/18' '16:44:07'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  SORT(ModuleQ,+ModuleQ.lModuleId)
  ModuleQ.lModuleId = lModuleId
  GET(ModuleQ,+ModuleQ.lModuleId)
  IF ~ERRORCODE()
     FileNameQ.sFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
     GET(FileNameQ,+FileNameQ.sFileName)
     IF ERRORCODE()                           !file has not been scanned
        DO ScanFile
     END
     SourceLineQ.sFileName = FileNameQ.sFileName
     SourceLineQ.sMethodName = UPPER(CLIP(sMethod))
     SourceLineQ.sMethodPrototype = UPPER(srcRemoveLabels(sPrototype))
     GET(SourceLineQ,+SourceLineQ.sFileName,+SourceLineQ.sMethodName,+SourceLineQ.sMethodPrototype)
     IF ERRORCODE()                            !not found
        pointerReplaced = FALSE
        !Try to catch implied pointers
        I = 1
        J = INSTRING('*',SourceLineQ.sMethodPrototype,1,I)
        LOOP WHILE J
          K = INSTRING(',',SourceLineQ.sMethodPrototype,1,J+1)
          IF K = 0
             K = INSTRING(')',SourceLineQ.sMethodPrototype,1,J+1)
          END
          IF K > 0
             glo:StructureQCopy.szStructureSort = SourceLineQ.sMethodPrototype[J+1 : K-1]
             GET(glo:StructureQCopy,+glo:StructureQCopy.szStructureSort)
             IF ~ERRORCODE()
                !remove the '*' if it is a pointer to a structure
                SourceLineQ.sMethodPrototype = SourceLineQ.sMethodPrototype[1 : J-1] & SourceLineQ.sMethodPrototype[J+1 : LEN(SourceLineQ.sMethodPrototype)]
                I = K
                pointerReplaced = TRUE
             ELSE
                I = K+1
             END
             IF I < LEN(SourceLineQ.sMethodPrototype)
                J = INSTRING('*',SourceLineQ.sMethodPrototype,1,I)
             ELSE
                BREAK
             END
          END
        END
        IF pointerReplaced = TRUE
           GET(SourceLineQ,+SourceLineQ.sFileName,+SourceLineQ.sMethodName,+SourceLineQ.sMethodPrototype)
           IF ~ERRORCODE()                            !found
              IF ~OMITTED(4)
                 Buffer = SourceLineQ.szLineText
              END
              RETURN(SourceLineQ.lSourceLine)
           END
        END
        RETURN(0)
     ELSE
        IF ~OMITTED(4)
           Buffer = SourceLineQ.szLineText
        END
        RETURN(SourceLineQ.lSourceLine)
     END
  ELSE
     RETURN(0)
  END

ScanFile    ROUTINE
  DATA
X               LONG
bProcessingMap  BYTE

  CODE
  FileNameQ.sFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
  ADD(FileNameQ,+FileNameQ.sFileName)
  lLineNum = 0
  AsciiFilename1 = FileNameQ.sFileName
  OPEN(AsciiFile1,040h)   !Read-Only
  IF ~ERRORCODE()
     sav:szText = ''
     sav:lLineNum = 0
     SET(AsciiFile1)
     LOOP
        NEXT(AsciiFile1)
        IF ERRORCODE()
           BREAK
        ELSE
           lLineNum += 1
           X = srcFindComment(AsciiFile1.record.TextLine)
           IF X
              AsciiFile1.record.TextLine = SUB(AsciiFile1.record.TextLine,1,X-1)
           END
           szText = CLIP(AsciiFile1.record.TextLine)
           IF UPPER(CLIP(LEFT(szText))) = 'MAP'
              bProcessingMap = TRUE
           END
           IF bProcessingMap
              IF UPPER(CLIP(LEFT(szText))) = 'END'  |
              OR UPPER(CLIP(LEFT(szText))) = '.'
                 bProcessingMap = FALSE
              END
           ELSE
              IF szText
                 IF szText[LEN(szText)] = '|'
                    IF sav:szText = ''
                       sav:lLineNum = lLineNum
                    END
                    sav:szText = sav:szText & CLIP(LEFT(szText[1 : LEN(szText)-1]))
                 ELSE
                    IF sav:szText
                       AsciiFile1.record.TextLine = sav:szText & CLIP(LEFT(szText))
                       sav:szText = ''
                    END
                    IF INSTRING(' PROCEDURE',UPPER(AsciiFile1.record.TextLine),1) OR |
                       INSTRING(' FUNCTION',UPPER(AsciiFile1.record.TextLine),1)
                       SourceLineQ.sFileName = FileNameQ.sFileName
                       SourceLineQ.sMethodName = UPPER(SUB(AsciiFile1.record.TextLine,1,INSTRING(' ',AsciiFile1.record.TextLine)-1))
                       SourceLineQ.sMethodPrototype = UPPER(srcRemoveLabels(srcGetPrototype(AsciiFile1.record.TextLine)))
                       SourceLineQ.lSourceLine = CHOOSE(sav:lLineNum=0,lLineNum,sav:lLineNum)
                       SourceLineQ.szLineText = CLIP(AsciiFile1.record.TextLine)
                       DO RemoveSpaces
                       ADD(SourceLineQ,+SourceLineQ.sFileName,+SourceLineQ.sMethodName,+SourceLineQ.sMethodPrototype)
                    END
                    sav:lLineNum = 0
                 END
              END
           END
        END
     END
     CLOSE(AsciiFile1)
  END
  EXIT
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                    LONG
J                    LONG
K                    LONG
lLineNum             LONG
AsciiFilename1       STRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
AsciiFile1           FILE,DRIVER('ASCII'),NAME(AsciiFilename1),PRE(A1),THREAD
RECORD                RECORD,PRE()
TextLine                STRING(1024)
                      END
                     END
szText               CSTRING(1025)

sav:szText           CSTRING(1025)
sav:lLineNum         LONG
pointerReplaced      BOOL
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
RemoveSpaces    ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO
K       LONG,AUTO
szWork  LIKE(SourceLineQ.szLineText)
bSkip   BYTE(0)

  CODE
  J = LEN(SourceLineQ.szLineText)
  K = 0
  LOOP I = 1 TO J
     IF SourceLineQ.szLineText[I] <> ' '
        bSkip = FALSE
        K += 1
        szWork[K] = SourceLineQ.szLineText[I]
     ELSE
        IF ~bSkip
           K += 1
           szWork[K] = SourceLineQ.szLineText[I]
           bSkip = TRUE
        END
     END
  END
  K += 1
  szWork[K] = '<0>'
  SourceLineQ.szLineText = szWork
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcEqual
srcFindComment
srcGetPrototype
srcRemoveLabels
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME Access:Memory
PROTOTYPE '(*CSTRING szFileName,BYTE bMode),LONG,PROC'
[COMMON]
FROM KCR ImpExGlobalData
MODIFIED '2013/05/18' '16:49:17'
[PROMPTS]
%TplName DEFAULT  ('ImpExGlobalData (Devuna)')
%TplDescription DEFAULT  ('Import/Export Global Data')
%Identifier1 DEFAULT  ('')
%Identifier2 DEFAULT  ('')
%Identifier3 DEFAULT  ('')
%DataBufferSize DEFAULT  ('32')
%DataElementList UNIQUE DEFAULT  ('ExtraModuleQ', 'ModuleQ', 'ClassQ', 'PropertyQ', |
  'MethodQ', 'StructureQ', 'EnumQ', 'TreeQ', 'CallQ', 'NoteQ', 'CategoryQ', 'incTemplateQ', |
  'clwTemplateQ', 'FavoritesQ', 'tplTemplateQ')
%CreateBackup LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcEqual
PROTOTYPE '(STRING S1,STRING S2),BOOL'
PARAMETERS '(S1, S2)'
[COMMON]
DESCRIPTION 'Compare with blanks suppressed'
FROM ABC Source
MODIFIED '2001/01/08' '12:59:06'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
A   CSTRING(1024),AUTO
B   CSTRING(1024),AUTO
I   LONG,AUTO
J   LONG,AUTO
K   LONG,AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !remove blanks from s1
  A = ''
  K = 0
  J = LEN(S1)
  LOOP I = 1 TO J
    IF S1[I] <> ' '
       K += 1
       A[K] = S1[I]
    END
  END
  A[K+1] = '<0>'
  !remove blanks from s2
  B = ''
  K = 0
  J = LEN(S2)
  LOOP I = 1 TO J
    IF S2[I] <> ' '
       K += 1
       B[K] = S2[I]
    END
  END
  B[K+1] = '<0>'
  !compare
  IF A = B
     RETURN(TRUE)
  ELSE
     RETURN(FALSE)
  END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetPrototype
PROTOTYPE '(STRING sString),STRING'
PARAMETERS '(sString)'
[COMMON]
DESCRIPTION 'extract prototype from passed string'
FROM ABC Source
MODIFIED '2004/12/27' '18:07:25'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I           LONG,AUTO
J           LONG,AUTO
X           LONG,AUTO
szPrototype CSTRING(1024)
szWork      CSTRING(1024)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  I = INSTRING(' PROCEDURE',UPPER(sString),1)
  IF I
     I += 10
  ELSE
     I = INSTRING(' FUNCTION',UPPER(sString),1) + 9
  END
  IF I < LEN(CLIP(sString))
     J = INSTRING(')',sString,1,I)
     IF J
        szWork = '(' & CLIP(LEFT(sString[I+1 : J-1])) & ')'
        !start bug fix
        IF szWork[1:2] = '(('
           szWork = szWork[2 : LEN(szWork)]
        END
        !end bug fix

        szPrototype = ''
        J = LEN(szWork)
        X = 0
        LOOP I = 1 TO J
          IF szWork[I] <> ' ' !AND szWork[I] <> '='
             X += 1
             szPrototype[X] = szWork[I]
          ELSE
             !we hit a space
             IF szWork[I+1] <> ' ' AND szWork[I+1] <> ',' AND szPrototype[X] <> ','
                X += 1
                szPrototype[X] = szWork[I]
             END
          END
        END
        X += 1
        szPrototype[X] = '<0>'
     ELSE
        szPrototype = '()'
     END
  ELSE
     szPrototype = '()'
  END

  !equates have not been processed at this point
  !special treatment for ai_com classes
  X = INSTRING('REFIID',szPrototype,1)
  LOOP WHILE X
    szPrototype = SUB(szPrototype,1,X-1) & 'long' & SUB(szPrototype,X+6,LEN(szPrototype)-(X+5))
    X = INSTRING('REFIID',szPrototype,1)
  END
  X = INSTRING('REFCLSID',szPrototype,1)
  LOOP WHILE X
    szPrototype = SUB(szPrototype,1,X-1) & 'long' & SUB(szPrototype,X+8,LEN(szPrototype)-(X+7))
    X = INSTRING('REFCLSID',szPrototype,1)
  END

  RETURN(szPrototype)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcRemoveLabels
PROTOTYPE '(STRING s),STRING'
PARAMETERS '(s)'
[COMMON]
DESCRIPTION 'Remove labels from passed prototype string'
FROM ABC Source
MODIFIED '2003/07/21' '11:33:50'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szReturn     CSTRING(1024)
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
Q           QUEUE,PRE(Q)
szSnip        CSTRING(64)
            END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  FREE(Q)
  !Copy the passed string to a local variable, removing < and >
  K = 0
  J = LEN(CLIP(s))
  LOOP I = 1 TO J
    IF s[I] = '<<' OR |
       s[I] = '>'
       !do nothing
    ELSE
       K += 1
       szReturn[K] = s[I]
    END
  END
  szReturn[K+1] = '<0>'

  !Remove CONST attribute
  I = INSTRING('CONST ',UPPER(szReturn),1)
  LOOP WHILE I
    szReturn = szReturn[1 : I-1] & szReturn[I+6 : LEN(szReturn)]
    I = INSTRING('CONST ',UPPER(szReturn),1)
  END

  !Split the string at the comma's
  LOOP
    I = INSTRING(',',szReturn)
    IF I
       Q.szSnip = CLIP(LEFT(szReturn[1 : I-1]))
       ADD(Q)
       szReturn = szReturn[I+1 : LEN(szReturn)]
    ELSE
       Q.szSnip = CLIP(LEFT(szReturn))
       ADD(Q)
       szReturn = ''
       BREAK
    END
  END

  !Now loop through the snips and truncate at first space
  J = RECORDS(Q)
  LOOP I = 1 TO J
    GET(Q,I)
    K = INSTRING(' ',Q.szSnip)
    IF K
       Q.szSnip[K] = '<0>'                  !null terminates cstring
       PUT(Q)
    END
  END

  !Finally piece the snips back together
  J = RECORDS(Q)
  LOOP I = 1 TO J
    GET(Q,I)
    szReturn = szReturn & Q.szSnip & ','
  END
  szReturn[LEN(szReturn)] = '<0>'           !replace the trailing comma
  K = LEN(szReturn)                         !and make sure we have a closing ')'
  IF K
     IF szReturn[K] <> ')'
        szReturn[K+1 : K+2] = ')<0>'
     END
  END

  !Return to caller
  RETURN(szReturn)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetLabel
PROTOTYPE '(STRING s),STRING'
PARAMETERS '(s)'
[COMMON]
DESCRIPTION 'Get Statement Label'
FROM ABC Source
MODIFIED '2003/05/29' '18:31:56'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szReturn    CSTRING(64)
I           LONG,AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  I = INSTRING(' ',s)
  IF I = 1
     szReturn = ''
  ELSIF I > 1
     szReturn = s[1 : I-1]
  ELSE
     szReturn = s
  END
  RETURN(szReturn)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetStatement
PROTOTYPE '(STRING s),STRING'
PARAMETERS '(s)'
[COMMON]
DESCRIPTION 'Get Data Statement'
FROM ABC Source
MODIFIED '2003/08/12' '17:19:24'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szReturn    CSTRING(64)
I           LONG,AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  I = INSTRING(' ',s)
  IF I = 1
     szReturn = CLIP(LEFT(s))
  ELSIF I > 1
     szReturn = CLIP(LEFT(s[I : LEN(s)]))
  ELSE
     szReturn = ''
  END
  RETURN(szReturn)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddStructures
[COMMON]
DESCRIPTION 'Add Class Structures to Tree'
FROM ABC Source
MODIFIED '2013/03/07' ' 7:09:33'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  szLastStructure = ''
  szParentStruct = ''
  IF glo:szParentClassName
     StructureQ.szStructureSort = UPPER(glo:szParentClassName)
     GET(StructureQ,+StructureQ.szStructureSort)
     K = INSTRING('(',StructureQ.szDataType)
     IF K
        szParentStruct = StructureQ.szDataType[K+1 : INSTRING(')',StructureQ.szDataType)-1]
     END
  END
  IF szParentStruct
     J = RECORDS(StructureQ)
     LOOP I = 1 TO J
       GET(StructureQ,I)
       IF ERRORCODE()
          BREAK
       ELSE
          IF UPPER(StructureQ.szStructureName) <> UPPER(szParentStruct)
             CYCLE
          END

          IF StructureQ.bPrivate = TRUE AND glo:bShowPrivate = FALSE
             CYCLE
          END
          IF StructureQ.szStructureName <> szLastStructure
             szLastStructure = StructureQ.szStructureName
             lLastModuleId = StructureQ.lModuleId
             TreeQ.lLevel = 1
             TreeQ.wIcon  = ICON:STRUCTUREFOLDER
          ELSE
             IF StructureQ.lModuleId <> lLastModuleId
                lLastModuleId = StructureQ.lModuleId
                TreeQ.lLevel = 1
                TreeQ.wIcon  = ICON:STRUCTUREFOLDER
             ELSE
                TreeQ.lLevel = 2
                TreeQ.wIcon  = ICON:STRUCTURE
             END
          END
          TreeQ.szText = StructureQ.szDataLabel & ' - ' & StructureQ.szDataType
          TreeQ.lStyle = CHOOSE(StructureQ.bPrivate = FALSE,STYLE:NORMAL,STYLE:PRIVATE)

          IF TreeQ.wIcon  = ICON:STRUCTURE
             DO CheckForHyperLink
          END

          TreeQ.szSearch = ''
          TreeQ.szClassName = StructureQ.szStructureName
          TreeQ.szContextString = StructureQ.szDataLabel
          TreeQ.szHelpFile = ''
          TreeQ.lLineNum = StructureQ.lLineNum
          TreeQ.lSourceLine = 0
          TreeQ.lIncludeId = 0
          TreeQ.lModuleId  = StructureQ.lModuleId
          DO SetNoteIcon
          DO SetTipText
          ADD(TreeQ)
       END
     END
  END

  J = RECORDS(StructureQ)
  LOOP I = 1 TO J
    GET(StructureQ,I)
    IF ERRORCODE()
       BREAK
    ELSE
       IF ~glo:szParentClassName
          glo:szParentClassName = StructureQ.szStructureName
       END

       IF UPPER(StructureQ.szStructureName) <> UPPER(glo:szParentClassName)
          CYCLE
       END

       IF StructureQ.bPrivate = TRUE AND glo:bShowPrivate = FALSE
          CYCLE
       END
       IF StructureQ.szStructureName <> szLastStructure
          szLastStructure = StructureQ.szStructureName
          lLastModuleId = StructureQ.lModuleId
          TreeQ.lLevel = CHOOSE(szParentStruct='',1,2)
          TreeQ.wIcon  = ICON:STRUCTUREFOLDER
       ELSE
          IF StructureQ.lModuleId <> lLastModuleId
             lLastModuleId = StructureQ.lModuleId
             TreeQ.lLevel = CHOOSE(szParentStruct='',1,2)
             TreeQ.wIcon  = ICON:STRUCTUREFOLDER
          ELSE
             TreeQ.lLevel = CHOOSE(szParentStruct='',2,3)
             TreeQ.wIcon  = ICON:STRUCTURE
          END
       END
       TreeQ.szText = StructureQ.szDataLabel & ' - ' & StructureQ.szDataType
       TreeQ.lStyle = CHOOSE(StructureQ.bPrivate = FALSE,STYLE:NORMAL,STYLE:PRIVATE)

       IF TreeQ.wIcon  = ICON:STRUCTURE
          DO CheckForHyperLink
       END

       TreeQ.szSearch = ''
       TreeQ.szClassName = StructureQ.szStructureName
       TreeQ.szContextString = StructureQ.szDataLabel
       TreeQ.szHelpFile = ''
       TreeQ.lLineNum = StructureQ.lLineNum
       TreeQ.lSourceLine = 0
       TreeQ.lIncludeId = 0
       TreeQ.lModuleId  = StructureQ.lModuleId
       DO SetNoteIcon
       DO SetTipText
       ADD(TreeQ)
    END
  END
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG
J               LONG
K               LONG
szLastStructure CSTRING(64)
lLastModuleId   LONG
szObjectName    CSTRING(61)
lObjectId       LONG
szParentStruct  CSTRING(64)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S   STRING(256)
X   LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CheckForHyperlink   ROUTINE
  IF INSTRING('&',TreeQ.szText)
     IF srcIsClassReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName,lObjectId)
        DO SetHyperlinkStyle
     ELSIF srcIsStructureReference(TreeQ.szText[INSTRING('&',TreeQ.szText) : LEN(TreeQ.szText)],szObjectName)
        DO SetHyperlinkStyle
     END
  ELSIF INSTRING('LIKE(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('LIKE(',UPPER(TreeQ.szText),1)+5 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          DO SetHyperlinkStyle
       END
  ELSIF INSTRING('GROUP(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('GROUP(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          DO SetHyperlinkStyle
       END
  ELSIF INSTRING('QUEUE(',UPPER(TreeQ.szText),1)
       IF srcIsStructureReference('&' & TreeQ.szText[INSTRING('QUEUE(',UPPER(TreeQ.szText),1)+6 : INSTRING(')',TreeQ.szText)-1],szObjectName)
          DO SetHyperlinkStyle
       END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetHyperlinkStyle   ROUTINE
  CASE TreeQ.lStyle
  OF STYLE:NORMAL
     TreeQ.lStyle = STYLE:NORMAL_HYPERLINK
  OF STYLE:PRIVATE
     TreeQ.lStyle = STYLE:PRIVATE_HYPERLINK
  OF STYLE:PROTECTED
     TreeQ.lStyle = STYLE:PROTECTED_HYPERLINK
  OF STYLE:NORMAL_NEW
     TreeQ.lStyle = STYLE:NORMAL_NEW_HYPERLINK
  OF STYLE:PRIVATE_NEW
     TreeQ.lStyle = STYLE:PRIVATE_NEW_HYPERLINK
  OF STYLE:PROTECTED_NEW
     TreeQ.lStyle = STYLE:PROTECTED_NEW_HYPERLINK
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetLineComments
srcIsClassReference
srcIsInterfaceReference
srcIsStructureReference
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddEquates
[COMMON]
DESCRIPTION 'Add Itemized Equates to Tree'
FROM ABC Source
MODIFIED '2005/01/13' '21:13:33'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  szLastEnum = ''
  lLastModuleId = 0
  J = RECORDS(EnumQ)
  LOOP I = 1 TO J
    GET(EnumQ,I)
    IF ERRORCODE()
       BREAK
    ELSE
       IF ~glo:szParentClassName
          glo:szParentClassName = EnumQ.szEnumName
       END
       IF UPPER(EnumQ.szEnumName) <> UPPER(glo:szParentClassName)
          CYCLE
       END
       IF EnumQ.szEnumName <> szLastEnum
          szLastEnum = EnumQ.szEnumName
          lLastModuleId = EnumQ.lModuleId
          TreeQ.lLevel = 1
          IF EnumQ.bIsEquate = TRUE
             TreeQ.wIcon  = ICON:EQUATEFOLDER
          ELSE
             TreeQ.wIcon  = ICON:ENUMFOLDER
          END
          TreeQ.szText = EnumQ.szEnumName
          IF szLastEnum = '*EQUATES*'
             DO AddTreeQ
             TreeQ.lLevel = 3
             TreeQ.wIcon  = ICON:EQUATE
             IF EnumQ.bIsHexValue
                DO HexFormat
             END
             TreeQ.szText = EnumQ.szEnumLabel & ' = ' & EnumQ.szEnumValue
          ELSE
             IF INSTRING(':',EnumQ.szEnumLabel)
                DO AddTreeQ
                TreeQ.lLevel = 2
                TreeQ.wIcon  = ICON:EQUATE
                IF EnumQ.bIsHexValue
                   DO HexFormat
                END
                TreeQ.szText = EnumQ.szEnumLabel & ' = ' & EnumQ.szEnumValue
             END
          END
       ELSIF EnumQ.lModuleId <> lLastModuleId
          lLastModuleId = EnumQ.lModuleId
          IF szLastEnum = '*EQUATES*'
             TreeQ.lLevel = 3
             TreeQ.wIcon  = ICON:EQUATE
             IF EnumQ.bIsHexValue
                DO HexFormat
             END
             TreeQ.szText = EnumQ.szEnumLabel & ' = ' & EnumQ.szEnumValue
          ELSE
             TreeQ.lLevel = 1
             IF EnumQ.bIsEquate = TRUE
                TreeQ.wIcon  = ICON:EQUATEFOLDER
             ELSE
                TreeQ.wIcon  = ICON:ENUMFOLDER
             END
             TreeQ.szText = EnumQ.szEnumName

             IF INSTRING(':',EnumQ.szEnumLabel)
                DO AddTreeQ
                TreeQ.lLevel = 2
                TreeQ.wIcon  = ICON:EQUATE
                IF EnumQ.bIsHexValue
                   DO HexFormat
                END
                TreeQ.szText = EnumQ.szEnumLabel & ' = ' & EnumQ.szEnumValue
             END

          END
       ELSE
          TreeQ.lLevel = CHOOSE(szLastEnum = '*EQUATES*',3,2)
          TreeQ.wIcon  = ICON:EQUATE
          IF EnumQ.bIsHexValue
             DO HexFormat
          END
          TreeQ.szText = EnumQ.szEnumLabel & ' = ' & EnumQ.szEnumValue
       END
       DO AddTreeQ
    END
  END

  GET(TreeQ,1)
  K = 1
  szLastEnum = ''
  lLastModuleId = 0
  SORT(tmpTreeQ,+tmpTreeQ.szSort)
  J = RECORDS(tmpTreeQ)
  LOOP I = 1 TO J
    GET(tmpTreeQ,I)
    IF tmpTreeQ.szSort[1 : 1] <> szLastEnum
       szLastEnum = tmpTreeQ.szSort[1 : 1]
       TreeQ.lLevel = 2
       TreeQ.wIcon  = ICON:EQUATEFOLDER
       TreeQ.szText = szLastEnum
       K += 1
       DO SetNoteIcon
       DO SetTipText
       ADD(TreeQ,K)
       TreeQ = tmpTreeQ
       K += 1
       DO SetNoteIcon
       DO SetTipText
       ADD(TreeQ,K)
    ELSE
       TreeQ = tmpTreeQ
       K += 1
       ADD(TreeQ,K)
    END
  END

  IF glo:bEnumSort = 1  !canonical
     GET(TreeQ,1)
     IF TreeQ:szText <> '*EQUATES*'
        SORT(TreeQ,+TreeQ:lModuleId,+TreeQ:lLevel,+TreeQ:lLineNum)
        GET(TreeQ,2)
        sav:TreeQ:lLineNum = TreeQ:lLineNum
        sav:TreeQ:lIncludeId = TreeQ:lIncludeId
        GET(TreeQ,1)
        TreeQ:lLineNum = sav:TreeQ:lLineNum
        TreeQ:lIncludeId = sav:TreeQ:lIncludeId
        PUT(TreeQ)
     END
  END

HexFormat   ROUTINE
  CASE EnumQ.bIsHexValue
  OF 1  !Hex Value
     ulValue = EnumQ.szEnumValue
     ultoa(ulValue,EnumQ.szEnumValue,16)
     IF LEN(EnumQ.szEnumValue) % 2
        EnumQ.szEnumValue = '0' & EnumQ.szEnumValue
     END
     EnumQ.szEnumValue = '0' & UPPER(EnumQ.szEnumValue) & 'H'
  OF 2  !Binary Value
     ulValue = EnumQ.szEnumValue
     ultoa(ulValue,EnumQ.szEnumValue,2)
     IF LEN(EnumQ.szEnumValue) % 2
        EnumQ.szEnumValue = '0' & EnumQ.szEnumValue
     END
     EnumQ.szEnumValue = '0' & UPPER(EnumQ.szEnumValue) & 'B'
  END

AddTreeQ    ROUTINE
  IF ~(glo:bShowPrivate = FALSE AND EnumQ.bPrivate = TRUE)
     TreeQ.lStyle = CHOOSE(EnumQ.bPrivate = FALSE,STYLE:NORMAL,STYLE:PRIVATE)
     TreeQ.szSearch = ''
     TreeQ.szClassName = EnumQ.szEnumName
     TreeQ.szContextString = EnumQ.szEnumLabel
     TreeQ.szHelpFile = ''
     TreeQ.lLineNum = EnumQ.lLineNum
     TreeQ.lSourceLine = 0
     TreeQ.lIncludeId = 0
     TreeQ.lModuleId  = EnumQ.lModuleId
     DO SetNoteIcon
     DO SetTipText
     IF szLastEnum = '*EQUATES*' AND TreeQ.lLevel > 1
        tmpTreeQ = TreeQ
        tmpTreeQ.szSort = UPPER(TreeQ.szText)
        ADD(TmpTreeQ)
     ELSE
        ADD(TreeQ)
     END
  END
  EXIT
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG
J               LONG
K               LONG
ulValue         ULONG
szLastEnum      CSTRING(64)
lLastModuleId   LONG
tmpTreeQ        QUEUE,PRE(Q)
sNote                STRING(1)
wNoteIcon            SHORT
szNoteTip            CSTRING(256)
szText               CSTRING(384)
wIcon                SHORT
lLevel               LONG
lStyle               LONG
szTipText            CSTRING(256)
szSearch             CSTRING(64)
szClassName          CSTRING(64)
szContextString      CSTRING(256)
szHelpFile           CSTRING(256)
lLineNum             LONG
lSourceLine          LONG
lIncludeId           LONG
lModuleId            LONG
lOccurranceLine      LONG
szPrototype          CSTRING(256)
szSort               CSTRING(256)
                END
sav:TreeQ:lLineNum      LIKE(TreeQ:lLineNum)
sav:TreeQ:lIncludeId    LIKE(TreeQ:lIncludeId)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S   STRING(256)
X   LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetLineComments
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetEquateValue
PROTOTYPE '(STRING szEnumLabel,*BYTE bIsHexValue),STRING'
PARAMETERS '(szEnumLabel,bIsHexValue)'
[COMMON]
DESCRIPTION 'Find Equate Value'
FROM ABC Source
MODIFIED '2003/04/13' '12:00:22'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
work:szEnumLabel    CSTRING(1024)
this:szEnumLabel    LIKE(EnumQ.szEnumLabel)
save:szEnumLabel    LIKE(EnumQ.szEnumLabel)
save:EnumQ          LIKE(EnumQ)
save:EquateQ        LIKE(EquateQ)
save:EnumQPointer   LONG
save:EquateQPointer LONG
I                   LONG
J                   LONG
K                   LONG
N                   LONG
X                   LONG
ulValue             ULONG
lValue              LONG,OVER(ulValue)
szRetVal            CSTRING(64)
bRetIsHexValue      BYTE
szLookupValue       CSTRING(64)
endptr              ULONG
bStartFound         BYTE(FALSE)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !First Strip out all blanks
  K = 0
  X = 0
  J = LEN(szEnumLabel)
  LOOP I = 1 TO J
    IF szEnumLabel[I] <> ' '
       K += 1
       work:szEnumLabel[K] = szEnumLabel[I]
       IF X = 0 AND ~INSTRING(work:szEnumLabel[K],' +-*/0123456789')
          X = K
       END
    END
  END
  K += 1
  work:szEnumLabel[K] = '<0>'
  IF X = 0
     X = 1
  END

  bRetIsHexValue = bIsHexValue
  save:szEnumLabel = work:szEnumLabel
  K = 0
  N = 0
  J = LEN(work:szEnumLabel)
  LOOP I = X TO J
    IF INSTRING(work:szEnumLabel[I],' +-*/') AND I > 1
       K = I    !save value for use later
       BREAK
    ELSE
       N += 1
       szLookupValue[N] = work:szEnumLabel[I]
    END
  END
  N += 1
  szLookupValue[N] = '<0>'

  save:EnumQ = EnumQ
  save:EnumQPointer = POINTER(EnumQ)
  save:EquateQ = EquateQ
  save:EquateQPointer = POINTER(EquateQ)
  J = RECORDS(EnumQ)
  LOOP I = J TO 1 BY -1
    GET(EnumQ,I)
    IF EnumQ.szEnumPrefix
       this:szEnumLabel = EnumQ.szEnumLabel
    ELSIF EnumQ.szEnumName
       this:szEnumLabel = EnumQ.szEnumName & ':' & EnumQ.szEnumLabel
    ELSE
       this:szEnumLabel = EnumQ.szEnumLabel
    END
    IF UPPER(this:szEnumLabel) = UPPER(szLookupValue) !save:szEnumLabel
       IF ~NUMERIC(EnumQ.szEnumValue)
          szRetVal = srcGetEquateValue(EnumQ.szEnumValue,bRetIsHexValue)
       ELSE
          szRetVal = EnumQ.szEnumValue
          bRetIsHexValue = EnumQ.bIsHexValue
       END
       BREAK
    END
  END
  IF ~I         !did not find in enumerated equates
     J = RECORDS(EquateQ)
     LOOP I = 1 TO J
        GET(EquateQ,I)
        IF EquateQ.szLabel = UPPER(szLookupValue)
           szRetVal = EquateQ.szValue
           bRetIsHexValue = EquateQ.bIsHexValue
           BREAK
        END
     END
     IF I > J
        IF UPPER(SUB(save:szEnumLabel,-1,1)) = 'H'
           bRetIsHexValue = TRUE
           save:szEnumLabel = '0x' & SUB(save:szEnumLabel,1,LEN(save:szEnumLabel)-1)
           ulValue = strtoul(save:szEnumLabel,endptr,16)
           szRetVal = ulValue
        ELSIF UPPER(SUB(save:szEnumLabel,-1,1)) = 'B'
           bRetIsHexValue = TRUE + 1
           save:szEnumLabel = SUB(save:szEnumLabel,1,LEN(save:szEnumLabel)-1)
           ulValue = strtoul(save:szEnumLabel,endptr,2)
           szRetVal = ulValue
        ELSE
           BIND('save:szEnumLabel',save:szEnumLabel)
           szRetVal = EVALUATE(save:szEnumLabel & ' + 0')
           UNBIND('save:szEnumLabel')
           !IF szRetVal[1] = '-'
           !   lValue = szRetVal
           !   szRetVal = ulValue
           !END
        END
     ELSIF K
        szRetVal = srcGetEquateValue(work:szEnumLabel[1 : X-1] & szRetVal & work:szEnumLabel[K : LEN(work:szEnumLabel)],bRetIsHexValue)
     ELSE
        szRetVal = srcGetEquateValue(work:szEnumLabel[1 : X-1] & szRetVal,bRetIsHexValue)
     END
  END
  GET(EquateQ,save:EquateQPointer)
  EquateQ = save:EquateQ
  GET(EnumQ,save:EnumQPointer)
  EnumQ = save:EnumQ
  bIsHexValue = bRetIsHexValue
  RETURN(szRetVal)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcBuildCallQueue
PROTOTYPE '(LONG ScanString, LONG ProgressBox, LONG FileProgressBox)'
PARAMETERS '(ScanString, ProgressBox, FileProgressBox)'
[COMMON]
DESCRIPTION 'Build Method Calling Queue'
FROM ABC Source
MODIFIED '2017/07/01' '13:51:29'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                       LONG
J                       LONG
K                       LONG
M                       LONG
szX                     CSTRING(255)
bABC                    BYTE(FALSE)
bInCode                 BYTE
bProcessingMap          BYTE
bDeclaringClass         BYTE
bProcessingClass        BYTE
lLastClassId            LONG
bProcessingStructure    BYTE
bProcessingEquate       BYTE
szCategory              CSTRING(64)
szThisClass             CSTRING(64)
szThisParent            CSTRING(64)
szOmitTerminator        CSTRING(64)
ClassQRecords           LONG
ClassQPointer           LONG
lFileQPointer           LONG
lFileQRecords           LONG

FileQ                   QUEUE,PRE(Q)
szFileName                CSTRING(256)
szModulePath              CSTRING(256)
szModuleName              CSTRING(64)
lModuleId                 LONG
szClassName               CSTRING(64)
szParentClassName         CSTRING(64)
                        END

szUpper                 CSTRING(1024)
save:sText              CSTRING(1024)
lEnumValue              LONG
lUnlabelledCount        LONG(0)

!Variables for progress indicator
lLastPct                LONG
lPctComplete            LONG

!Variables for file progress indicator
lFileBytesToProcess     LONG
lFileBytesProcessed     LONG
lFilePctComplete        LONG
lFileLastPct            LONG

!Variables used in LookForReferences Routine
szDataType              CSTRING(64)
szClassName             CSTRING(64)
bMultiStatement         BYTE(0)         !true = processing multi statement line
save:sMultiStatement    CSTRING(4096)   !save area for multiple statement source line

szSearchModule          CSTRING(260)
szSearchModulePath      CSTRING(256)
szSearchModuleName      CSTRING(64)

IncludeQ                QUEUE,PRE(IncludeQ)
szFileName                CSTRING(256)
szModulePath              CSTRING(256)
szModuleName              CSTRING(64)
lModuleId                 LONG
szClassName               CSTRING(64)
szParentClassName         CSTRING(64)
                        END

bFinal                  BYTE
bExtends                BYTE
loc:szCompactAsciiFilename cstring(65)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  ProgressBox{PROP:WIDTH} = 100
  DISPLAY(ProgressBox)
  lLastPct = 0
  lPctComplete = 0

  FileProgressBox{PROP:WIDTH} = 0
  DISPLAY(FileProgressBox)
  lFileLastPct = 0
  lFilePctComplete = 0

  IF glo:bRefreshAll
     FREE(CallQ)                                         !Free the CallQ
  END

  SORT(ClassQ,+ClassQ.lClassId)
  GET(ClassQ,RECORDS(ClassQ))
  lLastClassId = ClassQ.lClassId
  !SORT(ClassQ,+ClassQ.szClassSort)
  !szClassSort = 'SORT(ClassQ,+ClassQ.szClassSort)'
  SORT(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
  SORT(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
  SORT(StructureQ,+StructureQ.szStructureSort)
  SORT(ModuleQ,+ModuleQ.lModuleId)

  !make a list of files to process
  FREE(FileQ)
  ClassQRecords = RECORDS(ClassQ)                     ! Get record counts
  LOOP ClassQPointer = 1 TO ClassQRecords             ! For each Class
     GET(ClassQ,ClassQPointer)                        !   Get class record
     IF ClassQ.bModified
        ClassQ.bModified = FALSE
        PUT(ClassQ)
        IF ClassQ.lModuleId
           ModuleQ.lModuleId = ClassQ.lModuleId
           GET(ModuleQ,+ModuleQ.lModuleId)
           IF UPPER(SUB(ModuleQ.szModuleName,-3,3)) = 'DLL' |
           OR UPPER(SUB(ModuleQ.szModuleName,-3,3)) = 'LIB'
              !do not scan
           ELSE
              szAsciiFilename = ModuleQ.szModulePath & ModuleQ.szModuleName
              FileQ.szFileName = UPPER(szAsciiFilename)
              GET(FileQ,+FileQ.szFileName)
              IF ERRORCODE()
                 FileQ.szModulePath = ModuleQ.szModulePath
                 FileQ.szModuleName = ModuleQ.szModuleName
                 FileQ.lModuleId = ModuleQ.lModuleId
                 FileQ.szClassName = ClassQ.szClassName
                 FileQ.szParentClassName = ClassQ.szParentClassName
                 ADD(FileQ,+FileQ.szFileName)
              END
           END
        END
     END
  END

  !loop until we process all included files
  !============================================================================
  LOOP WHILE RECORDS(FileQ)
     !scan the class definition modules
     lFileQRecords = RECORDS(FileQ)
     lFileQPointer = 0
     LOOP lFileQPointer = 1 TO lFileQRecords
        GET(FileQ,lFileQPointer)
        szAsciiFilename = FileQ.szFileName
        !ScanString{PROP:TEXT} = szAsciiFilename
        PathCompactPathEx(loc:szCompactAsciiFilename, szAsciiFilename, SIZE(loc:szCompactAsciiFilename),0)
        ScanString{PROP:TEXT} = loc:szCompactAsciiFilename
        DISPLAY(ScanString)

        bInCode = FALSE
        bProcessingClass = FALSE
        bProcessingStructure = FALSE
        bProcessingEquate = FALSE
        bProcessingMap = FALSE
        glo:lLineNum = 0
        szOmitTerminator = ''

        OPEN(SourceFile,ReadOnly+DenyNone)   !Read-Only
        lFileBytesToProcess = BYTES(SourceFile)
        lFileBytesProcessed = 0
        lFileLastPct = 0
        lFilePctComplete = 0
        FileProgressBox{PROP:WIDTH} = 0
        DISPLAY(FileProgressBox)

        SET(SourceFile)
        LOOP
          YIELD()
          IF bMultiStatement = TRUE
             SourceFile.Record.sText = save:sMultiStatement
             bMultiStatement = FALSE
          ELSE
             NEXT(SourceFile)
             IF ~ERRORCODE()

                !!! remove extra whitespace from SourceFile.Record.sText here !!!
                SourceFile.Record.sText = srcRemoveWhitespace(SourceFile.Record.sText)

                glo:lLineNum += 1

                lFileBytesProcessed = POINTER(SourceFile)
                lFilePctComplete = (lFileBytesProcessed/lFileBytesToProcess)*100
                IF lFileLastPct <> INT(lFilePctComplete/10)
                   lFileLastPct = INT(lFilePctComplete/10)
                   FileProgressBox{PROP:Width} = lFilePctComplete*2
                   DISPLAY(FileProgressBox)
                END

             END
             IF szOmitTerminator = ''
                K = srcFindComment(SourceFile.Record.sText)
                IF K
                   IF UPPER(SourceFile.Record.sText[K : K+14]) = '!ABCINCLUDEFILE' |
                   OR UPPER(SourceFile.Record.sText[K : K+8]) = '!CATEGORY'
                      !let it pass
                   ELSE
                      !Begin 2004.12.14 -------------------------------------------
                      IF INSTRING(',FINAL', UPPER(SourceFile.Record.sText[K : LEN(CLIP(SourceFile.Record.sText))]), 1 ,1)
                         bFinal = TRUE
                      ELSE
                         bFinal = FALSE
                      END
                      IF INSTRING(',EXTENDS', UPPER(SourceFile.Record.sText[K : LEN(CLIP(SourceFile.Record.sText))]), 1 ,1)
                         bExtends = TRUE
                      ELSE
                         bExtends = FALSE
                      END
                      !End   2004.12.14 -------------------------------------------
                      IF K > 1
                         SourceFile.Record.sText = SourceFile.Record.sText[1 : K-1]
                      ELSE
                         SourceFile.Record.sText = ''
                      END
                   END
                END
             END
          END
          IF ERRORCODE()
             lFilePctComplete = 100
             FileProgressBox{PROP:Width} = lFilePctComplete*2
             DISPLAY(FileProgressBox)
             BREAK
          ELSE
             !==========================================================
             !Handle multiple statements on a line
             !==========================================================
             K = INSTRING(';',SourceFile.Record.sText)
             IF K
                save:sMultiStatement = SourceFile.Record.sText[K+1 : LEN(SourceFile.Record.sText)]
                SourceFile.Record.sText = SourceFile.Record.sText[1 : K-1]
                bMultiStatement = TRUE
             ELSE
                save:sMultiStatement = ''
             END
             !==========================================================
             IF szUpper
                IF szUpper[LEN(szUpper)] = '|'
                   szUpper = SUB(szUpper,1,LEN(szUpper)-1) & ' ' & UPPER(CLIP(LEFT(SourceFile.Record.sText)))
                   SourceFile.Record.sText = save:stext & SourceFile.Record.sText
                ELSE
                   szUpper = UPPER(CLIP(SourceFile.Record.sText))
                END
             ELSE
                szUpper = UPPER(CLIP(SourceFile.Record.sText))
             END

             IF szUpper AND glo:bRefreshAll = TRUE
                K = INSTRING(' INCLUDE',szUpper,1)
                IF K
                   K = INSTRING('''',szUpper,1)
                   IF K
                      szSearchModulePath = ''
                      szSearchModuleName = szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1]
                      srcFindModule(szSearchModulePath,szSearchModuleName)
                      IF szSearchModulePath <> ''
                         szSearchModule = UPPER(szSearchModulePath & szSearchModuleName)
                         !szSearchModule = UPPER(FileQ.szModulePath & szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1])
                         LOOP M# = 1 TO RECORDS(ModuleQ)
                           GET(ModuleQ,M#)
                           IF szSearchModule = UPPER(ModuleQ.szModulePath & ModuleQ.szModuleName)
                              BREAK
                           END
                         END
                         IF M# > RECORDS(ModuleQ)
                            GET(ModuleQ,RECORDS(ModuleQ))
                            ModuleQ.szModulePath = szSearchModulePath  !FileQ.szModulePath
                            ModuleQ.szModuleName = szSearchModuleName  !CLIP(szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1])
                            ModuleQ.lModuleId += 1
                            ModuleQ.lDate = TODAY()
                            ModuleQ.lTime = CLOCK()
                            ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                            ADD(ModuleQ,+ModuleQ.lModuleId)

                            IncludeQ.szFileName = UPPER(ModuleQ.szModulePath & ModuleQ.szModuleName)
                            IncludeQ.szModulePath = ModuleQ.szModulePath
                            IncludeQ.szModuleName = ModuleQ.szModuleName
                            IncludeQ.lModuleId = ModuleQ.lModuleId
                            IncludeQ.szClassName = ClassQ.szClassName
                            IncludeQ.szParentClassName = ClassQ.szParentClassName
                            ADD(IncludeQ)
                         END
                      END
                   END
                END
             END

             IF ~szUpper
                CYCLE
             ELSIF szUpper[LEN(szUpper)] = '|'
                save:stext = SourceFile.Record.sText[1 : LEN(szUpper)-1] & ' '
                CYCLE
             ELSIF szOmitTerminator AND ~INSTRING(szOmitTerminator,szUpper,1)
                szUpper = ''
                CYCLE
             ELSE
                IF szOmitTerminator
                   szOmitTerminator = ''
                   CYCLE
                END
                IF INSTRING('!ABCINCLUDEFILE',szUpper,1)
                   bABC = TRUE
                   K = INSTRING('(',szUpper,1)
                   IF K
                      szCategory = szUpper[K+1 : INSTRING(')',szUpper,1)-1]
                   ELSE
                      szCategory = 'ABC'
                   END
                ELSIF INSTRING('!CATEGORY',szUpper,1)
                   K = INSTRING('(',szUpper,1)
                   IF K
                      szCategory = szUpper[K+1 : INSTRING(')',szUpper,1)-1]
                   END
                END

                K = srcFindComment(SourceFile.Record.sText)
                IF K
                   IF K > 1
                      SourceFile.Record.sText = SUB(SourceFile.Record.sText,1,K-1)
                   ELSE
                      SourceFile.Record.sText = ''
                   END
                   szUpper = UPPER(CLIP(SourceFile.Record.sText))
                END

                K = INSTRING(' OMIT(''',szUpper,1)                !look for an omit statement
                IF K                                              !if an omit statement
                   IF ~INSTRING(',',szUpper)                      !and not conditional
                      M = INSTRING('''',szUpper,1,K+7)
                      szOmitTerminator = szUpper[K+7 : M-1]
                      szUpper = ''
                      CYCLE
                   END
                END

                IF CLIP(LEFT(szUpper)) = 'MAP'
                   bProcessingMap = TRUE
                   CYCLE
                END

                IF bProcessingMap
                   DO ProcessMap
                   CYCLE
                END

                IF (INSTRING(' PROCEDURE',szUpper,1) OR INSTRING(' FUNCTION',szUpper,1))    |
                AND ~bProcessingClass
                   CallQ.szCallingMethod = srcGetLabel(SourceFile.Record.sText)
                   IF ~INSTRING('.',CallQ.szCallingMethod)
                      !First parameter is class name
                      K = INSTRING('PROCEDURE(',szUpper,1)
                      IF K
                         K += 10
                      ELSE
                         K = INSTRING('FUNCTION(',szUpper,1)
                         IF K
                            K += 9
                         END
                      END
                      IF K <> 0
                         szX = CLIP(LEFT(SourceFile.Record.sText[K : LEN(SourceFile.Record.sText)]))
                         J = INSTRING(' ',szX,1)
                         IF J
                            K = INSTRING(',',szX,1)
                            IF K AND K < J
                               CallQ.szCallingMethod = szX[1 : K-1] & '.' & CallQ.szCallingMethod
                            ELSE
                               CallQ.szCallingMethod = szX[1 : J-1] & '.' & CallQ.szCallingMethod
                            END
                         ELSE
                            J = INSTRING(',',szX,1)
                            IF J
                               CallQ.szCallingMethod = szX[1 : J-1] & '.' & CallQ.szCallingMethod
                            ELSE
                               J = INSTRING(')',szX,1)
?                             ASSERT(J <> 0)
                               CallQ.szCallingMethod = szX[1 : J-1] & '.' & CallQ.szCallingMethod
                            END
                         END
                      END
                   END
                   K = INSTRING('.',CallQ.szCallingMethod)
                   IF K
                      SORT(ClassQ,+ClassQ.szClassSort)
                      ClassQ.szClassSort = UPPER(CallQ.szCallingMethod[1 : K-1])
                      GET(ClassQ,+ClassQ.szClassSort)
                      IF ~ERRORCODE()
                         !NOTE: May be the wrong one but no way to distinguish
                         !      if the database contains two classes with same name
                         !      but different source files
                         szThisClass = ClassQ.szClassName
                         szThisParent = ClassQ.szParentClassName
                      END
                      bInCode = FALSE
                      bProcessingClass = TRUE
                      bDeclaringClass = FALSE
                   ELSE
                      szThisClass = ClassQ.szClassName
                      szThisParent = ClassQ.szParentClassName
                      bInCode = FALSE
                      bProcessingClass = TRUE
                      bDeclaringClass = FALSE
                   END
                   CYCLE
                ELSIF UPPER(CLIP(LEFT(SourceFile.Record.sText))) = 'CODE'
                   bInCode = TRUE
                   bProcessingClass = FALSE
                   bDeclaringClass = FALSE
                   CYCLE
                END
                IF ~bInCode
                   DO LookForClass
                ELSIF szThisClass
                   srcGetCalledMethods(SourceFile.Record.sText,szThisClass,szThisParent)
                END
             END
          END
        END
        CLOSE(SourceFile)

        lPctComplete = (lFileQPointer/(RECORDS(FileQ) + RECORDS(IncludeQ)))*100
        IF lPctComplete <> lLastPct
           lLastPct = lPctComplete
           ProgressBox{PROP:WIDTH} = lPctComplete + 100
           DISPLAY(ProgressBox)
        END
     END !Loop for each source file

     !reload fileQ with included files
     !=========================================================================
     FREE(FileQ)
     J = RECORDS(IncludeQ)
     LOOP I = 1 TO J
        GET(Includeq,I)
        !FileQ = IncludeQ

        FileQ.szFileName        = IncludeQ.szFileName
        FileQ.szModulePath      = IncludeQ.szModulePath
        FileQ.szModuleName      = IncludeQ.szModuleName
        FileQ.lModuleId         = IncludeQ.lModuleId
        FileQ.szClassName       = IncludeQ.szClassName
        FileQ.szParentClassName = IncludeQ.szParentClassName

        ADD(FileQ)
     END
     FREE(IncludeQ)
  END   !LOOP
  RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
LookForClass    ROUTINE
  DATA
bAddClass       BYTE
ptr             LONG

  CODE
  IF ~bProcessingClass    !look for class definition
     SORT(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
     ModuleQ.szModulePath = FileQ.szModulePath
     ModuleQ.szModuleName = FileQ.szModuleName
     GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)

?  ASSERT(~ERRORCODE())

     IF INSTRING(' CLASS,',szUpper,1)       OR |
        INSTRING(' CLASS()',szUpper,1)      OR |
        INSTRING(' INTERFACE,',szUpper,1)   OR |
        INSTRING(' INTERFACE ',szUpper,1)   OR |
        UPPER(SUB(CLIP(SourceFile.Record.sText),-6,6)) = ' CLASS'  OR |    !base class
        UPPER(SUB(CLIP(SourceFile.Record.sText),-10,10)) = ' INTERFACE'    !Interface
        K = INSTRING(' ',SourceFile.Record.sText) - 1
      !ASSERT(K <> 0) - 2006.12.08 RR removed because search string could be in a quoted string in a window declaration eg.
        IF K <> 0
           ClassQ.szClassName = SourceFile.Record.sText[1 : K]
           IF CLIP(ClassQ.szClassName)              !make sure class has a name
              SORT(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)
              ClassQ.szClassSort = UPPER(SourceFile.Record.sText[1 : K])
              ClassQ.lModuleId = ModuleQ.lModuleId
              GET(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)

              IF ERRORCODE()
                 bAddClass = TRUE
              ELSE
                 bAddClass = FALSE
              END

              ClassQ.szParentClassName = ''
              ClassQ.lIncludeId = ModuleQ.lModuleId
              ClassQ.lModuleId =  ModuleQ.lModuleId
              ClassQ.bIsABC = bABC
              ClassQ.lLineNum = glo:lLineNum
              ClassQ.szClassSort = UPPER(ClassQ.szClassName)
              ClassQ.szParentClassSort = ''
              ClassQ.bPrivate = TRUE
              IF INSTRING(' INTERFACE,',szUpper,1)    OR |
                 UPPER(SUB(CLIP(SourceFile.Record.sText),-10,10)) = ' INTERFACE'    !Interface
                 ClassQ.bInterface = TRUE
              ELSE
                 ClassQ.bInterface = FALSE
              END
              ClassQ.bModified = FALSE !because we are processing it now
              IF bAddClass
                 lLastClassId += 1
                 ClassQ.lClassID = lLastClassId
                 ADD(ClassQ,+ClassQ.szClassSort)
              ELSE
                 PUT(ClassQ)
              END

              CategoryQ.szClassName = ClassQ.szClassName
              GET(CategoryQ,+CategoryQ.szClassName)
              IF ERRORCODE()
                 CategoryQ.szClassName = ClassQ.szClassName
                 CategoryQ.szCategory = szCategory
                 CASE CategoryQ.szClassName
                 OF   'INIClass'        |
                 OROF 'PopupClass'
                    CategoryQ.bDetailLevel = 0

                 OF   'ErrorClass'      |
                 OROF 'FileManager'     |
                 OROF 'RelationManager'
                    CategoryQ.bDetailLevel = 0

                 OF   'ViewManager'     |
                 OROF 'WindowManager'
                    CategoryQ.bDetailLevel = 0
                 ELSE
                    CategoryQ.szCategory = szCategory
                    CategoryQ.bDetailLevel = 1
                 END

                 ADD(CategoryQ,+CategoryQ.szClassName)
              ELSIF szCategory
                 CategoryQ.szCategory = szCategory
                 PUT(CategoryQ,+CategoryQ.szClassName)
              END
              IF SUB(szUpper,-1,1) = '.'   |
              OR SUB(szUpper,-3,3) = 'END'
                 bProcessingClass = FALSE
                 bDeclaringClass = FALSE
              ELSE
                 bProcessingClass = TRUE
                 bDeclaringClass = TRUE
              END
           END
        END

     ELSIF INSTRING(' CLASS(',szUpper,1)  OR |  !derived class
           INSTRING(' INTERFACE(',szUpper,1)    !derived interface
        K = INSTRING(' ',SourceFile.Record.sText) - 1
      !ASSERT(K <> 0) - 2006.12.08 RR removed because search string could be in a quoted string in a window declaration eg.
        IF K <> 0
           ClassQ.szClassName = SourceFile.Record.sText[1 : K]
           IF CLIP(ClassQ.szClassName)              !make sure class has a name
              SORT(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)
              ClassQ.szClassSort = UPPER(SourceFile.Record.sText[1 : K])
              ClassQ.lModuleId = ModuleQ.lModuleId
              GET(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)

              IF ERRORCODE()
                 bAddClass = TRUE
              ELSE
                 bAddClass = FALSE
              END

              K = INSTRING(' CLASS(',szUpper,1)
              IF K
                 K += 7
              ELSE
                 K = INSTRING(' INTERFACE(',szUpper,1) + 11
              END
              M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
              ClassQ.szParentClassName = SourceFile.Record.sText[K : M]

              ClassQ.lIncludeId = ModuleQ.lModuleId
              ClassQ.lModuleId = ModuleQ.lModuleId

              ClassQ.bIsABC = bABC
              ClassQ.lLineNum = glo:lLineNum
              ClassQ.szClassSort = UPPER(ClassQ.szClassName)
              ClassQ.szParentClassSort = UPPER(ClassQ.szParentClassName)
              ClassQ.bPrivate = TRUE
              IF INSTRING(' INTERFACE(',szUpper,1)    !derived interface
                 ClassQ.bInterface = TRUE
              ELSE
                 ClassQ.bInterface = FALSE
              END
              ClassQ.bModified = FALSE !because we are processing it
              IF bAddClass
                 lLastClassId += 1
                 ClassQ.lClassID = lLastClassId
                 ADD(ClassQ,+ClassQ.szClassSort)
              ELSE
                 PUT(ClassQ)
              END

              CategoryQ.szClassName = ClassQ.szClassName
              GET(CategoryQ,+CategoryQ.szClassName)
              IF ERRORCODE()
                 CategoryQ.szClassName = ClassQ.szClassName
                 CategoryQ.szCategory = szCategory
                 CASE CategoryQ.szClassName
                 OF   'INIClass'        |
                 OROF 'PopupClass'
                    CategoryQ.bDetailLevel = 0

                 OF   'ErrorClass'      |
                 OROF 'FileManager'     |
                 OROF 'RelationManager'
                    CategoryQ.bDetailLevel = 0

                 OF   'ViewManager'     |
                 OROF 'WindowManager'
                    CategoryQ.bDetailLevel = 0
                 ELSE
                    CategoryQ.bDetailLevel = 1
                 END

                 ADD(CategoryQ,+CategoryQ.szClassName)
              END

              IF SUB(szUpper,-1,1) = '.'   |
              OR SUB(szUpper,-3,3) = 'END'
                 bProcessingClass = FALSE
                 bDeclaringClass = FALSE
              ELSE
                 bProcessingClass = TRUE
                 bDeclaringClass = TRUE
              END
           END
        END
     ELSE
        DO LookForStructure
     END
     SORT(ModuleQ,+ModuleQ.lModuleId)
  ELSE !look for properties and methods
     DO ProcessClass
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5100
PROPERTY:END
ProcessMap ROUTINE
  DATA
szTemp  CSTRING(256)
fAdd    BYTE
pToken  LONG

  CODE
  !Look for END or .
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bProcessingMap = FALSE
  ELSE
     !First parameter is class name
     K = INSTRING('PROCEDURE(',szUpper,1)
     IF K
        K += 10
     ELSE
        K = INSTRING('FUNCTION(',szUpper,1)
        IF K
           K += 9
        END
     END
     IF K <> 0
        szTemp = CLIP(LEFT(SourceFile.Record.sText[K : LEN(SourceFile.Record.sText)]))
        J = INSTRING(' ',szTemp,1)
        IF J
           K = INSTRING(',',szTemp,1)
           IF K AND K < J
              ClassQ.szClassName = szTemp[1 : K-1]
           ELSE
              ClassQ.szClassName = szTemp[1 : J-1]
           END
        ELSE
           J = INSTRING(',',szTemp,1)
           IF J
              ClassQ.szClassName = szTemp[1 : J-1]
           ELSE
              J = INSTRING(')',szTemp,1)
?            ASSERT(J <> 0)
              ClassQ.szClassName = szTemp[1 : J-1]
           END
        END
        !see if valid class

        szTemp = ClassQ.szClassName
        SORT(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)
        ClassQ.szClassSort = UPPER(szTemp)
        ClassQ.lModuleId = FileQ.lModuleId
        GET(ClassQ,+ClassQ.szClassSort,+ClassQ.lModuleId)

        IF ~ERRORCODE()
           !if it is, add this as a method of the class
           K = INSTRING(' ',SourceFile.Record.sText) - 1
           MethodQ.lClassID = ClassQ.lClassID
           MethodQ.szMethodName = SourceFile.Record.sText[1 : K]
           MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
           GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
           IF ERRORCODE()
              fAdd = TRUE
           ELSE
              fAdd = FALSE
           END

           MethodQ.szPrototype = srcGetPrototype(SourceFile.Record.sText)
           pToken = INSTRING(ClassQ.szClassSort,UPPER(MethodQ.szPrototype),1)
           IF pToken
              MethodQ.szPrototype = MethodQ.szPrototype[1 : pToken-1] & MethodQ.szPrototype[pToken+LEN(ClassQ.szClassSort) : LEN(MethodQ.szPrototype)]
              pToken = INSTRING(',',MethodQ.szPrototype)
              IF pToken
                 MethodQ.szPrototype = '(' & MethodQ.szPrototype[pToken+1 : LEN(MethodQ.szPrototype)]
              END
           END

           MethodQ.bPrivate = TRUE
           MethodQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
           MethodQ.bVirtual = CHOOSE(INSTRING(',VIRTUAL',szUpper,1))
           MethodQ.lLineNum = glo:lLineNum
           MethodQ.lSourceLine = srcGetSourceLine(ClassQ.lModuleId,ClassQ.szClassName & '.' & MethodQ.szMethodName,MethodQ.szPrototype)
           MethodQ.lClassID = ClassQ.lClassID
           MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
           MethodQ.bModule = CHOOSE(UPPER(SUB(ModuleQ.szModuleName,-4,4))='.CLW',TRUE,FALSE)

           !Begin 2004.12.14 -----------------------------------------------
           MethodQ.bExtends = bExtends
           MethodQ.bFinal = bFinal
           MethodQ.bProc = CHOOSE(INSTRING(',PROC',szUpper,1))
           MethodQ.szDLL = srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
           MethodQ.szExtName = srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
           MethodQ.szCallConv = srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
           MethodQ.szReturnType = srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
           !End   2004.12.14 -----------------------------------------------

           IF fAdd
              IF MethodQ.lSourceLine
                 ADD(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
              ELSE
                 DO AddModuleLevelMethod
              END
           ELSE
              PUT(MethodQ)
           END
        ELSE
        !otherwise it is module level procedure for
        !all the classes in the file
           DO AddModuleLevelMethod
        END
     END
  END
  EXIT

AddModuleLevelMethod    ROUTINE
  DATA
pSpace  LONG
pQueue  LONG

  CODE
  pSpace = INSTRING(' ',SourceFile.Record.sText) - 1
  MethodQ.szMethodName = SourceFile.Record.sText[1 : pSpace]
  MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
  MethodQ.szPrototype = srcGetPrototype(SourceFile.Record.sText)
  MethodQ.bPrivate = TRUE
  MethodQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
  MethodQ.bVirtual = CHOOSE(INSTRING(',VIRTUAL',szUpper,1))
  MethodQ.lLineNum = glo:lLineNum
  MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
  MethodQ.bModule = CHOOSE(UPPER(SUB(ModuleQ.szModuleName,-4,4))='.CLW',TRUE,FALSE)
  MethodQ.lSourceLine = srcGetSourceLine(ModuleQ.lModuleId,MethodQ.szMethodName,MethodQ.szPrototype)
  !Begin 2004.12.14 -----------------------------------------------
  MethodQ.bExtends = bExtends
  MethodQ.bFinal = bFinal
  MethodQ.bProc = CHOOSE(INSTRING(',PROC',szUpper,1))
  MethodQ.szDLL = srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
  MethodQ.szExtName = srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
  MethodQ.szCallConv = srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
  MethodQ.szReturnType = srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
  !End   2004.12.14 -----------------------------------------------
  LOOP pQueue = 1 TO RECORDS(ClassQ)
     GET(ClassQ,pQueue)
     IF ClassQ.lModuleId = ModuleQ.lModuleId
        MethodQ.lClassID = ClassQ.lClassID
        ADD(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
     END
  END
  EXIT

!==============================================================================
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5200
PROPERTY:END
ProcessClass ROUTINE
  DATA
bEndCount   BYTE
bAdd        BYTE

  CODE
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bProcessingClass = FALSE
  ELSE
     !property or method
     K = INSTRING(' PROCEDURE',szUpper,1)
     IF ~K
        K = INSTRING(' FUNCTION',szUpper,1)
     END
     IF K AND INSTRING('''',szUpper[1 : K])
        K = 0
     END
     IF K
        K = INSTRING(' ',SourceFile.Record.sText) - 1
        MethodQ.lClassID = ClassQ.lClassID
        MethodQ.szMethodName = SourceFile.Record.sText[1 : K]
        MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
        GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
        IF ERRORCODE()
           bAdd = TRUE
        ELSE
           bAdd = FALSE
        END

        MethodQ.szPrototype = srcGetPrototype(SourceFile.Record.sText)
        MethodQ.bPrivate = TRUE
        MethodQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
        MethodQ.bVirtual = CHOOSE(INSTRING(',VIRTUAL',szUpper,1))
        MethodQ.lLineNum = glo:lLineNum
        MethodQ.lSourceLine = srcGetSourceLine(ClassQ.lModuleId,ClassQ.szClassName & '.' & MethodQ.szMethodName,MethodQ.szPrototype)
        MethodQ.lClassID = ClassQ.lClassID
        MethodQ.szMethodSort = UPPER(MethodQ.szMethodName)
        MethodQ.bModule = TRUE
        !Begin 2004.12.14 -----------------------------------------------
        MethodQ.bExtends = bExtends
        MethodQ.bFinal = bFinal
        MethodQ.bProc = CHOOSE(INSTRING(',PROC',szUpper,1))
        MethodQ.szDLL = srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
        MethodQ.szExtName = srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
        MethodQ.szCallConv = srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
        MethodQ.szReturnType = srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
        !End   2004.12.14 -----------------------------------------------

        IF bAdd = TRUE
           ADD(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
        ELSE
           PUT(MethodQ)
        END

     ELSE
        !look for include statement
        K = INSTRING(' INCLUDE',szUpper,1)
        IF K
           K = INSTRING('''',szUpper,1)
           IF K
              szSearchModulePath = ''
              szSearchModuleName = szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1]
              srcFindModule(szSearchModulePath,szSearchModuleName)
              IF szSearchModulePath <> ''
                 szSearchModule = UPPER(szSearchModulePath & szSearchModuleName)
                 !szSearchModule = UPPER(FileQ.szModulePath & szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1])
                 LOOP M# = 1 TO RECORDS(ModuleQ)
                   GET(ModuleQ,M#)
                   IF szSearchModule = UPPER(ModuleQ.szModulePath & ModuleQ.szModuleName)
                      BREAK
                   END
                 END
                 IF M# > RECORDS(ModuleQ)
                    GET(ModuleQ,RECORDS(ModuleQ))
                    ModuleQ.szModulePath = szSearchModulePath !FileQ.szModulePath
                    ModuleQ.szModuleName = szSearchModuleName !CLIP(szUpper[K+1 : INSTRING('''',szUpper,1,K+1)-1])
                    ModuleQ.lModuleId += 1
                    ModuleQ.lDate = TODAY()
                    ModuleQ.lTime = CLOCK()
                    ModuleQ.szModuleName = CLIP(ModuleQ.szModuleName)
                    ADD(ModuleQ,+ModuleQ.lModuleId)

                    IncludeQ.szFileName = UPPER(ModuleQ.szModulePath & ModuleQ.szModuleName)
                    IncludeQ.szModulePath = ModuleQ.szModulePath
                    IncludeQ.szModuleName = ModuleQ.szModuleName
                    IncludeQ.lModuleId = ModuleQ.lModuleId
                    IncludeQ.szClassName = ClassQ.szClassName
                    IncludeQ.szParentClassName = ClassQ.szParentClassName
                    ADD(IncludeQ)
                 END
              END
           END
        ELSE
           K = INSTRING(' ',SourceFile.Record.sText) - 1
           PropertyQ.szPropertyName = SourceFile.Record.sText[1 : K]
           IF CLIP(PropertyQ.szPropertyName)
              PropertyQ.szDataType =  LEFT(SUB(SourceFile.Record.sText,K+1,LEN(SourceFile.Record.sText)-K))

              IF (UPPER(SUB(PropertyQ.szDataType,1,7)) = 'DECIMAL') OR (UPPER(SUB(PropertyQ.szDataType,1,8)) = 'PDECIMAL')
                 K = INSTRING(')',PropertyQ.szDataType) + 1
              ELSE
                 K = INSTRING(',',PropertyQ.szDataType)
              END

              IF K
                 PropertyQ.szDataType = PropertyQ.szDataType[1 : K-1]
              END
              PropertyQ.szDataType = CLIP(PropertyQ.szDataType)
              PropertyQ.bPrivate = TRUE
              PropertyQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
              PropertyQ.lLineNum = glo:lLineNum
              PropertyQ.lClassID = ClassQ.lClassID
              PropertyQ.szPropertySort = UPPER(PropertyQ.szPropertyName)
              PropertyQ.bModule = TRUE

              IF PropertyQ.szDataType[1] = '&'                    OR |
                 UPPER(PropertyQ.szDataType[1 : 5]) = 'LIKE('     OR |
                 UPPER(PropertyQ.szDataType[1 : 6]) = 'QUEUE('    OR |
                 UPPER(PropertyQ.szDataType[1 : 6]) = 'GROUP('
                 GET(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
                 IF ERRORCODE()
                    ADD(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
                 END
              END
              !! look for Group or Queue
              CASE SUB(UPPER(PropertyQ.szDataType),1,5)
              OF 'GROUP' OROF 'QUEUE'
                 bEndCount = 1
?              ASSERT(LEN(szUpper) <> 0)
                 IF szUpper[LEN(szUpper)] <> '.' AND szUpper[LEN(szUpper)-2 : LEN(szUpper)] <> 'END'
                    LOOP
                       NEXT(SourceFile)
                       IF ERRORCODE()
                          lFilePctComplete = 100
                          FileProgressBox{PROP:Width} = lFilePctComplete*2
                          DISPLAY(FileProgressBox)
                          BREAK
                       ELSE

                          !!! remove extra whitespace from SourceFile.Record.sText here !!!
                          SourceFile.Record.sText = srcRemoveWhitespace(SourceFile.Record.sText)

                          glo:lLineNum += 1

                          lFileBytesProcessed = POINTER(SourceFile)
                          lFilePctComplete = (lFileBytesProcessed/lFileBytesToProcess)*100
                          IF lFileLastPct <> INT(lFilePctComplete/10)
                             lFileLastPct = INT(lFilePctComplete/10)
                             FileProgressBox{PROP:Width} = lFilePctComplete*2
                             DISPLAY(FileProgressBox)
                          END

                          szUpper = UPPER(CLIP(LEFT(SourceFile.Record.sText)))
                          K = srcFindComment(szUpper)
                          IF K
                             szUpper[K] = '<0>'
                             szUpper = CLIP(szUpper)
                          END

                          IF INSTRING(' GROUP',szUpper,1) |
                          OR INSTRING(' QUEUE',szUpper,1)
                             bEndCount += 1
                          END
                          IF CLIP(LEFT(szUpper)) = 'END' OR |
                             CLIP(LEFT(szUpper)) = '.'
                             bEndCount -= 1
                             IF bEndCount = 0
                                BREAK
                             END
                          END
                       END
                    END
                 END
              ELSE
                 IF bDeclaringClass
                    GET(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
                    IF ERRORCODE()
                       ADD(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
                    END
                 END
              END
           END
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5300
PROPERTY:END
LookForStructure    ROUTINE
  IF ~bProcessingStructure   !look for structure definition
     IF INSTRING(' GROUP',szUpper,1) OR |
        INSTRING(' QUEUE',szUpper,1)

        IF INSTRING(',TYPE',szUpper,1) OR | !found a structure?
           INSTRING(', TYPE',szUpper,1)
           StructureQ.szStructureName = srcGetLabel(SourceFile.Record.sText)
           StructureQ.szStructureSort = UPPER(StructureQ.szStructureName)
           StructureQ.szDataLabel = srcGetLabel(SourceFile.Record.sText)
           GET(StructureQ,+StructureQ.szStructureSort,+StructureQ.szDataLabel)
           IF ERRORCODE()
              DO _SetupStructure
              ADD(StructureQ,+StructureQ.szStructureSort,+StructureQ.szDataLabel)
           ELSE
              DO _SetupStructure
              PUT(StructureQ)
           END
        END
     ELSE
        DO LookForEquate
     END
  ELSE !look for properties and methods
     DO ProcessStructure
  END
  EXIT

_SetupStructure ROUTINE
  StructureQ.szDataType = srcGetStatement(SourceFile.Record.sText)
? ASSERT(LEN(StructureQ.szDataType) <> 0)
  IF StructureQ.szDataType[LEN(StructureQ.szDataType)] = '.'
     StructureQ.szDataType[LEN(StructureQ.szDataType)] = '<0>'
  ELSE
     bProcessingStructure = TRUE
  END
  ModuleQ.szModulePath = FileQ.szModulePath
  ModuleQ.szModuleName = FileQ.szModuleName
  GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
? ASSERT(~ERRORCODE())
  StructureQ.lModuleId = ModuleQ.lModuleId
  StructureQ.lLineNum = glo:lLineNum
  StructureQ.bPrivate = TRUE
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5400
PROPERTY:END
ProcessStructure    ROUTINE
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bProcessingStructure = FALSE
  ELSE
     StructureQ.szDataLabel = srcGetLabel(SourceFile.Record.sText)
     GET(StructureQ,+StructureQ.szStructureSort,+StructureQ.szDataLabel)
     IF ERRORCODE()
        DO _ProcessStructure
        ADD(StructureQ,+StructureQ.szStructureSort,+StructureQ.szDataLabel)
     ELSE
        DO _ProcessStructure
        PUT(StructureQ)
     END
  END
  EXIT

_ProcessStructure   ROUTINE
  StructureQ.szDataType = srcGetStatement(SourceFile.Record.sText)
? ASSERT(LEN(StructureQ.szDataType) <> 0)
  IF StructureQ.szDataType[LEN(StructureQ.szDataType)] = '.'
     StructureQ.szDataType[LEN(StructureQ.szDataType)] = '<0>'
     bProcessingStructure = FALSE
  END
  ModuleQ.szModulePath = FileQ.szModulePath
  ModuleQ.szModuleName = FileQ.szModuleName
  GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
? ASSERT(~ERRORCODE())
  StructureQ.lModuleId = ModuleQ.lModuleId

  StructureQ.lLineNum = glo:lLineNum
  StructureQ.bPrivate = TRUE
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LookForEquate   ROUTINE
  IF ~bProcessingEquate   !look for itemized equates
     IF INSTRING(' ITEMIZE',szUpper,1)

        K = INSTRING(',PRE(',szUpper,1)  !start value specified?
        IF K
           K += 5
           M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
           EnumQ.szEnumPrefix = SourceFile.Record.sText[K : M]
        ELSE
           EnumQ.szEnumPrefix = ''
        END

        EnumQ.szEnumLabel  = srcGetLabel(SourceFile.Record.sText)

        IF EnumQ.szEnumLabel
           EnumQ.szEnumName = EnumQ.szEnumLabel
           IF ~EnumQ.szEnumPrefix
              EnumQ.szEnumPrefix = EnumQ.szEnumLabel
           END
        ELSIF EnumQ.szEnumPrefix
           EnumQ.szEnumName = EnumQ.szEnumPrefix
        ELSE
           lUnlabelledCount += 1
           EnumQ.szEnumName = '_Unlabelled Enumeration Data Structure [' & lUnlabelledCount  & ']'
        END

        K = INSTRING(' ITEMIZE(',szUpper,1)  !start value specified?
        IF K
           K += 9
           M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
           EnumQ.szEnumValue = SourceFile.Record.sText[K : M]
        ELSE
           EnumQ.szEnumValue = 1
        END
        EnumQ.bIsHexValue = FALSE
        IF ~NUMERIC(EnumQ.szEnumValue)
           EnumQ.szEnumValue = srcGetEquateValue(EnumQ.szEnumValue,EnumQ.bIsHexValue)
        END
        lEnumValue = EnumQ.szEnumValue - 1

        ModuleQ.szModulePath = FileQ.szModulePath
        ModuleQ.szModuleName = FileQ.szModuleName
        GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
?      ASSERT(~ERRORCODE())
        EnumQ.lModuleId = ModuleQ.lModuleId

        EnumQ.lLineNum     = glo:lLineNum
        EnumQ.szEnumSort   = UPPER(EnumQ.szEnumName)
        EnumQ.bPrivate     = TRUE
        ADD(EnumQ)

        bProcessingEquate = TRUE

     ELSE
        K = INSTRING(' EQUATE',szUpper,1)  !equate value specified?
        IF K
           K = INSTRING('(',szUpper,1,K+7)  !equate value specified?
        END
        IF K
           EquateQ.szLabel = UPPER(srcGetLabel(SourceFile.Record.sText))
           K += 1
           M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
           IF SourceFile.Record.sText[K] <> ''''
              EquateQ.bIsHexValue = FALSE
              IF ~NUMERIC(SourceFile.Record.sText[K : M])
                 EquateQ.szValue = srcGetEquateValue(SourceFile.Record.sText[K : M],EquateQ.bIsHexValue)
                 IF EquateQ.szValue = ''
                    EquateQ.szValue = SourceFile.Record.sText[K : M]
                 END
              ELSE
                 EquateQ.szValue = SourceFile.Record.sText[K : M]
              END
           ELSE
              EquateQ.szValue = SourceFile.Record.sText[K : M]
           END
           ModuleQ.szModulePath = FileQ.szModulePath
           ModuleQ.szModuleName = FileQ.szModuleName
           GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
?         ASSERT(~ERRORCODE())
           EquateQ.lModuleId = ModuleQ.lModuleId

           EquateQ.lLineNum = glo:lLineNum
           IF EquateQ.szLabel <> EquateQ.szValue     !prevent infinate loop in scan
              ADD(EquateQ) !,+EquateQ.szLabel)
           END
        ELSE
           !DO LookForReference
        END
     END
  ELSE !look for enumeration structures
     DO ProcessEquate
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5600
PROPERTY:END
ProcessEquate    ROUTINE
  IF CLIP(LEFT(szUpper)) = 'END' OR |
     CLIP(LEFT(szUpper)) = '.'
     bProcessingEquate = FALSE
  ELSE
     IF EnumQ.szEnumPrefix
        EnumQ.szEnumLabel  = EnumQ.szEnumPrefix & ':' & srcGetLabel(SourceFile.Record.sText)
     ELSE
        EnumQ.szEnumLabel  = srcGetLabel(SourceFile.Record.sText)
     END

     K = INSTRING(' EQUATE',szUpper,1)  !start value specified?
     IF K
        K = INSTRING('(',szUpper,1,K+7)  !equate value specified?
     END
     IF K
        K += 1
        M = INSTRING(')',SourceFile.Record.sText,1,K) - 1
        EnumQ.szEnumValue = SourceFile.Record.sText[K : M]
        EnumQ.bIsHexValue = FALSE
        IF EnumQ.szEnumValue[1] <> ''''
           IF ~NUMERIC(EnumQ.szEnumValue)
              EnumQ.szEnumValue = srcGetEquateValue(EnumQ.szEnumValue,EnumQ.bIsHexValue)
           END
        END
        lEnumValue = EnumQ.szEnumValue
     ELSE
        lEnumValue += 1
        EnumQ.szEnumValue = lEnumValue
     END

     IF K AND ~EnumQ.szEnumValue
        EnumQ.szEnumValue = SourceFile.Record.sText[K : M]
     END

     ModuleQ.szModulePath = FileQ.szModulePath
     ModuleQ.szModuleName = FileQ.szModuleName
     GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
?   ASSERT(~ERRORCODE())
     EnumQ.lModuleId = ModuleQ.lModuleId

     EnumQ.lLineNum = glo:lLineNum
     EnumQ.bPrivate = TRUE
     ADD(EnumQ)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5700
PROPERTY:END
LookForReference    ROUTINE
  K = INSTRING(' ',SourceFile.Record.sText) - 1
  PropertyQ.szPropertyName = SourceFile.Record.sText[1 : K]
  IF CLIP(PropertyQ.szPropertyName)
     PropertyQ.szDataType =  LEFT(SUB(SourceFile.Record.sText,K+1,LEN(SourceFile.Record.sText)-K))

     IF (UPPER(SUB(PropertyQ.szDataType,1,7)) = 'DECIMAL') OR (UPPER(SUB(PropertyQ.szDataType,1,8)) = 'PDECIMAL')
        K = INSTRING(')',PropertyQ.szDataType) + 1
     ELSE
        K = INSTRING(',',PropertyQ.szDataType)
     END

     IF K
        PropertyQ.szDataType = PropertyQ.szDataType[1 : K-1]
     END
     PropertyQ.szDataType = CLIP(PropertyQ.szDataType)
     PropertyQ.bPrivate = TRUE
     PropertyQ.bProtected = CHOOSE(INSTRING(',PROTECTED',szUpper,1))
     PropertyQ.lLineNum = glo:lLineNum
     PropertyQ.lClassID = ClassQ.lClassID
     PropertyQ.szPropertySort = UPPER(PropertyQ.szPropertyName)
     PropertyQ.bModule = TRUE
     GET(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
     IF ERRORCODE()
        ADD(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
     END
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcFindComment
srcFindModule
srcGetCalledMethods
srcGetEquateValue
srcGetLabel
srcGetPrototype
srcGetPrototypeAttr
srcGetSourceLine
srcGetStatement
srcIsClassReference
srcRemoveWhitespace
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetCalledMethods
PROTOTYPE '(STRING s,STRING szSelf, STRING szParent)'
PARAMETERS '(s,szSelf,szParent)'
[COMMON]
DESCRIPTION 'get called methods from string'
FROM ABC Source
MODIFIED '2003/06/15' ' 9:26:11'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                   LONG
J                   LONG
K                   LONG
M                   LONG    !
N                   LONG    !number of parenthesis
sDelimeters         STRING(' ,()[]''{{}+-*/%^<<>=~&')
sWork               CSTRING(256)
Q                   QUEUE,PRE()
szName                CSTRING(64)
lLineNum              LONG
                    END

ClassRefQ           QUEUE()
szClassRef            CSTRING(64)
                    END
lClassRefPointer    LONG
lClassRefRecords    LONG

szClassName         CSTRING(64)
lClassId            LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  FREE(ClassRefQ)
  ClassRefQ.szClassRef = 'SELF.'
  ADD(ClassRefQ)
  IF szParent
     ClassRefQ.szClassRef = 'PARENT.'
     ADD(ClassRefQ)
  END
  ClassQ.szClassSort = UPPER(szSelf)
  GET(ClassQ,+ClassQ.szClassSort)
 ASSERT(~ERRORCODE())
  PropertyQ.lClassID = ClassQ.lClassId
  GET(PropertyQ,+PropertyQ.lClassID)
  IF ~ERRORCODE()
     I = POINTER(PropertyQ)
     J = RECORDS(PropertyQ)
     LOOP I = I TO J
       GET(PropertyQ,I)
       IF PropertyQ.lClassID <> ClassQ.lClassId
          BREAK
       ELSE
          IF PropertyQ.bModule
             IF srcIsClassReference(PropertyQ.szDataType,szClassName,lClassID)
                ClassRefQ.szClassRef = CLIP(PropertyQ.szPropertySort) & '.'
                ADD(ClassRefQ)
             END
          END
       END
     END
  END

  lClassRefRecords = RECORDS(ClassRefQ)
  LOOP lClassRefPointer = 1 TO lClassRefRecords
    GET(ClassRefQ,lClassRefPointer)
    sWork = CLIP(s)
    J = LEN(sWork)
    K = 1
    LOOP
      I = INSTRING(ClassRefQ.szClassRef,UPPER(sWork),1,K)
      IF I
         LOOP K = I TO J
           IF INSTRING(sWork[K],sDelimeters)
              BREAK
           END
         END
         Q.szName = sWork[I : K-1]
         IF Q.szName[LEN(Q.szName)] = '.'
            Q.szName[LEN(Q.szName)] = '<0>'
         END
         Q.lLineNum = glo:lLineNum
         ADD(Q)
         IF K > J
            BREAK
         END
      ELSE
         BREAK
      END
    END
  END

  J = RECORDS(Q)
  LOOP I = 1 TO J
    GET(Q,I)
    CallQ.szCalledMethod = srcResolveName(Q.szName,szSelf,szParent)
    IF srcIsClassMethod(CallQ.szCalledMethod)
       CallQ.lLineNum = Q.lLineNum
       ADD(CallQ)
    END
  END

  RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcIsClassMethod
srcIsClassReference
srcIsInterfaceMethod
srcIsInterfaceReference
srcResolveName
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcIsClassReference
PROTOTYPE '(STRING szDataType, *CSTRING szClassName, *LONG lClassID),BOOL'
PARAMETERS '(szDataType, szClassName, lClassID)'
[COMMON]
DESCRIPTION 'Is datatype a reference to a class'
FROM ABC Source
MODIFIED '2003/03/21' '18:11:04'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lClassQPointer  LONG
bIsClassRef     BYTE
I               LONG
J               LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  bIsClassRef = FALSE
  IF szDataType[1] = '&'   !if a reference variable
     lClassQPointer = POINTER(ClassQ)   !save our position
     J = RECORDS(ClassQ)
     LOOP I = 1 TO J
       GET(ClassQ,I)
       IF ClassQ.szClassSort = UPPER(SUB(szDataType,2,LEN(szDataType)-1))
          bIsClassRef = TRUE
          szClassName = ClassQ.szClassName
          lClassID = ClassQ.lClassID
          BREAK
       END
     END
     GET(ClassQ,lClassQPointer)
  END
  RETURN(bIsClassRef)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winBrowseCallQ
PROTOTYPE '(),STRING'
[COMMON]
DESCRIPTION 'Browse the CallQ'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:46:02'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('109aaa53-f63b-4130-add3-c6c9da9de7d5'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Selected Class Name:'),USE(?SelectedClassName:Prompt)
! ENTRY(@s63),USE(SelectedClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(SelectedClassName)
SelectedClassName        CSTRING(64)
!!> GUID('44eb5c8f-3526-4c0c-99fd-4d90351b84d3'),PROMPT('Selected Class Name:'),HEADER('Selected Class Name'),PICTURE(@s63)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (SelectedClassName)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 12
WHEN  ('') ('No Special Action')
WHEN  ('?ClassList') ('No Special Action')
WHEN  ('?CloseButton') ('No Special Action')
WHEN  ('?List1') ('No Special Action')
WHEN  ('?List2') ('No Special Action')
WHEN  ('?MethodList') ('No Special Action')
WHEN  ('?PropertyList') ('No Special Action')
WHEN  ('?PropertyTab') ('No Special Action')
WHEN  ('?Redirection:List') ('No Special Action')
WHEN  ('?Sheet1') ('No Special Action')
WHEN  ('?TreeTab') ('No Special Action')
WHEN  ('?VersionList') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CloseButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CloseButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?CloseButton') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?CloseButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 12
WHEN  ('') ('25000')
WHEN  ('?ClassList') ('25000')
WHEN  ('?CloseButton') ('25000')
WHEN  ('?List1') ('25000')
WHEN  ('?List2') ('25000')
WHEN  ('?MethodList') ('25000')
WHEN  ('?PropertyList') ('25000')
WHEN  ('?PropertyTab') ('25000')
WHEN  ('?Redirection:List') ('25000')
WHEN  ('?Sheet1') ('25000')
WHEN  ('?TreeTab') ('25000')
WHEN  ('?VersionList') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CloseButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?CloseButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?CloseButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 12
WHEN  ('') ('None')
WHEN  ('?ClassList') ('None')
WHEN  ('?CloseButton') ('None')
WHEN  ('?List1') ('None')
WHEN  ('?List2') ('None')
WHEN  ('?MethodList') ('None')
WHEN  ('?PropertyList') ('None')
WHEN  ('?PropertyTab') ('None')
WHEN  ('?Redirection:List') ('None')
WHEN  ('?Sheet1') ('None')
WHEN  ('?TreeTab') ('None')
WHEN  ('?VersionList') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CloseButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?CloseButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 12
WHEN  ('') (1)
WHEN  ('?ClassList') (1)
WHEN  ('?CloseButton') (1)
WHEN  ('?List1') (1)
WHEN  ('?List2') (1)
WHEN  ('?MethodList') (1)
WHEN  ('?PropertyList') (1)
WHEN  ('?PropertyTab') (1)
WHEN  ('?Redirection:List') (1)
WHEN  ('?Sheet1') (1)
WHEN  ('?TreeTab') (1)
WHEN  ('?VersionList') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ClassList')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?List1')TIMES 0
WHEN  ('?List2')TIMES 0
WHEN  ('?MethodList')TIMES 0
WHEN  ('?PropertyList')TIMES 0
WHEN  ('?PropertyTab')TIMES 0
WHEN  ('?Redirection:List')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?TreeTab')TIMES 0
WHEN  ('?VersionList')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ClassList')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?List1')TIMES 0
WHEN  ('?List2')TIMES 0
WHEN  ('?MethodList')TIMES 0
WHEN  ('?PropertyList')TIMES 0
WHEN  ('?PropertyTab')TIMES 0
WHEN  ('?Redirection:List')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?TreeTab')TIMES 0
WHEN  ('?VersionList')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ClassList')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?List1')TIMES 0
WHEN  ('?List2')TIMES 0
WHEN  ('?MethodList')TIMES 0
WHEN  ('?PropertyList')TIMES 0
WHEN  ('?PropertyTab')TIMES 0
WHEN  ('?Redirection:List')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?TreeTab')TIMES 0
WHEN  ('?VersionList')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ClassList')TIMES 0
WHEN  ('?CloseButton')TIMES 0
WHEN  ('?List1')TIMES 0
WHEN  ('?List2')TIMES 0
WHEN  ('?MethodList')TIMES 0
WHEN  ('?PropertyList')TIMES 0
WHEN  ('?PropertyTab')TIMES 0
WHEN  ('?Redirection:List')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?TreeTab')TIMES 0
WHEN  ('?VersionList')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('Default')
WHEN  ('?ClassList') ('Default')
WHEN  ('?Sheet1') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ClassList')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ClassList')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('AIBtn0')
WHEN  ('?LocatorImage') ('AIBtn15')

%AIEnableMimicControl DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?LocatorImage') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('?Sheet1')
WHEN  ('?LocatorImage') ('?Sheet1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?LocatorImage') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?LocatorImage') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?LocatorImage') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?LocatorImage') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CloseButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 1
[END]
[END]
WHEN '?PropertyList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF KEYCODE() = BSKey
   IF LEN(Shadow) = 1
      Shadow = ''
   ELSIF LEN(Shadow) > 1
      Shadow = Shadow[1 : LEN(Shadow)-1]
   END
   EXECUTE MyPropertyQOrder
      BEGIN
         MyPropertyQ.szClassName = Shadow
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szPropertyName = Shadow
         MyPropertyQ.szClassName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szDataType = Shadow
         MyPropertyQ.szClassName = ''
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
   END
   GET(MyPropertyQ,POSITION(MyPropertyQ))
   ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
ELSIF KEYCODE() = UnderscoreKey
   Shadow = Shadow & '_'
   EXECUTE MyPropertyQOrder
      BEGIN
         MyPropertyQ.szClassName = Shadow
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szPropertyName = Shadow
         MyPropertyQ.szClassName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szDataType = Shadow
         MyPropertyQ.szClassName = ''
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
   END
   GET(MyPropertyQ,POSITION(MyPropertyQ))
   ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
ELSIF KEYCODE() = Shift7
   Shadow = Shadow & '&'
   EXECUTE MyPropertyQOrder
      BEGIN
         MyPropertyQ.szClassName = Shadow
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szPropertyName = Shadow
         MyPropertyQ.szClassName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szDataType = Shadow
         MyPropertyQ.szClassName = ''
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
   END
   GET(MyPropertyQ,POSITION(MyPropertyQ))
   ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
ELSIF INRANGE(KEYCODE(),AKey,ZKey)
   Shadow = Shadow & LOWER(CHR(KEYCODE()))
   EXECUTE MyPropertyQOrder
      BEGIN
         MyPropertyQ.szClassName = Shadow
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szPropertyName = Shadow
         MyPropertyQ.szClassName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szDataType = Shadow
         MyPropertyQ.szClassName = ''
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
   END
   GET(MyPropertyQ,POSITION(MyPropertyQ))
   ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
ELSIF INRANGE(KEYCODE(),ShiftA,ShiftZ)
   Shadow = Shadow & CHR(KEYCODE())
   EXECUTE MyPropertyQOrder
      BEGIN
         MyPropertyQ.szClassName = Shadow
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szPropertyName = Shadow
         MyPropertyQ.szClassName = ''
      END
      BEGIN
         MyPropertyQ.PropertyQGroup.szDataType = Shadow
         MyPropertyQ.szClassName = ''
         MyPropertyQ.PropertyQGroup.szPropertyName = ''
      END
   END
   GET(MyPropertyQ,POSITION(MyPropertyQ))
   ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
ELSE
   CASE KEYCODE()
   OF MouseLeft2
      I = ?PropertyList{PROPLIST:MouseDownRow}
      IF I = 0
         CASE ?PropertyList{PROPLIST:MouseDownField}
         OF 1
            IF MyPropertyQOrder <> 1
               ?PropertyList{PROPLIST:Header,MyPropertyQOrder} = SUB(?PropertyList{PROPLIST:Header,MyPropertyQOrder},1,LEN(?PropertyList{PROPLIST:Header,MyPropertyQOrder})-2)
               SORT(MyPropertyQ,+MyPropertyQ.szClassName,+MyPropertyQ.PropertyQGroup.szPropertyName)
               MyPropertyQOrder = 1
               ?PropertyList{PROPLIST:Header,MyPropertyQOrder} = ?PropertyList{PROPLIST:Header,MyPropertyQOrder} & ' +'
               MyPropertyQ.szClassName = Shadow
               GET(MyPropertyQ,POSITION(MyPropertyQ))
               ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
            END
         OF 2
            IF MyPropertyQOrder <> 2
               ?PropertyList{PROPLIST:Header,MyPropertyQOrder} = SUB(?PropertyList{PROPLIST:Header,MyPropertyQOrder},1,LEN(?PropertyList{PROPLIST:Header,MyPropertyQOrder})-2)
               SORT(MyPropertyQ,+MyPropertyQ.PropertyQGroup.szPropertyName,+MyPropertyQ.szClassName)
               MyPropertyQOrder = 2
               ?PropertyList{PROPLIST:Header,MyPropertyQOrder} = ?PropertyList{PROPLIST:Header,MyPropertyQOrder} & ' +'
               MyPropertyQ.PropertyQGroup.szPropertyName = Shadow
               GET(MyPropertyQ,POSITION(MyPropertyQ))
               ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
            END
         OF 3
            IF MyPropertyQOrder <> 3
               ?PropertyList{PROPLIST:Header,MyPropertyQOrder} = SUB(?PropertyList{PROPLIST:Header,MyPropertyQOrder},1,LEN(?PropertyList{PROPLIST:Header,MyPropertyQOrder})-2)
               SORT(MyPropertyQ,+MyPropertyQ.PropertyQGroup.szDataType,+MyPropertyQ.szClassName,+MyPropertyQ.PropertyQGroup.szPropertyName)
               MyPropertyQOrder = 3
               ?PropertyList{PROPLIST:Header,MyPropertyQOrder} = ?PropertyList{PROPLIST:Header,MyPropertyQOrder} & ' +'
               MyPropertyQ.PropertyQGroup.szDataType = Shadow
               GET(MyPropertyQ,POSITION(MyPropertyQ))
               ?PropertyList{PROP:Selected} = POINTER(MyPropertyQ)
            END
         END
      ELSE
         GET(MyPropertyQ,I)
         ClassQ.lClassID = MyPropertyQ.PropertyQGroup.lClassID
         GET(ClassQ,+ClassQ.lClassID)
         !IF MyPropertyQ.PropertyQGroup.bModule = FALSE
         !   srcViewAsciiFile(ClassQ.lIncludeId,MyPropertyQ.PropertyQGroup.lLineNum,ViewerThreadQ)
         !ELSE
         !   srcViewAsciiFile(ClassQ.lModuleId,MyPropertyQ.PropertyQGroup.lLineNum,ViewerThreadQ)
         !END
         SelectedClassName = ClassQ.szClassName
         POST(EVENT:CloseWindow)
      END
   END
END
IF Shadow = ''
   HIDE(?LocatorImage)
ELSE
   UNHIDE(?LocatorImage)
END
DISPLAY(?Shadow)
[END]
[END]
WHEN '?MethodList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF KEYCODE() = BSKey
   IF LEN(Shadow) = 1
      Shadow = ''
   ELSIF LEN(Shadow) > 1
      Shadow = Shadow[1 : LEN(Shadow)-1]
   END
   EXECUTE MyMethodQOrder
      BEGIN
         MyMethodQ.szClassName = Shadow
         MyMethodQ.MethodQGroup.szMethodName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodSort = UPPER(Shadow)
         MyMethodQ.szClassName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodName = Shadow
         MyMethodQ.szClassName = ''
      END
   END
   GET(MyMethodQ,POSITION(MyMethodQ))
   ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
ELSIF KEYCODE() = UnderscoreKey
   Shadow = Shadow & '_'
   EXECUTE MyMethodQOrder
      BEGIN
         MyMethodQ.szClassName = Shadow
         MyMethodQ.MethodQGroup.szMethodName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodSort = UPPER(Shadow)
         MyMethodQ.szClassName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodName = Shadow
         MyMethodQ.szClassName = ''
      END
   END
   GET(MyMethodQ,POSITION(MyMethodQ))
   ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
ELSIF INRANGE(KEYCODE(),AKey,ZKey)
   Shadow = Shadow & LOWER(CHR(KEYCODE()))
   EXECUTE MyMethodQOrder
      BEGIN
         MyMethodQ.szClassName = Shadow
         MyMethodQ.MethodQGroup.szMethodName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodSort = UPPER(Shadow)
         MyMethodQ.szClassName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodName = Shadow
         MyMethodQ.szClassName = ''
      END
   END
   GET(MyMethodQ,POSITION(MyMethodQ))
   ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
ELSIF INRANGE(KEYCODE(),ShiftA,ShiftZ)
   Shadow = Shadow & CHR(KEYCODE())
   EXECUTE MyMethodQOrder
      BEGIN
         MyMethodQ.szClassName = Shadow
         MyMethodQ.MethodQGroup.szMethodName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodSort = UPPER(Shadow)
         MyMethodQ.szClassName = ''
      END
      BEGIN
         MyMethodQ.MethodQGroup.szMethodName = Shadow
         MyMethodQ.szClassName = ''
      END
   END
   GET(MyMethodQ,POSITION(MyMethodQ))
   ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
ELSE
   CASE KEYCODE()
   OF MouseLeft2
      I = ?MethodList{PROPLIST:MouseDownRow}
      IF I = 0
         CASE ?MethodList{PROPLIST:MouseDownField}
         OF 1
            IF MyMethodQOrder <> 1
               ?MethodList{PROPLIST:Header,MyMethodQOrder} = SUB(?MethodList{PROPLIST:Header,MyMethodQOrder},1,LEN(?MethodList{PROPLIST:Header,MyMethodQOrder})-2)
               SORT(MyMethodQ,+MyMethodQ.szClassName,+MyMethodQ.MethodQGroup.szMethodName)
               MyMethodQOrder = 1
               ?MethodList{PROPLIST:Header,MyMethodQOrder} = ?MethodList{PROPLIST:Header,MyMethodQOrder} & ' +'
               MyMethodQ.szClassName = Shadow
               GET(MyMethodQ,POSITION(MyMethodQ))
               ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
            END
         OF 2
            IF MyMethodQOrder <> 2
               ?MethodList{PROPLIST:Header,MyMethodQOrder} = SUB(?MethodList{PROPLIST:Header,MyMethodQOrder},1,LEN(?MethodList{PROPLIST:Header,MyMethodQOrder})-2)
               SORT(MyMethodQ,+MyMethodQ.MethodQGroup.szMethodSort,+MyMethodQ.szClassName)
               MyMethodQOrder = 2
               ?MethodList{PROPLIST:Header,MyMethodQOrder} = ?MethodList{PROPLIST:Header,MyMethodQOrder} & ' +'
               MyMethodQ.MethodQGroup.szMethodSort = UPPER(Shadow)
               GET(MyMethodQ,POSITION(MyMethodQ))
               ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
            END
         OF 3
            IF MyMethodQOrder <> 3
               ?MethodList{PROPLIST:Header,MyMethodQOrder} = SUB(?MethodList{PROPLIST:Header,MyMethodQOrder},1,LEN(?MethodList{PROPLIST:Header,MyMethodQOrder})-2)
               SORT(MyMethodQ,+MyMethodQ.MethodQGroup.szMethodName,+MyMethodQ.szClassName)
               MyMethodQOrder = 3
               ?MethodList{PROPLIST:Header,MyMethodQOrder} = ?MethodList{PROPLIST:Header,MyMethodQOrder} & ' +'
               MyMethodQ.MethodQGroup.szMethodName = Shadow
               GET(MyMethodQ,POSITION(MyMethodQ))
               ?MethodList{PROP:Selected} = POINTER(MyMethodQ)
            END
         END
      ELSE
         GET(MyMethodQ,I)
         ClassQ.lClassID = MyMethodQ.MethodQGroup.lClassID
         GET(ClassQ,+ClassQ.lClassID)
         !srcViewAsciiFile(ClassQ.lModuleId,MyMethodQ.MethodQGroup.lSourceLine,ViewerThreadQ)
         SelectedClassName = ClassQ.szClassName
         POST(EVENT:CloseWindow)
      END
   END
END
IF Shadow = ''
   HIDE(?LocatorImage)
ELSE
   UNHIDE(?LocatorImage)
END
DISPLAY(?Shadow)
[END]
[END]
WHEN '?ClassList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF KEYCODE() = BSKey
   IF LEN(Shadow) = 1
      Shadow = ''
   ELSIF LEN(Shadow) > 1
      Shadow = Shadow[1 : LEN(Shadow)-1]
   END
   EXECUTE MyClassQOrder
      BEGIN
         MyClassQ.ClassQGroup.szClassSort = UPPER(Shadow)
      END
      BEGIN
         MyClassQ.ClassQGroup.szParentClassSort = UPPER(Shadow)
         MyClassQ.ClassQGroup.szClassSort = ''
      END
   END
   GET(MyClassQ,POSITION(MyClassQ))
   ?ClassList{PROP:Selected} = POINTER(MyClassQ)
ELSIF KEYCODE() = UnderscoreKey
   Shadow = Shadow & '_'
   EXECUTE MyClassQOrder
      BEGIN
         MyClassQ.ClassQGroup.szClassSort = UPPER(Shadow)
      END
      BEGIN
         MyClassQ.ClassQGroup.szParentClassSort = UPPER(Shadow)
         MyClassQ.ClassQGroup.szClassSort = ''
      END
   END
   GET(MyClassQ,POSITION(MyClassQ))
   ?ClassList{PROP:Selected} = POINTER(MyClassQ)
ELSIF INRANGE(KEYCODE(),AKey,ZKey)
   Shadow = Shadow & LOWER(CHR(KEYCODE()))
   EXECUTE MyClassQOrder
      BEGIN
         MyClassQ.ClassQGroup.szClassSort = UPPER(Shadow)
      END
      BEGIN
         MyClassQ.ClassQGroup.szParentClassSort = UPPER(Shadow)
         MyClassQ.ClassQGroup.szClassSort = ''
      END
   END
   GET(MyClassQ,POSITION(MyClassQ))
   ?ClassList{PROP:Selected} = POINTER(MyClassQ)
ELSIF INRANGE(KEYCODE(),ShiftA,ShiftZ)
   Shadow = Shadow & CHR(KEYCODE())
   EXECUTE MyClassQOrder
      BEGIN
         MyClassQ.ClassQGroup.szClassSort = UPPER(Shadow)
      END
      BEGIN
         MyClassQ.ClassQGroup.szParentClassSort = UPPER(Shadow)
         MyClassQ.ClassQGroup.szClassSort = ''
      END
   END
   GET(MyClassQ,POSITION(MyClassQ))
   ?ClassList{PROP:Selected} = POINTER(MyClassQ)
ELSE
   CASE KEYCODE()
   OF MouseLeft2
      I = ?ClassList{PROPLIST:MouseDownRow}
      IF I = 0
         CASE ?ClassList{PROPLIST:MouseDownField}
         OF 1
            IF MyClassQOrder <> 1
               ?ClassList{PROPLIST:Header,MyClassQOrder} = SUB(?ClassList{PROPLIST:Header,MyClassQOrder},1,LEN(?ClassList{PROPLIST:Header,MyClassQOrder})-2)
               SORT(MyClassQ,+MyClassQ.ClassQGroup.szClassSort)
               MyClassQOrder = 1
               ?ClassList{PROPLIST:Header,MyClassQOrder} = ?ClassList{PROPLIST:Header,MyClassQOrder} & ' +'
               MyClassQ.ClassQGroup.szClassSort = UPPER(Shadow)
               GET(MyClassQ,POSITION(MyClassQ))
               ?ClassList{PROP:Selected} = POINTER(MyClassQ)
            END
         OF 2
            IF MyClassQOrder <> 2
               ?ClassList{PROPLIST:Header,MyClassQOrder} = SUB(?ClassList{PROPLIST:Header,MyClassQOrder},1,LEN(?ClassList{PROPLIST:Header,MyClassQOrder})-2)
               SORT(MyClassQ,+MyClassQ.ClassQGroup.szParentClassSort,+MyClassQ.ClassQGroup.szClassSort)
               MyClassQOrder = 2
               ?ClassList{PROPLIST:Header,MyClassQOrder} = ?ClassList{PROPLIST:Header,MyClassQOrder} & ' +'
               MyClassQ.ClassQGroup.szParentClassSort = UPPER(Shadow)
               GET(MyClassQ,POSITION(MyClassQ))
               ?ClassList{PROP:Selected} = POINTER(MyClassQ)
            END
         END
      ELSE
         GET(MyClassQ,I)
         !srcViewAsciiFile(MyClassQ.ClassQGroup.lIncludeId,MyClassQ.ClassQGroup.lLineNum,ViewerThreadQ)
         SelectedClassName = MyClassQ.ClassQGroup.szClassName
         POST(EVENT:CloseWindow)
      END
   END
END
IF Shadow = ''
   HIDE(?LocatorImage)
ELSE
   UNHIDE(?LocatorImage)
END
DISPLAY(?Shadow)
[END]
[END]
WHEN '?Sheet1'
[INSTANCES]
WHEN 'TabChanging'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
Shadow = ''
DISPLAY(?Shadow)
HIDE(?LocatorImage)
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
LABEL
PROPERTY:END
  SelectedClassName = ''

  SORT(ClassQ,+ClassQ.lClassId)
  SORT(ModuleQ,+ModuleQ.lModuleId)

  J = RECORDS(ClassQ)
  LOOP I = 1 TO J
     GET(ClassQ,I)
     ModuleQ.lModuleId = ClassQ.lIncludeId
     GET(ModuleQ,+ModuleQ.lModuleId)
     MyClassQ.szDeclaration = ModuleQ.szModulePath & ModuleQ.szModuleName
     ModuleQ.lModuleId = ClassQ.lModuleId
     GET(ModuleQ,+ModuleQ.lModuleId)
     MyClassQ.szDefinition = ModuleQ.szModulePath & ModuleQ.szModuleName
     MyClassQ.ClassQGroup = ClassQ
     ADD(MyClassQ)
  END
  SORT(MyClassQ,+MyClassQ.ClassQGroup.szClassSort)
  MyClassQOrder = 1

  J = RECORDS(MethodQ)
  LOOP I = 1 TO J
     GET(MethodQ,I)
     ClassQ.lClassID = MethodQ.lClassID
     GET(ClassQ,+ClassQ.lClassId)
     MyMethodQ.szClassName = ClassQ.szClassName
     MyMethodQ.MethodQGroup = MethodQ
     ADD(MyMethodQ)
  END
  SORT(MyMethodQ,+MyMethodQ.szClassName,+MyMethodQ.MethodQGroup.szMethodSort)
  MyMethodQOrder = 1

  J = RECORDS(PropertyQ)
  LOOP I = 1 TO J
     GET(PropertyQ,I)
     ClassQ.lClassID = PropertyQ.lClassID
     GET(ClassQ,+ClassQ.lClassId)
     MyPropertyQ.szClassName = ClassQ.szClassName
     MyPropertyQ.PropertyQGroup = PropertyQ
     ADD(MyPropertyQ)
  END
  SORT(MyPropertyQ,+MyPropertyQ.szClassName,+MyPropertyQ.PropertyQGroup.szPropertySort)
  MyPropertyQOrder = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8080
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END

?ClassList{PROPLIST:Header,1} = ?ClassList{PROPLIST:Header,1} & ' +'
?ClassList{PROP:SelectedColor}        = glo:lSelectedFore
?ClassList{PROP:SelectedFillColor}    = glo:lSelectedBack
LOOP I = AKey to ZKey
 ?ClassList{PROP:Alrt,255} = I
END
LOOP I = ShiftA to ShiftZ
 ?ClassList{PROP:Alrt,255} = I
END
?ClassList{PROP:Alrt,255} = BSKey
?ClassList{PROP:Alrt,255} = UnderscoreKey

?MethodList{PROPLIST:Header,1} = ?MethodList{PROPLIST:Header,1} & ' +'
?MethodList{PROP:SelectedColor}       = glo:lSelectedFore
?MethodList{PROP:SelectedFillColor}   = glo:lSelectedBack
LOOP I = AKey to ZKey
 ?MethodList{PROP:Alrt,255} = I
END
LOOP I = ShiftA to ShiftZ
 ?MethodList{PROP:Alrt,255} = I
END
?MethodList{PROP:Alrt,255} = BSKey
?MethodList{PROP:Alrt,255} = UnderscoreKey

?PropertyList{PROPLIST:Header,1} = ?PropertyList{PROPLIST:Header,1} & ' +'
?PropertyList{PROP:SelectedColor}     = glo:lSelectedFore
?PropertyList{PROP:SelectedFillColor} = glo:lSelectedBack
LOOP I = AKey to ZKey
 ?PropertyList{PROP:Alrt,255} = I
END
LOOP I = ShiftA to ShiftZ
 ?PropertyList{PROP:Alrt,255} = I
END
?PropertyList{PROP:Alrt,255} = BSKey
?PropertyList{PROP:Alrt,255} = UnderscoreKey
?PropertyList{PROP:Alrt,255} = Shift7
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
   END
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
FREE(MyClassQ)
FREE(MyMethodQ)
FREE(MyPropertyQ)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
SORT(ClassQ,+ClassQ.szClassSort)
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
UnderscoreKey     EQUATE(01BDh)
Shadow            CSTRING(256),STATIC
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
ViewerThreadQ   QUEUE(THREADQTYPE),PRE()              !
                END

MyClassQOrder   BYTE
MyClassQ        QUEUE,PRE(MyClassQ)
ClassQGroup        LIKE(ClassQ)
szDeclaration      CSTRING(256)
szDefinition       CSTRING(256)
                END

MyMethodQOrder  BYTE
MyMethodQ       QUEUE,PRE(MyMethodQ)
szClassName         LIKE(ClassQ:szClassName)
MethodQGroup        LIKE(MethodQ)
                END

MyPropertyQOrder BYTE
MyPropertyQ     QUEUE,PRE(MyPropertyQ)
szClassName         LIKE(ClassQ:szClassName)
PropertyQGroup      LIKE(PropertyQ)
                END
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
I        LONG,AUTO
[END]
[END]
[END]
[END]
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 3
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 1
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 2
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 5
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6, 7)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 7
WHEN  (1) ('?Sheet1')
WHEN  (2) ('?List1')
WHEN  (3) ('?List2')
WHEN  (4) ('?ClassList')
WHEN  (5) ('?MethodList')
WHEN  (6) ('?PropertyList')
WHEN  (7) ('?CloseButton')

%DisableResize DEPEND %OverrideControls LONG TIMES 7
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 7
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Constant Right Border')
WHEN  (3) ('Constant Right Border')
WHEN  (4) ('Constant Right Border')
WHEN  (5) ('Constant Right Border')
WHEN  (6) ('Constant Right Border')
WHEN  (7) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 7
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Constant Bottom Border')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Constant Bottom Border')
WHEN  (5) ('Constant Bottom Border')
WHEN  (6) ('Constant Bottom Border')
WHEN  (7) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 7
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Left')
WHEN  (6) ('Fix Left')
WHEN  (7) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 7
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Top')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Top')
WHEN  (5) ('Fix Top')
WHEN  (6) ('Fix Top')
WHEN  (7) ('Fix Bottom')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
srcViewAsciiFile
[WINDOW]
Window  WINDOW('Browse Database'),AT(,,318,230),FONT('Tahoma',10,COLOR:Black,FONT:regular, |
          CHARSET:ANSI),RESIZE,TILED,GRAY,PALETTE(256),WALLPAPER('wallpaper.gif')
          SHEET,AT(4,4,310,204),USE(?Sheet1),COLOR(COLOR:BTNFACE),#ORDINAL(1)
            TAB('Calls'),USE(?TreeTab),HIDE,#ORDINAL(2)
              LIST,AT(8,20,302,134),USE(?List1),VSCROLL,FLAT,FORMAT('156L(1)|~Calling M' & |
                'ethod~C(0)@s63@156L(1)~Called Method~C(0)@s63@'),FROM(CallQ),#FIELDS(CallQ:szCallingMethod, |
                CallQ:szCalledMethod),#ORIG(?List1),#ORDINAL(3)
              LIST,AT(8,157,302,46),USE(?List2),VSCROLL,FLAT,FORMAT('252L(2)~Call Name~@s63@'), |
                FROM(CallNameQ),#FIELDS(CallNameQ:szCallName),#ORIG(?List2),#ORDINAL(4)
            END
            TAB('Class'),USE(?ClassTab),#ORDINAL(5)
              LIST,AT(8,20,302,184),USE(?ClassList),HVSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White), |
                FLAT,FORMAT('80L(2)|M~Name~@s63@#2#80L(2)|M~Parent~@s63@#3#80L(2)|M~Dec' & |
                'laration~@s255@#14#56L(2)|M~Definition~@s255@#15#56R(2)~Line Number~L@n10@#7#'), |
                FROM(MyClassQ),#ORDINAL(6)
            END
            TAB('Method'),USE(?MethodTab),#ORDINAL(7)
              LIST,AT(8,20,302,184),USE(?MethodList),HVSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White), |
                FLAT,FORMAT('32L(2)|M~Class~@s63@#1#80L(2)|M~Sort~@s63@#11#80L(2)|M~Nam' & |
                'e~@s63@#3#80L(2)|M~Prototype~@s127@#4#26C(2)|M~Private~L@n1@#5#34C(2)|' & |
                'M~Protected~L@n1@#6#22C(2)|M~Virtual~L@n1@#7#56R(2)|M~Line Num~L@n10@#' & |
                '8#56R(2)|M~Source Line~L@n10@#9#22C(2)|M~Module Flag~L@n1@#12#'),FROM(MyMethodQ), |
                #ORDINAL(8)
            END
            TAB('Property'),USE(?PropertyTab),#ORDINAL(9)
              LIST,AT(8,20,302,184),USE(?PropertyList),HVSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White), |
                FLAT,FORMAT('56L(2)|M~Class~@s63@#1#80L(2)|M~Name~@s63@#3#80L(2)|M~Data' & |
                'Type~@s63@#4#26C(2)|M~Private~L@n1@#5#34C(2)|M~Protected~@n1@#6#56R(2)' & |
                '|M~Line Number~C@n10@#7#34C(2)~Module Flag~@n1@#10#'),FROM(MyPropertyQ),#ORDINAL(10)
            END
            TAB('Redirection'),USE(?Redirection:Tab),#ORIG(?Tab5),#ORDINAL(11)
              LIST,AT(8,20,302,184),USE(?Redirection:List),VSCROLL,COLOR(COLOR:White),FORMAT('128L(2)|M~' & |
                'Token~@s32@1020L(2)|M~Path~@s255@'),FROM(RedirectionQueue),#FIELDS(RedirectionQueue:Token, |
                RedirectionQueue:Path),#ORIG(?List6),#ORDINAL(12)
            END
            TAB('Versions'),USE(?Versions:Tab),#ORIG(?Tab6),#ORDINAL(13)
              LIST,AT(8,20,302,184),USE(?VersionList),HVSCROLL,COLOR(COLOR:White),FORMAT('50L(2)|M~V' & |
                'ersion~@s100@100L(2)|M~Path~@s255@20L(2)|M~Is Windows Version~@s5@100L' & |
                '(2)|M~Ini File~@s80@100L(2)|M~Libsrc~@s255@100L(2)|M~Red File~@s80@20L' & |
                '(2)|M~Supports Include~@s5@100L(2)|M~Root~@s255@100L(2)|M~RedDir~@s255@'), |
                FROM(glo:VersionQ),#FIELDS(Unknown,Unknown,Unknown,Unknown,Unknown,Unknown, |
                Unknown,Unknown,Unknown),#ORIG(?List7),#ORDINAL(14)
            END
          END
          IMAGE('pick.ico'),AT(4,211),USE(?LocatorImage),HIDE,#ORDINAL(15)
          STRING(@S255),AT(26,214,,10),USE(Shadow),TRN,#ORDINAL(16)
          BUTTON('Cl&ose'),AT(269,212,45,14),USE(?CloseButton),#ORIG(?Button1),#ORDINAL(17)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcReplaceString
PROTOTYPE '(STRING s, STRING sAttribute, *ANY sNewValue),STRING'
PARAMETERS '(s, sAttribute, sNewValue)'
[COMMON]
DESCRIPTION 'Replace a string'
FROM ABC Source
MODIFIED '2003/07/20' '13:50:34'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
sTemp       CSTRING(1024)
sWork       CSTRING(1024)
lpAttribute LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  sTemp = CLIP(s)
  lpAttribute = INSTRING(UPPER(sAttribute),UPPER(sTemp),1)
  IF lpAttribute
     LOOP WHILE lpAttribute
        sWork = SUB(sTemp,1,lpAttribute-1)
        sWork = sWork & sNewValue
        sTemp = SUB(sTemp,lpAttribute+LEN(sAttribute),LEN(sTemp)-(lpAttribute+LEN(sAttribute)-1))
        sWork = sWork & sTemp
        sTemp = sWork
        lpAttribute = INSTRING(UPPER(sAttribute),UPPER(sTemp),1)
     END
  ELSE
     sWork = sTemp
  END
  RETURN(sWork)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddCalls
PROTOTYPE '(STRING szTreeName, STRING szCallingMethod, LONG lTreeLevel)'
PARAMETERS '(szTreeName,szCallingMethod, lTreeLevel)'
[COMMON]
DESCRIPTION 'Add Method Calls to Tree'
FROM ABC Source
MODIFIED '2015/03/04' '17:37:14'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG
J               LONG
bExpanded       BYTE
bUpdate         BYTE
lStructureQRecords  LONG
lStructureQPointer  LONG
bExtends        BYTE
bFinal          BYTE
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  IF szTreeName = szCallingMethod
     RETURN
  END

  I = INSTRING('.',szCallingMethod)
 ASSERT(I > 0)
  ClassQ.szClassSort = UPPER(SUB(szCallingMethod,1,I-1))
  GET(ClassQ,+ClassQ.szClassSort)
  IF ~ERRORCODE()
     MethodQ.lClassID = ClassQ.lClassID
     MethodQ.szMethodSort = UPPER(szCallingMethod[I+1 : LEN(szCallingMethod)])
     GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
    ASSERT(~ERRORCODE())
  ELSE
     ClassQ.lClassID = 0
     MethodQ.szPrototype = ''
     StructureQ.szStructureSort = UPPER(SUB(szCallingMethod,1,I-1))
     GET(StructureQ,+StructureQ.szStructureSort)
    ASSERT(~ERRORCODE())
     ClassQ.szClassName = SUB(szCallingMethod,1,I-1)
     lStructureQRecords = RECORDS(StructureQ)
     lStructureQPointer = POINTER(StructureQ)
     LOOP lStructureQPointer = lStructureQPointer TO lStructureQRecords
       GET(StructureQ,lStructureQPointer)
       IF StructureQ.szStructureSort = UPPER(SUB(szCallingMethod,1,I-1))
          IF UPPER(StructureQ.szDataLabel) = UPPER(szCallingMethod[I+1 : LEN(szCallingMethod)])
             MethodQ.bPrivate = CHOOSE(INSTRING('PRIVATE',UPPER(StructureQ.szDataType))>0,1,0)
             MethodQ.bProtected = CHOOSE(INSTRING('PROTECTED',UPPER(StructureQ.szDataType))>0,1,0)
             MethodQ.bVirtual = CHOOSE(INSTRING('VIRTUAL',UPPER(StructureQ.szDataType))>0,1,0)
             MethodQ.szMethodName = StructureQ.szDataLabel
             MethodQ.lLineNum = StructureQ.lLineNum
             MethodQ.lSourceLine = StructureQ.lLineNum
             !Begin 2004.12.14 -----------------------------------------------
             MethodQ.bExtends = 0       !bExtends
             MethodQ.bFinal = 0         !bFinal
             MethodQ.bProc = 0          !CHOOSE(INSTRING(',PROC',szUpper,1))
             MethodQ.szDLL = ''         !srcGetPrototypeAttr('DLL',SourceFile.Record.sText)
             MethodQ.szExtName = ''     !srcGetPrototypeAttr('NAME',SourceFile.Record.sText)
             MethodQ.szCallConv = ''    !srcGetPrototypeAttr('CALLCONV',SourceFile.Record.sText)
             MethodQ.szReturnType = ''  !srcGetPrototypeAttr('RETURN',SourceFile.Record.sText)
             !End   2004.12.14 -----------------------------------------------
             !
             BREAK
          END
       ELSE
         ASSERT(TRUE = FALSE)
          BREAK
       END
     END
  END
  CallNameQ.szCallName = szCallingMethod
  CallNameQ.szSortName = UPPER(szCallingMethod)
  GET(CallNameQ,+CallNameQ.szSortName)
  IF ERRORCODE()
     bExpanded = FALSE
     bUpdate = FALSE
  ELSE
     bExpanded = CallNameQ.bExpandedAbove
     bUpdate = TRUE
  END

  IF szCallingMethod[1 : I-1] = szTreeName
     TreeQ.szText = szCallingMethod[I+1 : LEN(szCallingMethod)]
  ELSE
     TreeQ.szText = szCallingMethod
  END

  IF bExpanded = TRUE
     TreeQ.szText = TreeQ.szText & ' (Expanded Above)'
  END

  TreeQ.wNoteIcon = ICON:NOTE
  TreeQ.wIcon  = CHOOSE(ClassQ.lModuleId = 0,ICON:INTERFACEFOLDER,ICON:METHOD)
  TreeQ.lLevel = lTreeLevel
  TreeQ.lStyle = CHOOSE(MethodQ.bPrivate,STYLE:PRIVATE,STYLE:NORMAL)
  TreeQ.lStyle = CHOOSE(MethodQ.bProtected,STYLE:PROTECTED,TreeQ.lStyle)
  TreeQ.lStyle = CHOOSE(MethodQ.bModule,STYLE:MODULE,TreeQ.lStyle)
  IF TreeQ.wIcon  = ICON:INTERFACEFOLDER
     TreeQ.lStyle = STYLE:VIRTUAL
  ELSE
     TreeQ.lStyle = CHOOSE(MethodQ.bVirtual,STYLE:VIRTUAL,TreeQ.lStyle)
  END
  TreeQ.szSearch = szCallingMethod
  TreeQ.szClassName = ClassQ.szClassName
  IF ClassQ.bIsABC
     IF SUB(ClassQ.szClassName,-5,5) = 'Class'
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     ELSE
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName & 'Class'
     END
     CASE glo:bClarionVersion
       OF CWVERSION_C2
        TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
       OF CWVERSION_C4
        TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
       OF CWVERSION_C5 OROF CWVERSION_C5EE
        TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
       OF CWVERSION_C55 OROF CWVERSION_C55EE
        TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
       OF CWVERSION_C60 OROF CWVERSION_C60EE
        TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
       OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
        TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
     ELSE
        TreeQ.szHelpFile = ''
     END
  ELSE
     TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     TreeQ.szHelpFile = ''
  END
  TreeQ.lLineNum = MethodQ.lLineNum
  TreeQ.lSourceLine = MethodQ:lSourceLine
  TreeQ.lIncludeId = ClassQ.lIncludeId
  TreeQ.lModuleId = ClassQ.lModuleId
  TreeQ.lOccurranceLine = CallQ.lLineNum
  TreeQ.szPrototype = MethodQ.szPrototype
  IF MethodQ.bPrivate
     TreeQ.szContextString = ''
     TreeQ.szHelpFile = ''
     IF glo:bShowPrivate
        IF MethodQ.bModule
           IF glo:bShowModule
              DO SetNoteIcon
              DO SetTipText
              ADD(TreeQ)
           END
        ELSE
           DO SetNoteIcon
           DO SetTipText
           ADD(TreeQ)
        END
     END
  ELSIF MethodQ.bProtected
     IF glo:bShowProtected
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END
  ELSE
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
  END

  IF bExpanded = FALSE AND bUpdate = TRUE
     CallNameQ.bExpandedAbove = TRUE
     PUT(CallNameQ)
     J = RECORDS(CallQ)
     CallQ.szCallingMethod = szCallingMethod
     GET(CallQ,+CallQ.szCallingMethod)
     X" = TreeQ.szClassName
     IF ~ERRORCODE()
        I = POINTER(CallQ)
        LOOP I = I TO J
          GET(CallQ,I)
          IF ERRORCODE() OR CallQ.szCallingMethod <> szCallingMethod
             BREAK
          ELSE
             srcAddCalls(X",CallQ.szCalledMethod,lTreeLevel+1)
          END
        END
     END
  END
  RETURN
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S   STRING(256)
X   LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetLineComments
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcResolveName
PROTOTYPE '(STRING szName, STRING szSelf, STRING szParent),STRING'
PARAMETERS '(szName, szSelf, szParent)'
[COMMON]
DESCRIPTION 'resolve name references'
FROM ABC Source
MODIFIED '2017/07/02' ' 9:20:23'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                   LONG
J                   LONG
szWork              CSTRING(1024)
Q                   QUEUE
szSnip                CSTRING(64)
                    END
bStructure          BYTE
lStructureQPointer  LONG
lStructureQRecords  LONG
szLastError         LIKE(szWork),STATIC
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !Break szName into pieces
  szWork = szName
  LOOP
    I = INSTRING('.',szWork)
    IF I
       Q.szSnip = szWork[1 : I-1]
       ADD(Q)
       szWork = szWork[I+1 : LEN(szWork)]
    ELSE
       Q.szSnip = szWork
       ADD(Q)
       BREAK
    END
  END

  bStructure = FALSE
  GET(Q,1)
  CASE UPPER(Q.szSnip)
    OF 'SELF'
       szWork = szSelf
    OF 'PARENT'
       szWork = szParent
  ELSE
    ClassQ.szClassSort = UPPER(szSelf)
    GET(ClassQ,+ClassQ.szClassSort)
?  ASSERT(~ERRORCODE())
    PropertyQ.lClassId = ClassQ.lClassId
    PropertyQ.szPropertySort = UPPER(Q.szSnip)
    GET(PropertyQ,+PropertyQ.lClassId,+PropertyQ.szPropertySort)
?  ASSERT(~ERRORCODE())
    szWork = CLIP(PropertyQ.szDataType[2 : LEN(PropertyQ.szDataType)])
  END
  J = RECORDS(Q)
  LOOP I = 2 TO J - 1
    IF ~bStructure   !if not part of a structure
       ClassQ.szClassSort = UPPER(szWork)
       GET(ClassQ,+ClassQ.szClassSort)
       IF ERRORCODE()
          !Maybe it is a structure
          StructureQ.szStructureSort = UPPER(szWork)
          GET(StructureQ,+StructureQ.szStructureSort)
         !ASSERT(~ERRORCODE())
          IF ~ERRORCODE()
             bStructure = TRUE
             GET(Q,I)
             DO FindStructureElement
          END
       ELSE
          LOOP
             PropertyQ.lClassID = ClassQ.lClassID
             GET(Q,I)
             PropertyQ.szPropertySort = UPPER(Q.szSnip)
             GET(PropertyQ,+PropertyQ.lClassID,+PropertyQ.szPropertySort)
             IF ERRORCODE()
                !Might be property of parent class
                IF ClassQ.szParentClassName
                   ClassQ:szClassSort = UPPER(ClassQ.szParentClassName)
                   GET(ClassQ,+ClassQ:szClassSort)
                   IF ERRORCODE()
                      szWork = szWork & '.' & Q.szSnip
                      BREAK
                   END
                ELSE
                   szWork = szWork & '.' & Q.szSnip
                   BREAK
                END
             ELSE
                BREAK
             END
          END
          IF ~ERRORCODE()
             IF PropertyQ.szDataType[1] = '&'
                szWork = CLIP(PropertyQ.szDataType[2 : LEN(PropertyQ.szDataType)])
             ELSIF UPPER(PropertyQ.szDataType[1 : 5]) = 'LIKE('
                szWork = CLIP(PropertyQ.szDataType[6 : LEN(PropertyQ.szDataType)-1])
             ELSIF UPPER(PropertyQ.szDataType[1 : 6]) = 'QUEUE('
                szWork = CLIP(PropertyQ.szDataType[7 : LEN(PropertyQ.szDataType)-1])
             ELSIF UPPER(PropertyQ.szDataType[1 : 6]) = 'GROUP('
                szWork = CLIP(PropertyQ.szDataType[7 : LEN(PropertyQ.szDataType)-1])
             ELSE
                szWork = CLIP(PropertyQ.szDataType)
             END
          END
          ClassQ.szClassSort = UPPER(szSelf)
          GET(ClassQ,+ClassQ:szClassSort)
?        ASSERT(~ERRORCODE())
       END
    ELSE !resolving structure
       DO FindStructureElement
    END
  END
  IF J > 1
     GET(Q,J)
     szWork = szWork & '.' & Q.szSnip
  END
  RETURN(szWork)

FindStructureElement        ROUTINE
  lStructureQPointer = POINTER(StructureQ)+1
  lStructureQRecords = RECORDS(StructureQ)
  LOOP lStructureQPointer = lStructureQPointer TO lStructureQRecords
     GET(StructureQ,lStructureQPointer)
     IF StructureQ.szStructureSort = UPPER(szWork)
        IF UPPER(StructureQ.szDataLabel) = UPPER(Q.szSnip)
           IF StructureQ.szDataType[1] = '&'
              szWork = CLIP(StructureQ.szDataType[2 : LEN(StructureQ.szDataType)])
           ELSIF UPPER(StructureQ.szDataType[1 : 5]) = 'LIKE('
              szWork = CLIP(StructureQ.szDataType[6 : LEN(StructureQ.szDataType)-1])
           ELSIF UPPER(StructureQ.szDataType[1 : 6]) = 'QUEUE('
              szWork = CLIP(StructureQ.szDataType[7 : LEN(StructureQ.szDataType)-1])
           ELSIF UPPER(StructureQ.szDataType[1 : 6]) = 'GROUP('
              szWork = CLIP(StructureQ.szDataType[7 : LEN(StructureQ.szDataType)-1])
           ELSE
?             MESSAGE(StructureQ.szDataType,'What Now?')
           END
        END
     ELSE
        BREAK
     END
  END
? IF lStructureQPointer > lStructureQRecords
?    MESSAGE('Error Getting Structure Element: ' & StructureQ.szStructureSort & '.' & StructureQ.szDataLabel)
? END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcIsClassMethod
PROTOTYPE '(STRING szName),BOOL'
PARAMETERS '(szName)'
[COMMON]
DESCRIPTION 'Is name a class method'
FROM ABC Source
MODIFIED '2003/03/21' '11:59:52'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lClassQPointer  LONG
bIsClassMethod  BYTE
I               LONG
J               LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  bIsClassMethod = FALSE
  J = LEN(szName)
  I = INSTRING('.',szName)
  IF I
     ClassQ.szClassSort = UPPER(szName[1 : I-1])
     GET(ClassQ,+ClassQ.szClassSort)
     IF ~ERRORCODE()
        MethodQ.lClassID = ClassQ.lClassId
        MethodQ.szMethodSort = UPPER(szName[I+1 : J])
        GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
        IF ERRORCODE()
           bIsClassMethod = FALSE
        ELSE
           bIsClassMethod = TRUE
        END
     ELSE
        bIsClassMethod = FALSE
     END
  END
  RETURN(bIsClassMethod)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcIsInterfaceReference
PROTOTYPE '(STRING szDataType),BOOL'
PARAMETERS '(szDataType)'
[COMMON]
DESCRIPTION 'Is datatype an interface reference'
FROM ABC Source
MODIFIED '2017/07/02' ' 9:21:21'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lStructureQPointer  LONG
bIsInterfaceRef     BYTE
I                   LONG
J                   LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  bIsInterfaceRef = FALSE
  IF szDataType[1] = '&'   !if a reference variable
     lStructureQPointer = POINTER(StructureQ)   !save our position
     J = RECORDS(StructureQ)
     StructureQ.szStructureSort = UPPER(szDataType[2 : LEN(szDataType)])
     GET(StructureQ,+StructureQ.szStructureSort)
     IF ~ERRORCODE()
        bIsInterfaceRef = TRUE
     END
     GET(StructureQ,lStructureQPointer)
  END
  RETURN(bIsInterfaceRef)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcIsInterfaceMethod
PROTOTYPE '(STRING szName),BOOL'
PARAMETERS '(szName)'
[COMMON]
DESCRIPTION 'Is name an interface method'
FROM ABC Source
MODIFIED '2001/01/21' '15:39:19'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lStructureQRecords  LONG
lStructureQPointer  LONG
bIsInterfaceMethod  BYTE
I                   LONG
J                   LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  bIsInterfaceMethod = FALSE
  J = LEN(szName)
  I = INSTRING('.',szName)
  IF I
     StructureQ.szStructureSort = UPPER(szName[1 : I-1])
     GET(StructureQ,+StructureQ.szStructureSort)
     IF ~ERRORCODE()
        lStructureQPointer = POINTER(StructureQ)
        lStructureQRecords = RECORDS(StructureQ)
        LOOP lStructureQPointer = lStructureQPointer TO lStructureQRecords
          GET(StructureQ,lStructureQPointer)
          IF StructureQ.szStructureSort = UPPER(szName[1 : I-1])
             IF UPPER(StructureQ.szDataLabel) = UPPER(szName[I+1 : J])
                bIsInterfaceMethod = TRUE
                BREAK
             END
          ELSE
             BREAK
          END
        END
     END
  END
  RETURN(bIsInterfaceMethod)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/07/02' ' 9:23:26'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winAdditionalFiles
PROTOTYPE '(*MODULEQTYPE pModuleQ, BYTE bClarionVersion)'
PARAMETERS '(pModuleQ, bClarionVersion)'
[COMMON]
DESCRIPTION 'Edit Additional Files List'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:25:07'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('c08bd319-9f4c-4e75-8f94-69063aa4f162'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Q:'),USE(?Q:Prompt)
! ENTRY(@s1),USE(Q)
[REPORTCONTROLS]
! STRING(@s1),USE(Q)
Q                        QUEUE(MODULEQTYPE),PRE(Q)
!!> GUID('b4864507-7e61-4457-9be3-1af355c575b8'),PROMPT('Q:'),HEADER('Q'),PICTURE(@s1)
[SCREENCONTROLS]
! PROMPT('b ID:'),USE(?Q:bID:Prompt)
! ENTRY(@n3),USE(Q:bID)
[REPORTCONTROLS]
! STRING(@n3),USE(Q:bID)
bID                        BYTE
!!> GUID('788c91f3-007c-4ea7-a756-4c6c16c6a40a'),PROMPT('b ID:'),HEADER('b ID'),PICTURE(@n3)
                         END
!!> GUID('ce069381-1dab-40eb-91d5-1ab1ecd30349')
[SCREENCONTROLS]
! ENTRY(@s1),USE(DeleteQ)
[REPORTCONTROLS]
! STRING(@s1),USE(DeleteQ)
DeleteQ                  QUEUE(MODULEQTYPE),PRE(DQ)
!!> GUID('e1bf2331-81bd-4c69-b4d9-11efbeb0c1eb'),PICTURE(@s1)
                         END
!!> GUID('850ebfd9-6336-406f-9354-2ffcd89b62f0')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?Delete') ('No Special Action')
WHEN  ('?Edit') ('No Special Action')
WHEN  ('?Insert') ('No Special Action')
WHEN  ('?List') ('No Special Action')
WHEN  ('?OKButton') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 5
WHEN  ('?CancelButton') ('')
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 3
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?Insert') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 5
WHEN  ('?CancelButton') ()
WHEN  ('?Delete') ()
WHEN  ('?Edit') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()

%ButtonThread DEPEND %Control LONG TIMES 5
WHEN  ('?CancelButton') (0)
WHEN  ('?Delete') (0)
WHEN  ('?Edit') (0)
WHEN  ('?Insert') (0)
WHEN  ('?OKButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?Delete') ('25000')
WHEN  ('?Edit') ('25000')
WHEN  ('?Insert') ('25000')
WHEN  ('?List') ('25000')
WHEN  ('?OKButton') ('25000')
WHEN  ('?Panel1') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 5
WHEN  ('?CancelButton') ('')
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 5
WHEN  ('?CancelButton') ()
WHEN  ('?Delete') ()
WHEN  ('?Edit') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 5
WHEN  ('?CancelButton') (0)
WHEN  ('?Delete') (0)
WHEN  ('?Edit') (0)
WHEN  ('?Insert') (0)
WHEN  ('?OKButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?Delete') ('None')
WHEN  ('?Edit') ('None')
WHEN  ('?Insert') ('None')
WHEN  ('?List') ('None')
WHEN  ('?OKButton') ('None')
WHEN  ('?Panel1') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 5
WHEN  ('?CancelButton') ('')
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 5
WHEN  ('?CancelButton') ()
WHEN  ('?Delete') ()
WHEN  ('?Edit') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 8
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?Delete') (1)
WHEN  ('?Edit') (1)
WHEN  ('?Insert') (1)
WHEN  ('?List') (1)
WHEN  ('?OKButton') (1)
WHEN  ('?Panel1') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?List')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?Insert'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF FILEDIALOG('Select files to include...',szFilenames,'Clarion Source Files (*.CLW;*.INC;*.INT;*.TXT)|*.CLW;*.INC;*.INT;*.TXT|All Files (*.*)|*.*',FILE:KeepDir+FILE:NoError+FILE:Multi+FILE:LongName)
   IF INSTRING('|',szFilenames)
      !Multiple files selected
      J = LEN(szFilenames)
      I = INSTRING('|',szFilenames)
      Q.szModulePath = UPPER(szFilenames[1 : I-1]) & '\'
      szFilenames = SUB(szFilenames,I+1,J-I)
      LOOP WHILE szFilenames
        J = LEN(szFilenames)
        I = INSTRING('|',szFilenames)
        IF I
           Q.szModuleName = UPPER(szFilenames[1 : I-1])
           szFilenames = SUB(szFilenames,I+1,J-I)
        ELSE
           Q.szModuleName = UPPER(szFilenames)
           szFilenames = ''
        END
        Q.bClarionVersion = bClarionVersion
        GET(Q,+Q.szModuleName,+Q.szModulePath)
        IF ERRORCODE()
           ADD(Q,+Q.szModuleName,+Q.szModulePath)
        END
      END
   ELSE
      !Only a single file selected
      J = LEN(szFilenames)
      LOOP I = J TO 1 BY -1
        IF szFilenames[I] = '\'
           Q.szModuleName = UPPER(szFilenames[I+1 : J])
           Q.szModulePath = UPPER(szFilenames[1 : I])
           Q.bClarionVersion = bClarionVersion
           GET(Q,+Q.szModuleName,+Q.szModulePath)
           IF ERRORCODE()
              ADD(Q,+Q.szModuleName,+Q.szModulePath)
           END
           BREAK
        END
      END
   END
END
[END]
[END]
WHEN '?OKButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
J = RECORDS(DeleteQ)
LOOP I = 1 TO J
  GET(DeleteQ,I)
  pModuleQ = DeleteQ
  GET(pModuleQ,+pModuleQ.szModuleName,+pModuleQ.szModulePath)
  IF ~ERRORCODE()
     DELETE(pModuleQ)
  END
END
FREE(DeleteQ)

J = RECORDS(Q)
LOOP I = 1 TO J
  GET(Q,I)
  pModuleQ = Q
  GET(pModuleQ,+pModuleQ.szModuleName,+pModuleQ.szModulePath)
  IF ERRORCODE()
     pModuleQ = Q
     ADD(pModuleQ,+pModuleQ.szModuleName,+pModuleQ.szModulePath)
  END
END
FREE(Q)
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 3
[END]
[END]
WHEN '?Delete'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(Q,CHOICE(?List))
IF CHOOSE(GlobalErrors.Throw(Msg:ConfirmDelete) = Level:Benign,RequestCompleted,RequestCancelled) = RequestCompleted
   DeleteQ = Q
   ADD(DeleteQ)
   DELETE(Q)
END
[END]
[END]
WHEN '?List'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(Q,CHOICE(?List))
ThisWindow.Reset()
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
szFilenames CSTRING(4096)
szFilename  CSTRING(256)
I           LONG
J           LONG
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG
J   LONG
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END  
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
FREE(Q)
J = RECORDS(pModuleQ)
LOOP I = 1 TO J
  GET(pModuleQ,I)
  IF pModuleQ.bClarionVersion = bClarionVersion
     CASE pModuleQ.szModuleName
       OF 'EQUATES.CLW'   |
     OROF 'KEYCODES.CLW'  |
     OROF 'ERRORS.CLW'    |
     OROF 'TPLEQU.CLW'    |
     OROF 'PROPERTY.CLW'  |
     OROF 'WINEQU.CLW'    |
     OROF 'PRNPROP.CLW'   |
     OROF 'WINDOWS.INC'   |
          !skip standard equate files
     ELSE
          Q = pModuleQ
          ADD(Q,+Q.szModuleName,+Q.szModulePath)
     END
  END
END 
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9101
PROPERTY:END
SetWindowLong(Window{prop:handle},GWL_STYLE,BAND(GetWindowLong(Window{prop:handle},GWL_STYLE),0DFFFFFFFh))
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Additional_Files.htm')
   END
END  
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF ~RECORDS(Q) OR ~CHOICE(?List)
   DISABLE(?Delete)
ELSE
   ENABLE(?Delete)
END  
[END]
[END]
[END]
EMBED %QEIPInitControlsCodeSection
[INSTANCES]
WHEN '5'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(SELF.EQ,2)
SETFONT(SELF.EQ.Control.Feq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 7
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Additional_Files.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetClassLong
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_SetClassLong (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
%DisableMinimizeBox LONG  (0)
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[INSTANCE]
INSTANCE 3
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 4
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (0)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('?List')
WHEN  (2) ('?Insert')
WHEN  (3) ('?Delete')
WHEN  (4) ('?Panel1')
WHEN  (5) ('?OKButton')
WHEN  (6) ('?CancelButton')

%DisableResize DEPEND %OverrideControls LONG TIMES 6
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Lock Width')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Constant Right Border')
WHEN  (5) ('Lock Width')
WHEN  (6) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Right')
WHEN  (6) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Bottom')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')
WHEN  (6) ('Fix Bottom')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('AStringValue')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME KCR KCR_QueueEditInPlace
[INSTANCE]
INSTANCE 5
[PROMPTS]
%ListControl DEFAULT  ('?List')
%AddControl DEFAULT  ('')
%ChangeControl DEFAULT  ('?Edit')
%DeleteControl DEFAULT  ('')
%QueueEditInPlaceList MULTI LONG  (1, 2)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('szModuleName')
WHEN  (2) ('szModulePath')

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (1)

%QueueNewClassInstance DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (1)
WHEN  (2) (1)

%QueueABCBaseClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('KCR_EntryEditClass')
WHEN  (2) ('EditEntryClass')

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('MyEditClass')
WHEN  (2) ('MyEditClass')

[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 6
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 8
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 9
PARENT 8
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME KCR KCR_SubClassWindow
[INSTANCE]
INSTANCE 11
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?List')
[ADDITION]
NAME KCR KCR_PaintWindowFrame
[INSTANCE]
INSTANCE 12
PARENT 11
[PROMPTS]
%TplName DEFAULT  ('KCR_PaintWindowFrame (Devuna)')
%TplDescription DEFAULT  ('Paint Window Frame')
%FrameColor LONG  (12164479)
[WINDOW]
Window  WINDOW('Additional Files'),AT(,,198,178),DOUBLE,TILED,CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          LIST,AT(4,4,190,130),USE(?List),VSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White,COLOR:HIGHLIGHTTEXT, |
            COLOR:HIGHLIGHT),FLAT,FORMAT('60L(1)|FM~File Name~@s63@?1020L(1)F~Path~S(255)@s255@'), |
            FROM(Q),MSG('Browsing Queue'),TIP('List of Additional Files to include in t' & |
            'he database.'),#ORIG(?List),#ORDINAL(1)
          BUTTON('&Insert'),AT(4,138,45,12),USE(?Insert),KEY(InsertKey),TIP('Add a New ' & |
            'File to the Additional Files List'),#ORIG(?Insert),#ORDINAL(2)
          BUTTON('&Delete'),AT(53,138,45,12),USE(?Delete),KEY(DeleteKey),TIP('Delete the' & |
            ' currently highlighted entry<0DH,0AH>from the Additional Files List'),#ORIG(?Delete), |
            #ORDINAL(3)
          BUTTON('Edit'),AT(102,138,45,12),USE(?Edit),HIDE,TIP('Edit the path for the c' & |
            'urrently highlighted<0DH,0AH>file in the Additional Files List'),#ORIG(?Button5), |
            #ORDINAL(4)
          PANEL,AT(4,154,190,1),USE(?Panel1),BEVEL(-1,1),#ORIG(?Panel1),#ORDINAL(5)
          BUTTON('&OK'),AT(99,160,45,14),USE(?OKButton),TIP('Save changes and return to' & |
            ' the previous window'),#ORIG(?Button1),#ORDINAL(6)
          BUTTON('Cancel'),AT(149,160,45,14),USE(?CancelButton),TIP('Discard changes an' & |
            'd return to the previous window'),#ORIG(?Button2),#ORDINAL(7)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winViewNote
PROTOTYPE '(BYTE bClarionVersion, STRING szLookup)'
PARAMETERS '(bClarionVersion,szLookup)'
[COMMON]
DESCRIPTION 'View Annotation'
FROM ABC Window
MODIFIED '2008/12/22' '10:15:15'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('eb245e25-aea2-406c-be16-1e600e0906f0'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bNoteInserted)
[REPORTCONTROLS]
! STRING(@n3),USE(bNoteInserted)
bNoteInserted            BYTE
!!> GUID('bf1a9bac-5ac9-4839-9746-0d5fb9d27915'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s20),USE(loc:szNote)
[REPORTCONTROLS]
! STRING(@s20),USE(loc:szNote)
loc:szNote               LIKE(NoteQ.szNote)
!!> GUID('1a9f464f-eef1-47f7-aee6-07b6b2f325d9'),PICTURE(@s20)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('No Special Action')
WHEN  ('?loc:szNote') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('25000')
WHEN  ('?loc:szNote') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('None')
WHEN  ('?loc:szNote') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?loc:szNote') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?loc:szNote')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?loc:szNote')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?loc:szNote')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?loc:szNote')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?loc:szNote')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
?loc:szNote{PROP:Background} = glo:lNoteColor
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7501
PROPERTY:END
SORT(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
NoteQ.bClarionVersion = bClarionVersion
NoteQ.szLookup = UPPER(szLookup)
GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
IF ERRORCODE()
   ADD(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)
   bNoteInserted = TRUE
   loc:szNote = ''
ELSE
   bNoteInserted = FALSE
   loc:szNote = NoteQ.szNote
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('View_Notes.htm')
   END
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9530
PROPERTY:END
IF glo:bUseHTMLHelp
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
END
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'CloseWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF loc:szNote
   IF loc:szNote <> NoteQ.szNote
      IF GlobalErrors.Throw(Msg:SaveNote) = Level:Benign
         NoteQ.szNote = loc:szNote
         PUT(NoteQ)
         TreeQ.wNoteIcon = ICON:NOTE
         TreeQ.szNoteTip = NoteQ.szNote
         srcWordWrap(TreeQ.szNoteTip,64)
         PUT(TreeQ)
      END
   END
ELSE
   IF bNoteInserted
      DELETE(NoteQ)
      NoteQ.szNote = ''
      TreeQ.wNoteIcon = 0
      TreeQ.szNoteTip = NoteQ.szNote
      PUT(TreeQ)
   ELSE
      IF GlobalErrors.Throw(Msg:DeleteNote) = Level:Benign
         DELETE(NoteQ)
         NoteQ.szNote = ''
         TreeQ.wNoteIcon = 0
         TreeQ.szNoteTip = NoteQ.szNote
         PUT(TreeQ)
      END
   END
END
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 3
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('View_Notes.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetClassLong
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_SetClassLong (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
%DisableMinimizeBox LONG  (0)
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 2
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcWordWrap
[WINDOW]
Window  WINDOW('Notes'),AT(,,198,178),DOUBLE,CENTER,GRAY,PALETTE(256)
          TEXT,AT(0,0),USE(loc:szNote),FULL,VSCROLL,COLOR(00C0FFFFh),#ORIG(loc:szNote)
        END

[END]
[MODULE]
[COMMON]
DESCRIPTION 'Generated Source Module'
FROM ABC GENERATED
MODIFIED '2003/03/12' '16:13:54'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winClassProperties
PROTOTYPE '(*CATEGORYQUEUETYPE CategoryQueue),BYTE'
PARAMETERS '(CategoryQueue)'
[COMMON]
DESCRIPTION 'Edit Class Properties'
FROM ABC Window
MODIFIED '2008/12/22' '10:16:14'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n3),USE(RetVal)
[REPORTCONTROLS]
! STRING(@n3),USE(RetVal)
RetVal                   BYTE
!!> GUID('59f5c6aa-032a-4923-a95f-455ac49ab0ef'),PROMPT('Ret Val:'),HEADER('Ret Val'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s20),USE(loc:CategoryQ:szCategory)
[REPORTCONTROLS]
! STRING(@s20),USE(loc:CategoryQ:szCategory)
loc:CategoryQ:szCategory LIKE(CategoryQ:szCategory)
!!> GUID('a069dbfe-0bf4-42c5-b45a-8043c6d88fa6'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s20),USE(loc:CategoryQ:bDetailLevel)
[REPORTCONTROLS]
! STRING(@s20),USE(loc:CategoryQ:bDetailLevel)
loc:CategoryQ:bDetailLevel LIKE(CategoryQ:bDetailLevel)
!!> GUID('a83ec12b-e177-4720-b30b-0bfa7e639032'),PICTURE(@s20)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (RetVal)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?CategoryQ:szCategory:Prompt') ('No Special Action')
WHEN  ('?ClassQ:szClassName') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')
WHEN  ('?String2') ('No Special Action')
WHEN  ('?loc:CategoryQ:bDetailLevel') ('No Special Action')
WHEN  ('?loc:CategoryQ:szCategory') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 2
WHEN  ('?CancelButton') ('')
WHEN  ('?OkButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?CancelButton') ('')
WHEN  ('?OkButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 2
WHEN  ('?CancelButton') ()
WHEN  ('?OkButton') ()

%ButtonThread DEPEND %Control LONG TIMES 2
WHEN  ('?CancelButton') (0)
WHEN  ('?OkButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?CategoryQ:szCategory:Prompt') ('25000')
WHEN  ('?ClassQ:szClassName') ('25000')
WHEN  ('?OkButton') ('25000')
WHEN  ('?String2') ('25000')
WHEN  ('?loc:CategoryQ:bDetailLevel') ('25000')
WHEN  ('?loc:CategoryQ:szCategory') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?CancelButton') ('')
WHEN  ('?OkButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 2
WHEN  ('?CancelButton') ()
WHEN  ('?OkButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 2
WHEN  ('?CancelButton') (0)
WHEN  ('?OkButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?CategoryQ:szCategory:Prompt') ('None')
WHEN  ('?ClassQ:szClassName') ('None')
WHEN  ('?OkButton') ('None')
WHEN  ('?String2') ('None')
WHEN  ('?loc:CategoryQ:bDetailLevel') ('None')
WHEN  ('?loc:CategoryQ:szCategory') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?CancelButton') ('')
WHEN  ('?OkButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 2
WHEN  ('?CancelButton') ()
WHEN  ('?OkButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('?loc:CategoryQ:bDetailLevel') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?loc:CategoryQ:bDetailLevel') ()

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?loc:CategoryQ:bDetailLevel') ('')

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('?loc:CategoryQ:bDetailLevel') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?loc:CategoryQ:bDetailLevel') ()

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?loc:CategoryQ:bDetailLevel') ('')

%PostLookupDuringValidate DEPEND %Control LONG TIMES 8
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?CategoryQ:szCategory:Prompt') (1)
WHEN  ('?ClassQ:szClassName') (1)
WHEN  ('?OkButton') (1)
WHEN  ('?String2') (1)
WHEN  ('?loc:CategoryQ:bDetailLevel') (1)
WHEN  ('?loc:CategoryQ:szCategory') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?CategoryQ:szCategory:Prompt')TIMES 0
WHEN  ('?ClassQ:szClassName')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?loc:CategoryQ:bDetailLevel')TIMES 0
WHEN  ('?loc:CategoryQ:szCategory')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?CategoryQ:szCategory:Prompt')TIMES 0
WHEN  ('?ClassQ:szClassName')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?loc:CategoryQ:bDetailLevel')TIMES 0
WHEN  ('?loc:CategoryQ:szCategory')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?CategoryQ:szCategory:Prompt')TIMES 0
WHEN  ('?ClassQ:szClassName')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?loc:CategoryQ:bDetailLevel')TIMES 0
WHEN  ('?loc:CategoryQ:szCategory')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?CategoryQ:szCategory:Prompt')TIMES 0
WHEN  ('?ClassQ:szClassName')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?loc:CategoryQ:bDetailLevel')TIMES 0
WHEN  ('?loc:CategoryQ:szCategory')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?String2')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
RetVal = 1
[GROUP]
PRIORITY 5100
INSTANCE 8
[END]
[END]
WHEN '?OkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
UPDATE()
CategoryQ.szCategory    = loc:CategoryQ:szCategory
CategoryQ.bDetailLevel  = loc:CategoryQ:bDetailLevel
PUT(CategoryQ)
CategoryQueue.szCategory = CategoryQ.szCategory
GET(CategoryQueue,+CategoryQueue.szCategory)
IF ERRORCODE()
   CASE MESSAGE('Add to Pick List?','Class Viewer',ICON:QUESTION,BUTTON:YES+BUTTON:NO,BUTTON:YES)
   OF BUTTON:YES
      CategoryQueue.szCategory = CategoryQ.szCategory
      ADD(CategoryQueue,+CategoryQueue.szCategory)
   END
END
RetVal = 0
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
loc:CategoryQ:szCategory    = CategoryQ:szCategory
loc:CategoryQ:bDetailLevel  = CategoryQ:bDetailLevel
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
ClassQ.szClassName = CategoryQ.szClassName
GET(ClassQ,+ClassQ.szClassName)
IF ClassQ:szParentClassName
   DISABLE(?loc:CategoryQ:szCategory)
   ?loc:CategoryQ:szCategory{PROP:Background} = COLOR:BTNFACE
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Class_Properties.htm')
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG
J   LONG
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 4
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Class_Properties.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[INSTANCE]
INSTANCE 8
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 3
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 5
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 6
PARENT 5
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[WINDOW]
Window  WINDOW('Edit Class Properties'),AT(,,150,68),DOUBLE,TILED,CENTER,GRAY,PALETTE(256), |
          WALLPAPER('WALLPAPER.GIF')
          STRING('Class Name:'),AT(4,4),USE(?String2),TRN,#ORIG(?String2)
          STRING(@s63),AT(48,4,98,10),USE(ClassQ:szClassName),TRN
          PROMPT('&Category:'),AT(4,18),USE(?CategoryQ:szCategory:Prompt),TRN,#ORIG(?Prompt2)
          COMBO(@s63),AT(48,18,60,10),USE(loc:CategoryQ:szCategory),VSCROLL,UPR,COLOR(COLOR:White), |
            DROP(10),FORMAT('120L(2)@s64@'),FROM(CategoryQueue),TIP('Select from an exi' & |
            'sting category<0DH,0AH>or add one of your own.'),#FIELDS(RetVal),#ORIG(?Combo1)
          PROMPT('&Detail Level:'),AT(4,32),USE(?CategoryQ:bDetailLevel:Prompt),TRN,#LINK(?loc:CategoryQ:bDetailLevel), |
            #ORIG(?CategoryQ:bDetailLevel:Prompt)
          SPIN(@n3),AT(48,32,14,10),USE(loc:CategoryQ:bDetailLevel),COLOR(COLOR:White),STEP(1), |
            TIP('Detail Level for this Class'),#LINK(?CategoryQ:bDetailLevel:Prompt),#ORIG(CategoryQ:bDetailLevel)
          BUTTON('&OK'),AT(46,50,48,14),USE(?OkButton),DEFAULT,TIP('Save changes and re' & |
            'turn to the previous window')
          BUTTON('Cancel'),AT(99,50,48,14),USE(?CancelButton),TIP('Discard changes and ' & |
            'return to the previous window')
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winViewCallers
PROTOTYPE '(STRING psCalledMethod)'
PARAMETERS '(psCalledMethod)'
[COMMON]
DESCRIPTION 'View Methods that Call passed Method'
FROM ABC Window
MODIFIED '2008/12/22' '10:17:16'
[DATA]
[SCREENCONTROLS]
! ENTRY(@s1),USE(q)
[REPORTCONTROLS]
! STRING(@s1),USE(q)
q                        QUEUE,PRE(q)
!!> GUID('41d92104-d2aa-494b-936d-e7864bc9c72c'),PICTURE(@s1)
[SCREENCONTROLS]
! ENTRY(@s20),USE(q:szCallingMethod)
[REPORTCONTROLS]
! STRING(@s20),USE(q:szCallingMethod)
szCallingMethod            LIKE(CallQ.szCallingMethod)
!!> GUID('f02780a9-570d-432e-8928-282014951691'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s20),USE(q:szCalledMethod)
[REPORTCONTROLS]
! STRING(@s20),USE(q:szCalledMethod)
szCalledMethod             LIKE(CallQ.szCalledMethod)
!!> GUID('909b4f12-ab4b-4fe4-a2b5-ee7078b12e72'),PICTURE(@s20)
                         END
!!> GUID('56a336e3-7a30-44ea-b5ab-2f6a21698332')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?List') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CancelButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CancelButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?CancelButton') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?CancelButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?List') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CancelButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?CancelButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?CancelButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?List') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?CancelButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?CancelButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 3
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?List') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?List')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?List')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?List')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?List')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?List')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
Window{PROP:Text} = 'Methods that call ' & CLIP(psCalledMethod)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
J = RECORDS(CallQ)
LOOP I = 1 TO J
   GET(CallQ,I)
   IF CallQ.szCalledMethod = CLIP(psCalledMethod)
      q.szCallingMethod = CallQ.szCallingMethod
      GET(q,+q.szCallingMethod)
      IF ERRORCODE()
         q.szCallingMethod = CallQ.szCallingMethod
         q.szCalledMethod = CallQ.szCalledMethod
         ADD(q,+q.szCallingMethod)
      END
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('View_Callers.htm')
   END
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
FREE(q)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9530
PROPERTY:END
IF glo:bUseHTMLHelp
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG
J   LONG
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 3
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('View_Callers.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 2
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME KCR KCR_SubClassWindow
[INSTANCE]
INSTANCE 5
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?List')
[ADDITION]
NAME KCR KCR_PaintWindowFrame
[INSTANCE]
INSTANCE 6
PARENT 5
[PROMPTS]
%TplName DEFAULT  ('KCR_PaintWindowFrame (Devuna)')
%TplDescription DEFAULT  ('Paint Window Frame')
%FrameColor LONG  (12164479)
[WINDOW]
Window  WINDOW('View Calling Methods'),AT(,,150,68),DOUBLE,TILED,CENTER,GRAY,PALETTE(256), |
          WALLPAPER('WALLPAPER.GIF')
          LIST,AT(4,4,142,43),USE(?List),VSCROLL,COLOR(COLOR:White),FLAT,FORMAT('140L(2)@s63@'), |
            FROM(q),#FIELDS(q:szCallingMethod),#ORIG(?List1)
          BUTTON('Cl&ose'),AT(99,50,48,14),USE(?CancelButton),STD(STD:Close)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME AboutDevuna
[COMMON]
DESCRIPTION 'About Devuna'
FROM ABC Window
MODIFIED '2017/02/02' ' 8:40:56'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('56ab97ce-e9b6-419a-a241-0f9d90caf5aa'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('sz Null:'),USE(?szNull:Prompt)
! ENTRY(@s1),USE(szNull)
[REPORTCONTROLS]
! STRING(@s1),USE(szNull)
szNull                   CSTRING(2)
!!> GUID('c57e500a-daae-4418-b3da-0d05b5147044'),PROMPT('sz Null:'),HEADER('sz Null'),PICTURE(@s1)
[SCREENCONTROLS]
! PROMPT('sz URL:'),USE(?szURL:Prompt)
! ENTRY(@s255),USE(szURL)
[REPORTCONTROLS]
! STRING(@s255),USE(szURL)
szURL                    CSTRING(256)
!!> GUID('4bd6ff02-77f2-40e9-a433-2979d7ce4c23'),PROMPT('sz URL:'),HEADER('sz URL'),PICTURE(@s255)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 2
WHEN  ('Default')TIMES 0
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 10
WHEN  ('') ('No Special Action')
WHEN  ('?Box1') ('No Special Action')
WHEN  ('?Box2') ('No Special Action')
WHEN  ('?Copyright') ('No Special Action')
WHEN  ('?OK') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')
WHEN  ('?Region1') ('No Special Action')
WHEN  ('?String4:2') ('No Special Action')
WHEN  ('?String5') ('No Special Action')
WHEN  ('?String8') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?OK') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?OK') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 10
WHEN  ('') ('25000')
WHEN  ('?Box1') ('25000')
WHEN  ('?Box2') ('25000')
WHEN  ('?Copyright') ('25000')
WHEN  ('?OK') ('25000')
WHEN  ('?Panel1') ('25000')
WHEN  ('?Region1') ('25000')
WHEN  ('?String4:2') ('25000')
WHEN  ('?String5') ('25000')
WHEN  ('?String8') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonRequest DEPEND %Control DEFAULT TIMES 10
WHEN  ('') ('None')
WHEN  ('?Box1') ('None')
WHEN  ('?Box2') ('None')
WHEN  ('?Copyright') ('None')
WHEN  ('?OK') ('None')
WHEN  ('?Panel1') ('None')
WHEN  ('?Region1') ('None')
WHEN  ('?String4:2') ('None')
WHEN  ('?String5') ('None')
WHEN  ('?String8') ('None')

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 10
WHEN  ('') (1)
WHEN  ('?Box1') (1)
WHEN  ('?Box2') (1)
WHEN  ('?Copyright') (1)
WHEN  ('?OK') (1)
WHEN  ('?Panel1') (1)
WHEN  ('?Region1') (1)
WHEN  ('?String4:2') (1)
WHEN  ('?String5') (1)
WHEN  ('?String8') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?Box1')TIMES 0
WHEN  ('?Box2')TIMES 0
WHEN  ('?Copyright')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Region1')TIMES 0
WHEN  ('?String4:2')TIMES 0
WHEN  ('?String5')TIMES 0
WHEN  ('?String8')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?Box1')TIMES 0
WHEN  ('?Box2')TIMES 0
WHEN  ('?Copyright')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Region1')TIMES 0
WHEN  ('?String4:2')TIMES 0
WHEN  ('?String5')TIMES 0
WHEN  ('?String8')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?Box1')TIMES 0
WHEN  ('?Box2')TIMES 0
WHEN  ('?Copyright')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Region1')TIMES 0
WHEN  ('?String4:2')TIMES 0
WHEN  ('?String5')TIMES 0
WHEN  ('?String8')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?Box1')TIMES 0
WHEN  ('?Box2')TIMES 0
WHEN  ('?Copyright')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Region1')TIMES 0
WHEN  ('?String4:2')TIMES 0
WHEN  ('?String5')TIMES 0
WHEN  ('?String8')TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OK') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?OK') (0)

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OK') ()

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('Off')
WHEN  ('?Box1') ('Off')
WHEN  ('?Box2') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('')
WHEN  ('?Box1') ('')
WHEN  ('?Box2') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?Box1') (0)
WHEN  ('?Box2') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 4
WHEN  ('') (-1)
WHEN  ('?Box1') (-1)
WHEN  ('?Box2') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?Box1') (0)
WHEN  ('?Box2') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 4
WHEN  ('') (-1)
WHEN  ('?Box1') (-1)
WHEN  ('?Box2') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?Box1') (0)
WHEN  ('?Box2') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Panel1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OK'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 4000
INSTANCE 1
[END]
[END]
WHEN '?Region1'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szURL = 'http://www.devuna.com/'
szNull = ''
ShellExecute(window{prop:handle},0,szURL,0,szNull,1)
[END]
WHEN 'MouseIn'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?string4:2{PROP:FontColor} = color:blue
SETCURSOR('~HARROW.CUR')
[END]
WHEN 'MouseOut'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?string4:2{PROP:FontColor} = color:black
SETCURSOR()
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
?String8{PROP:Text} = 'Version ' & glo:Version
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('About_Class_Viewer.htm')
   END
END
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 4
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('About_Class_Viewer.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetClassLong
[INSTANCE]
INSTANCE 2
[PROMPTS]
%TplName DEFAULT  ('KCR_SetClassLong (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
%DisableMinimizeBox LONG  (0)
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 1
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 3
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[WINDOW]
window  WINDOW('About Class Viewer'),AT(,,180,126),FONT('Tahoma',8,,FONT:regular,CHARSET:ANSI), |
          DOUBLE,CENTER,GRAY,HLP('About Devuna'),PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          PANEL,AT(0,0,180,126),USE(?Panel1),BEVEL(-1,-1),#ORIG(?Panel1),#ORDINAL(1)
          STRING('Version 2015.03.05'),AT(49,4),USE(?String8),FONT(,10,,FONT:bold,CHARSET:ANSI), |
            TRN,#ORIG(?String8),#ORDINAL(2)
          STRING('This computer program was developed by'),AT(23,17),USE(?String1),TRN,#ORIG(?String1), |
            #ORDINAL(3)
          BOX,AT(14,32,160,56),USE(?Box1),FILL(COLOR:Black),LINEWIDTH(1),ROUND,#ORIG(?Box1), |
            #ORDINAL(4)
          BOX,AT(11,29,159,56),USE(?Box2),COLOR(COLOR:Black),FILL(COLOR:White),LINEWIDTH(1), |
            ROUND,#ORIG(?Box2),#ORDINAL(5)
          STRING('Devuna'),AT(75,32),USE(?String2),FONT(,10,,,CHARSET:ANSI),TRN,#ORIG(?String2), |
            #ORDINAL(6)
          STRING('Box 103, Hepworth, Ontario'),AT(37,41),USE(?String3),FONT(,10,,,CHARSET:ANSI), |
            TRN,#ORIG(?String3),#ORDINAL(7)
          STRING('Canada  N0H 1P0'),AT(57,51),USE(?String4),FONT(,10,,,CHARSET:ANSI),TRN,#ORIG(?String4), |
            #ORDINAL(8)
          STRING('Tel: (519) 935-3201'),AT(57,61),USE(?String5),TRN,#ORIG(?String5),#ORDINAL(9)
          STRING('www.devuna.com'),AT(57,73),USE(?String4:2),FONT('MS Sans Serif',8,,FONT:bold+FONT:underline, |
            CHARSET:ANSI),TRN,#ORIG(?String4),#ORDINAL(10)
          REGION,AT(49,72,80,10),USE(?Region1),CURSOR('harrow.cur'),IMM,#ORIG(?Region1),#ORDINAL(11)
          STRING('© Copyright 2001-2017'),AT(52,88),USE(?Copyright),FONT('Arial',8,,FONT:regular, |
            CHARSET:ANSI),TRN,#ORIG(?String10),#ORDINAL(12)
          STRING('Devuna'),AT(77,94),USE(?Devuna),FONT('Arial',8,,FONT:regular,CHARSET:ANSI), |
            TRN,#ORIG(?String10),#ORDINAL(13)
          BUTTON('&OK'),AT(67,106,45,14),USE(?OK),DEFAULT,#ORIG(?Button1),#ORDINAL(14)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcIsStructureReference
PROTOTYPE '(STRING szDataType, *CSTRING szStructName),BOOL'
PARAMETERS '(szDataType, szStructName)'
[COMMON]
DESCRIPTION 'Is datatype a reference to a structure'
FROM ABC Source
MODIFIED '2003/03/22' '10:27:26'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
lStructureQPointer  LONG
bIsStructureRef     BYTE
I               LONG
J               LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  bIsStructureRef = FALSE
  IF szDataType[1] = '&'   !if a reference variable
     lStructureQPointer = POINTER(StructureQ)   !save our position
     J = RECORDS(StructureQ)
     LOOP I = 1 TO J
       GET(StructureQ,I)
       IF StructureQ.szStructureSort = UPPER(SUB(szDataType,2,LEN(szDataType)-1))
          bIsStructureRef = TRUE
          szStructName = StructureQ.szStructureName
          BREAK
       END
     END
     GET(StructureQ,lStructureQPointer)
  END
  RETURN(bIsStructureRef)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddInterfaces
PROTOTYPE '(LONG lTreeLevel)'
PARAMETERS '(lTreeLevel)'
[COMMON]
DESCRIPTION 'Add Class Interfaces to Tree'
FROM ABC Source
MODIFIED '2015/03/04' '17:38:49'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG
J               LONG
K               LONG
szInterfaceName CSTRING(64)
bAddFolder      BYTE
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  SORT(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodSort)
  MethodQ.lClassID = ClassQ.lClassID
  GET(MethodQ,+MethodQ.lClassID)
  I = POINTER(MethodQ)
  J = RECORDS(MethodQ)
  LOOP I = I TO J
     GET(MethodQ,I)
     IF MethodQ.lClassID <> ClassQ.lClassID
     !IF MethodQ.lClassID < ClassQ.lClassID
     !   CYCLE
     !ELSIF MethodQ.lClassID > ClassQ.lClassID
        BREAK
     ELSE
        !Add Methods Folder
        TreeQ.szText = 'Interfaces'
        TreeQ.wIcon  = ICON:INTERFACEFOLDER
        TreeQ.lLevel = lTreeLevel+1
        TreeQ.lStyle = STYLE:NORMAL
        TreeQ.szSearch = ''
        TreeQ.szClassName = ClassQ.szClassName
        TreeQ.szContextString = ''
        TreeQ.lLineNum = ClassQ.lLineNum
        TreeQ.lSourceLine = 0
        TreeQ.lIncludeId = ClassQ.lIncludeId
        TreeQ.lModuleId  = ClassQ.lModuleId
        bAddFolder = TRUE
        !ADD(TreeQ)
        !Look For Interface Name
        DO LookForInterface
        IF szInterfaceName
           !Add Current Method
           DO AddMethod
           I = POINTER(MethodQ) + 1
           J = RECORDS(MethodQ)
           LOOP I = I TO J
             GET(MethodQ,I)
             IF ERRORCODE() OR MethodQ.lClassID <> ClassQ.lClassID
                BREAK
             ELSE
                DO LookForInterface
                IF szInterfaceName
                   DO AddMethod
                END
             END
           END
        END
        !BREAK
     END
  END

LookForInterface    ROUTINE
  K = INSTRING('.',MethodQ.szMethodName)
  IF K   !Add Interface Folder
     IF szInterfaceName <> MethodQ.szMethodName[1 : K-1]
        szInterfaceName = MethodQ.szMethodName[1 : K-1]
        DO AddInterfaceFolder
     END
  ELSE
     szInterfaceName = ''
  END
  EXIT

AddInterfaceFolder  ROUTINE
  IF bAddFolder
     bAddFolder = FALSE
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
  END
  TreeQ.szText = szInterfaceName
  TreeQ.wIcon  = ICON:INTERFACEFOLDER
  TreeQ.lLevel = lTreeLevel+2
  TreeQ.lStyle = STYLE:NORMAL
  TreeQ.szSearch = ClassQ.szClassName & '.' & szInterfaceName
  TreeQ.szClassName = ClassQ.szClassName
  IF ClassQ.bIsABC
     IF SUB(ClassQ.szClassName,-5,5) = 'Class'
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     ELSE
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName & 'Class'
     END
     CASE glo:bClarionVersion
       OF CWVERSION_C2
        TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
       OF CWVERSION_C4
        TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
       OF CWVERSION_C5 OROF CWVERSION_C5EE
          TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
       OF CWVERSION_C55 OROF CWVERSION_C55EE
          TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
       OF CWVERSION_C60 OROF CWVERSION_C60EE
          TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
       OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
          TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
     ELSE
          TreeQ.szHelpFile = ''
     END
  ELSE
     TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     TreeQ.szHelpFile = ''
  END
  TreeQ.lLineNum = ClassQ.lLineNum
  TreeQ.lSourceLine = 0
  TreeQ.lIncludeId = ClassQ.lIncludeId
  TreeQ.lModuleId  = ClassQ.lModuleId
  IF ClassQ.bPrivate
     TreeQ.szContextString = ''
     TreeQ.szHelpFile = ''
     IF glo:bShowPrivate
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END
  ELSE
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
  END
  EXIT

AddMethod   ROUTINE
  TreeQ.szText = MethodQ.szMethodName[K+1 : LEN(MethodQ.szMethodName)] & ' ' & MethodQ.szPrototype
  TreeQ.lLevel = lTreeLevel+3
  TreeQ.wIcon  = ICON:METHOD
  TreeQ.lStyle = CHOOSE(MethodQ.bPrivate,STYLE:PRIVATE,STYLE:NORMAL)
  TreeQ.lStyle = CHOOSE(MethodQ.bProtected,STYLE:PROTECTED,TreeQ.lStyle)
  IF glo:bCurrentView = VIEW:INTERFACES OR szInterfaceName <> ''
     TreeQ.lStyle = STYLE:VIRTUAL
  ELSE
     TreeQ.lStyle = CHOOSE(MethodQ.bVirtual,STYLE:VIRTUAL,TreeQ.lStyle)
  END
  TreeQ.szSearch = ClassQ.szClassName & '.' & MethodQ.szMethodName
  IF ClassQ.bIsABC
     IF SUB(ClassQ.szClassName,-5,5) = 'Class'
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     ELSE
        TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName & 'Class'
     END
     CASE glo:bClarionVersion
       OF CWVERSION_C2
        TreeQ.szHelpFile = szRoot & '\bin\CW20help.hlp'
       OF CWVERSION_C4
        TreeQ.szHelpFile = szRoot & '\bin\C4help.hlp'
       OF CWVERSION_C5 OROF CWVERSION_C5EE
        TreeQ.szHelpFile = szRoot & '\bin\C5help.hlp'
       OF CWVERSION_C55 OROF CWVERSION_C55EE
        TreeQ.szHelpFile = szRoot & '\bin\C55help.hlp'
       OF CWVERSION_C60 OROF CWVERSION_C60EE
        TreeQ.szHelpFile = szRoot & '\bin\C60help.hlp'
       OF CWVERSION_C70 OROF CWVERSION_C80 OROF CWVERSION_C90 OROF CWVERSION_C100
          TreeQ.szHelpFile = szRoot & '\bin\ClarionHelp.chm'
     ELSE
        TreeQ.szHelpFile = ''
     END
  ELSE
     TreeQ.szContextString = MethodQ.szMethodName & ':' & ClassQ.szClassName
     TreeQ.szHelpFile = ''
  END
  TreeQ.lLineNum = MethodQ.lLineNum
  TreeQ.lSourceLine = MethodQ:lSourceLine
  TreeQ.lIncludeId = ClassQ.lIncludeId
  TreeQ.lModuleId  = ClassQ.lModuleId
  IF MethodQ.bPrivate OR MethodQ.bModule
     TreeQ.szContextString = ''
     TreeQ.szHelpFile = ''
     IF glo:bShowPrivate
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END
  ELSIF MethodQ.bProtected
     IF glo:bShowProtected
        DO SetNoteIcon
        DO SetTipText
        ADD(TreeQ)
     END
  ELSE
     DO SetNoteIcon
     DO SetTipText
     ADD(TreeQ)
  END
  EXIT
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetNoteIcon ROUTINE
  NoteQ.bClarionVersion = glo:bClarionVersion
  IF TreeQ.szContextString
     NoteQ.szLookup = UPPER(TreeQ.szContextString)
  ELSE
     NoteQ.szLookup = UPPER(TreeQ.szText)
  END
  GET(NoteQ,+NoteQ.bClarionVersion,+NoteQ.szLookup)

  IF ERRORCODE()
     TreeQ.wNoteIcon = 0
     TreeQ.szNoteTip = ''
  ELSE
     TreeQ.wNoteIcon = ICON:NOTE
     TreeQ.szNoteTip = NoteQ.szNote
     srcWordWrap(TreeQ.szNoteTip,64)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SetTipText  ROUTINE
  DATA
S       STRING(256)
X       LONG
pClass  LONG

  CODE
  CASE TreeQ:wIcon
    OF ICON:STRUCTURE OROF ICON:STRUCTUREFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:EQUATE OROF ICON:EQUATEFOLDER OROF ICON:ENUMFOLDER
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
    OF ICON:METHOD
       CASE glo:bCurrentView
         OF VIEW:CLASSES OROF VIEW:CALLS
            S = TreeQ.szSearch[LEN(ClassQ.szClassName)+2 : LEN(TreeQ.szSearch)]
            X = INSTRING('.',S)
            IF X
               pClass = POINTER(ClassQ)
               ClassQ.szClassSort = UPPER(S[X : X-1])
               GET(ClassQ,+ClassQ.szClassSort)
               ModuleQ.lModuleId = ClassQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
               GET(ClassQ,pClass)
            ELSE
               ModuleQ.lModuleId = TreeQ.lIncludeId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
               DO AddCommentsToTip
            END
            IF TreeQ.lModuleId <> 0                   |
            AND TreeQ.lSourceLine
               ModuleQ.lModuleId = TreeQ.lModuleId
               GET(ModuleQ,ModuleQ.lModuleId)
               IF ERRORCODE()
                  ModuleQ:szModulePath = '**UNDEFINED**'
                  ModuleQ:szModuleName = ''
               END
               TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lSourceLine & ']'
               DO AddSourceCommentsToTip
            END
       ELSE
          ModuleQ.lModuleId = TreeQ.lIncludeId
          GET(ModuleQ,ModuleQ.lModuleId)
          IF ERRORCODE()
             ModuleQ:szModulePath = '**UNDEFINED**'
             ModuleQ:szModuleName = ''
          END
          TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
          DO AddCommentsToTip
       END
    OF ICON:INTERFACEFOLDER OROF ICON:NEWINTERFACEFOLDER
       CASE glo:bCurrentView
         OF VIEW:CLASSES
            pClass = POINTER(ClassQ)
            ClassQ.szClassSort = UPPER(TreeQ.szText)
            GET(ClassQ,+ClassQ.szClassSort)
            ModuleQ.lModuleId = ClassQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
            GET(ClassQ,pClass)
       ELSE
            ModuleQ.lModuleId = TreeQ.lIncludeId
            GET(ModuleQ,ModuleQ.lModuleId)
            IF ERRORCODE()
               ModuleQ:szModulePath = '**UNDEFINED**'
               ModuleQ:szModuleName = ''
            END
            TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
            DO AddCommentsToTip
       END
  ELSE
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,ModuleQ.lModuleId)
       IF ERRORCODE()
          ModuleQ:szModulePath = '**UNDEFINED**'
          ModuleQ:szModuleName = ''
       END
       TreeQ.szTipText = CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName) & ' [' & TreeQ.lLineNum & ']'
       DO AddCommentsToTip
  END
  EXIT

AddCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lLineNum)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT

AddSourceCommentsToTip    ROUTINE
  TreeQ.szTipText = TreeQ.szTipText & '<13,10>' & srcGetLineComments(CLIP(ModuleQ:szModulePath) & CLIP(ModuleQ:szModuleName),TreeQ.lSourceLine)
  IF SUB(TreeQ.szTipText,-2,2) = '<13,10>'
     TreeQ.szTipText = SUB(TreeQ.szTipText,1,LEN(TreeQ.szTipText)-2)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetLineComments
srcWordWrap
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcIsBaseClassABC
PROTOTYPE '(*CSTRING pszClass),BYTE'
PARAMETERS '(pszClass)'
[COMMON]
DESCRIPTION 'Returns TRUE is Base Class is ABC'
FROM ABC Source
MODIFIED '2017/07/02' ' 9:47:18'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ptr         LONG
ReturnValue LONG
szClassName LIKE(ClassQ.szParentClassName)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  ptr = POINTER(ClassQ)

  LOOP UNTIL ClassQ.szParentClassName = ''
     ClassQ.szClassSort = UPPER(ClassQ.szParentClassName)
     GET(ClassQ,+ClassQ.szClassSort)
     IF ERRORCODE()
?       MESSAGE(ERROR() & '|Class:' & ClassQ:szClassName & '|Parent:' & ClassQ:szParentClassName)
        BREAK
     END
  END
  ReturnValue = ClassQ.bIsABC

  GET(ClassQ,ptr)
  RETURN(ReturnValue)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winGetScanOptions
PROTOTYPE '(BYTE ForceSmartScan=0),LONG'
PARAMETERS '(ForceSmartScan)'
[COMMON]
DESCRIPTION 'Get Scan Options'
FROM ABC Window
MODIFIED '2017/07/02' ' 8:43:08'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-14),USE(RetVal),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(RetVal),RIGHT(1)
RetVal                   LONG
!!> GUID('ba0e5415-73f5-4f35-9a8e-b2691bac3566'),INITIAL('Level:Notify'),PROMPT('Ret Val:'),HEADER('Ret Val'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(I)
[REPORTCONTROLS]
! STRING(@n-14),USE(I)
I                        LONG
!!> GUID('95f148b8-b915-45e5-b067-bf0a7d1a3d35'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(J)
[REPORTCONTROLS]
! STRING(@n-14),USE(J)
J                        LONG
!!> GUID('37a7666c-343b-4c43-9a6b-5176b0c4a13a'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bEquates)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bEquates)
loc:bEquates             BYTE
!!> GUID('7d84df98-ea78-4112-b282-c78d3f2b6796'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bKeycodes)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bKeycodes)
loc:bKeycodes            BYTE
!!> GUID('e6a65cf3-f19c-4d0c-9829-d8f1b198ecc9'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bErrors)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bErrors)
loc:bErrors              BYTE
!!> GUID('42f44592-6447-493a-baa6-30bec53c24b5'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bTplEqu)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bTplEqu)
loc:bTplEqu              BYTE
!!> GUID('94e4f7b0-8a99-4e7e-b6ef-df3b46d69852'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bProperty)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bProperty)
loc:bProperty            BYTE
!!> GUID('dc51eff2-0592-4786-ab79-7891148f99d9'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bWinEqu)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bWinEqu)
loc:bWinEqu              BYTE
!!> GUID('986b92b7-107c-4b3c-849d-0bc18620bb22'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bPrnProp)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bPrnProp)
loc:bPrnProp             BYTE
!!> GUID('f6db4b31-7a89-4b74-8848-a9115ade9da3'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(loc:bWindows)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:bWindows)
loc:bWindows             BYTE
!!> GUID('ab6c4cdb-600b-4960-acf4-7462ebc02b54'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(Q)
[REPORTCONTROLS]
! STRING(@s255),USE(Q)
Q                        QUEUE,PRE(Q) !Queue of Module Names
!!> GUID('e329584d-6cf2-462d-bbe1-a72c0558e80f'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s63),USE(Q:szModuleName)
[REPORTCONTROLS]
! STRING(@s63),USE(Q:szModuleName)
szModuleName               CSTRING(64)
!!> GUID('9ae3589f-d9af-4278-83a0-3be75834fe11'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(Q:szModulePath)
[REPORTCONTROLS]
! TEXT,USE(Q:szModulePath)
szModulePath               CSTRING(256)
!!> GUID('387cceb6-ce09-4e24-8613-3d375bd77eec'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n3),USE(Q:bClarionVersion)
[REPORTCONTROLS]
! STRING(@n3),USE(Q:bClarionVersion)
bClarionVersion            BYTE
!!> GUID('d405bed8-71b2-418e-997d-ad0fd37b2e2d'),PICTURE(@n3)
                         END
!!> GUID('26791058-7721-446b-89c0-c9c4648d0632')
[SCREENCONTROLS]
! ENTRY(@s63),USE(szSection)
[REPORTCONTROLS]
! STRING(@s63),USE(szSection)
szSection                CSTRING(64)
!!> GUID('392e3c0d-15a4-4d05-adf8-724e14f9226b'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('sz Red File Name:'),USE(?szRedFileName:Prompt)
! ENTRY(@s63),USE(szRedFileName)
[REPORTCONTROLS]
! STRING(@s63),USE(szRedFileName)
szRedFileName            CSTRING(64)
!!> GUID('da87349b-90af-495e-91b8-7e3bd1d4f0b3'),PROMPT('sz Red File Name:'),HEADER('sz Red File Name'),PICTURE(@s63)
[SCREENCONTROLS]
! TEXT,USE(loc:szRedFilePath)
[REPORTCONTROLS]
! TEXT,USE(loc:szRedFilePath)
loc:szRedFilePath        CSTRING(256)
!!> GUID('f57a1025-111e-4471-8537-5a0fe08faa44'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(loc:szCurrentDir)
[REPORTCONTROLS]
! TEXT,USE(loc:szCurrentDir)
loc:szCurrentDir         CSTRING(256)
!!> GUID('004bdc56-2b27-479c-ba67-84d34fbdb109'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s42),USE(loc:szCompactRedFilePath)
[REPORTCONTROLS]
! STRING(@s42),USE(loc:szCompactRedFilePath)
loc:szCompactRedFilePath CSTRING(43)
!!> GUID('9c2d2580-99c6-41bd-826a-69fbc02fc64b'),PROMPT('loc : sz Compact Red File Path:'),HEADER('loc : sz Compact Red File Path'),PICTURE(@s42)
[SCREENCONTROLS]
! ENTRY(@s42),USE(loc:szCompactCurrentDir)
[REPORTCONTROLS]
! STRING(@s42),USE(loc:szCompactCurrentDir)
loc:szCompactCurrentDir  CSTRING(43)
!!> GUID('37a2907a-f71a-4eee-b909-2d8bce81e77a'),PROMPT('loc : sz Compact Current Dir:'),HEADER('loc : sz Compact Current Dir'),PICTURE(@s42)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (RetVal)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 11
WHEN  ('') ('No Special Action')
WHEN  ('?AdditionalFilesButton') ('No Special Action')
WHEN  ('?Cancel:Button') ('No Special Action')
WHEN  ('?LookupCurrentDir:Button') ('No Special Action')
WHEN  ('?LookupRedPath:Button') ('No Special Action')
WHEN  ('?OK:Button') ('No Special Action')
WHEN  ('?ScanPanel') ('No Special Action')
WHEN  ('?StandardEquateGroup') ('No Special Action')
WHEN  ('?glo:bRefreshAll') ('No Special Action')
WHEN  ('?loc:bEquates') ('No Special Action')
WHEN  ('?loc:bWinEqu') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK:Button') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK:Button') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?OK:Button') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?OK:Button') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 11
WHEN  ('') ('25000')
WHEN  ('?AdditionalFilesButton') ('25000')
WHEN  ('?Cancel:Button') ('25000')
WHEN  ('?LookupCurrentDir:Button') ('25000')
WHEN  ('?LookupRedPath:Button') ('25000')
WHEN  ('?OK:Button') ('25000')
WHEN  ('?ScanPanel') ('25000')
WHEN  ('?StandardEquateGroup') ('25000')
WHEN  ('?glo:bRefreshAll') ('25000')
WHEN  ('?loc:bEquates') ('25000')
WHEN  ('?loc:bWinEqu') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK:Button') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OK:Button') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?OK:Button') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 11
WHEN  ('') ('None')
WHEN  ('?AdditionalFilesButton') ('None')
WHEN  ('?Cancel:Button') ('None')
WHEN  ('?LookupCurrentDir:Button') ('None')
WHEN  ('?LookupRedPath:Button') ('None')
WHEN  ('?OK:Button') ('None')
WHEN  ('?ScanPanel') ('None')
WHEN  ('?StandardEquateGroup') ('None')
WHEN  ('?glo:bRefreshAll') ('None')
WHEN  ('?loc:bEquates') ('None')
WHEN  ('?loc:bWinEqu') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK:Button') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OK:Button') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 11
WHEN  ('') (1)
WHEN  ('?AdditionalFilesButton') (1)
WHEN  ('?LookupRedPath:Button') (1)
WHEN  ('?OK:Button') (1)
WHEN  ('?ScanPanel') (1)
WHEN  ('?StandardEquateGroup') (1)
WHEN  ('?glo:bRefreshAll') (1)
WHEN  ('?loc:bEquates') (1)
WHEN  ('?loc:bWinEqu') (1)
WHEN  ('?loc:szCompactCurrentDir') (1)
WHEN  ('?loc:szCompactRedFilePath') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?ScanPanel')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?glo:bRefreshAll')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bWinEqu')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?ScanPanel')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?glo:bRefreshAll')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bWinEqu')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?ScanPanel')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?glo:bRefreshAll')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bWinEqu')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?AdditionalFilesButton')TIMES 0
WHEN  ('?LookupRedPath:Button')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?ScanPanel')TIMES 0
WHEN  ('?StandardEquateGroup')TIMES 0
WHEN  ('?glo:bRefreshAll')TIMES 0
WHEN  ('?loc:bEquates')TIMES 0
WHEN  ('?loc:bWinEqu')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?ScanPanel') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?ScanPanel') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?ScanPanel') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?ScanPanel') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?ScanPanel') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?ScanPanel') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?ScanPanel') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?OK:Button')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6500
PROPERTY:END
CASE glo:bClarionVersion
  OF CWVERSION_C2
     szSection = 'Clarion 2'
     szRedFileName = '\bin\cw20.red'
  OF CWVERSION_C4
     szSection = 'Clarion 4'
     szRedFileName = '\bin\clarion4.red'
  OF CWVERSION_C5
     szSection = 'Clarion 5'
     szRedFileName = '\bin\clarion5.red'
  OF CWVERSION_C5EE
     szSection = 'Clarion 5  Enterprise Edition'
     szRedFileName = '\bin\clarion5.red'
  OF CWVERSION_C55
     szSection = 'Clarion 5.5'
     szRedFileName = '\bin\c55pe.red'
  OF CWVERSION_C55EE
     szSection = 'Clarion 5.5  Enterprise Edition'
     szRedFileName = '\bin\c55ee.red'
  OF CWVERSION_C60
     szSection = 'Clarion 6.0'
     szRedFileName = '\bin\c60pe.red'
  OF CWVERSION_C60EE
     szSection = 'Clarion 6.0  Enterprise Edition'
     szRedFileName = '\bin\c60ee.red'
  OF CWVERSION_C70
     szSection = 'Clarion 7.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(szSection))) = UPPER(szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) = loc:build
           szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END

  OF CWVERSION_C80
     szSection = 'Clarion 8.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(szSection))) = UPPER(szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) = loc:build
           szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END

  OF CWVERSION_C90
     szSection = 'Clarion 9.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(szSection))) = UPPER(szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) = loc:build
           szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END

  OF CWVERSION_C100
     szSection = 'Clarion 10.'
     !get redirection file from xml file
     IF RECORDS(glo:VersionQ) = 0
        cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
        loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\ClarionProperties.xml'
        srcReadClarionProps(loc:szXMLFileName)
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF UPPER(SUB(glo:VersionQ.VersionName,1,LEN(szSection))) = UPPER(szSection)
           IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) > loc:build AND ~INSTRING('CLARION.NET',UPPER(glo:VersionQ.Path),1)
              loc:build = SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4)
           END
        END
     END
     LOOP I = 1 TO RECORDS(glo:VersionQ)
        GET(glo:VersionQ,I)
        IF SUB(glo:VersionQ.VersionName,LEN(szSection)+3,4) = loc:build
           szRedFileName = '\' & glo:VersionQ.RedFile
           BREAK
        END
     END

END

!get root folder
IF glo:bClarionVersion < CWVERSION_C70
   szRoot = GETINI(szSection,'root')                              !get root directory
   IF szRoot[LEN(szRoot)] = '\'
      szRoot[LEN(szRoot)] = '<0>'                                 !remove trailing backslash
   END
   IF glo:szRedFilePath
      loc:szRedFilePath = glo:szRedFilePath
   ELSE
      loc:szRedFilePath = szRoot & szRedFileName
   END
ELSE
   szRoot = glo:VersionQ.Root
   IF glo:szRedFilePath
      loc:szRedFilePath = glo:szRedFilePath
   ELSE
      loc:szRedFilePath = glo:VersionQ.RedDir & szRedFileName
   END
END
PathCompactPathEx(loc:szCompactRedFilePath, loc:szRedFilePath, SIZE(loc:szCompactRedFilePath),0)

IF glo:szCurrentDir
   loc:szCurrentDir = glo:szCurrentDir
ELSE
   loc:szCurrentDir = LONGPATH(PATH())
END
PathCompactPathEx(loc:szCompactCurrentDir, loc:szCurrentDir, SIZE(loc:szCompactCurrentDir),0)

FREE(Q)
J = RECORDS(ExtraModuleQ)
LOOP I = 1 TO J
  GET(ExtraModuleQ,I)
  IF ExtraQ:bClarionVersion = glo:bClarionVersion
     Q = ExtraModuleQ
     ADD(Q,+Q.szModuleName,+Q.szModulePath)
     CASE UPPER(Q.szModuleName)
     OF 'EQUATES.CLW'
        loc:bEquates = TRUE
     OF 'ERRORS.CLW'
        loc:bErrors = TRUE
     OF 'PROPERTY.CLW'
        loc:bProperty = TRUE
     OF 'PRNPROP.CLW'
        loc:bPrnProp = TRUE
     OF 'KEYCODES.CLW'
        loc:bKeycodes = TRUE
     OF 'TPLEQU.CLW'
        loc:bTplEqu = TRUE
     OF 'WINEQU.CLW'
        loc:bWinEqu = TRUE
     OF 'WINDOWS.INC'
        loc:bWindows = TRUE
     END
  END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8010
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
   CASE I
   OF ?StandardEquateGroup
      !XPStandardEquateGroup.FontName = glo:Typeface
      !XPStandardEquateGroup.FontSize = glo:FontSize
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9500
PROPERTY:END
IF glo:bClarionVersion > CWVERSION_C60EE
   subFolder = 'win\'
ELSE
   subFolder = ''
END

DISABLE(?loc:bEquates,?loc:bWindows)
LOOP I = 1 TO 8
  CASE I
  OF 1
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\equates.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bEquates{PROP:Disable} = FALSE
     END
  OF 2
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\errors.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bErrors{PROP:Disable} = FALSE
     END
  OF 3
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\property.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bProperty{PROP:Disable} = FALSE
     END
  OF 4
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\prnprop.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bPrnProp{PROP:Disable} = FALSE
     END
  OF 5
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\keycodes.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bKeycodes{PROP:Disable} = FALSE
     END
  OF 6
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\tplequ.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bTplEqu{PROP:Disable} = FALSE
     END
  OF 7
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\winequ.clw'
     IF _access(loc:szFileName,0) = 0
        ?loc:bWinEqu{PROP:Disable} = FALSE
     END
  OF 8
     loc:szFileName = szRoot & '\libsrc\' & subFolder & '\windows.inc'
     IF _access(loc:szFileName,0) = 0
        ?loc:bWindows{PROP:Disable} = FALSE
     END
  END
END

IF ForceSmartScan = TRUE
   glo:bRefreshAll = FALSE
   POST(EVENT:Accepted,?OK:Button)
END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Scan_Options.htm')
   END
END  
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
IF glo:bShowTips
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3800
PROPERTY:END
END
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?loc:bEquates'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bEquates
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?LookupRedPath:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 IF ~FILEDIALOG('Select Redirection File',loc:szRedFilePath,'Redrection File (*.RED)|*.RED|All Files (*.*)|*.*',File:KeepDir+File:LongName)
    IF glo:szRedFilePath
       loc:szRedFilePath = glo:szRedFilePath
    ELSE
       IF glo:bClarionVersion < CWVERSION_C70
          loc:szRedFilePath = szRoot & szRedFileName
       ELSE
          loc:szRedFilePath = glo:VersionQ.RedDir & szRedFileName
       END
    END
 ELSE
    PathCompactPathEx(loc:szCompactRedFilePath, loc:szRedFilePath, SIZE(loc:szCompactRedFilePath),0)
    DISPLAY(?loc:szCompactRedFilePath)
 END
[END]
[END]
WHEN '?LookupCurrentDir:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 IF ~FILEDIALOG('Select Current Working Directory',loc:szCurrentDir,'All Files (*.*)|*.*',File:KeepDir+File:LongName+File:Directory)
    IF glo:szCurrentDir
       loc:szCurrentDir = glo:szCurrentDir
    ELSE
       loc:szCurrentDir = LONGPATH(PATH())
    END
 ELSE
    PathCompactPathEx(loc:szCompactCurrentDir, loc:szCurrentDir, SIZE(loc:szCompactCurrentDir),0)
    DISPLAY(?loc:szCompactCurrentDir)
 END
[END]
[END]
WHEN '?OK:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 glo:szRedFilePath = loc:szRedFilePath
 glo:szCurrentDir = loc:szCurrentDir

 INIMgr.Update('Options','Current Directory',glo:szCurrentDir)
 INIMgr.Update('Options','RED File Path ' & glo:bClarionVersion,glo:szRedFilePath)

 FREE(ExtraModuleQ)
 J = RECORDS(Q)
 LOOP I = 1 TO J
   GET(Q,I)
   ExtraModuleQ = Q
   ADD(ExtraModuleQ,+ExtraModuleQ.szModuleName,+ExtraModuleQ.szModulePath)
 END
 RetVal = Level:Benign
 POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?Cancel:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 RetVal = Level:Notify
 POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?loc:bKeycodes'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bKeycodes
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?loc:bErrors'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bErrors
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?loc:bTplEqu'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bTplEqu
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?loc:bProperty'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bProperty
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?loc:bWinEqu'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bWinEqu
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?loc:bPrnProp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bPrnProp
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?loc:bWindows'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 Q.szModuleName = CLIP(LEFT(?{PROP:Text}))
 Q.szModulePath = szRoot & '\LIBSRC\' & subFolder
 Q.bClarionVersion = glo:bClarionVersion
 IF loc:bWindows
    ADD(Q,+Q.szModuleName,+Q.szModulePath)
 ELSE
    GET(Q,+Q.szModuleName,+Q.szModulePath)
    IF ~ERRORCODE()
       DELETE(Q)
    END
 END
[END]
[END]
WHEN '?AdditionalFilesButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 winAdditionalFiles(Q,glo:bClarionVersion)
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
loc:build         CSTRING(5)
loc:szFileName    CSTRING(256)
loc:szXMLFileName CSTRING(261)
cc                LONG
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'PreAlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4499
PROPERTY:END
IF KEYCODE() <> EscKey
   CYCLE
END
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
subFolder            CSTRING(5)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 5
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Scan_Options.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 1
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Surface')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, |
  17, 18, 19, 22)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 18
WHEN  (1) ('?ScanPanel')
WHEN  (2) ('?szRedFilePath:Prompt')
WHEN  (4) ('?LookupRedPath:Button')
WHEN  (5) ('?szCurrentDir:Prompt')
WHEN  (7) ('?LookupCurrentDir:Button')
WHEN  (8) ('?OK:Button')
WHEN  (9) ('?Cancel:Button')
WHEN  (10) ('?ClarionGroup')
WHEN  (11) ('?StandardEquateGroup')
WHEN  (12) ('?loc:bEquates')
WHEN  (13) ('?loc:bErrors')
WHEN  (14) ('?loc:bTplEqu')
WHEN  (15) ('?loc:bProperty')
WHEN  (16) ('?loc:bWinEqu')
WHEN  (17) ('?loc:bPrnProp')
WHEN  (18) ('?loc:bWindows')
WHEN  (19) ('?AdditionalFilesButton')
WHEN  (22) ('?loc:bKeycodes')

%DisableResize DEPEND %OverrideControls LONG TIMES 18
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)
WHEN  (13) (0)
WHEN  (14) (0)
WHEN  (15) (0)
WHEN  (16) (0)
WHEN  (17) (0)
WHEN  (18) (0)
WHEN  (19) (0)
WHEN  (22) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 18
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Lock Width')
WHEN  (4) ('Lock Width')
WHEN  (5) ('Lock Width')
WHEN  (7) ('Lock Width')
WHEN  (8) ('Lock Width')
WHEN  (9) ('Lock Width')
WHEN  (10) ('Constant Right Border')
WHEN  (11) ('Constant Right Border')
WHEN  (12) ('Lock Width')
WHEN  (13) ('Lock Width')
WHEN  (14) ('Lock Width')
WHEN  (15) ('Lock Width')
WHEN  (16) ('Lock Width')
WHEN  (17) ('Lock Width')
WHEN  (18) ('Lock Width')
WHEN  (19) ('Lock Width')
WHEN  (22) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 18
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (7) ('Lock Height')
WHEN  (8) ('Lock Height')
WHEN  (9) ('Lock Height')
WHEN  (10) ('Constant Bottom Border')
WHEN  (11) ('Constant Bottom Border')
WHEN  (12) ('Lock Height')
WHEN  (13) ('Lock Height')
WHEN  (14) ('Lock Height')
WHEN  (15) ('Lock Height')
WHEN  (16) ('Lock Height')
WHEN  (17) ('Lock Height')
WHEN  (18) ('Lock Height')
WHEN  (19) ('Lock Height')
WHEN  (22) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 18
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (4) ('Fix Right')
WHEN  (5) ('Fix Left')
WHEN  (7) ('Fix Right')
WHEN  (8) ('Fix Right')
WHEN  (9) ('Fix Right')
WHEN  (10) ('Fix Left')
WHEN  (11) ('Fix Left')
WHEN  (12) ('Fix Left')
WHEN  (13) ('Fix Left')
WHEN  (14) ('Fix Left')
WHEN  (15) ('Fix Left')
WHEN  (16) ('Fix Left')
WHEN  (17) ('Fix Left')
WHEN  (18) ('Fix Left')
WHEN  (19) ('Fix Left')
WHEN  (22) ('Fix Left')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 18
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Top')
WHEN  (4) ('Fix Top')
WHEN  (5) ('Fix Top')
WHEN  (7) ('Fix Top')
WHEN  (8) ('Fix Bottom')
WHEN  (9) ('Fix Bottom')
WHEN  (10) ('Fix Top')
WHEN  (11) ('Fix Top')
WHEN  (12) ('Fix Top')
WHEN  (13) ('Fix Top')
WHEN  (14) ('Fix Top')
WHEN  (15) ('Fix Top')
WHEN  (16) ('Fix Top')
WHEN  (17) ('Fix Top')
WHEN  (18) ('Fix Top')
WHEN  (19) ('Fix Bottom')
WHEN  (22) ('Fix Top')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 2
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%UseBalloonTips LONG  (1)
%ToolTipControls MULTI LONG  (1, 2, 3, 4, 5, 6)
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 6
WHEN  (1) ('?LookupRedPath:Button')
WHEN  (2) ('?LookupCurrentDir:Button')
WHEN  (3) ('?OK:Button')
WHEN  (4) ('?Cancel:Button')
WHEN  (5) ('?AdditionalFilesButton')
WHEN  (6) ('?glo:bRefreshAll')

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 6
WHEN  (1) (0)
WHEN  (2) (1)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (1)

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 6
WHEN  (1) ('Use Tip Text')
WHEN  (2) ('Use Tip Text')
WHEN  (3) ('Use Tip Text')
WHEN  (4) ('Use Tip Text')
WHEN  (5) ('Use Tip Text')
WHEN  (6) ('Use Tip Text')

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 6
WHEN  (1) ('RetVal')
WHEN  (2) ('RetVal')
WHEN  (3) ('RetVal')
WHEN  (4) ('RetVal')
WHEN  (5) ('RetVal')
WHEN  (6) ('RetVal')

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 6
WHEN  (1) ('glo:hwnd_main')
WHEN  (2) ('glo:hwnd_main')
WHEN  (3) ('glo:hwnd_main')
WHEN  (4) ('glo:hwnd_main')
WHEN  (5) ('glo:hwnd_main')
WHEN  (6) ('glo:hwnd_main')

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 6
WHEN  (1) (1)
WHEN  (2) (1)
WHEN  (3) (1)
WHEN  (4) (1)
WHEN  (5) (1)
WHEN  (6) (1)

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 6
WHEN  (1) ('?LookupRedPath:Button')
WHEN  (2) ('?LookupCurrentDir:Button')
WHEN  (3) ('?OK:Button')
WHEN  (4) ('?Cancel:Button')
WHEN  (5) ('?AdditionalFilesButton')
WHEN  (6) ('?glo:bRefreshAll')

%DontApply LONG  (0)
%ApplyAsRegularTip LONG  (0)
%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 6
PARENT 2
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 3
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcReadClarionProps
winAdditionalFiles
[WINDOW]
Window  WINDOW('Scan Options'),AT(,,236,142),FONT(,,COLOR:Black,,CHARSET:ANSI),DOUBLE,TILED, |
          ALRT(EscKey),CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          BUTTON('Scan N&ow'),AT(138,124,45,14),USE(?OK:Button),DEFAULT,#ORDINAL(1)
          BUTTON('Cancel'),AT(187,124,45,14),USE(?Cancel:Button),#ORDINAL(2)
          PANEL,AT(4,4,228,116),USE(?ScanPanel),FILL(COLOR:BTNFACE),#ORDINAL(3)
          PROMPT('&Redirection File:'),AT(8,8),USE(?szRedFilePath:Prompt),TRN,#ORDINAL(4)
          ENTRY(@s42),AT(72,8,140,10),USE(loc:szCompactRedFilePath),COLOR(COLOR:BTNFACE),READONLY, |
            SKIP,#ORDINAL(5)
          BUTTON('...'),AT(216,8,11,10),USE(?LookupRedPath:Button),TIP('Select the Redi' & |
            'rection file to use.'),#ORDINAL(6)
          PROMPT('&Current Directory:'),AT(8,22),USE(?szCurrentDir:Prompt),TRN,#ORDINAL(7)
          ENTRY(@s42),AT(72,22,140,10),USE(loc:szCompactCurrentDir),COLOR(COLOR:BTNFACE),READONLY, |
            SKIP,#ORDINAL(8)
          BUTTON('...'),AT(216,22,11,10),USE(?LookupCurrentDir:Button),TIP('Select the ' & |
            'directory to be used as the current<0DH,0AH>working directory for the scan' & |
            'ning process.'),#ORDINAL(9)
          GROUP,AT(8,32,219,84),USE(?ClarionGroup),BOXED,#ORDINAL(10)
            GROUP(' Include Standard Equate Files'),AT(14,39,206,57),USE(?StandardEquateGroup), |
              BOXED,#ORDINAL(11)
              CHECK(' EQUATES.CLW'),AT(19,49),USE(loc:bEquates),COLOR(COLOR:BTNFACE),#ORDINAL(12)
              CHECK(' KEYCODES.CLW'),AT(19,71),USE(loc:bKeycodes),COLOR(COLOR:BTNFACE),#ORDINAL(13)
              CHECK(' ERRORS.CLW'),AT(19,60),USE(loc:bErrors),COLOR(COLOR:BTNFACE),#ORDINAL(14)
              CHECK(' TPLEQU.CLW'),AT(100,60),USE(loc:bTplEqu),COLOR(COLOR:BTNFACE),#ORDINAL(15)
              CHECK(' PROPERTY.CLW'),AT(100,49),USE(loc:bProperty),COLOR(COLOR:BTNFACE),#ORDINAL(16)
              CHECK(' WINEQU.CLW'),AT(100,82),USE(loc:bWinEqu),COLOR(COLOR:BTNFACE),#ORDINAL(17)
              CHECK(' PRNPROP.CLW'),AT(19,82),USE(loc:bPrnProp),COLOR(COLOR:BTNFACE),#ORDINAL(18)
              CHECK(' WINDOWS.INC'),AT(100,71),USE(loc:bWindows),COLOR(COLOR:BTNFACE),#ORDINAL(19)
            END
            BUTTON('Additional &Files...'),AT(14,100,68,11),USE(?AdditionalFilesButton),TIP('Select Add' & |
              'itional Files for Processing'),#ORDINAL(20)
            CHECK(' Scan &All Source Files'),AT(100,100),USE(glo:bRefreshAll),COLOR(COLOR:BTNFACE), |
              TIP('Check to scan all source files.<0DH,0AH>Leave unchecked to scan only' & |
              ' files that have<0DH,0AH>been modified since the last scan.'),#ORIG(glo:bRefreshAll), |
              #ORDINAL(21)
          END
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winLoading
[COMMON]
DESCRIPTION 'Splash Screen'
FROM ABC Source
MODIFIED '2017/02/02' ' 8:40:01'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
Count  BYTE
Window WINDOW,AT(,,140,50),CENTER,GRAY,FONT('Tahoma',10,,FONT:regular,CHARSET:ANSI), |
            TIMER(100),WALLPAPER('WALLPAPER.GIF'),DOUBLE
        IMAGE('abcview.ico'),AT(6,4,14,12),USE(?Image1),CENTERED
        STRING('Class Viewer'),AT(40,3,60),USE(?String1),TRN,FONT('Tahoma',12, |
                COLOR:Navy,FONT:bold,CHARSET:ANSI)
        STRING('<169> Copyright 2001-2017'),AT(31,17),USE(?Copyright),TRN, |
                FONT('Arial',8,,FONT:regular,CHARSET:ANSI)
        STRING('Devuna'),AT(59,23),USE(?Devuna),TRN,FONT('Arial',8,, |
                FONT:regular,CHARSET:ANSI)
        STRING('Loading Database - Please Wait'),AT(7,34),CURSOR(CURSOR:Wait), |
                USE(?String2),TRN,FONT(,,COLOR:Navy,FONT:bold,CHARSET:ANSI)
        STRING('...'),AT(125,34),CURSOR(CURSOR:Wait),USE(?String3),TRN, |
                FONT(,,COLOR:Navy,FONT:bold,CHARSET:ANSI)
    END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  OPEN(Window)
  Window{PROP:Buffer} = 1
  ACCEPT
    CASE EVENT()
    OF EVENT:TIMER
       Count += 1
       Count = Count % 3
       EXECUTE Count + 1
          ?String3{PROP:TEXT} = '...'
          ?String3{PROP:TEXT} = '.'
          ?String3{PROP:TEXT} = '..'
       END
    OF EVENT:CloseWindow
       Count += 1
       IF Count = 2
          BREAK
       END
    OF Event:CloseDown
       BREAK
    END
  END
  CLOSE(Window)
  glo:lLoadingThread = 0
  POST(EVENT:User,,1)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME _main
[COMMON]
FROM ABC Source
MODIFIED '2017/07/02' ' 9:33:14'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
szModuleName    CSTRING('SciLexer.DLL')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
Window WINDOW('Class Viewer'),AT(0,0,10,10)
     END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  IF ProgramIsRunning('ABCVIEW', 'ClassViewer')
?    MESSAGE('Program is already running, cannot run another instance','Class Viewer',ICON:HAND)
     RETURN
  END

  OPEN(Window)
  Window{PROP:Hide} = TRUE
  ACCEPT
    CASE EVENT()
    OF EVENT:OpenWindow
       glo:hwnd_main = Window{PROP:Handle}
       glo:lMainThread = START(Main,64000)
       glo:lLoadingThread = START(winLoading,10000)
    OF EVENT:CloseWindow OROF EVENT:CloseDown
       IF glo:lLoadingThread
          POST(EVENT(),,glo:lLoadingThread)
       END
       IF glo:lMainThread
          POST(EVENT(),,glo:lMainThread)
       END
    END
  END
  CLOSE(Window)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
Main
ProgramIsRunning
winLoading
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME ProgramIsRunning
PROTOTYPE '(String SemaphoreValue, String WindowTitle),Byte'
PARAMETERS '(SemaphoreValue, WindowTitle)'
[COMMON]
FROM ABC Source
MODIFIED '2017/07/02' ' 9:34:40'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
RetVal      SHORT
hMe         lONG
n           LONG
szCaption   CSTRING(256)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  IF ~BeginUnique(SemaphoreValue)
    szCaption = WindowTitle
    hMe = srcFindWindow(szCaption)
    IF hMe
       n = ShowWindow(hMe, 1)
       n = SetForegroundWindow(hMe)
    END
    RetVal = TRUE !Already Running
  END
  RETURN (RetVal)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcFindWindow
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcWordWrap
PROTOTYPE '(*CSTRING s,LONG w)'
PARAMETERS '(s,w)'
[COMMON]
DESCRIPTION 'Insert CRLF to word wrap'
FROM ABC Source
MODIFIED '2003/05/27' '18:47:21'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
K   LONG,AUTO
s1  CSTRING(255)
sz  CSTRING(4096)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  I = 0
  LOOP WHILE I < (LEN(s)-w)
    s1 = s[I+1 : I+w]
    !look for cr
    J = INSTRING('<13>',s1)
    IF J
       s1[J] = '<0>'
       I += (LEN(s1) + 2)
    ELSE    !break at last space
       K = LEN(s1)
       LOOP J = K TO 1 BY -1
         IF s1[J] = ' '
            s1[J] = '<0>'
            BREAK
         END
       END
       I += (LEN(s1) + 1)
    END
    sz = sz & s1 & '<13,10>'
  END
  IF I < (LEN(s)-1)
    s1 = s[I+1 : LEN(s)]
    sz = sz & s1 & '<13,10>'
  END
  sz[LEN(sz)-2] = '<0>'
  s = sz
  IF s <> sz    !truncated?
     s = s[1 : LEN(s)-5] & '.....'
  END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winExportDatabaseToXML
[COMMON]
FROM ABC Window
MODIFIED '2017/07/02' ' 9:35:23'
[DATA]
[SCREENCONTROLS]
! CHECK('Additional Modules'),USE(bExtraModuleQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bExtraModuleQ)
bExtraModuleQ            BYTE
!!> GUID('8f38b637-f2f4-45d4-8ca1-eddc5d0b8dd4'),INITIAL('1'),PROMPT('Additional Modules'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szExtraModuleXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szExtraModuleXMLFile)
szExtraModuleXMLFile     CSTRING(256)
!!> GUID('6c7d07c0-ccaa-4333-8b96-58767cb566cd'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Modules'),USE(bModuleQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bModuleQ)
bModuleQ                 BYTE
!!> GUID('fc093722-2ef0-4a5b-b97a-1e4b98c581c4'),INITIAL('1'),PROMPT('Modules'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szModuleXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szModuleXMLFile)
szModuleXMLFile          CSTRING(256)
!!> GUID('73a2f15b-7511-4cf6-94fa-529fd85faf90'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Classes'),USE(bClassQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bClassQ)
bClassQ                  BYTE
!!> GUID('1a2614d4-cbd3-4116-b97d-f27dc4a665ee'),INITIAL('1'),PROMPT('Classes'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szClassXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szClassXMLFile)
szClassXMLFile           CSTRING(256)
!!> GUID('7c61fef7-9f61-4948-8523-fb30cab32c0d'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Properties'),USE(bPropertyQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bPropertyQ)
bPropertyQ               BYTE
!!> GUID('5226d1dd-8f5e-4717-9c9f-ee3c25dc81e8'),INITIAL('1'),PROMPT('Properties'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szPropertyXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szPropertyXMLFile)
szPropertyXMLFile        CSTRING(256)
!!> GUID('c1f6980e-5f9d-4b39-998c-65546bd3d1c3'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Methods'),USE(bMethodQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bMethodQ)
bMethodQ                 BYTE
!!> GUID('8a14fbd5-92f1-4828-b48c-bcb9b7c527d5'),INITIAL('1'),PROMPT('Methods'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szMethodXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szMethodXMLFile)
szMethodXMLFile          CSTRING(256)
!!> GUID('2e2d444b-e8f0-45af-b534-382ba742a7ac'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Structures'),USE(bStructureQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bStructureQ)
bStructureQ              BYTE
!!> GUID('a0625066-40b6-4acc-a5b7-aff9f7b706f9'),INITIAL('1'),PROMPT('Structures'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szStructureXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szStructureXMLFile)
szStructureXMLFile       CSTRING(256)
!!> GUID('6e3189f7-24be-43f6-97b4-cc4626abd488'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Equates'),USE(bEnumQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bEnumQ)
bEnumQ                   BYTE
!!> GUID('0577a0a9-1395-4fc4-9948-2c380a28d628'),INITIAL('1'),PROMPT('Equates'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szEnumXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szEnumXMLFile)
szEnumXMLFile            CSTRING(256)
!!> GUID('e0834908-d393-4f99-982e-5f0d340561b4'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Calls'),USE(bCallQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bCallQ)
bCallQ                   BYTE
!!> GUID('48682e0d-94ff-4c18-b4a3-4de032c4e244'),INITIAL('1'),PROMPT('Calls'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szCallXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szCallXMLFile)
szCallXMLFile            CSTRING(256)
!!> GUID('09a807a2-5cfe-4198-8091-903b8480decd'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Notes'),USE(bNoteQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bNoteQ)
bNoteQ                   BYTE
!!> GUID('0d0158a8-1ae5-4047-85a1-accd1fb1ed30'),INITIAL('1'),PROMPT('Notes'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szNoteXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szNoteXMLFile)
szNoteXMLFile            CSTRING(256)
!!> GUID('5a038a2e-0848-444b-8d2d-ce98d7e3add4'),PICTURE(@s255)
[SCREENCONTROLS]
! CHECK('Categories'),USE(bCategoryQ)
[REPORTCONTROLS]
! STRING(@n3),USE(bCategoryQ)
bCategoryQ               BYTE
!!> GUID('617cfeb0-443a-4bd2-9b6d-46766329520a'),INITIAL('1'),PROMPT('Categories'),HEADER('b Category Q'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s255),USE(szCategoryXMLFile)
[REPORTCONTROLS]
! TEXT,USE(szCategoryXMLFile)
szCategoryXMLFile        CSTRING(256)
!!> GUID('b6d0a93c-e609-472a-9308-3bf398ac3b3d'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@n3),USE(LOC:XML_ExportRes)
[REPORTCONTROLS]
! STRING(@n3),USE(LOC:XML_ExportRes)
LOC:XML_ExportRes        BYTE
!!> GUID('caa9dd82-8aea-4d7e-84fd-d6f31b107870'),PICTURE(@n3)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 36
WHEN  ('') ('No Special Action')
WHEN  ('?Call:Image') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?Category:Image') ('No Special Action')
WHEN  ('?Check:Button') ('No Special Action')
WHEN  ('?Class:Image') ('No Special Action')
WHEN  ('?Enum:Image') ('No Special Action')
WHEN  ('?ExtraModule:Image') ('No Special Action')
WHEN  ('?LookupCallXMLFile') ('No Special Action')
WHEN  ('?LookupCategoryXMLFile') ('No Special Action')
WHEN  ('?LookupClassXMLFile') ('No Special Action')
WHEN  ('?LookupEnumXMLFile') ('No Special Action')
WHEN  ('?LookupExtraModuleXMLFile') ('No Special Action')
WHEN  ('?LookupMethodXMLFile') ('No Special Action')
WHEN  ('?LookupModuleXMLFile') ('No Special Action')
WHEN  ('?LookupNoteXMLFile') ('No Special Action')
WHEN  ('?LookupPropertyXMLFile') ('No Special Action')
WHEN  ('?LookupStructureXMLFile') ('No Special Action')
WHEN  ('?Method:Image') ('No Special Action')
WHEN  ('?Module:Image') ('No Special Action')
WHEN  ('?Note:Image') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')
WHEN  ('?Property:Image') ('No Special Action')
WHEN  ('?Structure:Image') ('No Special Action')
WHEN  ('?UnCheck:Button') ('No Special Action')
WHEN  ('?szCallXMLFile') ('No Special Action')
WHEN  ('?szCategoryXMLFile') ('No Special Action')
WHEN  ('?szClassXMLFile') ('No Special Action')
WHEN  ('?szEnumXMLFile') ('No Special Action')
WHEN  ('?szExtraModuleXMLFile') ('No Special Action')
WHEN  ('?szMethodXMLFile') ('No Special Action')
WHEN  ('?szModuleXMLFile') ('No Special Action')
WHEN  ('?szNoteXMLFile') ('No Special Action')
WHEN  ('?szPropertyXMLFile') ('No Special Action')
WHEN  ('?szStructureXMLFile') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 14
WHEN  ('?CancelButton') ('')
WHEN  ('?Check:Button') ('')
WHEN  ('?LookupCallXMLFile') ('')
WHEN  ('?LookupCategoryXMLFile') ('')
WHEN  ('?LookupClassXMLFile') ('')
WHEN  ('?LookupEnumXMLFile') ('')
WHEN  ('?LookupExtraModuleXMLFile') ('')
WHEN  ('?LookupMethodXMLFile') ('')
WHEN  ('?LookupModuleXMLFile') ('')
WHEN  ('?LookupNoteXMLFile') ('')
WHEN  ('?LookupPropertyXMLFile') ('')
WHEN  ('?LookupStructureXMLFile') ('')
WHEN  ('?OkButton') ('')
WHEN  ('?UnCheck:Button') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 14
WHEN  ('?CancelButton') ('')
WHEN  ('?Check:Button') ('')
WHEN  ('?LookupCallXMLFile') ('')
WHEN  ('?LookupCategoryXMLFile') ('')
WHEN  ('?LookupClassXMLFile') ('')
WHEN  ('?LookupEnumXMLFile') ('')
WHEN  ('?LookupExtraModuleXMLFile') ('')
WHEN  ('?LookupMethodXMLFile') ('')
WHEN  ('?LookupModuleXMLFile') ('')
WHEN  ('?LookupNoteXMLFile') ('')
WHEN  ('?LookupPropertyXMLFile') ('')
WHEN  ('?LookupStructureXMLFile') ('')
WHEN  ('?OkButton') ('')
WHEN  ('?UnCheck:Button') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 14
WHEN  ('?CancelButton') ()
WHEN  ('?Check:Button') ()
WHEN  ('?LookupCallXMLFile') ()
WHEN  ('?LookupCategoryXMLFile') ()
WHEN  ('?LookupClassXMLFile') ()
WHEN  ('?LookupEnumXMLFile') ()
WHEN  ('?LookupExtraModuleXMLFile') ()
WHEN  ('?LookupMethodXMLFile') ()
WHEN  ('?LookupModuleXMLFile') ()
WHEN  ('?LookupNoteXMLFile') ()
WHEN  ('?LookupPropertyXMLFile') ()
WHEN  ('?LookupStructureXMLFile') ()
WHEN  ('?OkButton') ()
WHEN  ('?UnCheck:Button') ()

%ButtonThread DEPEND %Control LONG TIMES 14
WHEN  ('?CancelButton') (0)
WHEN  ('?Check:Button') (0)
WHEN  ('?LookupCallXMLFile') (0)
WHEN  ('?LookupCategoryXMLFile') (0)
WHEN  ('?LookupClassXMLFile') (0)
WHEN  ('?LookupEnumXMLFile') (0)
WHEN  ('?LookupExtraModuleXMLFile') (0)
WHEN  ('?LookupMethodXMLFile') (0)
WHEN  ('?LookupModuleXMLFile') (0)
WHEN  ('?LookupNoteXMLFile') (0)
WHEN  ('?LookupPropertyXMLFile') (0)
WHEN  ('?LookupStructureXMLFile') (0)
WHEN  ('?OkButton') (0)
WHEN  ('?UnCheck:Button') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 36
WHEN  ('') ('25000')
WHEN  ('?Call:Image') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?Category:Image') ('25000')
WHEN  ('?Check:Button') ('25000')
WHEN  ('?Class:Image') ('25000')
WHEN  ('?Enum:Image') ('25000')
WHEN  ('?ExtraModule:Image') ('25000')
WHEN  ('?LookupCallXMLFile') ('25000')
WHEN  ('?LookupCategoryXMLFile') ('25000')
WHEN  ('?LookupClassXMLFile') ('25000')
WHEN  ('?LookupEnumXMLFile') ('25000')
WHEN  ('?LookupExtraModuleXMLFile') ('25000')
WHEN  ('?LookupMethodXMLFile') ('25000')
WHEN  ('?LookupModuleXMLFile') ('25000')
WHEN  ('?LookupNoteXMLFile') ('25000')
WHEN  ('?LookupPropertyXMLFile') ('25000')
WHEN  ('?LookupStructureXMLFile') ('25000')
WHEN  ('?Method:Image') ('25000')
WHEN  ('?Module:Image') ('25000')
WHEN  ('?Note:Image') ('25000')
WHEN  ('?OkButton') ('25000')
WHEN  ('?Panel1') ('25000')
WHEN  ('?Property:Image') ('25000')
WHEN  ('?Structure:Image') ('25000')
WHEN  ('?UnCheck:Button') ('25000')
WHEN  ('?szCallXMLFile') ('25000')
WHEN  ('?szCategoryXMLFile') ('25000')
WHEN  ('?szClassXMLFile') ('25000')
WHEN  ('?szEnumXMLFile') ('25000')
WHEN  ('?szExtraModuleXMLFile') ('25000')
WHEN  ('?szMethodXMLFile') ('25000')
WHEN  ('?szModuleXMLFile') ('25000')
WHEN  ('?szNoteXMLFile') ('25000')
WHEN  ('?szPropertyXMLFile') ('25000')
WHEN  ('?szStructureXMLFile') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 14
WHEN  ('?CancelButton') ('')
WHEN  ('?Check:Button') ('')
WHEN  ('?LookupCallXMLFile') ('')
WHEN  ('?LookupCategoryXMLFile') ('')
WHEN  ('?LookupClassXMLFile') ('')
WHEN  ('?LookupEnumXMLFile') ('')
WHEN  ('?LookupExtraModuleXMLFile') ('')
WHEN  ('?LookupMethodXMLFile') ('')
WHEN  ('?LookupModuleXMLFile') ('')
WHEN  ('?LookupNoteXMLFile') ('')
WHEN  ('?LookupPropertyXMLFile') ('')
WHEN  ('?LookupStructureXMLFile') ('')
WHEN  ('?OkButton') ('')
WHEN  ('?UnCheck:Button') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 14
WHEN  ('?CancelButton') ()
WHEN  ('?Check:Button') ()
WHEN  ('?LookupCallXMLFile') ()
WHEN  ('?LookupCategoryXMLFile') ()
WHEN  ('?LookupClassXMLFile') ()
WHEN  ('?LookupEnumXMLFile') ()
WHEN  ('?LookupExtraModuleXMLFile') ()
WHEN  ('?LookupMethodXMLFile') ()
WHEN  ('?LookupModuleXMLFile') ()
WHEN  ('?LookupNoteXMLFile') ()
WHEN  ('?LookupPropertyXMLFile') ()
WHEN  ('?LookupStructureXMLFile') ()
WHEN  ('?OkButton') ()
WHEN  ('?UnCheck:Button') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 14
WHEN  ('?CancelButton') (0)
WHEN  ('?Check:Button') (0)
WHEN  ('?LookupCallXMLFile') (0)
WHEN  ('?LookupCategoryXMLFile') (0)
WHEN  ('?LookupClassXMLFile') (0)
WHEN  ('?LookupEnumXMLFile') (0)
WHEN  ('?LookupExtraModuleXMLFile') (0)
WHEN  ('?LookupMethodXMLFile') (0)
WHEN  ('?LookupModuleXMLFile') (0)
WHEN  ('?LookupNoteXMLFile') (0)
WHEN  ('?LookupPropertyXMLFile') (0)
WHEN  ('?LookupStructureXMLFile') (0)
WHEN  ('?OkButton') (0)
WHEN  ('?UnCheck:Button') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 36
WHEN  ('') ('None')
WHEN  ('?Call:Image') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?Category:Image') ('None')
WHEN  ('?Check:Button') ('None')
WHEN  ('?Class:Image') ('None')
WHEN  ('?Enum:Image') ('None')
WHEN  ('?ExtraModule:Image') ('None')
WHEN  ('?LookupCallXMLFile') ('None')
WHEN  ('?LookupCategoryXMLFile') ('None')
WHEN  ('?LookupClassXMLFile') ('None')
WHEN  ('?LookupEnumXMLFile') ('None')
WHEN  ('?LookupExtraModuleXMLFile') ('None')
WHEN  ('?LookupMethodXMLFile') ('None')
WHEN  ('?LookupModuleXMLFile') ('None')
WHEN  ('?LookupNoteXMLFile') ('None')
WHEN  ('?LookupPropertyXMLFile') ('None')
WHEN  ('?LookupStructureXMLFile') ('None')
WHEN  ('?Method:Image') ('None')
WHEN  ('?Module:Image') ('None')
WHEN  ('?Note:Image') ('None')
WHEN  ('?OkButton') ('None')
WHEN  ('?Panel1') ('None')
WHEN  ('?Property:Image') ('None')
WHEN  ('?Structure:Image') ('None')
WHEN  ('?UnCheck:Button') ('None')
WHEN  ('?szCallXMLFile') ('None')
WHEN  ('?szCategoryXMLFile') ('None')
WHEN  ('?szClassXMLFile') ('None')
WHEN  ('?szEnumXMLFile') ('None')
WHEN  ('?szExtraModuleXMLFile') ('None')
WHEN  ('?szMethodXMLFile') ('None')
WHEN  ('?szModuleXMLFile') ('None')
WHEN  ('?szNoteXMLFile') ('None')
WHEN  ('?szPropertyXMLFile') ('None')
WHEN  ('?szStructureXMLFile') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 14
WHEN  ('?CancelButton') ('')
WHEN  ('?Check:Button') ('')
WHEN  ('?LookupCallXMLFile') ('')
WHEN  ('?LookupCategoryXMLFile') ('')
WHEN  ('?LookupClassXMLFile') ('')
WHEN  ('?LookupEnumXMLFile') ('')
WHEN  ('?LookupExtraModuleXMLFile') ('')
WHEN  ('?LookupMethodXMLFile') ('')
WHEN  ('?LookupModuleXMLFile') ('')
WHEN  ('?LookupNoteXMLFile') ('')
WHEN  ('?LookupPropertyXMLFile') ('')
WHEN  ('?LookupStructureXMLFile') ('')
WHEN  ('?OkButton') ('')
WHEN  ('?UnCheck:Button') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 14
WHEN  ('?CancelButton') ()
WHEN  ('?Check:Button') ()
WHEN  ('?LookupCallXMLFile') ()
WHEN  ('?LookupCategoryXMLFile') ()
WHEN  ('?LookupClassXMLFile') ()
WHEN  ('?LookupEnumXMLFile') ()
WHEN  ('?LookupExtraModuleXMLFile') ()
WHEN  ('?LookupMethodXMLFile') ()
WHEN  ('?LookupModuleXMLFile') ()
WHEN  ('?LookupNoteXMLFile') ()
WHEN  ('?LookupPropertyXMLFile') ()
WHEN  ('?LookupStructureXMLFile') ()
WHEN  ('?OkButton') ()
WHEN  ('?UnCheck:Button') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 10
WHEN  ('?szCallXMLFile') ()
WHEN  ('?szCategoryXMLFile') ()
WHEN  ('?szClassXMLFile') ()
WHEN  ('?szEnumXMLFile') ()
WHEN  ('?szExtraModuleXMLFile') ()
WHEN  ('?szMethodXMLFile') ()
WHEN  ('?szModuleXMLFile') ()
WHEN  ('?szNoteXMLFile') ()
WHEN  ('?szPropertyXMLFile') ()
WHEN  ('?szStructureXMLFile') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 10
WHEN  ('?szCallXMLFile') ()
WHEN  ('?szCategoryXMLFile') ()
WHEN  ('?szClassXMLFile') ()
WHEN  ('?szEnumXMLFile') ()
WHEN  ('?szExtraModuleXMLFile') ()
WHEN  ('?szMethodXMLFile') ()
WHEN  ('?szModuleXMLFile') ()
WHEN  ('?szNoteXMLFile') ()
WHEN  ('?szPropertyXMLFile') ()
WHEN  ('?szStructureXMLFile') ()

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 10
WHEN  ('?szCallXMLFile') ('')
WHEN  ('?szCategoryXMLFile') ('')
WHEN  ('?szClassXMLFile') ('')
WHEN  ('?szEnumXMLFile') ('')
WHEN  ('?szExtraModuleXMLFile') ('')
WHEN  ('?szMethodXMLFile') ('')
WHEN  ('?szModuleXMLFile') ('')
WHEN  ('?szNoteXMLFile') ('')
WHEN  ('?szPropertyXMLFile') ('')
WHEN  ('?szStructureXMLFile') ('')

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 10
WHEN  ('?szCallXMLFile') ()
WHEN  ('?szCategoryXMLFile') ()
WHEN  ('?szClassXMLFile') ()
WHEN  ('?szEnumXMLFile') ()
WHEN  ('?szExtraModuleXMLFile') ()
WHEN  ('?szMethodXMLFile') ()
WHEN  ('?szModuleXMLFile') ()
WHEN  ('?szNoteXMLFile') ()
WHEN  ('?szPropertyXMLFile') ()
WHEN  ('?szStructureXMLFile') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 10
WHEN  ('?szCallXMLFile') ()
WHEN  ('?szCategoryXMLFile') ()
WHEN  ('?szClassXMLFile') ()
WHEN  ('?szEnumXMLFile') ()
WHEN  ('?szExtraModuleXMLFile') ()
WHEN  ('?szMethodXMLFile') ()
WHEN  ('?szModuleXMLFile') ()
WHEN  ('?szNoteXMLFile') ()
WHEN  ('?szPropertyXMLFile') ()
WHEN  ('?szStructureXMLFile') ()

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 10
WHEN  ('?szCallXMLFile') ('')
WHEN  ('?szCategoryXMLFile') ('')
WHEN  ('?szClassXMLFile') ('')
WHEN  ('?szEnumXMLFile') ('')
WHEN  ('?szExtraModuleXMLFile') ('')
WHEN  ('?szMethodXMLFile') ('')
WHEN  ('?szModuleXMLFile') ('')
WHEN  ('?szNoteXMLFile') ('')
WHEN  ('?szPropertyXMLFile') ('')
WHEN  ('?szStructureXMLFile') ('')

%PostLookupDuringValidate DEPEND %Control LONG TIMES 36
WHEN  ('') (1)
WHEN  ('?Call:Image') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?Category:Image') (1)
WHEN  ('?Check:Button') (1)
WHEN  ('?Class:Image') (1)
WHEN  ('?Enum:Image') (1)
WHEN  ('?ExtraModule:Image') (1)
WHEN  ('?LookupCallXMLFile') (1)
WHEN  ('?LookupCategoryXMLFile') (1)
WHEN  ('?LookupClassXMLFile') (1)
WHEN  ('?LookupEnumXMLFile') (1)
WHEN  ('?LookupExtraModuleXMLFile') (1)
WHEN  ('?LookupMethodXMLFile') (1)
WHEN  ('?LookupModuleXMLFile') (1)
WHEN  ('?LookupNoteXMLFile') (1)
WHEN  ('?LookupPropertyXMLFile') (1)
WHEN  ('?LookupStructureXMLFile') (1)
WHEN  ('?Method:Image') (1)
WHEN  ('?Module:Image') (1)
WHEN  ('?Note:Image') (1)
WHEN  ('?OkButton') (1)
WHEN  ('?Panel1') (1)
WHEN  ('?Property:Image') (1)
WHEN  ('?Structure:Image') (1)
WHEN  ('?UnCheck:Button') (1)
WHEN  ('?szCallXMLFile') (1)
WHEN  ('?szCategoryXMLFile') (1)
WHEN  ('?szClassXMLFile') (1)
WHEN  ('?szEnumXMLFile') (1)
WHEN  ('?szExtraModuleXMLFile') (1)
WHEN  ('?szMethodXMLFile') (1)
WHEN  ('?szModuleXMLFile') (1)
WHEN  ('?szNoteXMLFile') (1)
WHEN  ('?szPropertyXMLFile') (1)
WHEN  ('?szStructureXMLFile') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 36
WHEN  ('')TIMES 0
WHEN  ('?Call:Image')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Category:Image')TIMES 0
WHEN  ('?Check:Button')TIMES 0
WHEN  ('?Class:Image')TIMES 0
WHEN  ('?Enum:Image')TIMES 0
WHEN  ('?ExtraModule:Image')TIMES 0
WHEN  ('?LookupCallXMLFile')TIMES 0
WHEN  ('?LookupCategoryXMLFile')TIMES 0
WHEN  ('?LookupClassXMLFile')TIMES 0
WHEN  ('?LookupEnumXMLFile')TIMES 0
WHEN  ('?LookupExtraModuleXMLFile')TIMES 0
WHEN  ('?LookupMethodXMLFile')TIMES 0
WHEN  ('?LookupModuleXMLFile')TIMES 0
WHEN  ('?LookupNoteXMLFile')TIMES 0
WHEN  ('?LookupPropertyXMLFile')TIMES 0
WHEN  ('?LookupStructureXMLFile')TIMES 0
WHEN  ('?Method:Image')TIMES 0
WHEN  ('?Module:Image')TIMES 0
WHEN  ('?Note:Image')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Property:Image')TIMES 0
WHEN  ('?Structure:Image')TIMES 0
WHEN  ('?UnCheck:Button')TIMES 0
WHEN  ('?szCallXMLFile')TIMES 0
WHEN  ('?szCategoryXMLFile')TIMES 0
WHEN  ('?szClassXMLFile')TIMES 0
WHEN  ('?szEnumXMLFile')TIMES 0
WHEN  ('?szExtraModuleXMLFile')TIMES 0
WHEN  ('?szMethodXMLFile')TIMES 0
WHEN  ('?szModuleXMLFile')TIMES 0
WHEN  ('?szNoteXMLFile')TIMES 0
WHEN  ('?szPropertyXMLFile')TIMES 0
WHEN  ('?szStructureXMLFile')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 36
WHEN  ('')TIMES 0
WHEN  ('?Call:Image')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Category:Image')TIMES 0
WHEN  ('?Check:Button')TIMES 0
WHEN  ('?Class:Image')TIMES 0
WHEN  ('?Enum:Image')TIMES 0
WHEN  ('?ExtraModule:Image')TIMES 0
WHEN  ('?LookupCallXMLFile')TIMES 0
WHEN  ('?LookupCategoryXMLFile')TIMES 0
WHEN  ('?LookupClassXMLFile')TIMES 0
WHEN  ('?LookupEnumXMLFile')TIMES 0
WHEN  ('?LookupExtraModuleXMLFile')TIMES 0
WHEN  ('?LookupMethodXMLFile')TIMES 0
WHEN  ('?LookupModuleXMLFile')TIMES 0
WHEN  ('?LookupNoteXMLFile')TIMES 0
WHEN  ('?LookupPropertyXMLFile')TIMES 0
WHEN  ('?LookupStructureXMLFile')TIMES 0
WHEN  ('?Method:Image')TIMES 0
WHEN  ('?Module:Image')TIMES 0
WHEN  ('?Note:Image')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Property:Image')TIMES 0
WHEN  ('?Structure:Image')TIMES 0
WHEN  ('?UnCheck:Button')TIMES 0
WHEN  ('?szCallXMLFile')TIMES 0
WHEN  ('?szCategoryXMLFile')TIMES 0
WHEN  ('?szClassXMLFile')TIMES 0
WHEN  ('?szEnumXMLFile')TIMES 0
WHEN  ('?szExtraModuleXMLFile')TIMES 0
WHEN  ('?szMethodXMLFile')TIMES 0
WHEN  ('?szModuleXMLFile')TIMES 0
WHEN  ('?szNoteXMLFile')TIMES 0
WHEN  ('?szPropertyXMLFile')TIMES 0
WHEN  ('?szStructureXMLFile')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 36
WHEN  ('')TIMES 0
WHEN  ('?Call:Image')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Category:Image')TIMES 0
WHEN  ('?Check:Button')TIMES 0
WHEN  ('?Class:Image')TIMES 0
WHEN  ('?Enum:Image')TIMES 0
WHEN  ('?ExtraModule:Image')TIMES 0
WHEN  ('?LookupCallXMLFile')TIMES 0
WHEN  ('?LookupCategoryXMLFile')TIMES 0
WHEN  ('?LookupClassXMLFile')TIMES 0
WHEN  ('?LookupEnumXMLFile')TIMES 0
WHEN  ('?LookupExtraModuleXMLFile')TIMES 0
WHEN  ('?LookupMethodXMLFile')TIMES 0
WHEN  ('?LookupModuleXMLFile')TIMES 0
WHEN  ('?LookupNoteXMLFile')TIMES 0
WHEN  ('?LookupPropertyXMLFile')TIMES 0
WHEN  ('?LookupStructureXMLFile')TIMES 0
WHEN  ('?Method:Image')TIMES 0
WHEN  ('?Module:Image')TIMES 0
WHEN  ('?Note:Image')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Property:Image')TIMES 0
WHEN  ('?Structure:Image')TIMES 0
WHEN  ('?UnCheck:Button')TIMES 0
WHEN  ('?szCallXMLFile')TIMES 0
WHEN  ('?szCategoryXMLFile')TIMES 0
WHEN  ('?szClassXMLFile')TIMES 0
WHEN  ('?szEnumXMLFile')TIMES 0
WHEN  ('?szExtraModuleXMLFile')TIMES 0
WHEN  ('?szMethodXMLFile')TIMES 0
WHEN  ('?szModuleXMLFile')TIMES 0
WHEN  ('?szNoteXMLFile')TIMES 0
WHEN  ('?szPropertyXMLFile')TIMES 0
WHEN  ('?szStructureXMLFile')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 36
WHEN  ('')TIMES 0
WHEN  ('?Call:Image')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Category:Image')TIMES 0
WHEN  ('?Check:Button')TIMES 0
WHEN  ('?Class:Image')TIMES 0
WHEN  ('?Enum:Image')TIMES 0
WHEN  ('?ExtraModule:Image')TIMES 0
WHEN  ('?LookupCallXMLFile')TIMES 0
WHEN  ('?LookupCategoryXMLFile')TIMES 0
WHEN  ('?LookupClassXMLFile')TIMES 0
WHEN  ('?LookupEnumXMLFile')TIMES 0
WHEN  ('?LookupExtraModuleXMLFile')TIMES 0
WHEN  ('?LookupMethodXMLFile')TIMES 0
WHEN  ('?LookupModuleXMLFile')TIMES 0
WHEN  ('?LookupNoteXMLFile')TIMES 0
WHEN  ('?LookupPropertyXMLFile')TIMES 0
WHEN  ('?LookupStructureXMLFile')TIMES 0
WHEN  ('?Method:Image')TIMES 0
WHEN  ('?Module:Image')TIMES 0
WHEN  ('?Note:Image')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Property:Image')TIMES 0
WHEN  ('?Structure:Image')TIMES 0
WHEN  ('?UnCheck:Button')TIMES 0
WHEN  ('?szCallXMLFile')TIMES 0
WHEN  ('?szCategoryXMLFile')TIMES 0
WHEN  ('?szClassXMLFile')TIMES 0
WHEN  ('?szEnumXMLFile')TIMES 0
WHEN  ('?szExtraModuleXMLFile')TIMES 0
WHEN  ('?szMethodXMLFile')TIMES 0
WHEN  ('?szModuleXMLFile')TIMES 0
WHEN  ('?szNoteXMLFile')TIMES 0
WHEN  ('?szPropertyXMLFile')TIMES 0
WHEN  ('?szStructureXMLFile')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 11
WHEN  ('') ('AIBtn0')
WHEN  ('?Call:Image') ('AIBtn30')
WHEN  ('?Category:Image') ('AIBtn38')
WHEN  ('?Class:Image') ('AIBtn10')
WHEN  ('?Enum:Image') ('AIBtn26')
WHEN  ('?ExtraModule:Image') ('AIBtn2')
WHEN  ('?Method:Image') ('AIBtn18')
WHEN  ('?Module:Image') ('AIBtn6')
WHEN  ('?Note:Image') ('AIBtn34')
WHEN  ('?Property:Image') ('AIBtn14')
WHEN  ('?Structure:Image') ('AIBtn22')

%AIEnableMimicControl DEPEND %Control LONG TIMES 11
WHEN  ('') (1)
WHEN  ('?Call:Image') (1)
WHEN  ('?Category:Image') (1)
WHEN  ('?Class:Image') (1)
WHEN  ('?Enum:Image') (1)
WHEN  ('?ExtraModule:Image') (1)
WHEN  ('?Method:Image') (1)
WHEN  ('?Module:Image') (1)
WHEN  ('?Note:Image') (1)
WHEN  ('?Property:Image') (1)
WHEN  ('?Structure:Image') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 11
WHEN  ('') ('?Panel1')
WHEN  ('?Call:Image') ('?Panel1')
WHEN  ('?Category:Image') ('?Panel1')
WHEN  ('?Class:Image') ('?Panel1')
WHEN  ('?Enum:Image') ('?Panel1')
WHEN  ('?ExtraModule:Image') ('?Panel1')
WHEN  ('?Method:Image') ('?Panel1')
WHEN  ('?Module:Image') ('?Panel1')
WHEN  ('?Note:Image') ('?Panel1')
WHEN  ('?Property:Image') ('?Panel1')
WHEN  ('?Structure:Image') ('?Panel1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 11
WHEN  ('') (0)
WHEN  ('?Call:Image') (0)
WHEN  ('?Category:Image') (0)
WHEN  ('?Class:Image') (0)
WHEN  ('?Enum:Image') (0)
WHEN  ('?ExtraModule:Image') (0)
WHEN  ('?Method:Image') (0)
WHEN  ('?Module:Image') (0)
WHEN  ('?Note:Image') (0)
WHEN  ('?Property:Image') (0)
WHEN  ('?Structure:Image') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 11
WHEN  ('') (0)
WHEN  ('?Call:Image') (0)
WHEN  ('?Category:Image') (0)
WHEN  ('?Class:Image') (0)
WHEN  ('?Enum:Image') (0)
WHEN  ('?ExtraModule:Image') (0)
WHEN  ('?Method:Image') (0)
WHEN  ('?Module:Image') (0)
WHEN  ('?Note:Image') (0)
WHEN  ('?Property:Image') (0)
WHEN  ('?Structure:Image') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 11
WHEN  ('') (0)
WHEN  ('?Call:Image') (0)
WHEN  ('?Category:Image') (0)
WHEN  ('?Class:Image') (0)
WHEN  ('?Enum:Image') (0)
WHEN  ('?ExtraModule:Image') (0)
WHEN  ('?Method:Image') (0)
WHEN  ('?Module:Image') (0)
WHEN  ('?Note:Image') (0)
WHEN  ('?Property:Image') (0)
WHEN  ('?Structure:Image') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 11
WHEN  ('') (0)
WHEN  ('?Call:Image') (0)
WHEN  ('?Category:Image') (0)
WHEN  ('?Class:Image') (0)
WHEN  ('?Enum:Image') (0)
WHEN  ('?ExtraModule:Image') (0)
WHEN  ('?Method:Image') (0)
WHEN  ('?Module:Image') (0)
WHEN  ('?Note:Image') (0)
WHEN  ('?Property:Image') (0)
WHEN  ('?Structure:Image') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SETCURSOR(CURSOR:WAIT)
IF bExtraModuleQ
   ?ExtraModule:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?ExtraModule:Image)
   pQueue    &= ExtraModuleQ
   pFilename &= szExtraModuleXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?ExtraModule:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?ExtraModule:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?ExtraModule:Image)
END

IF bModuleQ
   ?Module:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Module:Image)
   pQueue    &= ModuleQ
   pFilename &= szModuleXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Module:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Module:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Module:Image)
END

IF bClassQ
   ?Class:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Class:Image)
   pQueue    &= ClassQ
   pFilename &= szClassXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Class:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Class:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Class:Image)
END

IF bPropertyQ
   ?Property:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Property:Image)
   pQueue    &= PropertyQ
   pFilename &= szPropertyXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Property:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Property:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Property:Image)
END

IF bMethodQ
   ?Method:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Method:Image)
   pQueue    &= MethodQ
   pFilename &= szMethodXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Method:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Method:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Method:Image)
END

IF bStructureQ
   ?Structure:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Structure:Image)
   pQueue    &= StructureQ
   pFilename &= szStructureXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Structure:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Structure:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Structure:Image)
END

IF bEnumQ
   ?Enum:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Enum:Image)
   pQueue    &= EnumQ
   pFilename &= szEnumXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Enum:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Enum:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Enum:Image)
END

IF bCallQ
   ?Call:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Call:Image)
   pQueue    &= CallQ
   pFilename &= szCallXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Call:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Call:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Call:Image)
END

IF bNoteQ
   ?Note:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Note:Image)
   pQueue    &= NoteQ
   pFilename &= szNoteXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Note:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Note:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Note:Image)
END

IF bCategoryQ
   ?Category:Image{PROP:Text} = '~RTARROW.ICO'
   DISPLAY(?Category:Image)
   pQueue    &= CategoryQ
   pFilename &= szCategoryXMLFile
   DO WriteXML
   IF LOC:XML_ExportRes = CPXMLErr:NoError
      ?Category:Image{PROP:Text} = '~OK.ICO'
   ELSE
      MESSAGE('Can''t export to XML file', 'Error', ICON:Hand, BUTTON:OK)
      ?Category:Image{PROP:Text} = '~CANCEL.ICO'
   END
   DISPLAY(?Category:Image)
END

SETCURSOR()
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
WHEN '?bCallQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF bCallQ
   ENABLE(?szCallXMLFile,?LookupCallXMLFile)
ELSE
   DISABLE(?szCallXMLFile,?LookupCallXMLFile)
END
[END]
[END]
WHEN '?bExtraModuleQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bExtraModuleQ
   ENABLE(?szExtraModuleXMLFile,?LookupExtraModuleXMLFile)
ELSE
   DISABLE(?szExtraModuleXMLFile,?LookupExtraModuleXMLFile)
END
[END]
[END]
WHEN '?bModuleQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bModuleQ
   ENABLE(?szModuleXMLFile,?LookupModuleXMLFile)
ELSE
   DISABLE(?szModuleXMLFile,?LookupModuleXMLFile)
END
[END]
[END]
WHEN '?bClassQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bClassQ
   ENABLE(?szClassXMLFile,?LookupClassXMLFile)
ELSE
   DISABLE(?szClassXMLFile,?LookupClassXMLFile)
END
[END]
[END]
WHEN '?bPropertyQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bPropertyQ
   ENABLE(?szPropertyXMLFile,?LookupPropertyXMLFile)
ELSE
   DISABLE(?szPropertyXMLFile,?LookupPropertyXMLFile)
END
[END]
[END]
WHEN '?bMethodQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bMethodQ
   ENABLE(?szMethodXMLFile,?LookupMethodXMLFile)
ELSE
   DISABLE(?szMethodXMLFile,?LookupMethodXMLFile)
END
[END]
[END]
WHEN '?bStructureQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bStructureQ
   ENABLE(?szStructureXMLFile,?LookupStructureXMLFile)
ELSE
   DISABLE(?szStructureXMLFile,?LookupStructureXMLFile)
END
[END]
[END]
WHEN '?bEnumQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bEnumQ
   ENABLE(?szEnumXMLFile,?LookupEnumXMLFile)
ELSE
   DISABLE(?szEnumXMLFile,?LookupEnumXMLFile)
END
[END]
[END]
WHEN '?bNoteQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bNoteQ
   ENABLE(?szNoteXMLFile,?LookupNoteXMLFile)
ELSE
   DISABLE(?szNoteXMLFile,?LookupNoteXMLFile)
END
[END]
[END]
WHEN '?bCategoryQ'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF bCategoryQ
   ENABLE(?szCategoryXMLFile,?LookupCategoryXMLFile)
ELSE
   DISABLE(?szCategoryXMLFile,?LookupCategoryXMLFile)
END
[END]
[END]
WHEN '?UnCheck:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
bExtraModuleQ = 0
bModuleQ = 0
bClassQ = 0
bPropertyQ = 0
bMethodQ = 0
bStructureQ = 0
bEnumQ = 0
bCallQ = 0
bNoteQ = 0
bCategoryQ = 0
DISPLAY()
[END]
[END]
WHEN '?Check:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
bExtraModuleQ = 1
bModuleQ = 1
bClassQ = 1
bPropertyQ = 1
bMethodQ = 1
bStructureQ = 1
bEnumQ = 1
bCallQ = 1
bNoteQ = 1
bCategoryQ = 1
DISPLAY()
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
szIndent        CSTRING(256),AUTO
XMLFilename     CSTRING(256),STATIC,AUTO
XMLFile         FILE,DRIVER('DOS'),NAME(XMLFilename),PRE(XML),THREAD,CREATE
Record            RECORD
Buffer              STRING(4000)
                  END
                END
XMLFileQueue    QUEUE,PRE(afq)
Record            LIKE(XMLFile.Record)
Level             LONG
                END

xExch           XMLExchange     !object to provide export/import operations
pQueue          &QUEUE,AUTO
pFilename       &CSTRING,AUTO
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
szExtraModuleXMLFile = 'extramodule.xml'
szModuleXMLFile      = 'module.xml'
szClassXMLFile       = 'class.xml'
szPropertyXMLFile    = 'property.xml'
szMethodXMLFile      = 'method.xml'
szStructureXMLFile   = 'structure.xml'
szEnumXMLFile        = 'equate.xml'
szCallXMLFile        = 'call.xml'
szNoteXMLFile        = 'note.xml'
szCategoryXMLFile    = 'category.xml'
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
!XPUnCheck:Button.Init(?UnCheck:Button, 0, 0)
!XPUnCheck:Button.SetIconSize(32, 32)
!XPCheck:Button.Init(?Check:Button, 0, 0)
!XPCheck:Button.SetIconSize(32, 32)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8030
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END

?bExtraModuleQ{PROP:Color} = ?Panel1{PROP:Fill}
?bModuleQ{PROP:Color} = ?Panel1{PROP:Fill}
?bClassQ{PROP:Color} = ?Panel1{PROP:Fill}
?bPropertyQ{PROP:Color} = ?Panel1{PROP:Fill}
?bMethodQ{PROP:Color} = ?Panel1{PROP:Fill}
?bStructureQ{PROP:Color} = ?Panel1{PROP:Fill}
?bEnumQ{PROP:Color} = ?Panel1{PROP:Fill}
?bCallQ{PROP:Color} = ?Panel1{PROP:Fill}
?bNoteQ{PROP:Color} = ?Panel1{PROP:Fill}
?bCategoryQ{PROP:Color} = ?Panel1{PROP:Fill}

?ExtraModule:Image{PROP:Text} = '~BLANK.ICO'
?Module:Image{PROP:Text} = '~BLANK.ICO'
?Class:Image{PROP:Text} = '~BLANK.ICO'
?Property:Image{PROP:Text} = '~BLANK.ICO'
?Method:Image{PROP:Text} = '~BLANK.ICO'
?Structure:Image{PROP:Text} = '~BLANK.ICO'
?Enum:Image{PROP:Text} = '~BLANK.ICO'
?Call:Image{PROP:Text} = '~BLANK.ICO'
?Note:Image{PROP:Text} = '~BLANK.ICO'
?Category:Image{PROP:Text} = '~BLANK.ICO'
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Export_Database_To_XML.htm')
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG
J   LONG
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
WriteXML    ROUTINE
  DATA
xmlNav      &XMLNavigator,AUTO
xmlDoc      &Document,AUTO
szTarget    CSTRING(65)
szData      CSTRING(256)
pi          &ProcessingInstruction,AUTO
cmnt        &Comment,AUTO
elem        &Element,AUTO
qWrp        QueueWrapper    !wrapper object
I           LONG,AUTO
J           LONG,AUTO
tmpBuffer   &STRING,AUTO
fileSize    LONG,AUTO
bufferSize  LONG,AUTO
filePointer LONG,AUTO
bytesRead   LONG,AUTO
bSpecialCase    BYTE(FALSE)

  CODE
  LOC:XML_ExportRes = xExch.CreateXML()                     ! Create a new XML Document
  IF LOC:XML_ExportRes = CPXMLErr:NoError
     IF glo:szXmlStyleSheet
        xmlNav &= xExch.GetNavigator()
        xmlDoc &= xExch.GetDocument()
        szTarget = 'xml-stylesheet'
        szData = 'type="text/xsl" href="' & glo:szXmlStyleSheet & '"'
        pi  &= xmlDoc.createProcessingInstruction(szTarget, szData)
        IF ~xmlNav.GoToRoot()
           xmlNav.SetXMLExchangeNode()
           elem &= xExch.GetNode()
           xmlDoc.insertBefore(pi, elem)
        END

     END

     IF FALSE
        szData = 'DOCTYPE abcview PUBLIC "-//devuna.com//abcview DTD//EN" "http://www.devuna.com/abcview.dtd"'
        cmnt &= xmlDoc.createComment(szData)
        IF ~xmlNav.GoToRoot()
           xmlNav.SetXMLExchangeNode()
           elem &= xExch.GetNode()
           xmlDoc.insertBefore(cmnt, elem)
        END
     END

     LOC:XML_ExportRes = qWrp.Init(pQueue)                  ! Initialize the wrapper object
     IF LOC:XML_ExportRes = CPXMLErr:NoError
        LOC:XML_ExportRes = xExch.toXML(qWrp)               ! put data from Queue to XML
        IF LOC:XML_ExportRes = CPXMLErr:NoError
           LOC:XML_ExportRes = xExch.saveAs(pFilename)      ! save XML doc to file
        END
     END
  END


  XMLFilename = pFilename
  OPEN(XMLFile)
  SET(XMLFile)

  !allocate buffer
  FileSize = BYTES(XMLFile) * 2
  BufferSize = FileSize * 2
  tmpBuffer &= NEW(STRING(BufferSize))         ! Create a buffer to hold the file

  filePointer = 1
  bytesRead = 0
  J = 0
  LOOP
    GET(XMLFile,filePointer)
    IF ~ERRORCODE()
       bytesRead = BYTES(XMLFile)
       filePointer += bytesRead
       LOOP I = 1 to bytesRead-1
          !<?xml version="1.0" encoding="UTF-8"?>
          IF J = 0  !first read
             tmpBuffer[1 : 43] = '<<?xml version="1.0" encoding="ISO-8859-1"?>'
             J = 43
             I = 39
          END
          IF I = 1 AND bSpecialCase = TRUE AND XMLFile.buffer[I] = '<<'
             J += 1
             tmpBuffer[J : J+1] = '<13><10>'
             J += 1
          END
          IF XMLFile.buffer[I : I+1] = '><<'
             J += 1
             tmpBuffer[J : J+2] = '><13><10>'
             J += 2
          ELSE
             J += 1
             tmpBuffer[J] = XMLFile.buffer[I]
          END
       END
       J += 1
       tmpBuffer[J] = XMLFile.buffer[I]
       IF tmpBuffer[J] = '>'
          bSpecialCase = TRUE
       END
    ELSE
       BREAK
    END
  END
  CLOSE(XMLFile)
  CREATE(XMLFile)
  OPEN(XMLFile)
  I = 1
  LOOP WHILE J > 0
     IF J <= SIZE(XMLFile.Buffer)
        XMLFile.Buffer = tmpBuffer[I : I+J]
        J = 0
     ELSE
        XMLFile.Buffer = tmpBuffer[I : I+SIZE(XMLFile.Buffer)]
        J -= SIZE(XMLFile.Buffer)
     END
     ADD(XMLFile)
     I += SIZE(XMLFile.Buffer)
  END
  CLOSE(XMLFile)
  DISPOSE(tmpBuffer)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 14
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Export_Database_To_XML.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 13
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[ADDITION]
NAME ABC DOSFileLookup
[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szExtraModuleXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szExtraModuleXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ExtraModuleXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 4
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szModuleXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szModuleXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ModuleXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 5
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szClassXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szClassXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ClassXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 6
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szPropertyXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szPropertyXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('PropertyXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 7
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szMethodXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szMethodXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('MethodXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 8
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szStructureXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szStructureXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('StructureXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 9
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szEnumXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szEnumXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('EnumXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 10
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szCallXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szCallXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('CallXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 11
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szNoteXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szNoteXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NoteXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 12
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select XML File')
%DOSFileField FIELD  (szCategoryXMLFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('!szCategoryXMLFile')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('XML Files (*.XML)')
%DOSMask DEFAULT  ('*.XML')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files (*.*)')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('CategoryXMLFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('?Panel1')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[CALLS]
srcNormalizeString
[WINDOW]
Window  WINDOW('Export Database To XML'),AT(,,260,176),FONT(,,COLOR:Black,,CHARSET:ANSI),DOUBLE, |
          TILED,CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          PANEL,AT(4,4,252,148),USE(?Panel1),FILL(COLOR:BTNFACE),#ORIG(?Panel1),#ORDINAL(1)
          IMAGE('ok.ico'),AT(6,10,14,10),USE(?ExtraModule:Image),CENTERED,#ORIG(?Image1),#ORDINAL(2)
          CHECK('Additional Modules'),AT(22,10),USE(bExtraModuleQ),#ORIG(bExtraModuleQ),#ORDINAL(3)
          ENTRY(@s255),AT(98,10,140,10),USE(szExtraModuleXMLFile),COLOR(COLOR:White),#ORIG(szExtraModuleXMLFile), |
            #ORDINAL(4)
          BUTTON('...'),AT(241,10,10,10),USE(?LookupExtraModuleXMLFile),#ORIG(?LookupFile), |
            #SEQ(3),#ORDINAL(5)
          IMAGE('cancel.ico'),AT(6,24,14,10),USE(?Module:Image),CENTERED,#ORIG(?Image1),#ORDINAL(6)
          CHECK('Modules'),AT(22,24),USE(bModuleQ),#ORIG(bModuleQ),#ORDINAL(7)
          ENTRY(@s255),AT(98,24,140,10),USE(szModuleXMLFile),COLOR(COLOR:White),#ORIG(szModuleXMLFile), |
            #ORDINAL(8)
          BUTTON('...'),AT(241,24,10,10),USE(?LookupModuleXMLFile),#ORIG(?LookupFile),#SEQ(4), |
            #ORDINAL(9)
          IMAGE('blank.ico'),AT(6,38,14,10),USE(?Class:Image),CENTERED,#ORIG(?Image1),#ORDINAL(10)
          CHECK('Classes'),AT(22,38),USE(bClassQ),#ORIG(bClassQ),#ORDINAL(11)
          ENTRY(@s255),AT(98,38,140,10),USE(szClassXMLFile),COLOR(COLOR:White),#ORIG(szClassXMLFile), |
            #ORDINAL(12)
          BUTTON('...'),AT(241,38,10,10),USE(?LookupClassXMLFile),#ORIG(?LookupFile),#SEQ(5), |
            #ORDINAL(13)
          IMAGE('rtarrow.ico'),AT(6,52,14,10),USE(?Property:Image),CENTERED,#ORIG(?Image1), |
            #ORDINAL(14)
          CHECK('Properties'),AT(22,52),USE(bPropertyQ),#ORIG(bPropertyQ),#ORDINAL(15)
          ENTRY(@s255),AT(98,52,140,10),USE(szPropertyXMLFile),COLOR(COLOR:White),#ORIG(szPropertyXMLFile), |
            #ORDINAL(16)
          BUTTON('...'),AT(241,52,10,10),USE(?LookupPropertyXMLFile),#ORIG(?LookupFile),#SEQ(6), |
            #ORDINAL(17)
          IMAGE('ok.ico'),AT(6,66,14,10),USE(?Method:Image),CENTERED,#ORIG(?Image1),#ORDINAL(18)
          CHECK('Methods'),AT(22,66),USE(bMethodQ),#ORIG(bMethodQ),#ORDINAL(19)
          ENTRY(@s255),AT(98,66,140,10),USE(szMethodXMLFile),COLOR(COLOR:White),#ORIG(szMethodXMLFile), |
            #ORDINAL(20)
          BUTTON('...'),AT(241,66,10,10),USE(?LookupMethodXMLFile),#ORIG(?LookupFile),#SEQ(7), |
            #ORDINAL(21)
          IMAGE('ok.ico'),AT(6,80,14,10),USE(?Structure:Image),CENTERED,#ORIG(?Image1),#ORDINAL(22)
          CHECK('Structures'),AT(22,80),USE(bStructureQ),#ORIG(bStructureQ),#ORDINAL(23)
          ENTRY(@s255),AT(98,80,140,10),USE(szStructureXMLFile),COLOR(COLOR:White),#ORIG(szStructureXMLFile), |
            #ORDINAL(24)
          BUTTON('...'),AT(241,80,10,10),USE(?LookupStructureXMLFile),#ORIG(?LookupFile),#SEQ(8), |
            #ORDINAL(25)
          IMAGE('ok.ico'),AT(6,94,14,10),USE(?Enum:Image),CENTERED,#ORIG(?Image1),#ORDINAL(26)
          CHECK('Equates'),AT(22,94),USE(bEnumQ),#ORIG(bEnumQ),#ORDINAL(27)
          ENTRY(@s255),AT(98,94,140,10),USE(szEnumXMLFile),COLOR(COLOR:White),#ORIG(szEnumXMLFile), |
            #ORDINAL(28)
          BUTTON('...'),AT(241,94,10,10),USE(?LookupEnumXMLFile),#ORIG(?LookupFile),#SEQ(9), |
            #ORDINAL(29)
          IMAGE('ok.ico'),AT(6,108,14,10),USE(?Call:Image),CENTERED,#ORIG(?Image1),#ORDINAL(30)
          CHECK('Calls'),AT(22,108),USE(bCallQ),#ORIG(bCallQ),#ORDINAL(31)
          ENTRY(@s255),AT(98,108,140,10),USE(szCallXMLFile),COLOR(COLOR:White),#ORIG(szCallXMLFile), |
            #ORDINAL(32)
          BUTTON('...'),AT(241,108,10,10),USE(?LookupCallXMLFile),#ORIG(?LookupFile),#SEQ(10), |
            #ORDINAL(33)
          IMAGE('ok.ico'),AT(6,122,14,10),USE(?Note:Image),CENTERED,#ORIG(?Image1),#ORDINAL(34)
          CHECK('Notes'),AT(22,122),USE(bNoteQ),#ORIG(bNoteQ),#ORDINAL(35)
          ENTRY(@s255),AT(98,122,140,10),USE(szNoteXMLFile),COLOR(COLOR:White),#ORIG(szNoteXMLFile), |
            #ORDINAL(36)
          BUTTON('...'),AT(241,122,10,10),USE(?LookupNoteXMLFile),#ORIG(?LookupFile),#SEQ(11), |
            #ORDINAL(37)
          IMAGE('ok.ico'),AT(6,136,14,10),USE(?Category:Image),CENTERED,#ORIG(?Image1),#ORDINAL(38)
          CHECK('Categories'),AT(22,136),USE(bCategoryQ),#ORIG(bCategory),#ORDINAL(39)
          ENTRY(@s255),AT(98,136,140,10),USE(szCategoryXMLFile),COLOR(COLOR:White),#ORIG(szCategoryXMLFile), |
            #ORDINAL(40)
          BUTTON('...'),AT(241,136,10,10),USE(?LookupCategoryXMLFile),#ORIG(?LookupFile),#SEQ(12), |
            #ORDINAL(41)
          BUTTON('Exp&ort'),AT(161,157,45,14),USE(?OkButton),DEFAULT,#ORDINAL(42)
          BUTTON('&Cancel'),AT(211,157,45,14),USE(?CancelButton),STD(STD:Close),#ORDINAL(43)
          BUTTON,AT(4,157,14,14),USE(?UnCheck:Button),ICON('checkno.ico'),TIP('Clear All'), |
            #ORIG(?Button13),#ORDINAL(44)
          BUTTON,AT(20,157,14,14),USE(?Check:Button),ICON('checkyes.ico'),TIP('Select All'), |
            #ORIG(?Button14),#ORDINAL(45)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcNormalizeString
PROTOTYPE '(STRING s),STRING'
PARAMETERS '(s)'
[COMMON]
DESCRIPTION 'Normalize String for XML Output'
FROM ABC Source
MODIFIED '2003/05/30' '14:53:10'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
pAmp        LONG,AUTO
sz          CSTRING(256),AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !look for and replace special characters
  sz = CLIP(LEFT(s))
  pAmp = INSTRING('&',sz)
  LOOP WHILE pAmp <> 0
     sz = sz[1 : pAmp] & 'amp;' & sz[pamp+1 : LEN(sz)]
     pAmp = INSTRING('&',sz,1,pAmp+1)
  END
  pAmp = INSTRING('<<',sz)
  LOOP WHILE pAmp <> 0
     sz = sz[1 : pAmp-1] & '&lt;' & sz[pamp+1 : LEN(sz)]
     pAmp = INSTRING('<<',sz)
  END
  pAmp = INSTRING('>',sz)
  LOOP WHILE pAmp <> 0
     sz = sz[1 : pAmp-1] & '&gt;' & sz[pamp+1 : LEN(sz)]
     pAmp = INSTRING('>',sz)
  END
  RETURN(sz)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcExportTreeToXML
[COMMON]
FROM ABC Source
MODIFIED '2017/07/02' ' 9:37:33'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
szIndent        CSTRING(256),AUTO
XMLFilename     CSTRING(256),STATIC,AUTO
XMLFile         FILE,DRIVER('ASCII'),NAME(XMLFilename),PRE(XML),THREAD,CREATE
Record            RECORD
Buffer              STRING(4000)
                  END
                END
XMLFileQueue    QUEUE,PRE(afq)
Record            LIKE(XMLFile.Record)
Level             LONG
                END
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ExportToXML ROUTINE
!---------------------------------------------------------------------------
  DATA
I               LONG,AUTO
J               LONG,AUTO
pAmp            LONG,AUTO

  CODE
  SORT(ModuleQ,+ModuleQ.lModuleId)
  SORT(ClassQ,+ClassQ.szClassSort)
  SORT(PropertyQ,+PropertyQ.szPropertySort)
  SORT(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodName,+MethodQ.szPrototype)
  SORT(StructureQ,+StructureQ.lModuleId,+StructureQ.szStructureSort,+StructureQ.szDataLabel)

  CREATE(XMLFile)
  OPEN(XMLFile)

  ! write the header
  XMLFile.Record = '<<?xml version="1.0" encoding="ISO-8859-1"?>'
  ADD(XMLFile)

  IF glo:szXmlStyleSheet <> ''
     XMLFile.Record = '<<?xml-stylesheet type="text/xsl" href="' & glo:szXmlStyleSheet & '"?>'
     ADD(XMLFile)
  END

  XMLFile.Record = '<<!DOCTYPE abcview PUBLIC "-//devuna.com//abcview DTD//EN" "http://www.devuna.com/abcview.dtd">'
  ADD(XMLFile)
  XMLFile.Record = '<<abcview>'
  ADD(XMLFile)

  ! dump the tree
  J = RECORDS(TreeQ)
  LOOP I = 1 TO J
     GET(TreeQ,I)

     !adjust indentation
     IF ABS(TreeQ.lLevel) = 1
        szIndent = ''
     ELSE
        szIndent = SUB(ALL(' '),1,(ABS(TreeQ.lLevel)-1)*3)
     END

     !look for and replace special characters
     TreeQ.szText = srcNormalizeString(TreeQ.szText)

     !write the ascii text
     CASE glo:bCurrentView
     OF VIEW:CLASSES
        DO ProcessClassView
     OF VIEW:INTERFACES
        DO ProcessInterfaceView
     OF VIEW:CALLS
        IF I = 1
           !create root document
           XMLFile.Record = '<<methods>'
           ADD(XMLFile)
           XMLFileQueue.Record = '<</methods>'
           XMLFileQueue.Level = 0
           ADD(XMLFileQueue,0)
        END
        DO ProcessCallTreeView

     OF VIEW:STRUCTURES
        IF I = 1
           !create root document (tree may contain multiple definitions)
           XMLFile.Record = '<<structures>'
           ADD(XMLFile)
           XMLFileQueue.Record = '<</structures>'
           XMLFileQueue.Level = 1
           ADD(XMLFileQueue,1)
        END
        DO ProcessStructureView
     OF VIEW:EQUATES
        DO ProcessEquatesView
     END
  END
  J = RECORDS(XMLFileQueue)
  LOOP I = 1 TO J
     GET(XMLFileQueue,I)
     XMLFile.Record = XMLFileQueue.Record
     ADD(XMLFile)
  END
  XMLFile.Record = '<</abcview>'
  ADD(XMLFile)
  FREE(XMLFileQueue)
  CLOSE(XMLFile)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessClassView    ROUTINE
  DATA
szObject    CSTRING(33)

  CODE
  CASE TreeQ:wIcon
    OF   ICON:CLASS             |
    OROF ICON:NEWCLASS          |
    OROF ICON:INTERFACEFOLDER   |
    OROF ICON:NEWINTERFACEFOLDER
       LOOP WHILE RECORDS(XMLFileQueue) > 1
          GET(XMLFileQueue,1)
          IF XMLFileQueue.Level >= ABS(TreeQ.lLevel)
             XMLFile.Record = XMLFileQueue.Record
             ADD(XMLFile)
             DELETE(XMLFileQueue)
          ELSE
             BREAK
          END
       END

       CASE TreeQ:wIcon
       OF   ICON:CLASS     |
       OROF ICON:NEWCLASS
          ClassQ.szClassSort = UPPER(TreeQ.szClassName)
          GET(ClassQ,+ClassQ.szClassSort)
          IF ERRORCODE()
             ClassQ.szParentClassName = ''
          END
          IF ClassQ.szParentClassName
             XMLFile.Record = szIndent & |
                             '<<class name="' & TreeQ.szClassName & |
                             '" parentname="' & ClassQ.szParentClassName & '">'
          ELSE
             XMLFile.Record = szIndent & '<<class name="' & TreeQ.szClassName & '">'
          END
          ADD(XMLFile)
          XMLFileQueue.Record = szIndent & '<</class>'
          XMLFileQueue.Level = ABS(TreeQ.lLevel)
          ADD(XMLFileQueue,1)


       OF   ICON:INTERFACEFOLDER    |
       OROF ICON:NEWINTERFACEFOLDER
          IF TreeQ.szSearch = ''
             XMLFile.Record = szIndent & '<<' & LOWER(TreeQ.szText) & '>'
             ADD(XMLFile)
             XMLFileQueue.Record = szIndent & '<</' & LOWER(TreeQ.szText) & '>'
             XMLFileQueue.Level = ABS(TreeQ.lLevel)
             ADD(XMLFileQueue,1)
          ELSE
             ClassQ.szClassSort = UPPER(TreeQ.szText)
             GET(ClassQ,+ClassQ.szClassSort)
             IF ERRORCODE()
                ClassQ.szParentClassName = ''
             END
             IF ClassQ.szParentClassName
                XMLFile.Record = szIndent & |
                                '<<interface name="' & TreeQ.szText & |
                                '" parentname="' & ClassQ.szParentClassName & '">'
             ELSE
                XMLFile.Record = szIndent & '<<interface name="' & TreeQ.szText & '">'
             END
             ADD(XMLFile)
             XMLFileQueue.Record = szIndent & '<</interface>'
             XMLFileQueue.Level = ABS(TreeQ.lLevel)
             ADD(XMLFileQueue,1)
          END
       END


    OF ICON:PROPERTYFOLDER      |
    OROF ICON:METHODFOLDER
       LOOP WHILE RECORDS(XMLFileQueue) > 1
          GET(XMLFileQueue,1)
          IF XMLFileQueue.Level >= ABS(TreeQ.lLevel)
             XMLFile.Record = XMLFileQueue.Record
             ADD(XMLFile)
             DELETE(XMLFileQueue)
          ELSE
             BREAK
          END
       END
       XMLFile.Record = szIndent & '<<' & LOWER(TreeQ.szText) & '>'
       ADD(XMLFile)
       XMLFileQueue.Record = szIndent & '<</' & LOWER(TreeQ.szText) & '>'
       XMLFileQueue.Level = ABS(TreeQ.lLevel)
       ADD(XMLFileQueue,1)
  ELSE
      DO ProcessCommonElements
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessInterfaceView    ROUTINE
  CASE TreeQ:wIcon
    OF   ICON:INTERFACE          |
    OROF ICON:INTERFACEFOLDER    |
    OROF ICON:NEWINTERFACEFOLDER
       LOOP WHILE RECORDS(XMLFileQueue) > 1
          GET(XMLFileQueue,1)
          IF XMLFileQueue.Level >= ABS(TreeQ.lLevel)
             XMLFile.Record = XMLFileQueue.Record
             ADD(XMLFile)
             DELETE(XMLFileQueue)
          ELSE
             BREAK
          END
       END

       ClassQ.szClassSort = UPPER(TreeQ.szClassName)
       GET(ClassQ,+ClassQ.szClassSort)
       IF ERRORCODE()
          ClassQ.szParentClassName = ''
       END
       IF ClassQ.szParentClassName
          XMLFile.Record = szIndent & |
                          '<<interface name="' & TreeQ.szClassName & |
                          '" parentname="' & ClassQ.szParentClassName & '">'
       ELSE
          XMLFile.Record = szIndent & '<<interface name="' & TreeQ.szClassName & '">'
       END
       ADD(XMLFile)
       XMLFileQueue.Record = szIndent & '<</interface>'
       XMLFileQueue.Level = ABS(TreeQ.lLevel)
       ADD(XMLFileQueue,1)
  ELSE
      DO ProcessCommonElements
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessCallTreeView    ROUTINE
  DATA
I                   LONG
J                   LONG
K                   LONG
ThisLevel           LONG
NextLevel           LONG
ptrToken            LONG
szDefinitionModule  CSTRING(256)
szRootModule        CSTRING(256),AUTO

  CODE
  ThisLevel = ABS(TreeQ.lLevel)
  J = RECORDS(TreeQ)
  I = POINTER(TreeQ)
  IF I < J
     GET(TreeQ,I+1)
     NextLevel = ABS(TreeQ.lLevel)
     GET(TreeQ,I)
  ELSE
     NextLevel = 0
  END

  J = POINTER(TreeQ)
  K = ABS(TreeQ.lLevel)
  LOOP I = J TO 1 BY -1
    GET(TreeQ,I)
    IF ABS(TreeQ.lLevel) < K
       BREAK
    END
  END
  ModuleQ.lModuleId = TreeQ.lModuleId
  GET(ModuleQ,+ModuleQ.lModuleId)
  ASSERT(~ERRORCODE())
  IF ERRORCODE()
     szRootModule = ''
  ELSE
     szRootModule = CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName)
  END
  GET(TreeQ,J)

  CASE TreeQ:wIcon
    OF ICON:METHOD
       IF TreeQ.lModuleId = 0
          szDefinitionModule = ''
       ELSE
          ModuleQ.lModuleId = TreeQ.lModuleId
          GET(ModuleQ,+ModuleQ.lModuleId)
          ASSERT(~ERRORCODE())
          IF ERRORCODE()
             szDefinitionModule = ''
          ELSE
             szDefinitionModule = CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName)
          END
       END
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,+ModuleQ.lModuleId)
       ClassQ.szClassSort = UPPER(TreeQ.szClassName)
       GET(ClassQ,+ClassQ.szClassSort)
       MethodQ.lClassID = ClassQ.lClassId
       MethodQ.szMethodName = TreeQ:szText
       MethodQ.szPrototype = TreeQ.szPrototype
       GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodName,+MethodQ.szPrototype)

       XMLFile.Record = szIndent & '<<method'                       & |
                        ' name="' & MethodQ.szMethodName & '"'      & |
                        ' prototype="' & srcNormalizeString(MethodQ.szPrototype) & '"'  & |
                        ' private="' & CHOOSE(MethodQ.bPrivate=TRUE,'TRUE','FALSE') & '"'       & |
                        ' protected="' & CHOOSE(MethodQ.bProtected=TRUE,'TRUE','FALSE') & '"'   & |
                        ' virtual="' & CHOOSE(MethodQ.bVirtual=TRUE,'TRUE','FALSE') & '"'       & |
                        ' declarationmodule="' & CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName) & '"'    & |
                        ' declarationlinenumber="' & MethodQ.lLineNum & '"'

       IF MethodQ.lSourceLine
          XMLFile.Record = CLIP(XMLFile.Record) & |
                        ' definitionmodule="' & szDefinitionModule & '"'    & |
                        ' definitionlinenumber="' & MethodQ.lSourceLine & '"'
       END

       IF TreeQ.lOccurranceLine
          XMLFile.Record = CLIP(XMLFile.Record) & |
                        ' sourcemodule="' & szRootModule & '"'    & |
                        ' sourcelinenumber="' & TreeQ.lOccurranceLine & '"'
       END

       IF NextLevel > ThisLevel
          XMLFile.Record = CLIP(XMLFile.Record) & '>'
          ADD(XMLFile)
          XMLFileQueue.Record = szIndent & '<</method>'
          XMLFileQueue.Level = ABS(TreeQ.lLevel)
          ADD(XMLFileQueue,1)
       ELSE
          XMLFile.Record = CLIP(XMLFile.Record) & '>' & MethodQ.szMethodName & '<</method>'
          ADD(XMLFile)
          GET(XMLFileQueue,1)
          IF ~ERRORCODE()
             LOOP WHILE XMLFileQueue.Level >= NextLevel
                XMLFile.Record = XMLFileQueue.Record
                ADD(XMLFile)
                DELETE(XMLFileQueue)
                GET(XMLFileQueue,1)
                IF ERRORCODE()
                   BREAK
                END
             END
          END
       END


    OF   ICON:INTERFACE          |
    OROF ICON:INTERFACEFOLDER    |
    OROF ICON:NEWINTERFACEFOLDER
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessStructureView    ROUTINE
  CASE TreeQ:wIcon
    OF ICON:STRUCTUREFOLDER
       LOOP WHILE RECORDS(XMLFileQueue) > 1
          GET(XMLFileQueue,1)
          IF XMLFileQueue.Level >= ABS(TreeQ.lLevel)
             XMLFile.Record = XMLFileQueue.Record
             ADD(XMLFile)
             DELETE(XMLFileQueue)
          ELSE
             BREAK
          END
       END

       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,+ModuleQ.lModuleId)
       ClassQ.szClassSort = UPPER(TreeQ.szClassName)
       GET(ClassQ,+ClassQ.szClassSort)
       IF ERRORCODE()
          ClassQ.szParentClassName = ''
       END
       XMLFile.Record = szIndent & |
                        '<<structure name="' & TreeQ.szClassName & '"'      & |
                        ' private="' & CHOOSE(StructureQ.bPrivate=TRUE,'TRUE','FALSE') & '"'                & |
                        ' declarationmodule="' & CLIP(ModuleQ:szModulePath & ModuleQ:szModuleName) & '"'    & |
                        ' declarationlinenumber="' & TreeQ.lLineNum & '"'   & |
                        '>'
       ADD(XMLFile)
       XMLFileQueue.Record = szIndent & '<</structure>'
       XMLFileQueue.Level = ABS(TreeQ.lLevel)
       ADD(XMLFileQueue,1)
  ELSE
      DO ProcessCommonElements
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessEquatesView  ROUTINE
  CASE TreeQ:wIcon
    OF ICON:EQUATEFOLDER       |
  OROF ICON:ENUMFOLDER
       LOOP WHILE RECORDS(XMLFileQueue) > 1
          GET(XMLFileQueue,1)
          IF XMLFileQueue.Level >= ABS(TreeQ.lLevel)
             XMLFile.Record = XMLFileQueue.Record
             ADD(XMLFile)
             DELETE(XMLFileQueue)
          ELSE
             BREAK
          END
       END

       IF TreeQ.szClassName = '*EQUATES*'
          XMLFile.Record = szIndent & |
                           '<<enumeration name="' & TreeQ.szText & '"'  & |
                           '>'
       ELSE
          ModuleQ.lModuleId = TreeQ.lModuleId
          GET(ModuleQ,+ModuleQ.lModuleId)
          ClassQ.szClassSort = UPPER(TreeQ.szClassName)
          GET(ClassQ,+ClassQ.szClassSort)
          IF ERRORCODE()
             ClassQ.szParentClassName = ''
          END
          XMLFile.Record = szIndent & |
                           '<<enumeration name="' & TreeQ.szClassName & '"'    & |
                           ' declarationmodule="' & CLIP(ModuleQ:szModulePath & ModuleQ:szModuleName) & '"'    & |
                           ' declarationlinenumber="' & TreeQ.lLineNum & '"'   & |
                           '>'
       END
       ADD(XMLFile)
       XMLFileQueue.Record = szIndent & '<</enumeration>'
       XMLFileQueue.Level = ABS(TreeQ.lLevel)
       ADD(XMLFileQueue,1)
  ELSE
      DO ProcessCommonElements
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessCommonElements  ROUTINE
  DATA
ptrToken            LONG
szDefinitionModule  CSTRING(256)

  CODE
  CASE TreeQ:wIcon
    OF ICON:INTERFACE
       XMLFile.Record = szIndent & '<<interface name="' & TreeQ.szText & '">' & TreeQ.szSearch & '<</interface>'
       ADD(XMLFile)

    OF ICON:PROPERTY
       ptrToken = INSTRING(' - ',TreeQ.szText,1)
       IF ptrToken
          TreeQ.szText = TreeQ.szText[ptrToken+3 : LEN(TreeQ.szText)]
       END
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,+ModuleQ.lModuleId)
       PropertyQ.szPropertySort = UPPER(TreeQ:szSearch)
       GET(PropertyQ,+PropertyQ.szPropertySort)

       XMLFile.Record = szIndent & '<<property'             & |
                        ' name="' & PropertyQ.szPropertyName & '"'   & |
                        ' datatype="' & srcNormalizeString(PropertyQ.szDataType) & '"'   & |
                        ' private="' & CHOOSE(PropertyQ.bPrivate=TRUE,'TRUE','FALSE') & '"'   & |
                        ' protected="' & CHOOSE(PropertyQ.bProtected=TRUE,'TRUE','FALSE') & '"'   & |
                        ' declarationmodule="' & CLIP(ModuleQ:szModulePath & ModuleQ:szModuleName) & '"'   & |
                        ' declarationlinenumber="' & TreeQ.lLineNum & '"'   & |
                        '>' & PropertyQ.szPropertyName & '<</property>'
       ADD(XMLFile)

    OF ICON:METHOD
       IF TreeQ.lModuleId = 0
          szDefinitionModule = ''
       ELSE
          ModuleQ.lModuleId = TreeQ.lModuleId
          GET(ModuleQ,+ModuleQ.lModuleId)
          ASSERT(~ERRORCODE())
          IF ERRORCODE()
             szDefinitionModule = ''
          ELSE
             szDefinitionModule = CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName)
          END
       END
       ModuleQ.lModuleId = TreeQ.lIncludeId
       GET(ModuleQ,+ModuleQ.lModuleId)
       ClassQ.szClassSort = UPPER(TreeQ.szClassName)
       GET(ClassQ,+ClassQ.szClassSort)
       MethodQ.lClassID = ClassQ.lClassID
       ptrToken = INSTRING(' ',TreeQ:szText)
       MethodQ.szMethodName = TreeQ:szText[1 : ptrToken-1]
       MethodQ.szPrototype = TreeQ.szText[ptrToken+1 : LEN(TreeQ.szText)]
       GET(MethodQ,+MethodQ.lClassID,+MethodQ.szMethodName,+MethodQ.szPrototype)
       XMLFile.Record = szIndent & '<<method'                       & |
                        ' name="' & MethodQ.szMethodName & '"'      & |
                        ' prototype="' & srcNormalizeString(MethodQ.szPrototype) & '"'  & |
                        ' private="' & CHOOSE(MethodQ.bPrivate=TRUE,'TRUE','FALSE') & '"'       & |
                        ' protected="' & CHOOSE(MethodQ.bProtected=TRUE,'TRUE','FALSE') & '"'   & |
                        ' virtual="' & CHOOSE(MethodQ.bVirtual=TRUE,'TRUE','FALSE') & '"'       & |
                        ' declarationmodule="' & CLIP(ModuleQ.szModulePath & ModuleQ.szModuleName) & '"'    & |
                        ' declarationlinenumber="' & MethodQ.lLineNum & '"'
       IF MethodQ.lSourceLine
          XMLFile.Record = CLIP(XMLFile.Record) & |
                        ' definitionmodule="' & szDefinitionModule & '"'    & |
                        ' definitionlinenumber="' & MethodQ.lSourceLine & '"'
       END
       XMLFile.Record = CLIP(XMLFile.Record) & '>' & MethodQ.szMethodName & '<</method>'
       ADD(XMLFile)

    OF ICON:STRUCTURE
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,+ModuleQ.lModuleId)
       StructureQ.lModuleId = TreeQ.lModuleId
       StructureQ.szStructureSort = UPPER(TreeQ.szClassName)
       StructureQ.szDataLabel = TreeQ.szContextString
       GET(StructureQ,+StructureQ.lModuleId,+StructureQ.szStructureSort,+StructureQ.szDataLabel)
       XMLFile.Record = szIndent & '<<property'                             & |
                        ' name="' & StructureQ.szDataLabel & '"'            & |
                        ' datatype="' & srcNormalizeString(StructureQ.szDataType) & '"'         & |
                        ' private="' & CHOOSE(StructureQ.bPrivate=TRUE,'TRUE','FALSE') & '"'                & |
                        ' declarationmodule="' & CLIP(ModuleQ:szModulePath & ModuleQ:szModuleName) & '"'    & |
                        ' declarationlinenumber="' & TreeQ.lLineNum & '"'   & |
                        '>' & StructureQ.szDataLabel & '<</property>'
       ADD(XMLFile)

    OF ICON:EQUATE
       ptrToken = INSTRING(' = ',TreeQ.szText,1)
       ModuleQ.lModuleId = TreeQ.lModuleId
       GET(ModuleQ,+ModuleQ.lModuleId)

       XMLFile.Record = szIndent & '<<equate'                               & |
                        ' name="' & TreeQ.szText[1 : ptrToken-1] & '"'      & |
                        ' value="' & srcNormalizeString(TreeQ.szText[ptrToken+3 : LEN(TreeQ.szText)]) & '"' & |
                        ' declarationmodule="' & CLIP(ModuleQ:szModulePath & ModuleQ:szModuleName) & '"'    & |
                        ' declarationlinenumber="' & TreeQ.lLineNum & '"'   & |
                        '>' & TreeQ.szContextString & '<</equate>'

       ADD(XMLFile)
  END
  EXIT
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  XMLFilename = 'ABCVIEW.XML'
  IF FILEDIALOG('Select XML File',XMLFileName,'XML Files (*.XML)|*.XML|All Files (*.*)|*.*',FILE:Save+FILE:KeepDir+FILE:LongName+FILE:NoError)
     DO ExportToXML
  END
  RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcNormalizeString
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winFindNotes
PROTOTYPE '(),LONG'
[COMMON]
DESCRIPTION 'Display The Note Queue'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:48:10'
[DATA]
[SCREENCONTROLS]
! PROMPT('Synchronize:'),USE(?bSynchronize:Prompt)
! ENTRY(@n3),USE(bSynchronize)
[REPORTCONTROLS]
! STRING(@n3),USE(bSynchronize)
bSynchronize             BYTE
!!> GUID('e25ef34b-f52b-455a-b602-e0709ff29af7'),PROMPT('Synchronize:'),HEADER('Synchronize'),PICTURE(@n3)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (bSynchronize)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('No Special Action')
WHEN  ('?Close') ('No Special Action')
WHEN  ('?List') ('No Special Action')
WHEN  ('?SizeGrip') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?Close') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('25000')
WHEN  ('?Close') ('25000')
WHEN  ('?List') ('25000')
WHEN  ('?SizeGrip') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?Close') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?Close') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('None')
WHEN  ('?Close') ('None')
WHEN  ('?List') ('None')
WHEN  ('?SizeGrip') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?Close') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?Close') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 4
WHEN  ('') (1)
WHEN  ('?Close') (1)
WHEN  ('?List') (1)
WHEN  ('?SizeGrip') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?Close')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?SizeGrip')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?Close')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?SizeGrip')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?Close')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?SizeGrip')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?Close')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?SizeGrip')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('AIBtn0')
WHEN  ('?SizeGrip') ('AIBtn3')

%AIEnableMimicControl DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?SizeGrip') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('?List')
WHEN  ('?SizeGrip') ('?List')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?SizeGrip') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?SizeGrip') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?SizeGrip') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?SizeGrip') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?List'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
OF MouseLeft2
   GET(NoteQ,CHOICE(?List))
   winViewNote(NoteQ:bClarionVersion,NoteQ:szLookup)
END
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END

GET(NoteQ,1)
?List{PROP:Selected} = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9101
PROPERTY:END
Resizer.Resize()
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Find_Notes.htm')
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'CloseWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4499
PROPERTY:END
!IF CHOICE(?List)
   GET(NoteQ,CHOICE(?List))
!ELSE
!   GET(NoteQ,1)
!END
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 5
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Find_Notes.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (0)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (1)
%EnableSystemMenuBox LONG  (0)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC CloseButton
[INSTANCE]
INSTANCE 2
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Don''t alter controls')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (2, 3)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 2
WHEN  (2) ('?Close')
WHEN  (3) ('?SizeGrip')

%DisableResize DEPEND %OverrideControls LONG TIMES 2
WHEN  (2) (0)
WHEN  (3) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 2
WHEN  (2) ('Lock Width')
WHEN  (3) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 2
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 2
WHEN  (2) ('Fix Right')
WHEN  (3) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 2
WHEN  (2) ('Fix Bottom')
WHEN  (3) ('Fix Bottom')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 6
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 7
PARENT 6
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME KCR KCR_SubClassWindow
[INSTANCE]
INSTANCE 9
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?List')
[ADDITION]
NAME KCR KCR_PaintWindowFrame
[INSTANCE]
INSTANCE 10
PARENT 9
[PROMPTS]
%TplName DEFAULT  ('KCR_PaintWindowFrame (Devuna)')
%TplDescription DEFAULT  ('Paint Window Frame')
%FrameColor LONG  (12164479)
[CALLS]
winViewNote
[WINDOW]
Window  WINDOW('Find Notes'),AT(,,318,226),RESIZE,TILED,ICON('abcview.ico'),GRAY,PALETTE(256), |
          WALLPAPER('WALLPAPER.GIF')
          LIST,AT(6,4,306,200),USE(?List),ALRT(MouseLeft2),COLOR(COLOR:White,COLOR:HIGHLIGHTTEXT, |
            COLOR:HIGHLIGHT),FLAT,FORMAT('120L(2)|M~Item~S(500)@s255@#2#190L(2)|M~Note~' & |
            'S(500)@s255@'),FROM(NoteQ),TIP('List of annotations'),#FIELDS(NoteQ:szLookup, |
            NoteQ:szNote),#ORIG(?List1)
          BUTTON('Cl&ose'),AT(268,208,45,14),USE(?Close),TIP('Return to the previous window'), |
            #ORIG(?Close),#SEQ(2)
          IMAGE('tcorner.gif'),AT(310,218),USE(?SizeGrip),#ORIG(?Image10)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcFindComment
PROTOTYPE '(STRING s),LONG'
PARAMETERS '(s)'
[COMMON]
DESCRIPTION 'Find Comment Marker'
FROM ABC Source
MODIFIED '2003/06/25' '17:43:55'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
I           LONG
J           LONG
bInQuote    BYTE
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  J = LEN(CLIP(s))
  LOOP I = 1 TO J
    CASE s[I]
      OF ''''
         bInQuote = CHOOSE(bInQuote=TRUE,FALSE,TRUE)
      OF '!'
         IF bInQuote = FALSE
            BREAK
         END
    END
  END
  IF I <= J
     RETURN(I)
  ELSE
     RETURN(0)
  END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winAddClass
PROTOTYPE '(),BYTE'
GLOBAL
[COMMON]
DESCRIPTION 'Add a New Class File'
FROM ABC Window
MODIFIED '2017/07/02' ' 8:43:45'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-14),USE(RetVal),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(RetVal),RIGHT(1)
RetVal                   LONG
!!> GUID('4fc10fdd-0f77-4de1-8344-84c215a5ad6f'),INITIAL('Level:Cancel'),PROMPT('Ret Val:'),HEADER('Ret Val'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('C&lass name:'),USE(?szClassName:Prompt),TRN
! ENTRY(@s20),USE(szClassName)
[REPORTCONTROLS]
! STRING(@s20),USE(szClassName)
szClassName              LIKE(classQ.szClassName)
!!> GUID('14b5f27d-d1d8-4129-a46c-650961b97f02'),PROMPT('C&lass name:'),PICTURE(@s20)
[SCREENCONTROLS]
! PROMPT('&Base class:'),USE(?szParentClassName:Prompt),TRN
! ENTRY(@s20),USE(szParentClassName)
[REPORTCONTROLS]
! STRING(@s20),USE(szParentClassName)
szParentClassName        LIKE(classQ.szParentClassName)
!!> GUID('117147a4-f73c-47c0-9587-5d4fcdfb7556'),PROMPT('&Base class:'),HEADER('sz Parent Class Name'),PICTURE(@s20)
[SCREENCONTROLS]
! TEXT,USE(szInterfaces)
[REPORTCONTROLS]
! TEXT,USE(szInterfaces)
szInterfaces             CSTRING(256)
!!> GUID('2ebb6193-7db9-4605-8901-9d72eac1aa72'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s20),USE(szCategory),TIP('Category/Template Family')
[REPORTCONTROLS]
! STRING(@s20),USE(szCategory)
szCategory               LIKE(CategoryQ.szCategory)
!!> GUID('679157bf-2654-4d00-9331-5a9cdead14ca'),INITIAL('ABC'),PROMPT('Class Category:'),TOOLTIP('Category/Template Family'),PICTURE(@s20)
[SCREENCONTROLS]
! PROMPT('.inc f&ile:'),USE(?IncFileName:Prompt),TRN
! ENTRY(@s255),USE(IncFileName)
[REPORTCONTROLS]
! TEXT,USE(IncFileName)
IncFileName              CSTRING(256)
!!> GUID('06ba4047-a072-4f91-8830-fd48856f7280'),PROMPT('.inc f&ile:'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('.cl&w file:'),USE(?ClwFileName:Prompt),TRN
! ENTRY(@s255),USE(ClwFileName)
[REPORTCONTROLS]
! TEXT,USE(ClwFileName)
ClwFileName              CSTRING(256)
!!> GUID('0086a74f-b96b-4b37-ac69-0f54a4851459'),PROMPT('.cl&w file:'),PICTURE(@s255)
[SCREENCONTROLS]
! ENTRY(@s1),USE(CategoryQueue)
[REPORTCONTROLS]
! STRING(@s1),USE(CategoryQueue)
CategoryQueue            QUEUE(CATEGORYQUEUETYPE),PRE(CategoryQueue)
!!> GUID('2c30b359-d8c3-4b63-9755-c7106c2f94c6'),PICTURE(@s1)
                         END
!!> GUID('59c9c1a2-c05f-4555-b00b-385ffd536110')
[SCREENCONTROLS]
! ENTRY(@s128),USE(ClassQueue)
[REPORTCONTROLS]
! STRING(@s128),USE(ClassQueue)
ClassQueue               QUEUE,PRE(ClassQueue)
!!> GUID('fbb37d71-fe0c-4d89-be3d-262ea6398bd7'),PICTURE(@s128)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ClassQueue:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassQueue:szClassName)
szClassName                CSTRING(64)
!!> GUID('6199a4fb-9a07-47f6-aef0-eb2f60831156'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@s63),USE(ClassQueue:szSortName)
[REPORTCONTROLS]
! STRING(@s63),USE(ClassQueue:szSortName)
szSortName                 CSTRING(64)
!!> GUID('15898d17-a929-4ca8-97e4-e32c6ee5582d'),PICTURE(@s63)
                         END
!!> GUID('565e842b-2bb7-4806-891d-642211086634')
[SCREENCONTROLS]
! ENTRY(@s134),USE(InterfaceQueue)
[REPORTCONTROLS]
! STRING(@s134),USE(InterfaceQueue)
InterfaceQueue           QUEUE,PRE(InterfaceQueue)
!!> GUID('3c47381d-e284-4a74-942b-2682481c97b7'),PICTURE(@s134)
[SCREENCONTROLS]
! ENTRY(@s63),USE(InterfaceQueue:szClassName)
[REPORTCONTROLS]
! STRING(@s63),USE(InterfaceQueue:szClassName)
szClassName                CSTRING(64)
!!> GUID('d931a810-ef75-41da-a881-2691a863ecf0'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('w Icon:'),USE(?InterfaceQueue:wIcon:Prompt)
! ENTRY(@n-7),USE(InterfaceQueue:wIcon),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-7),USE(InterfaceQueue:wIcon),RIGHT(1)
wIcon                      SHORT
!!> GUID('9b542384-d225-4394-9d91-91e070f3b2c0'),PROMPT('w Icon:'),HEADER('w Icon'),PICTURE(@n-7),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Style:'),USE(?InterfaceQueue:lStyle:Prompt)
! ENTRY(@n-14),USE(InterfaceQueue:lStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(InterfaceQueue:lStyle),RIGHT(1)
lStyle                     LONG
!!> GUID('de2d4a89-8edd-49c0-9eba-69908e44d6bb'),PROMPT('l Style:'),HEADER('l Style'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! ENTRY(@s63),USE(InterfaceQueue:szSortName)
[REPORTCONTROLS]
! STRING(@s63),USE(InterfaceQueue:szSortName)
szSortName                 CSTRING(64)
!!> GUID('25400fdb-9c34-45b3-81de-b884f2c7280a'),PICTURE(@s63)
                         END
!!> GUID('6f4a3bb2-1be1-4581-af08-388b67cd8dcc')
[SCREENCONTROLS]
! PROMPT('inc Template:'),USE(?incTemplateName:Prompt)
! ENTRY(@s60),USE(incTemplateName)
[REPORTCONTROLS]
! STRING(@s60),USE(incTemplateName)
incTemplateName          CSTRING(61)
!!> GUID('791d7818-c9e9-4d2e-9e1a-030e9c50d144'),PROMPT('inc Template:'),HEADER('inc Template'),PICTURE(@s60)
[SCREENCONTROLS]
! PROMPT('clw Template Name:'),USE(?clwTemplateName:Prompt)
! ENTRY(@s60),USE(clwTemplateName)
[REPORTCONTROLS]
! STRING(@s60),USE(clwTemplateName)
clwTemplateName          CSTRING(61)
!!> GUID('538c752b-dc87-462c-b591-f0bf832cbd31'),PROMPT('clw Template Name:'),HEADER('clw Template Name'),PICTURE(@s60)
[SCREENCONTROLS]
! ENTRY(@s255),USE(BaseMethodQ)
[REPORTCONTROLS]
! STRING(@s255),USE(BaseMethodQ)
BaseMethodQ              QUEUE,PRE(BaseMethodQ)
!!> GUID('1c658915-223c-4a77-8a2c-6b2b6d969b5a'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(BaseMethodQ:szMethod)
[REPORTCONTROLS]
! TEXT,USE(BaseMethodQ:szMethod)
szMethod                   CSTRING(1025)
!!> GUID('debfb2db-c5fa-4a46-8eea-6bea2da80c70'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('w Icon:'),USE(?BaseMethodQ:wIcon:Prompt)
! ENTRY(@n-7),USE(BaseMethodQ:wIcon),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-7),USE(BaseMethodQ:wIcon),RIGHT(1)
wIcon                      SHORT
!!> GUID('9ca19114-74ce-413d-9520-c484e74c5f25'),PROMPT('w Icon:'),HEADER('w Icon'),PICTURE(@n-7),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Style:'),USE(?BaseMethodQ:lStyle:Prompt)
! ENTRY(@n-14),USE(BaseMethodQ:lStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(BaseMethodQ:lStyle),RIGHT(1)
lStyle                     LONG
!!> GUID('9022803b-a17f-4e5b-b443-38ab0950b4d3'),PROMPT('l Style:'),HEADER('l Style'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
                         END
!!> GUID('678bc398-ec50-414a-be17-719cd5592e9f')
[SCREENCONTROLS]
! ENTRY(@s30),USE(GenerationDate)
[REPORTCONTROLS]
! STRING(@s30),USE(GenerationDate)
GenerationDate           CSTRING(31)
!!> GUID('25300cb3-ab4d-4fbf-95ea-d7f268cb70be'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@s30),USE(GenerationTime)
[REPORTCONTROLS]
! STRING(@s30),USE(GenerationTime)
GenerationTime           CSTRING(31)
!!> GUID('0460f087-3e81-4558-a8ee-96578f2d890f'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@s20),USE(PopupMgr)
[REPORTCONTROLS]
! STRING(@s20),USE(PopupMgr)
PopupMgr                 PopupClass
!!> GUID('7671b4d3-d415-4b25-ae23-18ac77f210e2'),PICTURE(@s20)
[SCREENCONTROLS]
! CHECK(' Generate Interface Callbacks'),USE(bGenerateInterfaceCallbacks)
[REPORTCONTROLS]
! CHECK(' Generate Interface Callbacks'),USE(bGenerateInterfaceCallbacks)
bGenerateInterfaceCallbacks BYTE
!!> GUID('79260f08-d089-4e06-843f-dc05665dc538'),VALID(BOOLEAN),PROMPT(' Generate Interface Callbacks'),HEADER(' Generate Interface Callbacks'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(bProcessingInc)
[REPORTCONTROLS]
! STRING(@n3),USE(bProcessingInc)
bProcessingInc           BYTE
!!> GUID('7320ad1d-020b-4ff6-88bd-6a94af73febc'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Property Queue:'),USE(?PropertyQueue:Prompt)
! ENTRY(@s134),USE(PropertyQueue)
[REPORTCONTROLS]
! STRING(@s134),USE(PropertyQueue)
PropertyQueue            QUEUE,PRE(PropertyQueue)
!!> GUID('8fcb185b-f0da-4e37-85da-e22ed07c9e34'),PROMPT('Property Queue:'),HEADER('Property Queue'),PICTURE(@s198)
[SCREENCONTROLS]
! PROMPT('sz Property Name:'),USE(?PropertyQueue:szPropertyName:Prompt)
! ENTRY(@s19),USE(PropertyQueue:szPropertyName)
[REPORTCONTROLS]
! STRING(@s19),USE(PropertyQueue:szPropertyName)
szPropertyName             CSTRING(64)
!!> GUID('ef695505-2dd6-45dc-aaef-3304e454e609'),PROMPT('sz Property Name:'),HEADER('sz Property Name'),PICTURE(@s19)
[SCREENCONTROLS]
! ENTRY(@n-7),USE(PropertyQueue:wIcon)
[REPORTCONTROLS]
! STRING(@n-7),USE(PropertyQueue:wIcon)
wIcon                      SHORT
!!> GUID('5ef86384-187e-4d57-b884-dbcfb06be58c'),PICTURE(@n-7)
[SCREENCONTROLS]
! ENTRY(@n-14),USE(PropertyQueue:lStyle)
[REPORTCONTROLS]
! STRING(@n-14),USE(PropertyQueue:lStyle)
lStyle                     LONG
!!> GUID('8c8effb6-f400-4e83-ba9c-41b73166e70c'),PICTURE(@n-14)
[SCREENCONTROLS]
! ENTRY(@s63),USE(PropertyQueue:szDataType)
[REPORTCONTROLS]
! STRING(@s63),USE(PropertyQueue:szDataType)
szDataType                 CSTRING(64)
!!> GUID('fd96bafc-4f85-4038-8ffd-053f69cd8410'),PROMPT('sz Data Type:'),HEADER('sz Data Type'),PICTURE(@s63)
[SCREENCONTROLS]
! PROMPT('sz Sort Name:'),USE(?PropertyQueue:szSortName:Prompt)
! ENTRY(@s63),USE(PropertyQueue:szSortName)
[REPORTCONTROLS]
! STRING(@s63),USE(PropertyQueue:szSortName)
szSortName                 CSTRING(64)
!!> GUID('4ab99bee-97fa-45f5-aa04-1da63642646f'),PROMPT('sz Sort Name:'),HEADER('sz Sort Name'),PICTURE(@s63)
                         END
!!> GUID('8899d29f-6075-4b8c-8a49-321b9126e6c1')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (RetVal)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 28
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?ClwFileName') ('No Special Action')
WHEN  ('?EditClwTemplate:Button') ('No Special Action')
WHEN  ('?EditIncTemplate:Button') ('No Special Action')
WHEN  ('?General:Tab') ('No Special Action')
WHEN  ('?IncFileName') ('No Special Action')
WHEN  ('?Interfaces') ('No Special Action')
WHEN  ('?Interfaces:Prompt') ('No Special Action')
WHEN  ('?Interfaces:Tab') ('No Special Action')
WHEN  ('?LookupClwFile') ('No Special Action')
WHEN  ('?LookupFile') ('No Special Action')
WHEN  ('?Methods') ('No Special Action')
WHEN  ('?Methods:Prompt') ('No Special Action')
WHEN  ('?NextButton') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')
WHEN  ('?Sheet1') ('No Special Action')
WHEN  ('?Templates:Prompt') ('No Special Action')
WHEN  ('?Templates:Tab') ('No Special Action')
WHEN  ('?bGenerateInterfaceCallbacks') ('No Special Action')
WHEN  ('?clwTemplateName') ('No Special Action')
WHEN  ('?clwTemplateName:Prompt') ('No Special Action')
WHEN  ('?incTemplateName') ('No Special Action')
WHEN  ('?incTemplateName:Prompt') ('No Special Action')
WHEN  ('?szCategory') ('No Special Action')
WHEN  ('?szCategory:Prompt') ('No Special Action')
WHEN  ('?szParentClass:Prompt') ('No Special Action')
WHEN  ('?szParentClassName') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?EditClwTemplate:Button') ('')
WHEN  ('?EditIncTemplate:Button') ('')
WHEN  ('?LookupClwFile') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?NextButton') ('')
WHEN  ('?OkButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?EditClwTemplate:Button') ('')
WHEN  ('?EditIncTemplate:Button') ('')
WHEN  ('?LookupClwFile') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?NextButton') ('')
WHEN  ('?OkButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 7
WHEN  ('?CancelButton') ()
WHEN  ('?EditClwTemplate:Button') ()
WHEN  ('?EditIncTemplate:Button') ()
WHEN  ('?LookupClwFile') ()
WHEN  ('?LookupFile') ()
WHEN  ('?NextButton') ()
WHEN  ('?OkButton') ()

%ButtonThread DEPEND %Control LONG TIMES 7
WHEN  ('?CancelButton') (0)
WHEN  ('?EditClwTemplate:Button') (0)
WHEN  ('?EditIncTemplate:Button') (0)
WHEN  ('?LookupClwFile') (0)
WHEN  ('?LookupFile') (0)
WHEN  ('?NextButton') (0)
WHEN  ('?OkButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 28
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?ClwFileName') ('25000')
WHEN  ('?EditClwTemplate:Button') ('25000')
WHEN  ('?EditIncTemplate:Button') ('25000')
WHEN  ('?General:Tab') ('25000')
WHEN  ('?IncFileName') ('25000')
WHEN  ('?Interfaces') ('25000')
WHEN  ('?Interfaces:Prompt') ('25000')
WHEN  ('?Interfaces:Tab') ('25000')
WHEN  ('?LookupClwFile') ('25000')
WHEN  ('?LookupFile') ('25000')
WHEN  ('?Methods') ('25000')
WHEN  ('?Methods:Prompt') ('25000')
WHEN  ('?NextButton') ('25000')
WHEN  ('?OkButton') ('25000')
WHEN  ('?Sheet1') ('25000')
WHEN  ('?Templates:Prompt') ('25000')
WHEN  ('?Templates:Tab') ('25000')
WHEN  ('?bGenerateInterfaceCallbacks') ('25000')
WHEN  ('?clwTemplateName') ('25000')
WHEN  ('?clwTemplateName:Prompt') ('25000')
WHEN  ('?incTemplateName') ('25000')
WHEN  ('?incTemplateName:Prompt') ('25000')
WHEN  ('?szCategory') ('25000')
WHEN  ('?szCategory:Prompt') ('25000')
WHEN  ('?szParentClass:Prompt') ('25000')
WHEN  ('?szParentClassName') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?EditClwTemplate:Button') ('')
WHEN  ('?EditIncTemplate:Button') ('')
WHEN  ('?LookupClwFile') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?NextButton') ('')
WHEN  ('?OkButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 7
WHEN  ('?CancelButton') ()
WHEN  ('?EditClwTemplate:Button') ()
WHEN  ('?EditIncTemplate:Button') ()
WHEN  ('?LookupClwFile') ()
WHEN  ('?LookupFile') ()
WHEN  ('?NextButton') ()
WHEN  ('?OkButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 7
WHEN  ('?CancelButton') (0)
WHEN  ('?EditClwTemplate:Button') (0)
WHEN  ('?EditIncTemplate:Button') (0)
WHEN  ('?LookupClwFile') (0)
WHEN  ('?LookupFile') (0)
WHEN  ('?NextButton') (0)
WHEN  ('?OkButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 28
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?ClwFileName') ('None')
WHEN  ('?EditClwTemplate:Button') ('None')
WHEN  ('?EditIncTemplate:Button') ('None')
WHEN  ('?General:Tab') ('None')
WHEN  ('?IncFileName') ('None')
WHEN  ('?Interfaces') ('None')
WHEN  ('?Interfaces:Prompt') ('None')
WHEN  ('?Interfaces:Tab') ('None')
WHEN  ('?LookupClwFile') ('None')
WHEN  ('?LookupFile') ('None')
WHEN  ('?Methods') ('None')
WHEN  ('?Methods:Prompt') ('None')
WHEN  ('?NextButton') ('None')
WHEN  ('?OkButton') ('None')
WHEN  ('?Sheet1') ('None')
WHEN  ('?Templates:Prompt') ('None')
WHEN  ('?Templates:Tab') ('None')
WHEN  ('?bGenerateInterfaceCallbacks') ('None')
WHEN  ('?clwTemplateName') ('None')
WHEN  ('?clwTemplateName:Prompt') ('None')
WHEN  ('?incTemplateName') ('None')
WHEN  ('?incTemplateName:Prompt') ('None')
WHEN  ('?szCategory') ('None')
WHEN  ('?szCategory:Prompt') ('None')
WHEN  ('?szParentClass:Prompt') ('None')
WHEN  ('?szParentClassName') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?EditClwTemplate:Button') ('')
WHEN  ('?EditIncTemplate:Button') ('')
WHEN  ('?LookupClwFile') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?NextButton') ('')
WHEN  ('?OkButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 7
WHEN  ('?CancelButton') ()
WHEN  ('?EditClwTemplate:Button') ()
WHEN  ('?EditIncTemplate:Button') ()
WHEN  ('?LookupClwFile') ()
WHEN  ('?LookupFile') ()
WHEN  ('?NextButton') ()
WHEN  ('?OkButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 3
WHEN  ('?ClwFileName') ()
WHEN  ('?IncFileName') ()
WHEN  ('?szCategory') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 3
WHEN  ('?ClwFileName') ()
WHEN  ('?IncFileName') ()
WHEN  ('?szCategory') ()

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 3
WHEN  ('?ClwFileName') ('')
WHEN  ('?IncFileName') ('')
WHEN  ('?szCategory') ('')

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 3
WHEN  ('?ClwFileName') ()
WHEN  ('?IncFileName') ()
WHEN  ('?szCategory') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 3
WHEN  ('?ClwFileName') ()
WHEN  ('?IncFileName') ()
WHEN  ('?szCategory') ()

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 3
WHEN  ('?ClwFileName') ('')
WHEN  ('?IncFileName') ('')
WHEN  ('?szCategory') ('')

%PostLookupDuringValidate DEPEND %Control LONG TIMES 29
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?ClwFileName') (1)
WHEN  ('?EditClwTemplate:Button') (1)
WHEN  ('?EditIncTemplate:Button') (1)
WHEN  ('?General:Tab') (1)
WHEN  ('?IncFileName') (1)
WHEN  ('?Interfaces') (1)
WHEN  ('?Interfaces:Prompt') (1)
WHEN  ('?Interfaces:Tab') (1)
WHEN  ('?LookupClwFile') (1)
WHEN  ('?LookupFile') (1)
WHEN  ('?Methods') (1)
WHEN  ('?Methods:Prompt') (1)
WHEN  ('?NextButton') (1)
WHEN  ('?OkButton') (1)
WHEN  ('?Sheet1') (1)
WHEN  ('?Templates:Prompt') (1)
WHEN  ('?Templates:Tab') (1)
WHEN  ('?bGenerateInterfaceCallbacks') (1)
WHEN  ('?clwTemplateName') (1)
WHEN  ('?clwTemplateName:Prompt') (1)
WHEN  ('?incTemplateName') (1)
WHEN  ('?incTemplateName:Prompt') (1)
WHEN  ('?szCategory') (1)
WHEN  ('?szCategory:Prompt') (1)
WHEN  ('?szClassName') (1)
WHEN  ('?szParentClass:Prompt') (1)
WHEN  ('?szParentClassName') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 28
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?ClwFileName')TIMES 0
WHEN  ('?EditClwTemplate:Button')TIMES 0
WHEN  ('?EditIncTemplate:Button')TIMES 0
WHEN  ('?General:Tab')TIMES 0
WHEN  ('?IncFileName')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Interfaces:Prompt')TIMES 0
WHEN  ('?Interfaces:Tab')TIMES 0
WHEN  ('?LookupClwFile')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Methods:Prompt')TIMES 0
WHEN  ('?NextButton')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Templates:Prompt')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?bGenerateInterfaceCallbacks')TIMES 0
WHEN  ('?clwTemplateName')TIMES 0
WHEN  ('?clwTemplateName:Prompt')TIMES 0
WHEN  ('?incTemplateName')TIMES 0
WHEN  ('?incTemplateName:Prompt')TIMES 0
WHEN  ('?szCategory')TIMES 0
WHEN  ('?szCategory:Prompt')TIMES 0
WHEN  ('?szParentClass:Prompt')TIMES 0
WHEN  ('?szParentClassName')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 28
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?ClwFileName')TIMES 0
WHEN  ('?EditClwTemplate:Button')TIMES 0
WHEN  ('?EditIncTemplate:Button')TIMES 0
WHEN  ('?General:Tab')TIMES 0
WHEN  ('?IncFileName')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Interfaces:Prompt')TIMES 0
WHEN  ('?Interfaces:Tab')TIMES 0
WHEN  ('?LookupClwFile')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Methods:Prompt')TIMES 0
WHEN  ('?NextButton')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Templates:Prompt')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?bGenerateInterfaceCallbacks')TIMES 0
WHEN  ('?clwTemplateName')TIMES 0
WHEN  ('?clwTemplateName:Prompt')TIMES 0
WHEN  ('?incTemplateName')TIMES 0
WHEN  ('?incTemplateName:Prompt')TIMES 0
WHEN  ('?szCategory')TIMES 0
WHEN  ('?szCategory:Prompt')TIMES 0
WHEN  ('?szParentClass:Prompt')TIMES 0
WHEN  ('?szParentClassName')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 28
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?ClwFileName')TIMES 0
WHEN  ('?EditClwTemplate:Button')TIMES 0
WHEN  ('?EditIncTemplate:Button')TIMES 0
WHEN  ('?General:Tab')TIMES 0
WHEN  ('?IncFileName')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Interfaces:Prompt')TIMES 0
WHEN  ('?Interfaces:Tab')TIMES 0
WHEN  ('?LookupClwFile')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Methods:Prompt')TIMES 0
WHEN  ('?NextButton')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Templates:Prompt')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?bGenerateInterfaceCallbacks')TIMES 0
WHEN  ('?clwTemplateName')TIMES 0
WHEN  ('?clwTemplateName:Prompt')TIMES 0
WHEN  ('?incTemplateName')TIMES 0
WHEN  ('?incTemplateName:Prompt')TIMES 0
WHEN  ('?szCategory')TIMES 0
WHEN  ('?szCategory:Prompt')TIMES 0
WHEN  ('?szParentClass:Prompt')TIMES 0
WHEN  ('?szParentClassName')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 28
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?ClwFileName')TIMES 0
WHEN  ('?EditClwTemplate:Button')TIMES 0
WHEN  ('?EditIncTemplate:Button')TIMES 0
WHEN  ('?General:Tab')TIMES 0
WHEN  ('?IncFileName')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Interfaces:Prompt')TIMES 0
WHEN  ('?Interfaces:Tab')TIMES 0
WHEN  ('?LookupClwFile')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Methods:Prompt')TIMES 0
WHEN  ('?NextButton')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Sheet1')TIMES 0
WHEN  ('?Templates:Prompt')TIMES 0
WHEN  ('?Templates:Tab')TIMES 0
WHEN  ('?bGenerateInterfaceCallbacks')TIMES 0
WHEN  ('?clwTemplateName')TIMES 0
WHEN  ('?clwTemplateName:Prompt')TIMES 0
WHEN  ('?incTemplateName')TIMES 0
WHEN  ('?incTemplateName:Prompt')TIMES 0
WHEN  ('?szCategory')TIMES 0
WHEN  ('?szCategory:Prompt')TIMES 0
WHEN  ('?szParentClass:Prompt')TIMES 0
WHEN  ('?szParentClassName')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?Sheet1') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Sheet1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
RetVal = Level:Cancel
[GROUP]
PRIORITY 5000
INSTANCE 3
[END]
[END]
WHEN '?OkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF szClassName = ''
   SELECT(?szClassName)
ELSIF incFileName = ''
   SELECT(?incFileName)
ELSIF clwFileName = ''
   SELECT(?clwFileName)
ELSE
   DO Finish     !Do the Finish Processing
   POST(Event:CloseWindow)
END
[END]
[END]
WHEN '?szClassName'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF IncFileName = ''
   IncFileName = szClassName & '.inc'
   DISPLAY(?IncFileName)
END
IF ClwFileName = ''
   ClwFileName = szClassName & '.clw'
   DISPLAY(?ClwFileName)
END
[END]
[END]
WHEN '?NextButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
HIDE(?Templates:Tab)
UNHIDE(?General:Tab)
UNHIDE(?Interfaces:Tab)
UNHIDE(?OKButton)
DO InitializeTemplates                                  !Load Templates (adds user tokens)
SELECT(?General:Tab)
[END]
[END]
WHEN '?incTemplateName'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(incTemplateQ,CHOICE(?incTemplateName))
[END]
[END]
WHEN '?clwTemplateName'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(clwTemplateQ,CHOICE(?clwTemplateName))
[END]
[END]
WHEN '?szParentClassName'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
      IF szParentClassName <> ''
         DO FillBaseMethodQ
         UNHIDE(?Methods:Tab)
         DO FillPropertyQueue
         UNHIDE(?Properties:Tab)
      ELSE
         FREE(BaseMethodQ)
         HIDE(?Methods:Tab)
         FREE(PropertyQueue)
         HIDE(?Properties:Tab)
      END
[END]
[END]
WHEN '?Interfaces'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF KEYCODE() = MouseLeft
   MouseDownRow = ?Interfaces{PROPLIST:MouseDownRow}
   GET(InterfaceQueue,MouseDownRow)
   InterfaceQueue.wIcon = CHOOSE(InterfaceQueue.wIcon=2,1,2)
   InterfaceQueue.lStyle = CHOOSE(InterfaceQueue.wIcon=2,0,1)
   PUT(InterfaceQueue)
   DISPLAY(?Interfaces)
END
[END]
[END]
WHEN '?Methods'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
OF MouseRight
   DO PopupMenu
OF MouseLeft
   MouseDownRow = ?Methods{PROPLIST:MouseDownRow}
   GET(BaseMethodQ,MouseDownRow)
   BaseMethodQ.wIcon = CHOOSE(BaseMethodQ.wIcon=2,1,2)
   BaseMethodQ.lStyle = CHOOSE(BaseMethodQ.wIcon=2,0,1)
   PUT(BaseMethodQ)
   DISPLAY(?Methods)
END
[END]
[END]
WHEN '?EditIncTemplate:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
q &= incTemplateQ
DO EditSource
[END]
[END]
WHEN '?EditClwTemplate:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
q &= clwTemplateQ
DO EditSource
[END]
[END]
WHEN '?Properties'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF KEYCODE() = MouseLeft
   MouseDownRow = ?Properties{PROPLIST:MouseDownRow}
   GET(PropertyQueue,MouseDownRow)
   PropertyQueue.wIcon = CHOOSE(PropertyQueue.wIcon=2,1,2)
   PropertyQueue.lStyle = CHOOSE(PropertyQueue.wIcon=2,0,1)
   PUT(PropertyQueue)
   DISPLAY(?Properties)
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
szName  LIKE(incTemplateQ.szName),AUTO
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
MouseDownRow    LONG
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8050
PROPERTY:END
DO LoadDefaultTokens                                    !load the default tokens
DO FillClassQueues                                      !fill the lookup queues
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END

?Interfaces{PROP:IconList,1} = '~checkyes.ico'
?Interfaces{PROP:IconList,2} = '~checkno.ico'
?Interfaces{PROPSTYLE:TextColor,1} = COLOR:BLUE
?Interfaces{PROPSTYLE:BackColor,1} = COLOR:BTNFACE
?Interfaces{PROPSTYLE:TextSelected,1} = glo:lSelectedFore !COLOR:BLUE
?Interfaces{PROPSTYLE:BackSelected,1} = glo:lSelectedBack
?Interfaces{PROPSTYLE:FontName,STYLE:NORMAL} = glo:Typeface
?Interfaces{PROPSTYLE:FontSize,STYLE:NORMAL} = glo:FontSize
?Interfaces{PROPSTYLE:FontStyle,STYLE:NORMAL} = glo:FontStyle

?Methods{PROP:IconList,1} = '~checkyes.ico'
?Methods{PROP:IconList,2} = '~checkno.ico'
?Methods{PROPSTYLE:TextColor,1} = COLOR:BLUE
?Methods{PROPSTYLE:BackColor,1} = COLOR:BTNFACE
?Methods{PROPSTYLE:TextSelected,1} = glo:lSelectedFore !COLOR:BLUE
?Methods{PROPSTYLE:BackSelected,1} = glo:lSelectedBack
?Methods{PROPSTYLE:FontName,STYLE:NORMAL} = glo:Typeface
?Methods{PROPSTYLE:FontSize,STYLE:NORMAL} = glo:FontSize
?Methods{PROPSTYLE:FontStyle,STYLE:NORMAL} = glo:FontStyle

?Properties{PROP:IconList,1} = '~checkyes.ico'
?Properties{PROP:IconList,2} = '~checkno.ico'
?Properties{PROPSTYLE:TextColor,1} = COLOR:BLUE
?Properties{PROPSTYLE:BackColor,1} = COLOR:BTNFACE
?Properties{PROPSTYLE:TextSelected,1} = glo:lSelectedFore !COLOR:BLUE
?Properties{PROPSTYLE:BackSelected,1} = glo:lSelectedBack
?Properties{PROPSTYLE:FontName,STYLE:NORMAL} = glo:Typeface
?Properties{PROPSTYLE:FontSize,STYLE:NORMAL} = glo:FontSize
?Properties{PROPSTYLE:FontStyle,STYLE:NORMAL} = glo:FontStyle

DO FillCategoryQueue

IF ~RECORDS(incTemplateQ)
   incTemplateQ.szPath = PATH() & '\' & 'IncTemplate.txt'
   IF EXISTS(incTemplateQ.szPath)
      incTemplateQ.szName = 'Sample INC Template'
      ADD(incTemplateQ)
   END
END
SORT(incTemplateQ,incTemplateQ.szPath)
INIMgr.Fetch('Options','incTemplate',incTemplateQ.szPath)
incTemplateQ.szPath = UPPER(incTemplateQ.szPath)
GET(incTemplateQ,+incTemplateQ.szPath)
IF ERRORCODE()
   SORT(incTemplateQ,incTemplateQ.szName)
   GET(incTemplateQ,1)
ELSE
   szName = incTemplateQ.szName
   SORT(incTemplateQ,incTemplateQ.szName)
   GET(incTemplateQ,+incTemplateQ.szName)
   IF ERRORCODE()
      GET(incTemplateQ,1)
   END
END
incTemplateName = incTemplateQ.szName
?incTemplateName{PROP:Selected} = POINTER(incTemplateQ)

IF ~RECORDS(clwTemplateQ)
   clwTemplateQ.szPath = PATH() & '\' & 'ClwTemplate.txt'
   IF EXISTS(clwTemplateQ.szPath)
      clwTemplateQ.szName = 'Sample CLW Template'
      ADD(clwTemplateQ)
   END
END
SORT(clwTemplateQ,clwTemplateQ.szName)
SORT(clwTemplateQ,clwTemplateQ.szPath)
INIMgr.Fetch('Options','clwTemplate',clwTemplateQ.szPath)
clwTemplateQ.szPath = UPPER(clwTemplateQ.szPath)
GET(clwTemplateQ,+clwTemplateQ.szPath)
IF ERRORCODE()
   SORT(clwTemplateQ,clwTemplateQ.szName)
   GET(clwTemplateQ,1)
ELSE
   szName = clwTemplateQ.szName
   SORT(clwTemplateQ,clwTemplateQ.szName)
   GET(clwTemplateQ,+clwTemplateQ.szName)
   IF ERRORCODE()
      GET(clwTemplateQ,1)
   END
END
clwTemplateName = clwTemplateQ.szName
?clwTemplateName{PROP:Selected} = POINTER(clwTemplateQ)
popupmgr.init()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF ohh &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
   END
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
J = RECORDS(Token)
LOOP I = 1 TO J
  GET(Token,I)
  IF Token.bFree
     IF ~Token.szValue &= NULL
        DISPOSE(Token.szValue)
        Token.szValue &= NULL
     END
     IF ~Token.nValue &= NULL
        DISPOSE(Token.nValue)
        Token.nValue &= NULL
     END
     IF Token.PromptFeq
        DESTROY(Token.PromptFeq)
        Token.PromptFeq = 0
     END
     IF Token.EntryFeq
        DESTROY(Token.EntryFeq)
        Token.EntryFeq = 0
     END
     PUT(Token)
  END
END
FREE(Token)

J = RECORDS(TabQueue)
LOOP I = 1 TO J
   GET(TabQueue,I)
   IF TabQueue.Feq
      DESTROY(TabQueue.Feq)
      TabQueue.Feq = 0
      PUT(TabQueue)
   END
END
FREE(TabQueue)

FREE(ClassQueue)
FREE(InterfaceQueue)
FREE(CategoryQueue)
popupmgr.kill()
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
FillClassQueues   ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO

  CODE
  FREE(ClassQueue)
  FREE(InterfaceQueue)

  !add blank records
  !====================================================================
  ClassQueue.szClassName = ''
  ClassQueue.szSortName  = ''
  ADD(ClassQueue)

  J = RECORDS(ClassQ)
  LOOP I = 1 TO J
    GET(ClassQ,I)
    IF ClassQ.bInterface
       InterfaceQueue.szClassName = ClassQ.szClassName
       InterfaceQueue.szSortName  = ClassQ.szClassSort
       InterfaceQueue.wIcon = 2
       InterfaceQueue.lStyle = 0
       ADD(InterfaceQueue)
    ELSE
       ClassQueue.szClassName = ClassQ.szClassName
       ClassQueue.szSortName  = ClassQ.szClassSort
       ADD(ClassQueue)
    END
  END

  SORT(ClassQueue,+ClassQueue.szSortName)
  SORT(InterfaceQueue,+InterfaceQueue.szSortName)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
FillCategoryQueue   ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO

  CODE
  FREE(CategoryQueue)
  J = RECORDS(CategoryQ)
  LOOP I = 1 TO J
    GET(CategoryQ,I)
    CategoryQueue.szCategory = UPPER(CategoryQ.szCategory)
    GET(CategoryQueue,+CategoryQueue.szCategory)
    IF ERRORCODE()
       ADD(CategoryQueue,+CategoryQueue.szCategory)
    END
  END

  !szCategory = 'ABC'
  !CategoryQueue.szCategory = szCategory
  !GET(CategoryQueue,+CategoryQueue.szCategory)
  !IF ERRORCODE()
     GET(CategoryQueue,1)
  !END
  IF ThisWindow.Opened
     ?szCategory{PROP:Selected} = POINTER(CategoryQueue)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
FillBaseMethodQ ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
lSourceLine LONG,AUTO

  CODE
  FREE(BaseMethodQ)
  SORT(ClassQ,+ClassQ.szClassSort)
  ClassQ.szClassSort = UPPER(szParentClassName)
  GET(ClassQ,+ClassQ.szClassSort)
  IF ~ERRORCODE()
     J = RECORDS(MethodQ)
     LOOP I = 1 TO J
        GET(MethodQ,I)
        IF MethodQ.lClassId = ClassQ.lClassId
           IF MethodQ.bPrivate = TRUE OR MethodQ.bModule = TRUE
              CYCLE
           ELSE
              lSourceLine = srcGetSourceLine(ClassQ.lIncludeId,MethodQ.szMethodName,MethodQ.szPrototype,BaseMethodQ.szMethod)
              BaseMethodQ.wIcon = 2
              BaseMethodQ.lStyle = 0
              ADD(BaseMethodQ)
           END
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
FillPropertyQueue   ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO

  CODE
  FREE(PropertyQueue)
  ClassQ.szClassSort = UPPER(szParentClassName)
  GET(ClassQ,+ClassQ.szClassSort)
  IF ~ERRORCODE()
     J = RECORDS(PropertyQ)
     LOOP I = 1 TO J
        GET(PropertyQ,I)
        IF PropertyQ.lClassId = ClassQ.lClassId
           IF PropertyQ.bPrivate = TRUE OR PropertyQ.bModule = TRUE
              CYCLE
           ELSE
              PropertyQueue.szPropertyName = PropertyQ.szPropertyName
              PropertyQueue.wIcon = 2
              PropertyQueue.lStyle = 0
              PropertyQueue.szDataType = PropertyQ.szDataType
              PropertyQueue.szSortName = PropertyQ.szPropertySort
              ADD(PropertyQueue)
           END
        END
     END
  END
  SORT(PropertyQueue,+PropertyQueue.szSortName)
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
LoadDefaultTokens   ROUTINE
  Token.szName = '%CLASSNAME'
  Token.szValue &= szClassName
  Token.szPrompt = 'Class Name:'
  Token.szDefault = ''
  Token.PromptFeq = ?szClassName:Prompt
  Token.EntryFeq = ?szClassName
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%BASECLASS'
  Token.szValue &= szParentClassName
  Token.szPrompt = 'Base Class:'
  Token.szDefault = ''
  Token.PromptFeq = ?szParentClass:Prompt
  Token.EntryFeq = ?szParentClassName
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%CATEGORY'
  Token.szValue &= szCategory
  Token.szPrompt = 'Category:'
  Token.szDefault = ''
  Token.PromptFeq = ?szCategory:Prompt
  Token.EntryFeq = ?szCategory
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%INCFILENAME'
  Token.szValue &= IncFileName
  Token.szPrompt = 'inc Filename:'
  Token.szDefault = ''
  Token.PromptFeq = ?IncFileName:Prompt
  Token.EntryFeq = ?IncFileName
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%CLWFILENAME'
  Token.szValue &= ClwFileName
  Token.szPrompt = 'clw Filename:'
  Token.szDefault = ''
  Token.PromptFeq = ?ClwFileName:Prompt
  Token.EntryFeq = ?ClwFileName
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%DATE'
  Token.szValue &= GenerationDate
  Token.szPrompt = 'Generation Date:'
  Token.szDefault = ''
  Token.PromptFeq = 0
  Token.EntryFeq = 0
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%TIME'
  Token.szValue &= GenerationTime
  Token.szPrompt = 'Generation Time:'
  Token.szDefault = ''
  Token.PromptFeq = 0
  Token.EntryFeq = 0
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%METHODS'
  Token.szValue &= NULL
  Token.szPrompt = 'Base Class Methods:'
  Token.szDefault = ''
  Token.PromptFeq = ?Methods:Prompt
  Token.EntryFeq = ?Methods
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%INTERFACES'
  Token.szValue &= NULL
  Token.szPrompt = 'Implemented Interfaces:'
  Token.szDefault = ''
  Token.PromptFeq = ?Interfaces:Prompt
  Token.EntryFeq = ?Interfaces
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  !add tokens
  Token.szName = '%METHODNAME'
  Token.szValue &= szMethodName
  Token.szPrompt = 'Method Name:'
  Token.szDefault = ''
  Token.PromptFeq = 0
  Token.EntryFeq = 0
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%PROTOTYPE'
  Token.szValue &= szPrototype
  Token.szPrompt = 'Prototype:'
  Token.szDefault = ''
  Token.PromptFeq = 0
  Token.EntryFeq = 0
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  Token.szName = '%RETURNTYPE'
  Token.szValue &= szReturnType
  Token.szPrompt = 'Return Type:'
  Token.szDefault = ''
  Token.PromptFeq = 0
  Token.EntryFeq = 0
  Token.bFree = FALSE
  ADD(Token,+Token.szName)

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
InitializeTemplates ROUTINE
  !The IncTemplate queue should be filled from a user defined text file
  !============================================================================
  DO LoadIncTemplate

  !The ClwTemplate queue should be filled from a user defined text file
  !============================================================================
  DO LoadClwTemplate
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LoadIncTemplate ROUTINE
  pTemplate &= incTemplate
  szAsciiFileName = incTemplateQ.szPath
  IF szAsciiFileName = ''
     szAsciiFileName = 'incTemplate.txt'
     INIMgr.Fetch('Options','incTemplate',szAsciiFileName)
  END
  INIMgr.Update('Options','incTemplate',szAsciiFileName)
  DO LoadTemplate
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LoadClwTemplate ROUTINE
  pTemplate &= clwTemplate
  szAsciiFileName = clwTemplateQ.szPath
  IF szAsciiFileName = ''
     szAsciiFileName = 'clwTemplate.txt'
     INIMgr.Fetch('Options','clwTemplate',szAsciiFileName)
  END
  INIMgr.Update('Options','clwTemplate',szAsciiFileName)
  DO LoadTemplate
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
LoadTemplate ROUTINE
  OPEN(SourceFile)
  IF ERRORCODE()
     MESSAGE('Template File (' & szAsciiFileName & ')',ERROR(),ICON:EXCLAMATION)
  ELSE
     SET(SourceFile)
     LOOP
        NEXT(SourceFile)
        IF ERRORCODE()
           BREAK
        ELSE
           IF UPPER(SourceFile.sText[1 : 7]) = '#PROMPT'
              DO ParseToken
           ELSIF UPPER(SourceFile.sText[1 : 7]) = '#PREFIX'
              DO SetupPrefix
           ELSE
              pTemplate.szText = CLIP(SourceFile.sText)
              ADD(pTemplate)
           END
        END
     END
     CLOSE(SourceFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetupPrefix  ROUTINE
  LOOP
     NEXT(SourceFile)
     IF ERRORCODE()
        BREAK
     ELSE
        IF UPPER(SourceFile.sText[1 : 10]) = '#ENDPREFIX'
           BREAK
        ELSE
           PreTemplate.szText = CLIP(SourceFile.sText)
           ADD(PreTemplate)
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ParseToken ROUTINE
  DATA
pStart  LONG,AUTO
pEnd    LONG,AUTO
szText  CSTRING(1025)

  CODE
  !process prompt
  CLEAR(Token)
  szText = CLIP(SourceFile.sText)
  IF srcParsePrompt(szText,Token) = Level:Benign
     DO AddToken
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddToken   ROUTINE
  DATA
sz  &CSTRING
lp  &REAL
I   LONG,AUTO
J   LONG,AUTO
szScope LIKE(Token.szScope)

  CODE
  GET(Token,+Token.szName)
  IF ERRORCODE()
     !Create tab if necessary
     !=================================================================
     IF Current.Tab = 0
        Current.Tab = CREATE(0,CREATE:TAB,?Sheet1)
        TabQueue.Feq = Current.Tab
        ADD(TabQueue)
        Current.Tab{PROP:Text} = 'User ' & RECORDS(TabQueue) & ' ...'
        SETFONT(Current.Tab,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        UNHIDE(Current.Tab)
     END

     IF Token.szType <> 'RADIO' AND Current.Option <> 0
        Current.xPos -= 4
        Current.Option = 0
     END

     CASE Token.szType
     OF 'ENTRY' OROF 'DROP' OROF 'SPIN' OROF 'TEXT'
        !Create the prompt
        !=================================================================
        Token.PromptFeq = CREATE(0,CREATE:PROMPT,Current.Tab)
        Token.PromptFeq{PROP:Text} = Token.szPrompt
        Token.PromptFeq{PROP:TRN} = TRUE
        SETFONT(Token.PromptFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetPromptPosition
        Current.yPos += Token.PromptFeq{PROP:Height}
     END

     !Create the entry field
     !=================================================================
     CASE Token.szType
     OF 'CHECK'
        Token.EntryFeq = CREATE(0,CREATE:CHECK,Current.Tab)
        Token.EntryFeq{PROP:Text} = Token.szPrompt
        Token.nValue &= NEW(REAL)
      ASSERT(~Token.nValue &= NULL)
        Token.nValue = Token.szDefault
        lp &= Token.nValue
        Token.EntryFeq{PROP:Use} = lp
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += Token.EntryFeq{PROP:Height} + 4

     OF 'DROP'
        Token.EntryFeq = CREATE(0,CREATE:DROPLIST,Current.Tab)
        Token.szValue &= NEW(CSTRING(256))
      ASSERT(~Token.szValue &= NULL)
        IF Token.szDefault = ''
           Token.szDefault = SUB(Token.szScope,1,INSTRING('|',Token.szScope)-1)
        END
        Token.szValue = Token.szDefault
        sz &= Token.szValue
        Token.EntryFeq{PROP:Use} = sz
        Token.EntryFeq{PROP:Drop} = 10
        Token.EntryFeq{PROP:Text} = '@S254'
        szScope = Token.szScope
        Token.EntryFeq{PROP:From} = szScope
        Token.EntryFeq{PROP:VScroll} = TRUE
        Token.EntryFeq{PROP:Background} = COLOR:WHITE
        Token.EntryFeq{PROP:Format} = '80L(2)@s254@'
        Token.EntryFeq{PROP:Selected} = 1
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += Token.EntryFeq{PROP:Height} + 4

     OF 'ENTRY'
        Token.EntryFeq = CREATE(0,CREATE:ENTRY,Current.Tab)
        Token.EntryFeq{PROP:Text} = Token.szPicture
        Token.EntryFeq{PROP:Background} = COLOR:WHITE
        Token.szValue &= NEW(CSTRING(256))
      ASSERT(~Token.szValue &= NULL)
        Token.szValue = Token.szDefault
        sz &= Token.szValue
        Token.EntryFeq{PROP:Use} = sz
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += Token.EntryFeq{PROP:Height} + 4

     OF 'OPTION'
        Token.EntryFeq = CREATE(0,CREATE:OPTION,Current.Tab)
        Current.Option = Token.EntryFeq
        Token.EntryFeq{PROP:Boxed} = TRUE
        Token.EntryFeq{PROP:Text} = Token.szPrompt
        IF Token.bChoice = TRUE
           Token.nValue &= NEW(REAL)
         ASSERT(~Token.nValue &= NULL)
           Token.nValue = Token.szDefault
           lp &= Token.nValue
           Token.EntryFeq{PROP:Use} = lp
        ELSE
           Token.szValue &= NEW(CSTRING(256))
         ASSERT(~Token.szValue &= NULL)
           Token.szValue = Token.szDefault
           sz &= Token.szValue
           Token.EntryFeq{PROP:Use} = sz
        END
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += 10
        Current.xPos += 4

     OF 'RADIO'
        Token.EntryFeq = CREATE(0,CREATE:RADIO,Current.Option)
        Token.EntryFeq{PROP:Text} = Token.szPrompt
        IF Token.szRadioValue
           Token.EntryFeq{PROP:Value} = Token.szRadioValue
        END
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += Token.EntryFeq{PROP:Height} + 4

     OF 'SPIN'
        Token.EntryFeq = CREATE(0,CREATE:SPIN,Current.Tab)
        Token.EntryFeq{PROP:Text} = Token.szPicture
        Token.EntryFeq{PROP:Background} = COLOR:WHITE
        IF Token.low
           Token.EntryFeq{PROP:Range,1} = Token.low
        ELSE
           Token.EntryFeq{PROP:Range,1} = -2147483648
        END
        IF Token.high
           Token.EntryFeq{PROP:Range,2} = Token.high
        ELSE
           Token.EntryFeq{PROP:Range,2} = 2147483647
        END
        Token.EntryFeq{PROP:Step} = 1
        IF Token.step
           Token.EntryFeq{PROP:Step} = Token.step
        END
        Token.EntryFeq{PROP:Right} = TRUE
        Token.nValue &= NEW(REAL)
      ASSERT(~Token.nValue &= NULL)
        Token.nValue = Token.szDefault
        lp &= Token.nValue
        Token.EntryFeq{PROP:Use} = lp
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += Token.EntryFeq{PROP:Height} + 4

     OF 'TEXT'
        Token.EntryFeq = CREATE(0,CREATE:TEXT,Current.Tab)
        Token.EntryFeq{PROP:Text} = Token.szPicture
        Token.EntryFeq{PROP:Background} = COLOR:WHITE
        Token.EntryFeq{PROP:HScroll} = TRUE
        Token.EntryFeq{PROP:VScroll} = TRUE
        Token.szValue &= NEW(CSTRING(256))
      ASSERT(~Token.szValue &= NULL)
        Token.szValue = Token.szDefault
        sz &= Token.szValue
        Token.EntryFeq{PROP:Use} = sz
        SETFONT(Token.EntryFeq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
        DO SetControlPosition
        Current.yPos += Token.EntryFeq{PROP:Height} + 4
     END

     IF Current.yPos > 126 !150
        Current.xPos = 8
        Current.yPos = 20
        Current.Tab = 0
     END

     !add token to queue
     !=================================================================
     Token.bFree = TRUE
     ADD(Token,+Token.szName)

     !unhide the controls
     !=================================================================
     IF Token.PromptFeq
        UNHIDE(Token.PromptFeq)
     END
     IF Token.EntryFeq
        UNHIDE(Token.EntryFeq)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetPromptPosition  ROUTINE
  SETPOSITION(Token.PromptFeq,Current.xPos,Current.yPos,,)
  IF Token.prompt_xPos
     Current.xPos = Token.prompt_xPos
     Token.PromptFeq{PROP:xPos} = Current.xPos
     !SETPOSITION(Token.PromptFeq,Current.xPos,,,)
  END
  IF Token.prompt_yPos
     Current.yPos = Token.prompt_yPos
     Token.PromptFeq{PROP:yPos} = Current.yPos
     !SETPOSITION(Token.PromptFeq,,Current.yPos,,)
  END
  IF Token.prompt_width
     Current.width = Token.prompt_width
     IF (Current.xPos + Current.width) > 168
        Current.width = (168 - Current.xPos)
     END
     Token.PromptFeq{PROP:width} = Current.width
     !SETPOSITION(Token.PromptFeq,,,Current.width,)
  END
  IF Token.prompt_height
     Current.height = Token.prompt_height
     IF (Current.yPos + Current.height) > 136
        Current.height = (136 - Current.yPos)
     END
     Token.PromptFeq{PROP:height} = Current.height
     !SETPOSITION(Token.PromptFeq,,,,Current.height)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetControlPosition  ROUTINE
  SETPOSITION(Token.EntryFeq,Current.xPos,Current.yPos,,)
  IF Token.xPos
     Current.xPos = Token.xPos
     Token.EntryFeq{PROP:xPos} = Current.xPos
     !SETPOSITION(Token.EntryFeq,Current.xPos,,,)
  END

  IF Token.yPos
     Current.yPos = Token.yPos
     Token.EntryFeq{PROP:yPos} = Current.yPos
     !SETPOSITION(Token.EntryFeq,,Current.yPos,,)
  END
  IF Token.width
     Current.width = Token.width
     IF (Current.xPos + Current.width) > 168
        Current.width = (168 - Current.xPos)
     END
     Token.EntryFeq{PROP:width} = Current.width
     !SETPOSITION(Token.EntryFeq,,,Current.width,)
  END
  IF Token.height
     Current.height = Token.height
     IF (Current.yPos + Current.height) > 136
        Current.height = (136 - Current.yPos)
     END
     Token.EntryFeq{PROP:height} = Current.height
     !SETPOSITION(Token.EntryFeq,,,,Current.height)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Finish  ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
ModulePath  CSTRING(256)
ModuleName  CSTRING(256)


  CODE
  UPDATE()

  !write the inc file
  !====================================================================
  bProcessingInc = TRUE
  pTemplate &= IncTemplate
  IF INSTRING('\',IncFileName)
     szAsciiFileName = IncFileName
  ELSE
     szAsciiFileName = glo:szCurrentDir & '\' & IncFileName
  END
  DO WriteFile

  !write the clw file
  !====================================================================
  bProcessingInc = FALSE
  pTemplate &= ClwTemplate
  IF INSTRING('\',ClwFileName)
     szAsciiFileName = ClwFileName
  ELSE
     szAsciiFileName = glo:szCurrentDir & '\' & ClwFileName
  END
  DO WriteFile

  !add/update the module
  !====================================================================
  IF INSTRING('\',IncFileName)
     J = LEN(CLIP(IncFileName))
     LOOP I = J TO 1 BY -1
        IF IncFileName[I] = '\'
           BREAK
        END
     END
     ModulePath = UPPER(IncFileName[1 : I])
     ModuleName = UPPER(IncFileName[I+1 : J])
  ELSE
     ModulePath = UPPER(glo:szCurrentDir)
     ModuleName = UPPER(IncFileName)
  END
  IF ModulePath[LEN(ModulePath)] <> '\'
     ModulePath = ModulePath & '\'
  END

  SORT(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
  ModuleQ.szModulePath = ModulePath
  ModuleQ.szModuleName = ModuleName
  GET(ModuleQ,+ModuleQ.szModulePath,+ModuleQ.szModuleName)
  IF ERRORCODE()
     SORT(ModuleQ,+ModuleQ.lModuleId)
     GET(ModuleQ,RECORDS(ModuleQ))
     ModuleQ.szModulePath = ModulePath
     ModuleQ.szModuleName = ModuleName
     ModuleQ.lModuleId += 1
     ModuleQ.lDate = 0
     ModuleQ.lTime = 0
     ADD(ModuleQ,+ModuleQ.lModuleId)
  ELSE
     ModuleQ:lDate = 0
     ModuleQ:lTime = 0
     PUT(ModuleQ)
  END

  ClassNameQ.szClassName = szClassName
  RetVal = Level:Benign
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
WriteFile   ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
N           LONG,AUTO
P           LONG,AUTO
pToken      LONG,AUTO
pLastToken  LONG,AUTO
szNumber    CSTRING(33)
bResult     LONG,AUTO

  CODE
  IF EXISTS(szAsciiFilename)
     bResult = MESSAGE(szAsciiFilename & ' already exists.|Are you sure you want to overwrite this file?','Add Class Wizard',ICON:QUESTION,BUTTON:YES+BUTTON:NO,BUTTON:NO)
  ELSE
     bResult = BUTTON:YES
  END
  IF bResult = BUTTON:YES
     GenerationDate = FORMAT(TODAY(),@D17)
     GenerationTime = FORMAT(CLOCK(),@T3)
     pLastToken = RECORDS(Token)
     CREATE(SourceFile)
     IF ~ERRORCODE()
        OPEN(SourceFile)
        J = RECORDS(pTemplate)
        LOOP I = 1 TO J
          GET(pTemplate,I)
          SourceFile.sText = pTemplate.szText

          !Is this the CLASS string?
          !===============================================================
          K = INSTRING(' CLASS,',UPPER(SourceFile.sText),1)
          IF K
             K += 5
             !add parent class if selected
             !============================================================
             IF szParentClassName <> ''
                SourceFile.sText = SourceFile.sText[1 : K] & '(%BASECLASS)' & SourceFile.sText[K+1 : LEN(SourceFile.sText)]
                K += 12
             END
             !add interfaces selected
             !============================================================
             K += 1
             N = RECORDS(InterfaceQueue)
             LOOP P = N TO 1 BY -1
                GET(InterfaceQueue,P)
                IF InterfaceQueue.wIcon = 1
                   SourceFile.sText = SourceFile.sText[1 : K] & 'IMPLEMENTS(' & InterfaceQueue.szClassName & '),' & SourceFile.sText[K+1 : LEN(SourceFile.sText)]
                END
             END
          END

          IF SUB(UPPER(pTemplate.szText),1,11) = '%INTERFACES'
             DO AddInterfaces
          ELSIF SUB(UPPER(pTemplate.szText),1,8) = '%METHODS'
             Indent = SUB(pTemplate.szText,9,LEN(pTemplate.szText))
             DO AddMethods
          ELSIF SUB(UPPER(pTemplate.szText),1,11) = '%PROPERTIES'
             Indent = SUB(pTemplate.szText,12,LEN(pTemplate.szText))
             DO AddPropertyMethods
          ELSE
             K = INSTRING('%',pTemplate.szText)
             IF K
                LOOP pToken = 1 TO pLastToken
                   GET(Token,pToken)
                   IF ~Token.szValue &= NULL
                      SourceFile.sText = srcReplaceString(SourceFile.sText,Token.szName,Token.szValue)
                   ELSE
                      IF Token.szPicture
                         szNumber = FORMAT(Token.nValue,Token.szPicture)
                         SourceFile.sText = srcReplaceString(SourceFile.sText,Token.szName,szNumber)
                      ELSE
                         SourceFile.sText = srcReplaceString(SourceFile.sText,Token.szName,Token.nValue)
                      END
                   END
                   IF ~INSTRING('%',SourceFile.sText)
                      BREAK
                   END
                END
             END
             ADD(SourceFile)
          END
        END
        CLOSE(SourceFile)
     ELSE
        MESSAGE('Error Creating ' & szAsciiFileName,ERROR(),ICON:HAND)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddMethods  ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
M           LONG,AUTO
N           LONG,AUTO
Delimiter   STRING(1)
ReturnType  CSTRING(32)
szParam     CSTRING(1025)

  CODE

  !Generate Base Class derived methods
  !====================================================================
  J = RECORDS(BaseMethodQ)
  LOOP I = 1 TO J
     GET(BaseMethodQ,I)
     IF BaseMethodQ.wIcon = 1
        IF pTemplate &= ClwTemplate
           SourceFile.sText = ''
           ADD(SourceFile)

           DO InsertMethodPrefix

           ReturnType = srcGetReturnType(BaseMethodQ.szMethod)
           DO ChangeAttributesToComments
           SourceFile.sText = szClassName & '.' & BaseMethodQ.szMethod
           ADD(SourceFile)
           SourceFile.sText = ''
           ADD(SourceFile)

           IF ReturnType
              CASE ReturnType
              OF 'STRING'   |
              OROF 'CSTRING'
                 SourceFile.sText = 'ReturnValue ' & ReturnType & '(32)'
              ELSE
                 SourceFile.sText = 'ReturnValue ' & ReturnType
              END
              ADD(SourceFile)
           END

           SourceFile.sText = ''
           ADD(SourceFile)
           SourceFile.sText = '  CODE'
           ADD(SourceFile)
           SourceFile.sText = ''
           ADD(SourceFile)

           !get parameter block
           !===========================================================
           M = INSTRING('(',BaseMethodQ.szMethod)
           IF M
              N = INSTRING(')',BaseMethodQ.szMethod)
              IF N
                 szParam = BaseMethodQ.szMethod[M : N]
              ELSE
            ASSERT(N > 0)
              END
           ELSE
             szParam = '()'
           END

           !find label separator
           !===========================================================
           K = INSTRING(' ',BaseMethodQ.szMethod)
           IF K
              K -= 1
           END
           IF ~K
              K = LEN(BaseMethodQ.szMethod)
           END

           IF ReturnType
              SourceFile.sText = '  ReturnValue = PARENT.' & BaseMethodQ.szMethod[1 : K] & srcGetParameters(szParam)
              ADD(SourceFile)
              SourceFile.sText = ''
              ADD(SourceFile)
              SourceFile.sText = '  RETURN ReturnValue'
              ADD(SourceFile)
           ELSE
              SourceFile.sText = '  PARENT.' & BaseMethodQ.szMethod[1 : K] & srcGetParameters(szParam)
              ADD(SourceFile)
              SourceFile.sText = ''
              ADD(SourceFile)
              SourceFile.sText = '  RETURN'
              ADD(SourceFile)
           END
           SourceFile.sText = ''
           ADD(SourceFile)

        ELSE
           K = INSTRING(' ',BaseMethodQ.szMethod)
           IF K
              IF K < Indent+1
                 BaseMethodQ.szMethod = SUB(BaseMethodQ.szMethod[1 : K] & ALL(' ',Indent),1,Indent) & |
                                        BaseMethodQ.szMethod[K : LEN(BaseMethodQ.szMethod)]
              END
           END
           SourceFile.sText = BaseMethodQ.szMethod
           ADD(SourceFile)
        END
     END
  END

  !Generate Interface Callbacks
  !====================================================================
  IF bGenerateInterfaceCallbacks = TRUE
     DO AddInterfaceCallbacks
  END


  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddPropertyMethods  ROUTINE
  DATA
I               LONG,AUTO
J               LONG,AUTO
K               LONG,AUTO
szDataType      CSTRING(64)
szGetMethodName CSTRING(64)
szSetMethodName CSTRING(64)

  CODE

  !Generate Property Accessor methods
  !====================================================================
  J = RECORDS(PropertyQueue)
  LOOP I = 1 TO J
     GET(PropertyQueue,I)
     IF PropertyQueue.wIcon = 1

        K = INSTRING('(',PropertyQueue.szDataType)
        IF K
           szDataType = PropertyQueue.szDataType[1 : K-1]
        ELSE
           szDataType = PropertyQueue.szDataType
        END
        szGetMethodName = 'get_' & PropertyQueue.szPropertyName
        szSetMethodName = 'set_' & PropertyQueue.szPropertyName
        K = LEN(szGetMethodName)
        IF K < Indent+1
           szGetMethodName = SUB(szGetMethodName[1 : K] & ALL(' ',Indent),1,Indent)
           szSetMethodName = SUB(szSetMethodName[1 : K] & ALL(' ',Indent),1,Indent)
        END


        IF pTemplate &= ClwTemplate
           SourceFile.sText = szClassName & '.' & CLIP(szGetMethodName) & ' PROCEDURE(),' & szDataType
           ADD(SourceFile)
           SourceFile.sText = '  CODE'
           ADD(SourceFile)
           SourceFile.sText = '  RETURN(SELF.' & PropertyQueue.szPropertyName & ')'
           ADD(SourceFile)
           SourceFile.sText = ''
           ADD(SourceFile)
           SourceFile.sText = szClassName & '.' & CLIP(szSetMethodName) & ' PROCEDURE(' & szDataType & ' newValue),' & szDataType
           ADD(SourceFile)
           SourceFile.sText = 'oldValue LIKE(' & PropertyQueue.szPropertyName & ')'
           ADD(SourceFile)
           SourceFile.sText = '  CODE'
           ADD(SourceFile)
           SourceFile.sText = '  oldValue = SELF.get_' & PropertyQueue.szPropertyName & '()'
           ADD(SourceFile)
           SourceFile.sText = '  SELF.' & PropertyQueue.szPropertyName & ' = newValue'
           ADD(SourceFile)
           SourceFile.sText = '  RETURN(oldValue)'
           ADD(SourceFile)
           SourceFile.sText = ''
           ADD(SourceFile)
        ELSE
           SourceFile.sText = szGetMethodName & ' PROCEDURE(),' & szDataType
           ADD(SourceFile)
           SourceFile.sText = szSetMethodName & ' PROCEDURE(' & szDataType & ' newValue),' & szDataType
           ADD(SourceFile)
        END

     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
InsertMethodPrefix  ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
pToken      LONG,AUTO
pLastToken  LONG,AUTO
szNumber    CSTRING(33),AUTO

  CODE

  K = INSTRING(' ',BaseMethodQ.szMethod)
  IF K
     szMethodName = szClassName & '.' & BaseMethodQ.szMethod[1 : K]
  ELSE
     szMethodName = szClassName & '.' & BaseMethodQ.szMethod
  END
  szPrototype  = srcGetPrototype(BaseMethodQ.szMethod)
  szReturnType = srcGetReturnType(BaseMethodQ.szMethod)

  pLastToken = RECORDS(Token)
  J = RECORDS(PreTemplate)

  LOOP I = 1 TO J
    GET(PreTemplate,I)
    SourceFile.sText = PreTemplate.szText
    K = INSTRING('%',PreTemplate.szText)
    IF K
       LOOP pToken = 1 TO pLastToken
          GET(Token,pToken)
          IF ~Token.szValue &= NULL
             SourceFile.sText = srcReplaceString(SourceFile.sText,Token.szName,Token.szValue)
          ELSE
             IF Token.szPicture
                szNumber = FORMAT(Token.nValue,Token.szPicture)
                SourceFile.sText = srcReplaceString(SourceFile.sText,Token.szName,szNumber)
             ELSE
                SourceFile.sText = srcReplaceString(SourceFile.sText,Token.szName,Token.nValue)
             END
          END
          IF ~INSTRING('%',SourceFile.sText)
             BREAK
          END
       END
    END
    ADD(SourceFile)
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddInterfaces   ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
lSourceLine LONG,AUTO
szLineText  CSTRING(1025)
szParamText CSTRING(1025)
ReturnType  CSTRING(32)

  CODE
  !Generate Interface Callbacks
  !====================================================================
  !IF bGenerateInterfaceCallbacks = TRUE
  !   DO AddInterfaceCallbacks
  !END

  !Generate Interface Methods
  !====================================================================
  J = RECORDS(InterfaceQueue)
  LOOP I = 1 TO J
     GET(InterfaceQueue,I)
     IF InterfaceQueue.wIcon = 1
        ClassQ.szClassSort = InterfaceQueue.szSortName
        GET(ClassQ,+ClassQ.szClassSort)
        IF ~ERRORCODE()
           J = RECORDS(MethodQ)
           LOOP I = 1 TO J
              GET(MethodQ,I)
              IF MethodQ.lClassId = ClassQ.lClassId
                 IF MethodQ.bPrivate = TRUE OR MethodQ.bModule = TRUE
                    CYCLE
                 ELSE
                    SourceFile.sText = ''
                    ADD(SourceFile)
                    lSourceLine = srcGetSourceLine(ClassQ.lIncludeId,MethodQ.szMethodName,MethodQ.szPrototype,szLineText)

                    BaseMethodQ.szMethod = ClassQ.szClassName & '.' & szLineText
                    DO InsertMethodPrefix

                    BaseMethodQ.szMethod = szLineText
                    ReturnType = srcGetReturnType(BaseMethodQ.szMethod)
                    DO ChangeAttributesToComments
                    szLineText = BaseMethodQ.szMethod
                    SourceFile.sText = szClassName & '.' & ClassQ.szClassName & '.' & szLineText
                    ADD(SourceFile)
                    SourceFile.sText = ''
                    ADD(SourceFile)

                    IF ReturnType
                       CASE ReturnType
                       OF 'STRING'   |
                       OROF 'CSTRING'
                          SourceFile.sText = 'ReturnValue ' & ReturnType & '(32)'
                       ELSE
                          SourceFile.sText = 'ReturnValue ' & ReturnType
                       END
                       ADD(SourceFile)
                       SourceFile.sText = ''
                       ADD(SourceFile)
                    END

                    SourceFile.sText = '  CODE'
                    ADD(SourceFile)
                    SourceFile.sText = ''
                    ADD(SourceFile)

                    IF ReturnType
                       IF bGenerateInterfaceCallbacks = TRUE
                          SourceFile.sText = '  ReturnValue = SELF.' & MethodQ.szMethodName & srcGetParameters(MethodQ.szPrototype)
                          ADD(SourceFile)
                          SourceFile.sText = ''
                          ADD(SourceFile)
                       END
                       SourceFile.sText = '  RETURN ReturnValue'
                       ADD(SourceFile)
                    ELSE
                       IF bGenerateInterfaceCallbacks = TRUE
                          lSourceLine = srcGetSourceLine(ClassQ.lModuleId,MethodQ.szMethodName,MethodQ.szPrototype,szParamText)
                          SourceFile.sText = '  SELF.' & MethodQ.szMethodName & srcGetParameters(MethodQ.szPrototype)
                          ADD(SourceFile)
                          SourceFile.sText = ''
                          ADD(SourceFile)
                       END
                       SourceFile.sText = '  RETURN'
                       ADD(SourceFile)
                    END

                    SourceFile.sText = ''
                    ADD(SourceFile)
                 END
              END
           END
        END
     END
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddInterfaceCallbacks   ROUTINE
  DATA
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
lSourceLine LONG,AUTO
szLineText  CSTRING(1025)
ReturnType  CSTRING(32)

  CODE
  J = RECORDS(InterfaceQueue)
  LOOP I = 1 TO J
     GET(InterfaceQueue,I)
     IF InterfaceQueue.wIcon = 1
        ClassQ.szClassSort = InterfaceQueue.szSortName
        GET(ClassQ,+ClassQ.szClassSort)
        IF ~ERRORCODE()
           J = RECORDS(MethodQ)
           LOOP I = 1 TO J
              GET(MethodQ,I)
              IF MethodQ.lClassId = ClassQ.lClassId
                 IF MethodQ.bPrivate = TRUE OR MethodQ.bModule = TRUE
                    CYCLE
                 ELSE
                    lSourceLine = srcGetSourceLine(ClassQ.lIncludeId,MethodQ.szMethodName,MethodQ.szPrototype,szLineText)

                    IF bProcessingInc = TRUE
                       K = INSTRING(' ',szLineText)
                       IF K
                          IF K < Indent+1
                             szLineText = SUB(szLineText[1 : K] & ALL(' ',Indent),1,Indent) & |
                                          szLineText[K : LEN(szLineText)]
                          END
                       END
                       SourceFile.sText = szLineText
                       ADD(SourceFile)
                    ELSE
                       SourceFile.sText = ''
                       ADD(SourceFile)
                       lSourceLine = srcGetSourceLine(ClassQ.lIncludeId,MethodQ.szMethodName,MethodQ.szPrototype,szLineText)
                       BaseMethodQ.szMethod = szLineText

                       DO InsertMethodPrefix

                       ReturnType = srcGetReturnType(BaseMethodQ.szMethod)
                       DO ChangeAttributesToComments
                       szLineText = BaseMethodQ.szMethod
                       SourceFile.sText = szClassName & '.' & szLineText
                       ADD(SourceFile)
                       SourceFile.sText = ''
                       ADD(SourceFile)

                       IF ReturnType
                          CASE ReturnType
                          OF 'STRING'   |
                          OROF 'CSTRING'
                             SourceFile.sText = 'ReturnValue ' & ReturnType & '(32)'
                          ELSE
                             SourceFile.sText = 'ReturnValue ' & ReturnType
                          END
                          ADD(SourceFile)
                          SourceFile.sText = ''
                          ADD(SourceFile)
                       END

                       SourceFile.sText = '  CODE'
                       ADD(SourceFile)
                       SourceFile.sText = ''
                       ADD(SourceFile)

                       IF ReturnType
                          SourceFile.sText = '  RETURN ReturnValue'
                       ELSE
                          SourceFile.sText = '  RETURN'
                       END

                       ADD(SourceFile)
                       SourceFile.sText = ''
                       ADD(SourceFile)
                    END
                 END
              END
           END
        END
     END
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ChangeAttributesToComments  ROUTINE
  DATA
K           LONG,AUTO
Delimiter   STRING(1)

  CODE
  K = INSTRING('PROCEDURE(',BaseMethodQ.szMethod,1)
  IF K
     Delimiter = ')'
  ELSE
     K = INSTRING('PROCEDURE,',BaseMethodQ.szMethod,1)
     IF K
        Delimiter = ','
     ELSE
        K = INSTRING('FUNCTION(',BaseMethodQ.szMethod,1)
        IF K
           Delimiter = ')'
        ELSE
           K = INSTRING('FUNCTION,',BaseMethodQ.szMethod,1)
           IF K
              Delimiter = ','
           END
        END
     END
  END

  IF K
     LOOP K = 1 TO LEN(BaseMethodQ.szMethod)
        IF BaseMethodQ.szMethod[K] = Delimiter
           CASE Delimiter
           OF ')'
              IF CLIP(BaseMethodQ.szMethod[K+1 : LEN(BaseMethodQ.szMethod)]) <> ''
                 BaseMethodQ.szMethod = BaseMethodQ.szMethod[1 : K] & '!' & BaseMethodQ.szMethod[K+1 : LEN(BaseMethodQ.szMethod)]
              END
           OF ','
              IF CLIP(BaseMethodQ.szMethod[K : LEN(BaseMethodQ.szMethod)]) <> ''
                 BaseMethodQ.szMethod = BaseMethodQ.szMethod[1 : K-1] & '!' & BaseMethodQ.szMethod[K : LEN(BaseMethodQ.szMethod)]
              END
           END
           BREAK
        END
     END
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
PopupMenu   ROUTINE
 DATA
PopupString STRING(16),AUTO
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO

 CODE
 !Remove Popup Manager Menu Options
 PopupMgr.DeleteItem('CheckAll')
 PopupMgr.DeleteItem('UncheckAll')

 !Set Popup Manager Menu Options
 PopupMgr.AddItem('&Check All','CheckAll')
 PopupMgr.AddItem('&Uncheck All','UncheckAll')

 PopupString = PopupMgr.Ask()

 CASE PopupString
   OF 'CheckAll'
      J = RECORDS(BaseMethodQ)
      K = POINTER(BaseMethodQ)
      LOOP I = 1 TO J
         GET(BaseMethodQ,I)
         BaseMethodQ.wIcon = 1
         BaseMethodQ.lStyle = 1
         PUT(BaseMethodQ)
      END
      GET(BaseMethodQ,K)
      DISPLAY(?Methods)
   OF 'UncheckAll'
      J = RECORDS(BaseMethodQ)
      K = POINTER(BaseMethodQ)
      LOOP I = 1 TO J
         GET(BaseMethodQ,I)
         BaseMethodQ.wIcon = 2
         BaseMethodQ.lStyle = 0
         PUT(BaseMethodQ)
      END
      GET(BaseMethodQ,K)
      DISPLAY(?Methods)
 END
 EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
EditSource  ROUTINE
  DATA
I               LONG,AUTO
J               LONG,AUTO
lSearchLine     LONG(1)
szCommandLine   CSTRING(256)

  CODE
  szCommandline = 'Notepad.exe ' & q.szPath
  IF glo:szEditorCommand
     szCommandLine = glo:szEditorCommand
     I = INSTRING('.EXE ',UPPER(szCommandLine),1)
     IF I
        szCommandLine = SHORTPATH(szCommandLine[1 : I+3]) & szCommandLine[I+4 : LEN(szCommandLine)]
     END
     !look for filename parameter token
     I = INSTRING('%1',szCommandLine,1)
     IF I
        szCommandLine = SUB(szCommandLine,1,I-1) & |
                        q.szPath & |
                        SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
     END
     !look for line number parameter token
     I = INSTRING('%2',szCommandLine,1)
     IF I
        szCommandLine = SUB(szCommandLine,1,I-1) & |
                        lSearchLine & |
                        SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
     END
  END
  RUN(szCommandLine)
  IF RUNCODE() = -4   !Failed to execute
    CASE MESSAGE('An error occurred trying to execute the following command:||' & szCommandLine & |
            '||Do you want to use Notepad?',ERROR(),ICON:EXCLAMATION, |
            BUTTON:YES+BUTTON:NO,BUTTON:YES)
    OF BUTTON:YES
       RUN('Notepad.exe ' & q.szPath)
    END
  END
  EXIT
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
Template    QUEUE,TYPE
szText        CSTRING(1024)
            END
PreTemplate QUEUE(Template),PRE(PreTemplate)
            END
IncTemplate QUEUE(Template),PRE(IncTemplate)
Mark          BYTE
            END
ClwTemplate QUEUE(Template),PRE(ClwTemplate)
            END
pTemplate   &Template
q           &TEMPLATEQTYPE

szMethodName  CSTRING(256)
szPrototype   CSTRING(256)
szReturnType  CSTRING(33)

Current     GROUP
Tab           LONG
XPos          LONG(8)
YPos          LONG(20)
Width         LONG(0)
Height        LONG(0)
Option        LONG(0)
            END

Indent      BYTE

TabQueue    QUEUE,PRE(TabQueue)
Feq           LONG
            END

Token       QUEUE(TOKENQUEUETYPE),PRE(Token)
            END
[END]
[END]
[ADDITION]
NAME KCR KCR_ChangeWindowStyle
[INSTANCE]
INSTANCE 8
[PROMPTS]
%TplName DEFAULT  ('KCR_ChangeWindowStyle (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 3
[ADDITION]
NAME ABC DOSFileLookup
[INSTANCE]
INSTANCE 5
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Include Filename')
%DOSFileField FIELD  (IncFileName)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Include Files')
%DOSMask DEFAULT  ('*.inc')
%DOSMoreMasks MULTI LONG  ()
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 0

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 0

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('IncFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[INSTANCE]
INSTANCE 6
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Clarion Source Filename')
%DOSFileField FIELD  (ClwFileName)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (1)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Clarion Source Files')
%DOSMask DEFAULT  ('*.clw')
%DOSMoreMasks MULTI LONG  ()
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 0

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 0

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ClwFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DefaultOnCancel LONG  (0)
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 4
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 7
PARENT 4
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[CALLS]
srcGetParameters
srcGetPrototype
srcGetReturnType
srcGetSourceLine
srcParsePrompt
srcReplaceString
[WINDOW]
Window  WINDOW('Add Class Wizard'),AT(,,176,164),FONT(,,COLOR:Black,,CHARSET:ANSI),DOUBLE, |
          TILED,CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          SHEET,AT(4,4,169,139),USE(?Sheet1),JOIN,COLOR(COLOR:BTNFACE),#ORIG(?Sheet1)
            TAB('Templates'),USE(?Templates:Tab),#ORIG(?Tab1)
              BUTTON('&Next'),AT(73,146,48,14),USE(?NextButton),TIP('Define the class g' & |
                'eneration parameters.'),#ORIG(?Button5)
              PROMPT('.inc Template:'),AT(8,20),USE(?incTemplateName:Prompt),TRN,#ORIG(?Prompt7)
              LIST,AT(8,30,148,10),USE(incTemplateName),VSCROLL,COLOR(COLOR:White),DROP(10), |
                FORMAT('90L(2)@s60@'),FROM(incTemplateQ),TIP('Select the template to be' & |
                ' used for<0DH,0AH>creating the class include (inc) file.'),#FIELDS(incTemplateQ), |
                #ORIG(?List3)
              BUTTON('...'),AT(158,30,10,10),USE(?EditIncTemplate:Button),SKIP,TIP('Edit the s' & |
                'elected inc Template.'),#ORIG(?Button6)
              PROMPT('.clw Template:'),AT(8,44),USE(?clwTemplateName:Prompt),TRN,#ORIG(?Prompt8)
              LIST,AT(8,54,148,10),USE(clwTemplateName),VSCROLL,COLOR(COLOR:White),DROP(10), |
                FORMAT('90L(2)@s60@'),FROM(clwTemplateQ),TIP('Select the template to be' & |
                ' used for<0DH,0AH>creating the class source (clw) file.'),#FIELDS(clwTemplateQ), |
                #ORIG(?List4)
              BUTTON('...'),AT(158,54,10,10),USE(?EditClwTemplate:Button),SKIP,TIP('Edit the s' & |
                'elected clw Template.'),#ORIG(?EditIncTemplate:Button)
              PROMPT('Select the template files to be used in creating the class includ' & |
                'e (inc) and source (clw) files.'),AT(8,68,160,20),USE(?Templates:Prompt), |
                TRN,#ORIG(?Prompt10)
            END
            TAB('General'),USE(?General:Tab),HIDE,#ORIG(?Tab2)
              PROMPT('C&ategory:'),AT(8,20),USE(?szCategory:Prompt),TRN,#ORIG(?Prompt5)
              COMBO(@s63),AT(8,30,160,10),USE(szCategory),VSCROLL,COLOR(COLOR:White),DROP(10, |
                160),FORMAT('252L(2)@s63@?'),FROM(CategoryQueue),TIP('Enter the Class C' & |
                'ategory/Template Family<0DH,0AH>or select an existing category from the list.'), |
                #FIELDS(CategoryQ:szCategory),#ORIG(?List2)
              PROMPT('&Class Name:'),AT(8,44),USE(?szClassName:Prompt),TRN,#ORIG(?szClassName:Prompt)
              ENTRY(@s63),AT(8,54,160,10),USE(szClassName),COLOR(COLOR:White),REQ,TIP('Enter the ' & |
                'Name of your class.')
              PROMPT('&Base Class:'),AT(8,68),USE(?szParentClass:Prompt),TRN,#ORIG(?szParentClass:Prompt)
              LIST,AT(8,78,160,10),USE(szParentClassName),VSCROLL,COLOR(COLOR:White),DROP(10, |
                160),FORMAT('252L(2)@s63@'),FROM(ClassQueue),TIP('If your class is deri' & |
                'ved from another class,<0DH,0AH>select the Base  Class from the drop list.'), |
                #FIELDS(ClassQueue:szClassName),#ORIG(?List1)
              PROMPT('.i&nc File:'),AT(8,92),USE(?IncFileName:Prompt),TRN,#LINK(?IncFileName), |
                #ORIG(?IncFileName:Prompt)
              ENTRY(@s255),AT(8,102,146,10),USE(IncFileName),COLOR(COLOR:White),REQ,TIP('Select the' & |
                ' filename for the <0DH,0AH>generated include (inc) file.'),#LINK(?IncFileName:Prompt), |
                #ORIG(IncFileName)
              BUTTON('...'),AT(158,102,10,10),USE(?LookupFile),SKIP,#ORIG(?LookupFile),#SEQ(5)
              PROMPT('.cl&w File:'),AT(8,116),USE(?ClwFileName:Prompt),TRN,#LINK(?ClwFileName), |
                #ORIG(?ClwFileName:Prompt)
              ENTRY(@s255),AT(8,126,146,10),USE(ClwFileName),COLOR(COLOR:White),REQ,TIP('Select the' & |
                ' filename for the <0DH,0AH>generated source (clw) file.'),#LINK(?ClwFileName:Prompt), |
                #ORIG(ClwFileName)
              BUTTON('...'),AT(158,126,10,10),USE(?LookupClwFile),SKIP,#ORIG(?LookupFile), |
                #SEQ(6)
            END
            TAB('Methods'),USE(?Methods:Tab),HIDE,#ORIG(?Tab3)
              PROMPT('Select the base class methods that will be implemented by the class.'), |
                AT(8,20,160,20),USE(?Methods:Prompt),TRN,#ORIG(?Prompt7)
              LIST,AT(8,40,160,98),USE(?Methods),HVSCROLL,ALRT(MouseRight),ALRT(MouseLeft), |
                COLOR(COLOR:White),FORMAT('252L(2)IY@s63@'),FROM(BaseMethodQ),TIP('Select the' & |
                ' Base Class methods that you<0DH,0AH>want to derive in your class.<0DH>' & |
                '<0AH>Right Click for popup menu.'),#FIELDS(BaseMethodQ:szMethod),#ORIG(?List2)
            END
            TAB('Properties'),USE(?Properties:Tab),HIDE
              PROMPT('Select the properties for which you want accessor methods created.'), |
                AT(8,20,160,20),USE(?Properties:Prompt),TRN
              LIST,AT(8,40,160,98),USE(?Properties),HVSCROLL,ALRT(MouseLeft),COLOR(COLOR:White), |
                FORMAT('252L(2)IY@s63@'),FROM(PropertyQueue),TIP('Select the Properties' & |
                ' for which you want<0DH,0AH>accessor methods added to your class.')
            END
            TAB('Interfaces'),USE(?Interfaces:Tab),HIDE,#ORIG(?Tab4)
              PROMPT('Select the interfaces that will be implemented by the class.'),AT(8, |
                20,160,20),USE(?Interfaces:Prompt),TRN,#ORIG(?Prompt6)
              LIST,AT(8,40,160,88),USE(?Interfaces),HVSCROLL,ALRT(MouseLeft),COLOR(COLOR:White), |
                FORMAT('252L(2)IY@s63@'),FROM(InterfaceQueue),TIP('Select the Interface' & |
                's that will be<0DH,0AH>implemented by your class.'),#FIELDS(InterfaceQueue:szClassName), |
                #ORIG(?List2)
              CHECK(' &Generate Interface Callbacks'),AT(8,130),USE(bGenerateInterfaceCallbacks), |
                TIP('Check this option to have ClassViewer<0DH,0AH>generate Interface C' & |
                'allback methods.'),#ORIG(bGenerateInterfaceCallbacks)
            END
          END
          BUTTON('&Finish'),AT(73,146,48,14),USE(?OkButton),HIDE,TIP('Generate the clas' & |
            's include (inc) and source(clw) files.  <0DH,0AH>Note:  Existing files wil' & |
            'l be overwritten.')
          BUTTON('Cancel'),AT(125,146,48,14),USE(?CancelButton),TIP('Close the Add Clas' & |
            's Wiz ard <0DH,0AH>and return to the main screen.')
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winTemplateFiles
PROTOTYPE '(*TEMPLATEQTYPE pTemplateQ, STRING sCaption)'
PARAMETERS '(pTemplateQ, sCaption)'
[COMMON]
DESCRIPTION 'Edit Template Files List'
FROM ABC Window
MODIFIED '2017/07/02' ' 8:44:19'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('666310ba-da2a-4f2f-8494-5d635770b00a'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Q:'),USE(?Q:Prompt)
! ENTRY(@s1),USE(Q)
[REPORTCONTROLS]
! STRING(@s1),USE(Q)
Q                        QUEUE(TEMPLATEQTYPE),PRE(Q)
!!> GUID('af37f30f-f303-4552-8f5f-8e6a0dae1450'),PROMPT('Q:'),HEADER('Q'),PICTURE(@s1)
[SCREENCONTROLS]
! PROMPT('b ID:'),USE(?Q:bID:Prompt)
! ENTRY(@n3),USE(Q:bID)
[REPORTCONTROLS]
! STRING(@n3),USE(Q:bID)
bID                        BYTE
!!> GUID('76ec1ff9-e063-473d-837d-7434e8a873ed'),PROMPT('b ID:'),HEADER('b ID'),PICTURE(@n3)
                         END
!!> GUID('8ee6b985-c220-4292-b4b9-6768f32f8fe7')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?Delete') ('No Special Action')
WHEN  ('?Edit') ('No Special Action')
WHEN  ('?EditSource:Button') ('No Special Action')
WHEN  ('?Insert') ('No Special Action')
WHEN  ('?List') ('No Special Action')
WHEN  ('?OKButton') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 6
WHEN  ('?CancelButton') ('')
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?EditSource:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?EditSource:Button') ('')
WHEN  ('?Insert') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 6
WHEN  ('?CancelButton') ()
WHEN  ('?Delete') ()
WHEN  ('?Edit') ()
WHEN  ('?EditSource:Button') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()

%ButtonThread DEPEND %Control LONG TIMES 6
WHEN  ('?CancelButton') (0)
WHEN  ('?Delete') (0)
WHEN  ('?Edit') (0)
WHEN  ('?EditSource:Button') (0)
WHEN  ('?Insert') (0)
WHEN  ('?OKButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?Delete') ('25000')
WHEN  ('?Edit') ('25000')
WHEN  ('?EditSource:Button') ('25000')
WHEN  ('?Insert') ('25000')
WHEN  ('?List') ('25000')
WHEN  ('?OKButton') ('25000')
WHEN  ('?Panel1') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 6
WHEN  ('?CancelButton') ('')
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?EditSource:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 6
WHEN  ('?CancelButton') ()
WHEN  ('?Delete') ()
WHEN  ('?Edit') ()
WHEN  ('?EditSource:Button') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 6
WHEN  ('?CancelButton') (0)
WHEN  ('?Delete') (0)
WHEN  ('?Edit') (0)
WHEN  ('?EditSource:Button') (0)
WHEN  ('?Insert') (0)
WHEN  ('?OKButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?Delete') ('None')
WHEN  ('?Edit') ('None')
WHEN  ('?EditSource:Button') ('None')
WHEN  ('?Insert') ('None')
WHEN  ('?List') ('None')
WHEN  ('?OKButton') ('None')
WHEN  ('?Panel1') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 6
WHEN  ('?CancelButton') ('')
WHEN  ('?Delete') ('')
WHEN  ('?Edit') ('')
WHEN  ('?EditSource:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 6
WHEN  ('?CancelButton') ()
WHEN  ('?Delete') ()
WHEN  ('?Edit') ()
WHEN  ('?EditSource:Button') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 9
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?Delete') (1)
WHEN  ('?Edit') (1)
WHEN  ('?EditSource:Button') (1)
WHEN  ('?Insert') (1)
WHEN  ('?List') (1)
WHEN  ('?OKButton') (1)
WHEN  ('?Panel1') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?EditSource:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?EditSource:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?EditSource:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?Edit')TIMES 0
WHEN  ('?EditSource:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?List')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?Insert'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF FILEDIALOG('Select ' & CLIP(sCaption) & '...',szFilenames,'ClassViewer Template Files (*.TPV, *.TXT)|*.TPV;*.TXT|All Files (*.*)|*.*',FILE:KeepDir+FILE:NoError+FILE:Multi+FILE:LongName)
   IF INSTRING('|',szFilenames)
      !Multiple files selected
      J = LEN(szFilenames)
      I = INSTRING('|',szFilenames)
      szPath = UPPER(szFilenames[1 : I-1]) & '\'
      szFilenames = SUB(szFilenames,I+1,J-I)
      LOOP WHILE szFilenames
        J = LEN(szFilenames)
        I = INSTRING('|',szFilenames)
        IF I
           Q.szName = UPPER(szFilenames[1 : I-1])
           szFilenames = SUB(szFilenames,I+1,J-I)
        ELSE
           Q.szName = UPPER(szFilenames)
           szFilenames = ''
        END
        Q.szPath = szPath & Q.szName
        GET(Q,+Q.szName,+Q.szPath)
        IF ERRORCODE()
           ADD(Q,+Q.szName,+Q.szPath)
        END
      END
   ELSE
      !Only a single file selected
      J = LEN(szFilenames)
      LOOP I = J TO 1 BY -1
        IF szFilenames[I] = '\'
           Q.szName = UPPER(szFilenames[I+1 : J])
           Q.szPath = UPPER(szFilenames[1 : J])
           !Q.szPath = UPPER(szFilenames[1 : I])
           GET(Q,+Q.szName,+Q.szPath)
           IF ERRORCODE()
              ADD(Q,+Q.szName,+Q.szPath)
           END
           BREAK
        END
      END
   END
END
[END]
[END]
WHEN '?OKButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
FREE(pTemplateQ)
J = RECORDS(Q)
LOOP I = 1 TO J
  GET(Q,I)
  pTemplateQ = Q
  ADD(pTemplateQ,+pTemplateQ.szName,+pTemplateQ.szPath)
END
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 3
[END]
[END]
WHEN '?Delete'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(Q,CHOICE(?List))
IF CHOOSE(GlobalErrors.Throw(Msg:ConfirmDelete) = Level:Benign,RequestCompleted,RequestCancelled) = RequestCompleted
   DELETE(Q)
END
[END]
[END]
WHEN '?List'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(Q,CHOICE(?List))
ThisWindow.Reset()
[END]
[END]
WHEN '?EditSource:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO EditSource
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
szPath      CSTRING(256)
szFilenames CSTRING(4096)
szFilename  CSTRING(256)
I           LONG
J           LONG
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG
J   LONG
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
Window{PROP:Text} = sCaption
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
GET(Q,1)
?List{PROP:Selected} = POINTER(Q)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
FREE(Q)
J = RECORDS(pTemplateQ)
LOOP I = 1 TO J
  GET(pTemplateQ,I)
  Q = pTemplateQ
  ADD(Q,+Q.szName,+Q.szPath)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9101
PROPERTY:END
SetWindowLong(Window{prop:handle},GWL_STYLE,BAND(GetWindowLong(Window{prop:handle},GWL_STYLE),0DFFFFFFFh))
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Template_Files.htm')
   END
END
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF ~RECORDS(Q) OR ~CHOICE(?List)
   DISABLE(?Delete)
ELSE
   ENABLE(?Delete)
END
[END]
[END]
[END]
EMBED %QEIPInitControlsCodeSection
[INSTANCES]
WHEN '5'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(SELF.EQ,1)
SETFONT(SELF.EQ.Control.Feq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
SELF.EQ.Control.Feq{PROP:UPR} = TRUE
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
EditSource  ROUTINE
  DATA
I               LONG,AUTO
J               LONG,AUTO
lSearchLine     LONG(1)
szCommandLine   CSTRING(256)

  CODE
  szCommandline = 'Notepad.exe ' & Q.szPath
  IF glo:szEditorCommand
     szCommandLine = glo:szEditorCommand
     I = INSTRING('.EXE ',UPPER(szCommandLine),1)
     IF I
        szCommandLine = SHORTPATH(szCommandLine[1 : I+3]) & szCommandLine[I+4 : LEN(szCommandLine)]
     END
     !look for filename parameter token
     I = INSTRING('%1',szCommandLine,1)
     IF I
        szCommandLine = SUB(szCommandLine,1,I-1) & |
                        Q.szPath & |
                        SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
     END
     !look for line number parameter token
     I = INSTRING('%2',szCommandLine,1)
     IF I
        szCommandLine = SUB(szCommandLine,1,I-1) & |
                        lSearchLine & |
                        SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
     END
  END
  RUN(szCommandLine)
  IF RUNCODE() = -4   !Failed to execute
    CASE MESSAGE('An error occurred trying to execute the following command:||' & szCommandLine & |
            '||Do you want to use Notepad?',ERROR(),ICON:EXCLAMATION, |
            BUTTON:YES+BUTTON:NO,BUTTON:YES)
    OF BUTTON:YES
       RUN('Notepad.exe ' & Q.szPath)
    END
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 7
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Template_Files.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetClassLong
[INSTANCE]
INSTANCE 1
[PROMPTS]
%TplName DEFAULT  ('KCR_SetClassLong (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
%DisableMinimizeBox LONG  (0)
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[INSTANCE]
INSTANCE 3
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 4
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (0)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('?List')
WHEN  (2) ('?Insert')
WHEN  (3) ('?Delete')
WHEN  (4) ('?Panel1')
WHEN  (5) ('?OKButton')
WHEN  (6) ('?CancelButton')

%DisableResize DEPEND %OverrideControls LONG TIMES 6
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Lock Width')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Constant Right Border')
WHEN  (5) ('Lock Width')
WHEN  (6) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Right')
WHEN  (6) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 6
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Bottom')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')
WHEN  (6) ('Fix Bottom')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('AStringValue')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME KCR KCR_QueueEditInPlace
[INSTANCE]
INSTANCE 5
[PROMPTS]
%ListControl DEFAULT  ('?List')
%AddControl DEFAULT  ('')
%ChangeControl DEFAULT  ('?Edit')
%DeleteControl DEFAULT  ('')
%QueueEditInPlaceList MULTI LONG  (1, 2)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('szName')
WHEN  (2) ('szPath')

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (1)
WHEN  (2) (0)

%QueueNewClassInstance DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (1)
WHEN  (2) (1)

%QueueABCBaseClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('EditEntryClass')
WHEN  (2) ('EditEntryClass')

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('MyEditClass')
WHEN  (2) ('MyEditClass')

[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 6
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 8
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 9
PARENT 8
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME KCR KCR_SubClassWindow
[INSTANCE]
INSTANCE 11
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?List')
[ADDITION]
NAME KCR KCR_PaintWindowFrame
[INSTANCE]
INSTANCE 12
PARENT 11
[PROMPTS]
%TplName DEFAULT  ('KCR_PaintWindowFrame (Devuna)')
%TplDescription DEFAULT  ('Paint Window Frame')
%FrameColor LONG  (12164479)
[WINDOW]
Window  WINDOW('Template Files'),AT(,,198,178),DOUBLE,TILED,CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          LIST,AT(4,4,190,130),USE(?List),VSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White),FLAT, |
            FORMAT('60L(1)|FM~Name~@s63@?1020L(1)F~Path~S(255)@s255@'),FROM(Q),MSG('Browsing Queue'), |
            #ORIG(?List)
          BUTTON('&Insert'),AT(4,138,45,12),USE(?Insert),KEY(InsertKey),TIP('Add a new ' & |
            'tempplate file to the list'),#ORIG(?Insert)
          BUTTON('&Delete'),AT(53,138,45,12),USE(?Delete),KEY(DeleteKey),TIP('Remove the' & |
            ' currently highlighted file from the list'),#ORIG(?Delete)
          BUTTON('Edit'),AT(102,138,45,12),USE(?Edit),HIDE,#ORIG(?Button5)
          BUTTON('&Edit'),AT(149,138,45,12),USE(?EditSource:Button),#ORIG(?Button6)
          PANEL,AT(4,154,190,1),USE(?Panel1),BEVEL(-1,1),#ORIG(?Panel1)
          BUTTON('&OK'),AT(99,160,45,14),USE(?OKButton),TIP('Save changes and return to' & |
            ' the previous window'),#ORIG(?Button1)
          BUTTON('Cancel'),AT(149,160,45,14),USE(?CancelButton),TIP('Cancel changes and' & |
            ' return to the previous window'),#ORIG(?Button2)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetReturnType
PROTOTYPE '(*CSTRING sz),STRING'
PARAMETERS '(sz)'
[COMMON]
DESCRIPTION 'Get Procedure Return Type'
FROM ABC Source
MODIFIED '2004/12/14' ' 0:15:55'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
K               LONG,AUTO
Delimiter       STRING(1)
szWork          CSTRING(1024)
szAttributes    CSTRING(1024)
szReturnValue   CSTRING(64)
szKeyword       CSTRING(32)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
  szWork = sz
  K = INSTRING('PROCEDURE(',szWork,1)
  IF K
     Delimiter = ')'
  ELSE
     K = INSTRING('PROCEDURE,',szWork,1)
     IF K
        Delimiter = ','
     ELSE
        K = INSTRING('FUNCTION(',szWork,1)
        IF K
           Delimiter = ')'
        ELSE
           K = INSTRING('FUNCTION,',szWork,1)
           IF K
              Delimiter = ','
           END
        END
     END
  END

  IF K
     szAttributes = ''
     LOOP K = 1 TO LEN(szWork)
        IF szWork[K] = Delimiter
           CASE Delimiter
           OF ')'
              IF CLIP(szWork[K+1 : LEN(szWork)]) <> ''
                 szAttributes = UPPER(szWork[K+1 : LEN(szWork)])
              END
           OF ','
              IF CLIP(szWork[K : LEN(szWork)]) <> ''
                 szAttributes = UPPER(szWork[K : LEN(szWork)])
              END
           END
           BREAK
        END
     END
     IF szAttributes <> ''
        szKeyWord = 'DERIVED'
        DO RemoveKeyWord
        szKeyWord = 'REPLACE'
        DO RemoveKeyWord
        szKeyWord = 'PROTECTED'
        DO RemoveKeyWord
        szKeyWord = 'PROC'
        DO RemoveKeyWord
        szKeyWord = 'VIRTUAL'
        DO RemoveKeyWord
        szKeyWord = 'PRIVATE'
        DO RemoveKeyWord
        DO RemoveCommas
        szReturnValue = CLIP(LEFT(szAttributes))
     ELSE
        szReturnValue = ''
     END
  ELSE
     szReturnValue = ''
  END
  RETURN szReturnValue
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
RemoveKeyWord   ROUTINE
  DATA
I   LONG,AUTO
J   LONG,AUTO
N   LONG,AUTO

  CODE
  IF INSTRING(szKeyword,szAttributes,1)
    I = LEN(szKeyword)
    J = LEN(szAttributes)
    N = INSTRING(szKeyword,szAttributes,1)
    IF N+I <= J
       szAttributes = szAttributes[1 : N-1] & szAttributes[N+I : J]
    ELSE
       szAttributes = szAttributes[1 : N-1]
    END
  END
  EXIT

RemoveCommas    ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO
N       LONG,AUTO
szWork  CSTRING(64)

  CODE
  szWork = CLIP(LEFT(szAttributes))
  J = LEN(szWork)
  N = 0
  LOOP I = 1 TO J
     IF szWork[I] = ','
        CYCLE
     ELSE
        N += 1
        szAttributes[N] = szWork[I]
     END
  END
  szAttributes[N+1] = '<0>'
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetParameters
PROTOTYPE '(*CSTRING sz),STRING'
PARAMETERS '(sz)'
[COMMON]
DESCRIPTION 'Get parameters from passed prototype'
FROM ABC Source
MODIFIED '2003/07/03' '18:35:04'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
I       LONG,AUTO
J       LONG,AUTO
K       LONG,AUTO
N       LONG,AUTO
pSpace  LONG,AUTO
pComma  LONG,AUTO
pStart  LONG,AUTO
szWork  CSTRING(1025)
paramq  QUEUE,PRE(paramq)
param     CSTRING(256)
        END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !make local copy trimming spaces
  !====================================================================
  szWork = CLIP(LEFT(sz))

  !get rid of parenthesis if present
  !====================================================================
  J = LEN(szWork)
  I = INSTRING('(',szWork)
  IF I
     szWork = szWork[I+1 : J]
  END
  I = INSTRING(')',szWork)
  IF I
     szWork = szWork[1 : I-1]
  END

  !split string at commas and add to parameter queue
  !====================================================================
  pStart = 1
  pComma = INSTRING(',',szWork,1,pStart)
  LOOP WHILE pComma <> 0
     paramq.param = CLIP(LEFT(szWork[pStart : pComma-1]))
     ADD(paramq)
     pStart = pComma + 1
     pComma = INSTRING(',',szWork,1,pStart)
  END
  paramq.param = CLIP(LEFT(szWork[pStart : LEN(szWork)]))
  ADD(paramq)


  !loop through parameter queue
  !====================================================================
  J = RECORDS(paramq)
  LOOP I = 1 TO J
     GET(paramq,I)
     K = LEN(paramq.param)
     !step backwards through the parameter looking for a space or <
     !=================================================================
     LOOP N = K TO 1 BY -1
        IF INSTRING(paramq.param[N],' <<')
           !found space or < so discard prefix
           !===========================================================
           paramq.param = paramq.param[N+1 : K]
           !look fo omittable parameter delimeters and truncate if found
           !===========================================================
           K = INSTRING('=',paramq.param)
           IF K <> 0
              paramq.param[K] = '<0>'
           END
           K = INSTRING('>',paramq.param)
           IF K <> 0
              paramq.param[K] = '<0>'
           END
           !update the parameter
           !===========================================================
           PUT(paramq)
           BREAK
        END
     END
  END

  !finally loop through parameter queue and create result
  !====================================================================
  szWork = '('
  J = RECORDS(paramq)-1
  LOOP I = 1 TO J
     GET(paramq,I)
     szWork = szWork & paramq.param & ','
  END
  GET(paramq,I)     !I will be pointing to the last record in queue
  szWork = szWork & paramq.param & ')'

  RETURN szWork
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcParsePrompt
PROTOTYPE '(*CSTRING sz, *TOKENQUEUETYPE Token),BYTE'
PARAMETERS '(*CSTRING sz, *TOKENQUEUETYPE Token)!,BYTE'
[COMMON]
DESCRIPTION 'Parse #PROMPT string'
FROM ABC Source
MODIFIED '2017/07/02' ' 8:44:53'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
I             LONG,AUTO
J             LONG,AUTO
K             LONG,AUTO
N             LONG,AUTO
szWork        CSTRING(1025)
szAttr        CSTRING(21)
ReturnValue   BYTE,AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  ReturnValue = Level:Cancel
  szWork = UPPER(sz) & ','
  IF szWork[1 : 9] = '#PROMPT('''
     !Get the prompt text
     !=================================================================
     I = INSTRING('''',szWork,1,10)                             !look for closing quote
     IF I                                                       !RR - need to watch for escaped quotes
        Token.szPrompt = sz[10 : I-1]                           !get the prompt
        I = INSTRING(',',szWork,1,I+1)                          !look for comma
        IF I                                                    !found comma
           J = INSTRING(')',szWork,1,I+1)                       !look for closing parenthesis
           K = INSTRING('(',szWork,1,I+1)                       !maybe spin attributes
           IF K > 0 AND K < J
              J = K
           END
           IF J                                                 !found )
              Token.szType = CLIP(LEFT(szWork[I+1 : J-1]))      !get the type
              IF Token.szType[1] = '@'
                 Token.szPicture = Token.szType
                 Token.szType = 'ENTRY'
              END

              CASE Token.szType
              OF 'SPIN'
                 DO ProcessSpin

              OF 'DROP'
                 I = INSTRING(')',szWork,1,J+1)
                 IF I
                    Token.szScope = CLIP(LEFT(sz[J+2 : I-2]))
                    J = INSTRING(')',szWork,1,I+1)              !look for closing prompt )
                 ELSE
                    J = LEN(szWork)
                 END
              END

              I = INSTRING(',',szWork,1,J+1)                        !look for comma
              IF I                                                  !found comma
                 J = INSTRING(',',szWork,1,I+1)                     !look for comma
                 IF J                                               !found comma
                    !Token.szName = '%' & szWork[I+1 : J-1] & '%'    !get token name
                    Token.szName = szWork[I+1 : J-1]                !get token name
                    IF Token.szName[1] <> '%'
                       Token.szName = '%' & Token.szName
                    END

                    !process remaining attributes
                    !===========================================
                    I = INSTRING(',',szWork,1,J+1)
                    LOOP WHILE I <> 0
                       szAttr = CLIP(LEFT(szWork[J+1 : LEN(szWork)]))
                       IF szAttr[1 : 8] = 'DEFAULT('
                          DO ProcessDefault
                       ELSIF szAttr[1 : 3] = 'AT('
                          DO ProcessAt
                       ELSIF szAttr[1 : 9] = 'PROMPTAT('
                          DO ProcessPromptAt
                       ELSIF szAttr[1 : 6] = 'VALUE('
                          DO ProcessValue
                       ELSIF szAttr[1 : 6] = 'CHOICE'
                          Token.bChoice = TRUE
                          J = I
                       END
                       I = INSTRING(',',szWork,1,J+1)
                    END
                 ELSE                                                       !no more attributes
                    Token.szName = '%' & szWork[I+1 : LEN(szWork)] & '%'    !get token name
                 END
                 ReturnValue = Level:Benign
              ELSE
                 ReturnValue = Level:Benign
              END
           END
        END
     END
  END
  RETURN ReturnValue
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessDefault  ROUTINE
  DATA
M       LONG,AUTO
N       LONG,AUTO

  CODE
  M = J + 9
  N = INSTRING(')',szWork,1,M)
  IF N
     Token.szDefault = sz[M : N-1]
  END
  J = I
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessAt  ROUTINE
  DATA
M       LONG,AUTO
N       LONG,AUTO

  CODE
  M = J+4
  N = INSTRING(',',szWork,1,M)
  IF N
     IF N > M
        Token.xPos = CLIP(LEFT(szWork[M : N-1]))
     END
     M = N + 1

     N = INSTRING(',',szWork,1,M)
     IF N
        IF N > M
           Token.yPos = CLIP(LEFT(szWork[M : N-1]))
        END
        M = N + 1

        N = INSTRING(',',szWork,1,M)
        IF N
           IF N > M
              Token.width = CLIP(LEFT(szWork[M : N-1]))
           END
           M = N + 1

           N = INSTRING(')',szWork,1,M)
           IF N
              IF N > M
                 Token.height = CLIP(LEFT(szWork[M : N-1]))
              END
           END
        END
     END
  END
  J = INSTRING(')',szWork,1,J+1)
  IF INSTRING(',',szWork,1,J+1)
     J = INSTRING(',',szWork,1,J+1)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessPromptAt  ROUTINE
  DATA
M       LONG,AUTO
N       LONG,AUTO

  CODE
  M = J+10
  N = INSTRING(',',szWork,1,M)
  IF N
     IF N > M
        Token.prompt_xPos = CLIP(LEFT(szWork[M : N-1]))
     END
     M = N + 1

     N = INSTRING(',',szWork,1,M)
     IF N
        IF N > M
           Token.prompt_yPos = CLIP(LEFT(szWork[M : N-1]))
        END
        M = N + 1

        N = INSTRING(',',szWork,1,M)
        IF N
           IF N > M
              Token.prompt_width = CLIP(LEFT(szWork[M : N-1]))
           END
           M = N + 1

           N = INSTRING(')',szWork,1,M)
           IF N
              IF N > M
                 Token.prompt_height = CLIP(LEFT(szWork[M : N-1]))
              END
           END
        END
     END
  END
  J = INSTRING(')',szWork,1,J+1)
  IF INSTRING(',',szWork,1,J+1)
     J = INSTRING(',',szWork,1,J+1)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessValue  ROUTINE
  DATA
M       LONG,AUTO
N       LONG,AUTO

  CODE
  M = J + 7
  N = INSTRING(')',szWork,1,M)
  IF N
     Token.szRadioValue = sz[M : N-1]
  END
  J = I
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessSpin ROUTINE
  DATA
M       LONG,AUTO
N       LONG,AUTO

  CODE
  !J-->(
  N = INSTRING(')',szWork,1,J+1)                    !look for closing attribute )

  I = INSTRING(',',szWork,1,J+1)                    !look for comma
  IF N < I                                          !make sure it wasn't found beyond end )
     I = N                                          !point to end if it was
  END
  IF I                                                  !found picture
     Token.szPicture = CLIP(LEFT(szWork[J+1 : I-1]))    !get picture
     J = I                                              !J-->, or )
     IF I < N                                           !if not finished
        I = INSTRING(',',szWork,1,J+1)                  !look for comma
        IF N < I                                        !make sure it wasn't found beyond end )
           I = N                                        !point to end if it was
        END
        IF I                                                !found low
           Token.low = CLIP(LEFT(szWork[J+1 : I-1]))        !get low
           J = I                                            !J-->, or )
           IF I < N                                         !if not finished
              I = INSTRING(',',szWork,1,J+1)                !look for comma
              IF N < I                                      !make sure it wasn't found beyond end )
                 I = N                                      !point to end if it was
              END
              IF I                                              !found high
                 Token.high = CLIP(LEFT(szWork[J+1 : I-1]))     !get high
                 J = I                                          !J-->, or )
                 I = INSTRING(')',szWork,1,J+1)                 !look for )
                 IF I                                           !found step
                    Token.step = CLIP(LEFT(szWork[J+1 : I-1]))  !get step
                    J = I                                       !J-->)
                 END
              END
           END
        END
     END
  END
  J = INSTRING(')',szWork,1,N+1)                    !look for closing prompt )
  ASSERT(J <> 0)
  IF ~J
     J = LEN(szWork)
  END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winFavoritesMenu
PROTOTYPE '(*FAVORITESQTYPE pFavoritesMenuQ)'
PARAMETERS '(pFavoritesMenuQ)'
[COMMON]
DESCRIPTION 'Edit Favorites Menu List'
FROM ABC Window
MODIFIED '2017/07/02' ' 9:39:17'
[DATA]
[SCREENCONTROLS]
! PROMPT('Files Opened:'),USE(?FilesOpened:Prompt)
! ENTRY(@n3),USE(FilesOpened)
[REPORTCONTROLS]
! STRING(@n3),USE(FilesOpened)
FilesOpened              BYTE
!!> GUID('eaae58ca-ce91-4710-b48f-0463bc2b43c1'),PROMPT('Files Opened:'),HEADER('Files Opened'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Q:'),USE(?Q:Prompt)
! ENTRY(@s1),USE(Q)
[REPORTCONTROLS]
! STRING(@s1),USE(Q)
Q                        QUEUE,PRE(Q)
!!> GUID('45099550-a298-434f-bd10-df5146429f78'),PROMPT('Q:'),HEADER('Q'),PICTURE(@s1)
[SCREENCONTROLS]
! ENTRY(@s60),USE(Q:szName)
[REPORTCONTROLS]
! STRING(@s60),USE(Q:szName)
szName                     CSTRING(61)
!!> GUID('71f287c7-3540-45fd-a1aa-f72504e04c95'),PICTURE(@s60)
[SCREENCONTROLS]
! TEXT,USE(Q:szPath)
[REPORTCONTROLS]
! TEXT,USE(Q:szPath)
szPath                     CSTRING(256)
!!> GUID('d5dbbaaa-b131-41c5-9064-50df1ad3ef57'),PICTURE(@s255)
[SCREENCONTROLS]
! PROMPT('Sequence No:'),USE(?Q:SequenceNo:Prompt)
! ENTRY(@n3),USE(Q:SequenceNo)
[REPORTCONTROLS]
! STRING(@n3),USE(Q:SequenceNo)
SequenceNo                 BYTE
!!> GUID('4bf25d83-3487-40f7-97a6-462eb3ba8a53'),PROMPT('Sequence No:'),HEADER('Sequence No'),PICTURE(@n3)
[SCREENCONTROLS]
! PROMPT('Menu Feq:'),USE(?Q:MenuFeq:Prompt)
! ENTRY(@n-14),USE(Q:MenuFeq),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(Q:MenuFeq),RIGHT(1)
MenuFeq                    LONG
!!> GUID('9662099a-308c-4e21-bda8-89af663c1610'),PROMPT('Menu Feq:'),HEADER('Menu Feq'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
                         END
!!> GUID('5af3e8f4-d910-4edb-bd96-3cf38b5ef629')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Open {19}PROCEDURE(),DERIVED', 'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('AsciiFileClass')
WHEN  ('WindowToolbar') ('AsciiFileClass')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 10
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?Change') ('No Special Action')
WHEN  ('?Delete') ('No Special Action')
WHEN  ('?DnRow:Button') ('No Special Action')
WHEN  ('?Insert') ('No Special Action')
WHEN  ('?List') ('No Special Action')
WHEN  ('?OKButton') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')
WHEN  ('?UpRow:Button') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?Change') ('')
WHEN  ('?Delete') ('')
WHEN  ('?DnRow:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?UpRow:Button') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 5
WHEN  ('?Change') ('')
WHEN  ('?Delete') ('')
WHEN  ('?DnRow:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?UpRow:Button') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 7
WHEN  ('?CancelButton') ()
WHEN  ('?Change') ()
WHEN  ('?Delete') ()
WHEN  ('?DnRow:Button') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()
WHEN  ('?UpRow:Button') ()

%ButtonThread DEPEND %Control LONG TIMES 7
WHEN  ('?CancelButton') (0)
WHEN  ('?Change') (0)
WHEN  ('?Delete') (0)
WHEN  ('?DnRow:Button') (0)
WHEN  ('?Insert') (0)
WHEN  ('?OKButton') (0)
WHEN  ('?UpRow:Button') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 10
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?Change') ('25000')
WHEN  ('?Delete') ('25000')
WHEN  ('?DnRow:Button') ('25000')
WHEN  ('?Insert') ('25000')
WHEN  ('?List') ('25000')
WHEN  ('?OKButton') ('25000')
WHEN  ('?Panel1') ('25000')
WHEN  ('?UpRow:Button') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?Change') ('')
WHEN  ('?Delete') ('')
WHEN  ('?DnRow:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?UpRow:Button') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 7
WHEN  ('?CancelButton') ()
WHEN  ('?Change') ()
WHEN  ('?Delete') ()
WHEN  ('?DnRow:Button') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()
WHEN  ('?UpRow:Button') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 7
WHEN  ('?CancelButton') (0)
WHEN  ('?Change') (0)
WHEN  ('?Delete') (0)
WHEN  ('?DnRow:Button') (0)
WHEN  ('?Insert') (0)
WHEN  ('?OKButton') (0)
WHEN  ('?UpRow:Button') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 10
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?Change') ('None')
WHEN  ('?Delete') ('None')
WHEN  ('?DnRow:Button') ('None')
WHEN  ('?Insert') ('None')
WHEN  ('?List') ('None')
WHEN  ('?OKButton') ('None')
WHEN  ('?Panel1') ('None')
WHEN  ('?UpRow:Button') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 7
WHEN  ('?CancelButton') ('')
WHEN  ('?Change') ('')
WHEN  ('?Delete') ('')
WHEN  ('?DnRow:Button') ('')
WHEN  ('?Insert') ('')
WHEN  ('?OKButton') ('')
WHEN  ('?UpRow:Button') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 7
WHEN  ('?CancelButton') ()
WHEN  ('?Change') ()
WHEN  ('?Delete') ()
WHEN  ('?DnRow:Button') ()
WHEN  ('?Insert') ()
WHEN  ('?OKButton') ()
WHEN  ('?UpRow:Button') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 10
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?Change') (1)
WHEN  ('?Delete') (1)
WHEN  ('?DnRow:Button') (1)
WHEN  ('?Insert') (1)
WHEN  ('?List') (1)
WHEN  ('?OKButton') (1)
WHEN  ('?Panel1') (1)
WHEN  ('?UpRow:Button') (1)

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Change')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?DnRow:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?UpRow:Button')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Change')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?DnRow:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?UpRow:Button')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Change')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?DnRow:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?UpRow:Button')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 10
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?Change')TIMES 0
WHEN  ('?Delete')TIMES 0
WHEN  ('?DnRow:Button')TIMES 0
WHEN  ('?Insert')TIMES 0
WHEN  ('?List')TIMES 0
WHEN  ('?OKButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?UpRow:Button')TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?List')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OKButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
FREE(pFavoritesMenuQ)
J = RECORDS(Q)
LOOP I = 1 TO J
  GET(Q,I)
  Q.SequenceNo = I
  pFavoritesMenuQ = Q
  ADD(pFavoritesMenuQ)
END
[GROUP]
PRIORITY 5000
INSTANCE 2
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 3
[END]
[END]
WHEN '?List'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(Q,CHOICE(?List))
ThisWindow.Reset()
[END]
[END]
WHEN '?Insert'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4499
PROPERTY:END
CLEAR(q)
[END]
[END]
WHEN '?UpRow:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO TakeUpRow
[END]
[END]
WHEN '?DnRow:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO TakeDnRow
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
I           LONG
J           LONG
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG
J   LONG
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8001
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6001
PROPERTY:END
FREE(Q)
J = RECORDS(pFavoritesMenuQ)
LOOP I = 1 TO J
  GET(pFavoritesMenuQ,I)
  Q = pFavoritesMenuQ
  Q.SequenceNo = I
  ADD(Q,+Q.SequenceNo)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9101
PROPERTY:END
SetWindowLong(Window{prop:handle},GWL_STYLE,BAND(GetWindowLong(Window{prop:handle},GWL_STYLE),0DFFFFFFFh))
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
      oHH.SetTopic('Additional_Files.htm')
   END
END
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
IF ~CHOICE(?List)
   DISABLE(?Delete)
   DISABLE(?UpRow:Button)
   DISABLE(?DnRow:Button)
ELSE
   ENABLE(?UpRow:Button)
   ENABLE(?DnRow:Button)
   IF CHOICE(?List) = 1
      DISABLE(?UpRow:Button)
   END
   IF CHOICE(?List) = RECORDS(Q)
      DISABLE(?DnRow:Button)
   END
END
[END]
[END]
[END]
EMBED %QEIPFieldTakeEventCodeSection
[INSTANCES]
WHEN '8'
[INSTANCES]
WHEN 'Q:szPath'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4500
PROPERTY:END
CASE EVENT()
OF EVENT:DroppingDown
   IF FILEDIALOG('Select file to include...',szFilename,'All Files (*.*)|*.*',FILE:KeepDir+FILE:NoError+FILE:LongName)
      IF Q.szName = ''
         J = LEN(szFilename)
         LOOP I = J TO 1 BY -1
            IF szFilename[I] = '\'
               Q.szName = szFilename[I+1 : J]
            END
            BREAK
         END
      END
      Q.szPath = szFilename
      ReturnValue = EditAction:Forward
   ELSE
      ReturnValue = EditAction:None
   END
   RETURN(ReturnValue)
END
[END]
[END]
[END]
EMBED %QEIPFieldTakeEventDataSection
[INSTANCES]
WHEN '8'
[INSTANCES]
WHEN 'Q:szPath'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
szFilename  CSTRING(256)
I           LONG
J           LONG
[END]
[END]
[END]
EMBED %QEIPFieldCreateControlCodeSection
[INSTANCES]
WHEN '8'
[INSTANCES]
WHEN 'Q:szName'
[INSTANCES]
WHEN 'CreateControl'
[INSTANCES]
WHEN '(),VIRTUAL,PROTECTED'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
SETFONT(SELF.Feq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
SELF.Feq{PROP:BackGround} = COLOR:WHITE
!GET(SELF.EQ,1)
!SETFONT(SELF.EQ.Control.Feq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
!SELF.EQ.Control.Feq{PROP:BackGround} = COLOR:WHITE
[END]
[END]
[END]
WHEN 'Q:szPath'
[INSTANCES]
WHEN 'CreateControl'
[INSTANCES]
WHEN '(),VIRTUAL,PROTECTED'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
SETFONT(SELF.Feq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
SELF.Feq{PROP:BackGround} = COLOR:WHITE
SELF.Feq{PROP:DROP} = 0
SELF.Feq{PROP:Icon} = ICON:Ellipsis
!GET(SELF.EQ,2)
!SETFONT(SELF.EQ.Control.Feq,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
!SELF.EQ.Control.Feq{PROP:BackGround} = COLOR:WHITE
!SELF.EQ.Control.Feq{PROP:DROP} = 0
!SELF.EQ.Control.Feq{PROP:Icon} = ICON:Ellipsis
[END]
[END]
[END]
[END]
[END]
EMBED %QEIPPrimeRecordCodeSection
[INSTANCES]
WHEN '8'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
GET(Q,RECORDS(Q))
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
Q.MenuFeq = 0
Q.SequenceNo += 1
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
TakeUpRow   ROUTINE
  DATA
sav:SequenceNo  BYTE
sav:Pointer     LONG

  CODE
  sav:SequenceNo = Q.SequenceNo
  Q.SequenceNo -= 1
  PUT(Q)
  sav:Pointer = POINTER(Q)-1
  GET(Q,sav:Pointer)
  Q.SequenceNo = Sav:SequenceNo
  PUT(Q)
  SORT(Q,+Q.SequenceNo)
  GET(Q,sav:Pointer)
  ?List{PROP:Selected} = sav:Pointer
  ThisWindow.Reset()

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
TakeDnRow   ROUTINE
  DATA
sav:SequenceNo  BYTE
sav:Pointer     LONG

  CODE
  sav:SequenceNo = Q.SequenceNo
  Q.SequenceNo += 1
  PUT(Q)
  sav:Pointer = POINTER(Q)+1
  GET(Q,sav:Pointer)
  Q.SequenceNo = Sav:SequenceNo
  PUT(Q)
  SORT(Q,+Q.SequenceNo)
  GET(Q,sav:Pointer)
  ?List{PROP:Selected} = sav:Pointer
  ThisWindow.Reset()

  EXIT
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[ADDITION]
NAME KCR KCR_SetClassLong
[INSTANCE]
INSTANCE 10
[PROMPTS]
%TplName DEFAULT  ('KCR_SetClassLong (Devuna)')
%TplDescription DEFAULT  ('Change Window Style')
%RemoveIcon LONG  (1)
%OverrideDefaultIcon LONG  (0)
%Icon DEFAULT  ('')
%DisableMinimizeBox LONG  (0)
%EnableSystemMenuBox LONG  (1)
%IncludeQuestionMark LONG  (0)
%TransparentWindow LONG  (0)
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 7
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('Additional_Files.htm')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 2
[INSTANCE]
INSTANCE 3
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 4
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (0)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 9
WHEN  (1) ('?List')
WHEN  (2) ('?Insert')
WHEN  (3) ('?Delete')
WHEN  (4) ('?Panel1')
WHEN  (5) ('?OKButton')
WHEN  (6) ('?CancelButton')
WHEN  (7) ('?Change')
WHEN  (8) ('?UpRow:Button')
WHEN  (9) ('?DnRow:Button')

%DisableResize DEPEND %OverrideControls LONG TIMES 9
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 9
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Lock Width')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Constant Right Border')
WHEN  (5) ('Lock Width')
WHEN  (6) ('Lock Width')
WHEN  (7) ('Lock Width')
WHEN  (8) ('Lock Width')
WHEN  (9) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 9
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')
WHEN  (7) ('Lock Height')
WHEN  (8) ('Lock Height')
WHEN  (9) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 9
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Right')
WHEN  (6) ('Fix Right')
WHEN  (7) ('Fix Left')
WHEN  (8) ('Fix Right')
WHEN  (9) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 9
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Bottom')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')
WHEN  (6) ('Fix Bottom')
WHEN  (7) ('Fix Bottom')
WHEN  (8) ('Fix Bottom')
WHEN  (9) ('Fix Bottom')

%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('AStringValue')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 6
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME KCR_QEIP KCR_QueueEIP
[INSTANCE]
INSTANCE 8
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (0)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Always')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Default')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  (1, 2)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 2
WHEN  (1) (Q:szName)
WHEN  (2) (Q:szPath)

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('''''')
WHEN  (2) ('''''')

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (1)
WHEN  (2) (1)

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('EditEntryClass')
WHEN  (2) ('EditDropComboClass')

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (16711680)
WHEN  (2) (16711680)

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[ADDITION]
NAME KCR KCR_ToolTips
[INSTANCE]
INSTANCE 5
[PROMPTS]
%TplName DEFAULT  ('KCR_ToolTips (Devuna)')
%TplDescription DEFAULT  ('ToolTips Extension')
%DontApply LONG  (0)
%UseBalloonTips LONG  (1)
%ApplyAsRegularTip LONG  (1)
%ToolTipControls MULTI LONG  ()
%ToolTipControl DEPEND %ToolTipControls DEFAULT TIMES 0

%MultiLineTip DEPEND %ToolTipControls LONG TIMES 0

%ToolTipTextOption DEPEND %ToolTipControls DEFAULT TIMES 0

%TTLocalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTGlobalVariable DEPEND %ToolTipControls DEFAULT TIMES 0

%TTText DEPEND %ToolTipControls DEFAULT TIMES 0

%ControlGetsFocus DEPEND %ToolTipControls LONG TIMES 0

%ToolTipFeq DEPEND %ToolTipControls DEFAULT TIMES 0

%ToolTipTextColour LONG  (8388608)
%SetDelayTime LONG  (0)
%AutopopDelay DEFAULT  ('5000')
%InitialDelay DEFAULT  ('2000')
%ReshowDelay DEFAULT  ('100')
%SetBackgroundColour LONG  (0)
%ToolTipBkColour LONG  (12648447)
[ADDITION]
NAME ClassViewer OptionalToolTips
[INSTANCE]
INSTANCE 9
PARENT 5
[PROMPTS]
%TplName DEFAULT  ('OptionalToolTips (ABC)')
%TplDescription DEFAULT  ('Optional ToolTips Extension')
%ConditionalGlobalVariable DEFAULT  ('glo:bShowTips')
%ToolTipDelayTime DEFAULT  ('1000')
[ADDITION]
NAME KCR KCR_SubClassWindow
[INSTANCE]
INSTANCE 11
[PROMPTS]
%TplName DEFAULT  ('KCR_SubClassWindow (Devuna)')
%TplDescription DEFAULT  ('SubClass Window Extension')
%SubClassOption DEFAULT  ('Control')
%SubClassControl DEFAULT  ('?List')
[ADDITION]
NAME KCR KCR_PaintWindowFrame
[INSTANCE]
INSTANCE 12
PARENT 11
[PROMPTS]
%TplName DEFAULT  ('KCR_PaintWindowFrame (Devuna)')
%TplDescription DEFAULT  ('Paint Window Frame')
%FrameColor LONG  (12164479)
[WINDOW]
Window  WINDOW('Favorites Menu'),AT(,,198,178),DOUBLE,TILED,CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          LIST,AT(4,4,190,130),USE(?List),VSCROLL,ALRT(MouseLeft2),COLOR(COLOR:White,COLOR:HIGHLIGHTTEXT, |
            COLOR:HIGHLIGHT),FLAT,FORMAT('60L(1)|FM~Menu Text~@s60@1020L(1)F~Path~S(255)@s255@'), |
            FROM(Q),MSG('Browsing Queue'),#FIELDS(Q:szName,Q:szPath),#ORIG(?List),#SEQ(8)
          BUTTON('&Insert'),AT(4,138,45,12),USE(?Insert),KEY(InsertKey),TIP('Add a new ' & |
            'item to the favorites menu'),#ORIG(?Insert),#SEQ(8)
          BUTTON('&Delete'),AT(53,138,45,12),USE(?Delete),KEY(DeleteKey),TIP('Delete the' & |
            ' currently highlighted item from the favorites menu'),#ORIG(?Delete),#SEQ(8)
          BUTTON('Edit'),AT(102,138,45,12),USE(?Change),HIDE,TIP('Edit the currently hi' & |
            'ghlighted item in the favorites menu'),#ORIG(?Change),#SEQ(8)
          BUTTON,AT(152,138,20,12),USE(?UpRow:Button),ICON('ABUPROW.ICO'),TIP('Move the h' & |
            'ighlighted item up in the list'),#ORIG(?Button6)
          BUTTON,AT(174,138,20,12),USE(?DnRow:Button),ICON('ABDNROW.ICO'),TIP('Move the h' & |
            'ighlighted item down in the list'),#ORIG(?UpRow:Button)
          PANEL,AT(4,154,190,1),USE(?Panel1),BEVEL(-1,1),#ORIG(?Panel1)
          BUTTON('&OK'),AT(99,160,45,14),USE(?OKButton),TIP('Save changes and return to' & |
            ' the previous window'),#ORIG(?Button1)
          BUTTON('Cancel'),AT(149,160,45,14),USE(?CancelButton),TIP('Cancel changes and' & |
            ' return to the previous window'),#ORIG(?Button2)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcRemoveWhitespace
PROTOTYPE '(*STRING s),STRING'
PARAMETERS '(*STRING s)'
[COMMON]
DESCRIPTION 'Remove unnecessary white space from passed string'
FROM ABC Source
MODIFIED '2013/03/07' ' 7:20:39'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
szWork      CSTRING(4097),AUTO
I           LONG,AUTO
J           LONG,AUTO
K           LONG,AUTO
bSkipSpaces BYTE,AUTO
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  bSkipSpaces = FALSE
  szWork = ''
  J = LEN(CLIP(s))
  K = 0
  LOOP I = 1 TO J
    CASE s[I]
    OF ' '
       IF ~bSkipSpaces
          K += 1
          szWork[K] = s[I]
          bSkipSpaces = TRUE
       END
    ELSE
       bSkipSpaces = FALSE
       K += 1
       szWork[K] = s[I]
    END
  END
  K += 1
  szWork[K] = '<0>'

  ! replace ', ' with ','
  !==========================================
  J = LEN(szWork)
  I = INSTRING(', ',szWork,1)
  LOOP WHILE I <> 0
     szWork = szWork[1 : I] & szWork[I+2 : J]
     J = LEN(szWork)
     I = INSTRING(', ',szWork,1)
  END

  ! replace ') ' with ')'
  !==========================================
  J = LEN(szWork)
  I = INSTRING(') ',szWork,1)
  LOOP WHILE I <> 0
     szWork = szWork[1 : I] & szWork[I+2 : J]
     J = LEN(szWork)
     I = INSTRING(') ',szWork,1)
  END


  ! replace '( ' with '('
  !==========================================
  J = LEN(szWork)
  I = INSTRING('( ',szWork,1)
  LOOP WHILE I <> 0
     szWork = szWork[1 : I] & szWork[I+2 : J]
     J = LEN(szWork)
     I = INSTRING('( ',szWork,1)
  END

  ! replace ' ( ' with '('
  !==========================================
  J = LEN(szWork)
  I = INSTRING(' (',szWork,1)
  LOOP WHILE I <> 0
     szWork = szWork[1 : I-1] & szWork[I+1 : J]
     J = LEN(szWork)
     I = INSTRING(' (',szWork,1)
  END

  RETURN(CLIP(szWork))
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/07/01' '10:37:46'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winUpdateProperty
[COMMON]
DESCRIPTION 'Update Class Property'
FROM ABC Window
CATEGORY 'Window'
MODIFIED '2008/12/22' '10:30:33'
[DATA]
[SCREENCONTROLS]
! PROMPT('Action Message:'),USE(?ActionMessage:Prompt)
! ENTRY(@s39),USE(ActionMessage)
[REPORTCONTROLS]
! STRING(@s39),USE(ActionMessage)
ActionMessage            CSTRING(40)
!!> GUID('3b12bfad-537b-4555-9cc3-b259ca65281f'),PROMPT('Action Message:'),HEADER('Action Message'),PICTURE(@s39)
[SCREENCONTROLS]
! ENTRY(@s64),USE(PRO:PropertyName)
[REPORTCONTROLS]
! STRING(@s64),USE(PRO:PropertyName)
PRO:PropertyName         CSTRING(65)
!!> GUID('bc46f47e-ef6f-488f-8e74-2754722fdea4'),PICTURE(@s64)
[SCREENCONTROLS]
! ENTRY(@s30),USE(PRO:DataType)
[REPORTCONTROLS]
! STRING(@s30),USE(PRO:DataType)
PRO:DataType             CSTRING(31)
!!> GUID('1a75d811-1bd1-4d9b-845e-78e72a530abf'),PICTURE(@s30)
[SCREENCONTROLS]
! ENTRY(@s16),USE(PRO:Scope)
[REPORTCONTROLS]
! STRING(@s16),USE(PRO:Scope)
PRO:Scope                CSTRING(17)
!!> GUID('bae65468-fda8-4149-ba91-108b1c28e651'),PICTURE(@s16)
[SCREENCONTROLS]
! ENTRY(@n3),USE(PRO:ReferenceVar)
[REPORTCONTROLS]
! STRING(@n3),USE(PRO:ReferenceVar)
PRO:ReferenceVar         BYTE
!!> GUID('3db66512-359a-41bd-ad09-37ebd49ab379'),PICTURE(@n3)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 12
WHEN  ('') ('No Special Action')
WHEN  ('?ActionMessage') ('No Special Action')
WHEN  ('?Cancel') ('No Special Action')
WHEN  ('?OK') ('No Special Action')
WHEN  ('?PRO:DataType') ('No Special Action')
WHEN  ('?PRO:DataType:Prompt') ('No Special Action')
WHEN  ('?PRO:PropertyName') ('No Special Action')
WHEN  ('?PRO:PropertyName:Prompt') ('No Special Action')
WHEN  ('?PRO:ReferenceVar') ('No Special Action')
WHEN  ('?PRO:Scope') ('No Special Action')
WHEN  ('?PRO:Scope:Prompt') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?OK') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?OK') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 12
WHEN  ('') ('25000')
WHEN  ('?ActionMessage') ('25000')
WHEN  ('?Cancel') ('25000')
WHEN  ('?OK') ('25000')
WHEN  ('?PRO:DataType') ('25000')
WHEN  ('?PRO:DataType:Prompt') ('25000')
WHEN  ('?PRO:PropertyName') ('25000')
WHEN  ('?PRO:PropertyName:Prompt') ('25000')
WHEN  ('?PRO:ReferenceVar') ('25000')
WHEN  ('?PRO:Scope') ('25000')
WHEN  ('?PRO:Scope:Prompt') ('25000')
WHEN  ('?Panel1') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OK') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?OK') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 12
WHEN  ('') ('None')
WHEN  ('?ActionMessage') ('None')
WHEN  ('?Cancel') ('None')
WHEN  ('?OK') ('None')
WHEN  ('?PRO:DataType') ('None')
WHEN  ('?PRO:DataType:Prompt') ('None')
WHEN  ('?PRO:PropertyName') ('None')
WHEN  ('?PRO:PropertyName:Prompt') ('None')
WHEN  ('?PRO:ReferenceVar') ('None')
WHEN  ('?PRO:Scope') ('None')
WHEN  ('?PRO:Scope:Prompt') ('None')
WHEN  ('?Panel1') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OK') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OK') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('?PRO:PropertyName') ()

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?PRO:PropertyName') ()

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?PRO:PropertyName') ('')

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 1
WHEN  ('?PRO:PropertyName') ()

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?PRO:PropertyName') ()

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?PRO:PropertyName') ('')

%PostLookupDuringValidate DEPEND %Control LONG TIMES 12
WHEN  ('') (1)
WHEN  ('?ActionMessage') (1)
WHEN  ('?Cancel') (1)
WHEN  ('?OK') (1)
WHEN  ('?PRO:DataType') (1)
WHEN  ('?PRO:DataType:Prompt') (1)
WHEN  ('?PRO:PropertyName') (1)
WHEN  ('?PRO:PropertyName:Prompt') (1)
WHEN  ('?PRO:ReferenceVar') (1)
WHEN  ('?PRO:Scope') (1)
WHEN  ('?PRO:Scope:Prompt') (1)
WHEN  ('?Panel1') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ActionMessage')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?PRO:DataType')TIMES 0
WHEN  ('?PRO:DataType:Prompt')TIMES 0
WHEN  ('?PRO:PropertyName')TIMES 0
WHEN  ('?PRO:PropertyName:Prompt')TIMES 0
WHEN  ('?PRO:ReferenceVar')TIMES 0
WHEN  ('?PRO:Scope')TIMES 0
WHEN  ('?PRO:Scope:Prompt')TIMES 0
WHEN  ('?Panel1')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ActionMessage')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?PRO:DataType')TIMES 0
WHEN  ('?PRO:DataType:Prompt')TIMES 0
WHEN  ('?PRO:PropertyName')TIMES 0
WHEN  ('?PRO:PropertyName:Prompt')TIMES 0
WHEN  ('?PRO:ReferenceVar')TIMES 0
WHEN  ('?PRO:Scope')TIMES 0
WHEN  ('?PRO:Scope:Prompt')TIMES 0
WHEN  ('?Panel1')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ActionMessage')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?PRO:DataType')TIMES 0
WHEN  ('?PRO:DataType:Prompt')TIMES 0
WHEN  ('?PRO:PropertyName')TIMES 0
WHEN  ('?PRO:PropertyName:Prompt')TIMES 0
WHEN  ('?PRO:ReferenceVar')TIMES 0
WHEN  ('?PRO:Scope')TIMES 0
WHEN  ('?PRO:Scope:Prompt')TIMES 0
WHEN  ('?Panel1')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 12
WHEN  ('')TIMES 0
WHEN  ('?ActionMessage')TIMES 0
WHEN  ('?Cancel')TIMES 0
WHEN  ('?OK')TIMES 0
WHEN  ('?PRO:DataType')TIMES 0
WHEN  ('?PRO:DataType:Prompt')TIMES 0
WHEN  ('?PRO:PropertyName')TIMES 0
WHEN  ('?PRO:PropertyName:Prompt')TIMES 0
WHEN  ('?PRO:ReferenceVar')TIMES 0
WHEN  ('?PRO:Scope')TIMES 0
WHEN  ('?PRO:Scope:Prompt')TIMES 0
WHEN  ('?Panel1')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Panel1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
!Initialise the fields
CASE SELF.Request
OF InsertRecord
   PRO:PropertyName = ''
   PRO:DataType = ''
   PRO:Scope = ''
   PRO:ReferenceVar = FALSE
OF ChangeRecord
   PRO:PropertyName = PropertyQ.szPropertyName
   IF PropertyQ.szDataType[1] = '&'
      PRO:ReferenceVar = TRUE
      PRO:DataType = PropertyQ.szDataType[2 : LEN(PropertyQ.szDataType)]
      IF srcIsClassReference(PropertyQ.szDataType,loc:szClassName,loc:lClassId)
         PRO:DataType = 'CLASS'
      END
   ELSE
      PRO:ReferenceVar = FALSE
      PRO:DataType = '&' & PropertyQ.szDataType
      IF srcIsClassReference(PRO:DataType,loc:szClassName,loc:lClassId)
         PRO:DataType = 'CLASS'
      ELSE
         PRO:DataType = PropertyQ.szDataType
      END
   END
   IF PropertyQ.bPrivate
      PRO:Scope = 'Private'
   ELSIF PropertyQ.bProtected
      PRO:Scope = 'Protected'
   ELSE
      PRO:Scope = 'Public'
   END
OF DeleteRecord
   !Ask Delete Reecord
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8030
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I               LONG,AUTO
J               LONG,AUTO
loc:szClassName LIKE(ClassQ.szClassName),AUTO
loc:lClassId    LIKE(ClassQ.lClassId),AUTO
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OK'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 3
[END]
[END]
WHEN '?Cancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 4
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 3
[INSTANCE]
INSTANCE 4
[CALLS]
srcIsClassReference
srcIsInterfaceReference
srcIsStructureReference
[WINDOW]
window  WINDOW('Update Property'),AT(,,214,100),FONT(,,COLOR:Black,,CHARSET:ANSI),DOUBLE,TILED, |
          CENTER,GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          PANEL,AT(4,4,206,74),USE(?Panel1),FILL(COLOR:BTNFACE),#ORIG(?Panel1)
          PROMPT('&Property Name:'),AT(8,8),USE(?PRO:PropertyName:Prompt),TRN
          ENTRY(@s64),AT(62,8,,10),USE(PRO:PropertyName)
          PROMPT('&Data Type:'),AT(8,22),USE(?PRO:DataType:Prompt),TRN
          COMBO(@s30),AT(62,22,,10),USE(PRO:DataType),LEFT(2),VSCROLL,DROP(10),FROM('ANY|#ANY|A' & |
            'STRING|#ASTRING|BFLOAT4|#BFLOAT4|BFLOAT8|#BFLOAT8|BYTE|#BYTE|CLASS|#CLASS|' & |
            'CSTRING|#CSTRING|DATE|#DATE|DECIMAL|#DECIMAL|INTERFACE|#INTERFACE|LIKE|#LI' & |
            'KE|LONG|#LONG|MEMO|#MEMO|PDECIMAL|#PDECIMAL|PSTRING|#PSTRING|REAL|#REAL|SH' & |
            'ORT|#SHORT|SIGNED|#SIGNED|SREAL|#SREAL|STRING|#STRING|STRUCTURE|#STRUCTURE' & |
            '|TIME|#TIME|ULONG|#ULONG|UNSIGNED|#UNSIGNED|USHORT|#USHORT')
          PROMPT('&Scope:'),AT(8,36),USE(?PRO:Scope:Prompt),TRN
          LIST,AT(62,36,,10),USE(PRO:Scope),LEFT(2),DROP(5),FROM('Public|#Public|Privat' & |
            'e|#Private|Protected|#Protected')
          CHECK(' &Reference Variable'),AT(62,50,,10),USE(PRO:ReferenceVar),COLOR(COLOR:BTNFACE), |
            VALUE('1','0')
          BUTTON('&OK'),AT(116,82,45,14),USE(?OK),DEFAULT,REQ
          BUTTON('Cancel'),AT(165,82,45,14),USE(?Cancel)
          STRING(@S40),AT(8,64),USE(ActionMessage),TRN
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winUpdateMethod
[COMMON]
DESCRIPTION 'Update Class Method'
FROM ABC Window
MODIFIED '2008/12/22' '10:31:27'
[DATA]
[SCREENCONTROLS]
! ENTRY(@s20),USE(MTH:MethodName)
[REPORTCONTROLS]
! STRING(@s20),USE(MTH:MethodName)
MTH:MethodName           LIKE(MethodQ.szMethodName)
!!> GUID('58bdd6d6-603b-426c-a2c0-e37368773fdf'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s20),USE(MTH:ParameterList)
[REPORTCONTROLS]
! STRING(@s20),USE(MTH:ParameterList)
MTH:ParameterList        LIKE(MethodQ.szPrototype)
!!> GUID('87544a53-3c06-453e-b4ed-18735f618074'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@s16),USE(MTH:ReturnType)
[REPORTCONTROLS]
! STRING(@s16),USE(MTH:ReturnType)
MTH:ReturnType           CSTRING(17)
!!> GUID('a140b39f-e720-4f37-b834-b7a4a64b5d93'),PICTURE(@s16)
[SCREENCONTROLS]
! ENTRY(@s6),USE(MTH:CallingConvention)
[REPORTCONTROLS]
! STRING(@s6),USE(MTH:CallingConvention)
MTH:CallingConvention    CSTRING(7)
!!> GUID('f162f44d-6fd6-4a07-a8db-a39caf1aaffa'),PICTURE(@s6)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MTH:Raw)
[REPORTCONTROLS]
! STRING(@n3),USE(MTH:Raw)
MTH:Raw                  BYTE
!!> GUID('ac0ca85d-3d5a-42ff-bd7c-2d79e966299d'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s63),USE(MTH:Name)
[REPORTCONTROLS]
! STRING(@s63),USE(MTH:Name)
MTH:Name                 CSTRING(64)
!!> GUID('d949f6de-b275-4a79-8f80-412ebbc95b6d'),PICTURE(@s63)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MTH:Type)
[REPORTCONTROLS]
! STRING(@n3),USE(MTH:Type)
MTH:Type                 BYTE
!!> GUID('64699d47-2b33-4288-b927-783d4c09613b'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MTH:DLL)
[REPORTCONTROLS]
! STRING(@n3),USE(MTH:DLL)
MTH:DLL                  BYTE
!!> GUID('876d9f47-6130-40b9-9254-b3c462acddab'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MTH:Proc)
[REPORTCONTROLS]
! STRING(@n3),USE(MTH:Proc)
MTH:Proc                 BYTE
!!> GUID('39bd6561-9b90-428f-a5fc-e388f81e3739'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@s16),USE(MTH:Scope)
[REPORTCONTROLS]
! STRING(@s16),USE(MTH:Scope)
MTH:Scope                CSTRING(17)
!!> GUID('5eb7d36d-e025-4dee-b311-b5e40a1c9d88'),PICTURE(@s16)
[SCREENCONTROLS]
! ENTRY(@s20),USE(MTH:Virtual)
[REPORTCONTROLS]
! STRING(@s20),USE(MTH:Virtual)
MTH:Virtual              LIKE(MethodQ.bVirtual)
!!> GUID('fda5094d-436b-45db-980d-804797b8811b'),PICTURE(@s20)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MTH:Replace)
[REPORTCONTROLS]
! STRING(@n3),USE(MTH:Replace)
MTH:Replace              BYTE
!!> GUID('947162c3-052b-422b-9ff1-c7da78212eab'),PICTURE(@n3)
[SCREENCONTROLS]
! ENTRY(@n3),USE(MTH:Derived)
[REPORTCONTROLS]
! STRING(@n3),USE(MTH:Derived)
MTH:Derived              BYTE
!!> GUID('cf1afb28-5df9-4e3d-9311-626de37ebb3d'),PICTURE(@n3)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOProcCommCalled')
WHEN  ('WindowToolbar') ('ADOProcCommCalled')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('No Special Action')
WHEN  ('?Cancel:Button') ('No Special Action')
WHEN  ('?MTH:Scope') ('No Special Action')
WHEN  ('?OK:Button') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')
WHEN  ('?szPrototype:Prompt') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel:Button') ('')
WHEN  ('?OK:Button') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel:Button') ('')
WHEN  ('?OK:Button') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 2
WHEN  ('?Cancel:Button') ()
WHEN  ('?OK:Button') ()

%ButtonThread DEPEND %Control LONG TIMES 2
WHEN  ('?Cancel:Button') (0)
WHEN  ('?OK:Button') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('25000')
WHEN  ('?Cancel:Button') ('25000')
WHEN  ('?MTH:Scope') ('25000')
WHEN  ('?OK:Button') ('25000')
WHEN  ('?Panel1') ('25000')
WHEN  ('?szPrototype:Prompt') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel:Button') ('')
WHEN  ('?OK:Button') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 2
WHEN  ('?Cancel:Button') ()
WHEN  ('?OK:Button') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 2
WHEN  ('?Cancel:Button') (0)
WHEN  ('?OK:Button') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('None')
WHEN  ('?Cancel:Button') ('None')
WHEN  ('?MTH:Scope') ('None')
WHEN  ('?OK:Button') ('None')
WHEN  ('?Panel1') ('None')
WHEN  ('?szPrototype:Prompt') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 2
WHEN  ('?Cancel:Button') ('')
WHEN  ('?OK:Button') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 2
WHEN  ('?Cancel:Button') ()
WHEN  ('?OK:Button') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 8
WHEN  ('') (1)
WHEN  ('?Cancel:Button') (1)
WHEN  ('?MTH:MethodName') (1)
WHEN  ('?MTH:ParameterList') (1)
WHEN  ('?MTH:Scope') (1)
WHEN  ('?OK:Button') (1)
WHEN  ('?Panel1') (1)
WHEN  ('?szPrototype:Prompt') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?Cancel:Button')TIMES 0
WHEN  ('?MTH:Scope')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?szPrototype:Prompt')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?Cancel:Button')TIMES 0
WHEN  ('?MTH:Scope')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?szPrototype:Prompt')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?Cancel:Button')TIMES 0
WHEN  ('?MTH:Scope')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?szPrototype:Prompt')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 6
WHEN  ('')TIMES 0
WHEN  ('?Cancel:Button')TIMES 0
WHEN  ('?MTH:Scope')TIMES 0
WHEN  ('?OK:Button')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?szPrototype:Prompt')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Panel1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OK:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
!SORT(ModuleQ,+ModuleQ.lModuleId)
IF TreeQ.lIncludeId
   ModuleQ.lModuleId = TreeQ.lIncludeId
   GET(ModuleQ,+ModuleQ.lModuleId)
 ASSERT(~ERRORCODE())
   AsciiFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
   MyAsciiFileClassActive = MyAsciiFileClass.Init(AsciiFile,AsciiFile.Textline,AsciiFilename,GlobalErrors)
   IF MyAsciiFileClassActive
      MESSAGE(MyAsciiFileClass.GetLine(TreeQ.lLineNum))
      MyAsciiFileClass.Kill()
   END
END
IF TreeQ.lModuleId
   ModuleQ.lModuleId = TreeQ.lModuleId
   GET(ModuleQ,+ModuleQ.lModuleId)
 ASSERT(~ERRORCODE())
   AsciiFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
   MyAsciiFileClassActive = MyAsciiFileClass.Init(AsciiFile,AsciiFile.Textline,AsciiFilename,GlobalErrors)
   IF MyAsciiFileClassActive
      MESSAGE(MyAsciiFileClass.GetLine(TreeQ.lSourceLine))
      MyAsciiFileClass.Kill()
   END
END
[GROUP]
PRIORITY 5100
INSTANCE 3
[END]
[END]
WHEN '?Cancel:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[GROUP]
PRIORITY 5000
INSTANCE 4
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8030
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7501
PROPERTY:END
!Initialise the fields
CASE SELF.Request
OF InsertRecord
   MTH:MethodName = ''
   MTH:ParameterList = ''
   MTH:ReturnType = ''
   MTH:CallingConvention = ''
   MTH:Raw = FALSE
   MTH:Name = ''
   MTH:Type = FALSE
   MTH:DLL = FALSE
   MTH:Proc = FALSE
   MTH:Scope = ''
   MTH:Virtual = FALSE
   MTH:Replace = FALSE
   MTH:Derived = FALSE
OF ChangeRecord
   IF TreeQ.lIncludeId
      ModuleQ.lModuleId = TreeQ.lIncludeId
      GET(ModuleQ,+ModuleQ.lModuleId)
    ASSERT(~ERRORCODE())
      AsciiFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
      MyAsciiFileClassActive = MyAsciiFileClass.Init(AsciiFile,AsciiFile.Textline,AsciiFilename,GlobalErrors)
      IF MyAsciiFileClassActive
         MESSAGE(MyAsciiFileClass.GetLine(TreeQ.lLineNum))
         UC_TextLine = UPPER(AsciiFile.Textline)
         MyAsciiFileClass.Kill()

         MTH:MethodName = srcGetLabel(AsciiFile.Textline)
         MTH:ParameterList = srcGetPrototype(AsciiFile.Textline)
         !!MTH:ReturnType = srcGetReturnType(AsciiFile.Textline)
         IF INSTRING('PASCAL',UC_TextLine,1)
            MTH:CallingConvention = 'PASCAL'
         ELSIF (INSTRING(',C,',UC_TextLine,1) OR SUB(UC_TextLine,-2,2) = ',C')
            MTH:CallingConvention = 'C'
         ELSE
            MTH:CallingConvention = ''
         END
         MTH:Raw = CHOOSE(INSTRING(',RAW',UC_TextLine,1)=0,FALSE,TRUE)

         MTH:Name = ''
         MTH:Type = CHOOSE(INSTRING(',TYPE',UC_TextLine,1)=0,FALSE,TRUE)
         MTH:DLL  = CHOOSE(INSTRING(',DLL',UC_TextLine,1)=0,FALSE,TRUE)
         MTH:Proc = CHOOSE(INSTRING(',PROC',UC_TextLine,1)=0,FALSE,TRUE)


         IF INSTRING('PRIVATE',UC_TextLine,1)
            MTH:Scope = 'Private'
         ELSIF INSTRING('PROTECTED',UC_TextLine,1)
            MTH:Scope = 'Protected'
         ELSE
            MTH:Scope = 'Public'
         END

         MTH:Virtual = CHOOSE(INSTRING(',VIRTUAL',UC_TextLine,1)=0,FALSE,TRUE)
         MTH:Replace = CHOOSE(INSTRING(',REPLACE',UC_TextLine,1)=0,FALSE,TRUE)
         MTH:Derived = CHOOSE(INSTRING(',DERIVED',UC_TextLine,1)=0,FALSE,TRUE)

      END
   END
OF DeleteRecord
   !Ask Delete Reecord
END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                    LONG,AUTO
J                    LONG,AUTO
[END]
[END]
[END]
EMBED %LocalDataAfterClasses
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
MyAsciiFileClass        kcrAsciiFileClass
MyAsciiFileClassActive  BYTE,AUTO
UC_TextLine             STRING(255)

AsciiFilename           STRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
AsciiFile               FILE,DRIVER('ASCII'),NAME(AsciiFilename),PRE(A1),THREAD
RECORD                    RECORD,PRE()
TextLine                    STRING(255)
                          END
                        END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC CloseCurrentWindow
[INSTANCE]
INSTANCE 3
[INSTANCE]
INSTANCE 4
[CALLS]
srcGetLabel
srcGetPrototype
srcGetReturnType
[WINDOW]
Window  WINDOW('Update Method'),AT(,,214,100),FONT(,,COLOR:Black,,CHARSET:ANSI),DOUBLE,TILED, |
          GRAY,PALETTE(256),WALLPAPER('WALLPAPER.GIF')
          PANEL,AT(4,4,206,74),USE(?Panel1),FILL(COLOR:BTNFACE),#ORIG(?Panel1)
          PROMPT('&Method Name:'),AT(8,8),USE(?szMethodName:Prompt),#ORIG(?Prompt1)
          ENTRY(@s20),AT(60,8,146,10),USE(MTH:MethodName),#ORIG(MTH:MethodName)
          PROMPT('&Prototype:'),AT(8,22),USE(?szPrototype:Prompt),#ORIG(?Prompt2)
          ENTRY(@s20),AT(60,22,146,10),USE(MTH:ParameterList),#ORIG(MTH:ParameterList)
          PROMPT('&Scope:'),AT(8,36),USE(?PRO:Scope:Prompt),TRN
          LIST,AT(60,36,,10),USE(MTH:Scope),LEFT(2),DROP(5),FROM('Public|#Public|Privat' & |
            'e|#Private|Protected|#Protected')
          CHECK(' &Virtual'),AT(60,50),USE(MTH:Virtual),#ORIG(MTH:bVirtual)
          BUTTON('&OK'),AT(116,82,45,14),USE(?OK:Button),#ORIG(?Button1)
          BUTTON('Cancel'),AT(165,82,45,14),USE(?Cancel:Button),#ORIG(?Button2)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetWordList
PROTOTYPE '(*CSTRING ClarionKeywords, *CSTRING CompilerDirectives, *CSTRING BuiltinProcsFuncs, *CSTRING StructDataTypes, *CSTRING Attributes, *CSTRING StandardEquates),LONG,PROC'
PARAMETERS '(*CSTRING ClarionKeywords, *CSTRING CompilerDirectives, *CSTRING BuiltinProcsFuncs, *CSTRING StructDataTypes, *CSTRING Attributes, *CSTRING StandardEquates)'
[COMMON]
DESCRIPTION 'Get CEDT word list'
FROM ABC Source
CATEGORY 'Utility'
MODIFIED '2017/07/01' '14:28:03'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
szIniFile         CSTRING(256),STATIC
IniFile           FILE,DRIVER('ASCII'),NAME(szIniFile)
IniRecord            RECORD
IniBuffer               STRING(256)
                     END
                  END

color_groups      QUEUE
color_num            LONG
color_group          CSTRING(41)
                  END

color_values      QUEUE
color_num            LONG
keyword              CSTRING(41)
                  END

M                 LONG
N                 LONG
strBuffer         CSTRING(4096)

szSubKey          CSTRING(255)
szValueName       CSTRING(255)
szValue           CSTRING(261)
hKeyExtension     ULONG
pType             ULONG
pData             ULONG
loc:szRoot        CSTRING(261)
RetVal            LONG
KeywordsFound     LONG

MyQueue           QUEUE,PRE(q)
Name                 STRING(65)
Bold                 STRING(65)
Italic               STRING(65)
Color                STRING(65)
Word                 STRING(65)
                  END
Count             LONG
loc:szXMLFilename CSTRING(261)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      KeywordsFound = False

      CASE glo:bClarionVersion
        OF CWVERSION_C2
           szIniFile = szRoot & '\bin\c2edt.ini'
        OF CWVERSION_C4
           szIniFile = szRoot & '\bin\c4edt.ini'
        OF CWVERSION_C5
           szIniFile = szRoot & '\bin\c5edt.ini'
        OF CWVERSION_C5EE
           szIniFile = szRoot & '\bin\c5edt.ini'
        OF CWVERSION_C55
           szIniFile = szRoot & '\bin\c55edt.ini'
        OF CWVERSION_C55EE
           szIniFile = szRoot & '\bin\c55edt.ini'
        OF CWVERSION_C60
           szIniFile = szRoot & '\bin\c60edt.ini'
        OF CWVERSION_C60EE
           szIniFile = szRoot & '\bin\c60edt.ini'
        OF CWVERSION_C70 !OROF CWVERSION_C71
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              loc:szXMLFileName = ''
              szIniFile = ''
              !use clarion6 settings
              szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
              RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
              IF RetVal = ERROR_SUCCESS
                 szValueName = 'root'
                 pType = REG_SZ
                 pData = SIZE(loc:szRoot)
                 RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                 RetVal = RegCloseKey(hKeyExtension)
                 IF loc:szRoot
                    szIniFile = loc:szRoot & '\bin\c60edt.ini'
                 END
              END
           END
        OF CWVERSION_C80
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              !use clarion7 settings
              loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
              IF ~EXISTS(loc:szXMLFileName)
                 loc:szXMLFileName = ''
                 szIniFile = ''
                 !use clarion6 settings
                 szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
                 RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
                 IF RetVal = ERROR_SUCCESS
                    szValueName = 'root'
                    pType = REG_SZ
                    pData = SIZE(loc:szRoot)
                    RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                    RetVal = RegCloseKey(hKeyExtension)
                    IF loc:szRoot
                       szIniFile = loc:szRoot & '\bin\c60edt.ini'
                    END
                 END
              END
           END
        OF CWVERSION_C90
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              !use clarion8 settings
              loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
              IF ~EXISTS(loc:szXMLFileName)
                 !use clarion7 settings
                 loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
                 IF ~EXISTS(loc:szXMLFileName)
                    loc:szXMLFileName = ''
                    szIniFile = ''
                    !use clarion6 settings
                    szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
                    RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
                    IF RetVal = ERROR_SUCCESS
                       szValueName = 'root'
                       pType = REG_SZ
                       pData = SIZE(loc:szRoot)
                       RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                       RetVal = RegCloseKey(hKeyExtension)
                       IF loc:szRoot
                          szIniFile = loc:szRoot & '\bin\c60edt.ini'
                       END
                    END
                 END
              END
           END
        OF CWVERSION_C100
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              !use clarion9 settings
              loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
              IF ~EXISTS(loc:szXMLFileName)
                 !use clarion8 settings
                 loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
                 IF ~EXISTS(loc:szXMLFileName)
                    !use clarion7 settings
                    loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
                    IF ~EXISTS(loc:szXMLFileName)
                       loc:szXMLFileName = ''
                       szIniFile = ''
                       !use clarion6 settings
                       szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
                       RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
                       IF RetVal = ERROR_SUCCESS
                          szValueName = 'root'
                          pType = REG_SZ
                          pData = SIZE(loc:szRoot)
                          RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                          RetVal = RegCloseKey(hKeyExtension)
                          IF loc:szRoot
                             szIniFile = loc:szRoot & '\bin\c60edt.ini'
                          END
                       END
                    END
                 END
              END
           END
      END

      IF ((glo:bClarionVersion < CWVERSION_C70) OR ((glo:bClarionVersion >= CWVERSION_C70) AND (loc:szXMLFileName = '')))
         IF EXISTS(szIniFile)
            OPEN(IniFile,ReadOnly+DenyNone)
            SET(IniFile)
            NEXT(IniFile)
            LOOP UNTIL ERRORCODE()
               CASE UPPER(CLIP(IniFile.IniRecord.IniBuffer))
               OF '[COLOR_GROUPS]'
                  DO ProcessColorGroups
               OF '[COLOR_VALUES]'
                  DO ProcessColorValues
               ELSE
                  NEXT(IniFile)
               END
            END
            CLOSE(IniFile)
            KeywordsFound = True
         END

      ELSIF glo:bClarionVersion >= CWVERSION_C70
         xml:SetProgressWindow(-1)
         IF ~xml:LoadFromFile(loc:szXMLFileName,FALSE)
            IF ~xml:FindNextNode('RuleSet','Keywords')
               count = xml:LoadQueue(MyQueue,TRUE,TRUE)
               !XML:DebugMyQueue(MyQueue,'MyQueue Contents')
               xml:Free()
               DO InitializeColorGroups
               SORT(color_groups,+color_groups.color_group)
               DO ParseBindingResource
               DO ParseBuiltIns
               DO AddDefaultBuiltins
               SORT(color_groups,+color_groups.color_num)
               KeywordsFound = True
            END
         END
      END
      IF KeywordsFound = True
         N = RECORDS(Color_Groups)
         LOOP M = 1 TO N
            GET(Color_Groups,M)
            CASE Color_Groups.Color_Group
              OF 'Clarion Keywords'
                  DO GetWordList
                  ClarionKeywords = CLIP(LEFT(strBuffer))
              OF 'Compiler Directives'
                  DO GetWordList
                  CompilerDirectives = CLIP(LEFT(strBuffer))
              OF 'Built-in Procedures & Functions'
                  DO GetWordList
                  BuiltinProcsFuncs = CLIP(LEFT(strBuffer))
              OF 'Structures and Data types'
                  DO GetWordList
                  StructDataTypes = CLIP(LEFT(strBuffer))
              OF 'Attributes'
                  DO GetWordList
                  Attributes = CLIP(LEFT(strBuffer))
              OF 'Standard Equates'
                  DO GetWordList
                  StandardEquates = CLIP(LEFT(strBuffer))
            END
         END
      END
      RETURN KeywordsFound
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
GetWordList         ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  strBuffer = ''
  J = RECORDS(color_values)
  LOOP I = 1 TO J
     GET(color_values,I)
     IF color_values.color_num = Color_Groups.Color_num
        strBuffer = strBuffer & ' ' & color_values.keyword
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
ProcessColorGroups  ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       color_groups.color_num   = IniFile.IniRecord.IniBuffer[1 : I-1]
       color_groups.color_group = IniFile.IniRecord.IniBuffer[I+1 : J]
       ADD(color_groups)
    END
    NEXT(IniFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
ProcessColorValues  ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       color_values.keyword     = IniFile.IniRecord.IniBuffer[1 : I-1]
       ! 2003.11.27 KCR - look for and omit deprecated words
       CASE UPPER(color_values.keyword)
       OF 'BOF' OROF 'EOF' OROF 'FUNCTION' OROF 'POINTER' OROF 'SHARE'
          ! omit deprecated statement
       ELSE
          color_values.color_num   = IniFile.IniRecord.IniBuffer[I+1 : J]
          ADD(color_values)
       END
    END
    NEXT(IniFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
InitializeColorGroups   ROUTINE
  DATA
I   LONG

  CODE
      LOOP I = 1 TO 26
         color_groups.color_num = I-1
         EXECUTE I
            color_groups.color_group = 'Normal Text'
            color_groups.color_group = 'Normal Background'
            color_groups.color_group = 'Block Text'
            color_groups.color_group = 'Block Background'
            color_groups.color_group = 'Line Highlight Text'
            color_groups.color_group = 'Line Highlight Background'
            color_groups.color_group = 'Error Line Text'
            color_groups.color_group = 'Error Line Background'
            color_groups.color_group = 'Label'
            color_groups.color_group = 'Comment'
            color_groups.color_group = 'String'
            color_groups.color_group = 'User Identifier'
            color_groups.color_group = 'Integer Constant'
            color_groups.color_group = 'Real constant'
            color_groups.color_group = 'Picture string'
            color_groups.color_group = 'Disabled Text'
            color_groups.color_group = 'Disabled Background'
            color_groups.color_group = ''
            color_groups.color_group = ''
            color_groups.color_group = ''
            color_groups.color_group = 'Clarion Keywords'
            color_groups.color_group = 'Compiler Directives'
            color_groups.color_group = 'Built-in Procedures & Functions'
            color_groups.color_group = 'Structures and Data types'
            color_groups.color_group = 'Attributes'
            color_groups.color_group = 'Standard Equates'
         END
         ADD(color_groups,+color_groups.color_num)
      END
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ParseBindingResource    ROUTINE
      LOOP M = 1 TO count
         GET(MyQueue,M)
         CASE UPPER(CLIP(MyQueue.Name))

           OF 'LOGICOPERATORS'         !-->Clarion Keywords
              color_groups.color_group = 'Clarion Keywords'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

           OF 'HARDRESERVEDKEYWORDS'   !-->Clarion Keywords
              color_groups.color_group = 'Clarion Keywords'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

           OF 'SOFTRESERVEDKEYWORDS'   !-->ReservedWordsProcLabels
              color_groups.color_group = 'Clarion Keywords'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

           OF 'DIRECTIVES'             !-->Directives
              color_groups.color_group = 'Compiler Directives'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

           OF 'BASETYPES'              !-->StructDataTypes
              color_groups.color_group = 'Structures and Data types'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

           OF 'SPECIALTYPES'           !-->StructDataTypes
              color_groups.color_group = 'Structures and Data types'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords
              color_values.color_num = color_groups.color_num
              color_values.keyword   = 'BEGIN'
              ADD(color_values,+color_values.keyword)
              color_values.keyword   = 'ITEMIZE'
              ADD(color_values,+color_values.keyword)

           OF 'ATTRIBUTES'             !-->Attributes
              color_groups.color_group = 'Attributes'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

           OF 'BUILTINS'               !-->StandardEquates
              color_groups.color_group = 'Standard Equates'
              GET(color_groups,+color_groups.color_group)
              DO AddKeywords

         ELSE !skip this node
              M += 1
              GET(MyQueue,M)
              LOOP WHILE CLIP(MyQueue.Name) = ''
                 M += 1
                 GET(MyQueue,M)
                 IF ERRORCODE()
                    BREAK
                 END
              END
              M -= 1
         END
      END
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddKeywords ROUTINE
      color_values.keyword = UPPER(CLIP(MyQueue.Word))
      GET(color_values,+color_values.keyword)
      IF ERRORCODE()
         color_values.color_num = color_groups.color_num
         IF glo:bClarionVersion > CWVERSION_C60EE
            CASE color_groups.color_group
              OF 'Clarion Keywords'
                 CASE color_values.keyword
                   !skip the ReservedWordProcLabels
                   OF 'APPLICATION'
                   OF 'CLASS'
                   OF 'DETAIL'
                   OF 'FILE'
                   OF 'FOOTER'
                   OF 'FORM'
                   OF 'GROUP'
                   OF 'HEADER'
                   OF 'ITEM'
                   OF 'MENU'
                   OF 'MENUBAR'
                   OF 'OPTION'
                   OF 'QUEUE'
                   OF 'REPORT'
                   OF 'SHEET'
                   OF 'TAB'
                   OF 'TABLE'
                   OF 'TOOLBAR'
                   OF 'VIEW'
                ELSE
                   ADD(color_values,+color_values.keyword)
                END
              OF 'Structures and Data types'
                 CASE color_values.keyword
                   OF 'CHECK'
                   OF 'DOUBLE'
                   OF 'SEPARATOR'
                ELSE
                   ADD(color_values,+color_values.keyword)
                END
              OF 'Compiler Directives'
                 CASE color_values.keyword
                   OF 'BEGIN'
                   OF 'ITEMIZE'
                ELSE
                   ADD(color_values,+color_values.keyword)
                END
            ELSE
               ADD(color_values,+color_values.keyword)
            END
         ELSE
            ADD(color_values,+color_values.keyword)
         END
      END

      M += 1
      GET(MyQueue,M)
      LOOP WHILE CLIP(MyQueue.Name) = ''
         color_values.keyword = UPPER(CLIP(MyQueue.Word))
         GET(color_values,+color_values.keyword)
         IF ERRORCODE()
            color_values.color_num = color_groups.color_num
            IF glo:bClarionVersion > CWVERSION_C60EE
               CASE color_groups.color_group
                 OF 'Clarion Keywords'
                    CASE color_values.keyword
                      !skip the ReservedWordProcLabels
                      OF 'APPLICATION'
                      OF 'CLASS'
                      OF 'DETAIL'
                      OF 'FILE'
                      OF 'FOOTER'
                      OF 'FORM'
                      OF 'GROUP'
                      OF 'HEADER'
                      OF 'ITEM'
                      OF 'MENU'
                      OF 'MENUBAR'
                      OF 'OPTION'
                      OF 'QUEUE'
                      OF 'REPORT'
                      OF 'SHEET'
                      OF 'TAB'
                      OF 'TABLE'
                      OF 'TOOLBAR'
                      OF 'VIEW'
                    ELSE
                         ADD(color_values,+color_values.keyword)
                    END
                 OF 'Structures and Data types'
                    CASE color_values.keyword
                      OF 'CHECK'
                      OF 'DOUBLE'
                      OF 'SEPARATOR'
                    ELSE
                         ADD(color_values,+color_values.keyword)
                    END
                 OF 'Compiler Directives'
                    CASE color_values.keyword
                      OF 'BEGIN'
                      OF 'ITEMIZE'
                   ELSE
                      ADD(color_values,+color_values.keyword)
                   END
               ELSE
                  ADD(color_values,+color_values.keyword)
               END
            ELSE
               ADD(color_values,+color_values.keyword)
            END
         END
         M += 1
         GET(MyQueue,M)
         IF ERRORCODE()
            BREAK
         END
      END
      M -= 1
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ParseBuiltIns  ROUTINE
  DATA
I           LONG
subFolder   CSTRING(5)

  CODE
      IF glo:bClarionVersion > CWVERSION_C60EE
         subFolder = 'win\'
      ELSE
         subFolder = ''
      END

      color_groups.color_group = 'Built-in Procedures & Functions'
      GET(color_groups,+color_groups.color_group)

      !scan builtins.clw for builtin procedures and functions
      szIniFile = szRoot & '\libsrc\' & subFolder & 'builtins.clw'
      OPEN(IniFile,ReadOnly+DenyNone)
      SET(IniFile)
      LOOP UNTIL ERRORCODE()
         NEXT(IniFile)
         IF ERRORCODE()
            BREAK
         ELSE
            strBuffer = CLIP(LEFT(IniFile.IniRecord.IniBuffer))
            I = INSTRING('(',strBuffer)
            IF I > 0
               color_values.keyword = UPPER(SUB(strBuffer,1,I-1))
               IF color_values.keyword[1] = '!'
                  CYCLE
               ELSIF color_values.keyword = 'MODULE'
                  CYCLE
               ELSIF color_values.keyword = 'COMPILE'
                  CYCLE
               ELSIF color_values.keyword = 'OMIT'
                  CYCLE
               ELSIF color_values.keyword = 'INCLUDE'
                  CYCLE
               ELSE
                  GET(color_values,+color_values.keyword)
                  IF ERRORCODE()
                     color_values.color_num = color_groups.color_num
                     ADD(color_values,+color_values.keyword)
                  END
               END
            END
         END
      END
      CLOSE(IniFile)
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
AddDefaultBuiltins   ROUTINE
   DATA
szDefaultBuiltins    CSTRING('ABS ADD ADDRESS AGE APPEND BAND BIND BINDEXPRESSION ' & |
                             'BOR BSHIFT BXOR CALLBACK CHR CLEAR COL CREATE DEFORMAT DISPOSE EVALUATE FORMAT GET ' & |
                             'INDEX INLIST INRANGE INT LIKE LOGOUT LONGNAME MAXIMUM MEMO OMITTED PEEK POKE PRINT PRINTER ' & |
                             'PUT ROUND SETNONULL SETNULL SORT VAL _PROC _PROC1 _PROC2 _PROC3')
szDefaultDirectives  CSTRING('EJECT     EMBED   ENDEMBED PRAGMA SUBTITLE TITLE')
i                    LONG,AUTO
j                    LONG,AUTO
p                    LONG,AUTO
   CODE
      color_groups.color_group = 'Built-in Procedures & Functions'
      GET(color_groups,+color_groups.color_group)
      i = 1
      j = LEN(szDefaultBuiltins)
      p = INSTRING(' ',szDefaultBuiltins,1,i)
      LOOP WHILE p > 0
         color_values.keyword = szDefaultBuiltins[i : p-1]
         GET(color_values,+color_values.keyword)
         IF ERRORCODE()
            color_values.color_num = color_groups.color_num
            ADD(color_values,+color_values.keyword)
         END
         i = p+1
         p = INSTRING(' ',szDefaultBuiltins,1,i)
      END
      color_values.keyword = szDefaultBuiltins[i : j]
      GET(color_values,+color_values.keyword)
      IF ERRORCODE()
         color_values.color_num = color_groups.color_num
         ADD(color_values,+color_values.keyword)
      END

      color_groups.color_group = 'Compiler Directives'
      GET(color_groups,+color_groups.color_group)
      i = 1
      j = LEN(szDefaultDirectives)
      p = INSTRING(' ',szDefaultDirectives,1,i)
      LOOP WHILE p > 0
         color_values.keyword = szDefaultDirectives[i : p-1]
         GET(color_values,+color_values.keyword)
         IF ERRORCODE()
            color_values.color_num = color_groups.color_num
            ADD(color_values,+color_values.keyword)
         END
         i = p+1
         p = INSTRING(' ',szDefaultDirectives,1,i)
      END
      color_values.keyword = szDefaultDirectives[i : j]
      GET(color_values,+color_values.keyword)
      IF ERRORCODE()
         color_values.color_num = color_groups.color_num
         ADD(color_values,+color_values.keyword)
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetCedtColors
PROTOTYPE '(*COLORGROUPTYPE ColorGroup, LONG LoadDefault=0)'
PARAMETERS '(*COLORGROUPTYPE ColorGroup, LONG LoadDefault)'
[COMMON]
DESCRIPTION 'Get CEDT colors list'
FROM ABC Source
CATEGORY 'Utility'
MODIFIED '2017/07/02' ' 8:46:16'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
loc:ViewerStyles         GROUP(COLORGROUPTYPE),PRE()
                         END
loc:StyleGroup           GROUP(STYLEGROUPTYPE),PRE(sg)
                         END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
szIniFile       CSTRING(256),STATIC
IniFile         FILE,DRIVER('ASCII'),NAME(szIniFile)
IniRecord         RECORD
IniBuffer           STRING(256)
                  END
                END

color_groups    QUEUE
color_num         LONG
color_group       CSTRING(41)
                END

color_map       QUEUE
color_num         LONG
color_value       CSTRING(41)
                END

default_colors  QUEUE
color_num         LONG
color_value       CSTRING(41)
                END

M               LONG
N               LONG

szSubKey          CSTRING(255)
szValueName       CSTRING(255)
szValue           CSTRING(261)
hKeyExtension     ULONG
pType             ULONG
pData             ULONG
loc:szRoot        CSTRING(261)
RetVal            LONG

MyQueue           QUEUE,PRE(q)
Name                 STRING(65)
Bold                 STRING(65)
Italic               STRING(65)
Color                STRING(65)
BgColor              STRING(65)
Word                 STRING(65)
                  END
MyData            CSTRING(128)
Count             LONG
loc:szXMLFilename CSTRING(261)
szKey             CSTRING(256)
savePointer       LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CASE glo:bClarionVersion
        OF CWVERSION_C2
           szIniFile = szRoot & '\bin\c2edt.ini'
        OF CWVERSION_C4
           szIniFile = szRoot & '\bin\c4edt.ini'
        OF CWVERSION_C5
           szIniFile = szRoot & '\bin\c5edt.ini'
        OF CWVERSION_C5EE
           szIniFile = szRoot & '\bin\c5edt.ini'
        OF CWVERSION_C55
           szIniFile = szRoot & '\bin\c55edt.ini'
        OF CWVERSION_C55EE
           szIniFile = szRoot & '\bin\c55edt.ini'
        OF CWVERSION_C60
           szIniFile = szRoot & '\bin\c60edt.ini'
        OF CWVERSION_C60EE
           szIniFile = szRoot & '\bin\c60edt.ini'
        OF CWVERSION_C70 !OROF CWVERSION_C71
           !no ini file for c7
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              loc:szXMLFileName = ''
              !use clarion6 settings
              szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
              RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
              IF RetVal = ERROR_SUCCESS
                 szValueName = 'root'
                 pType = REG_SZ
                 pData = SIZE(loc:szRoot)
                 RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                 RetVal = RegCloseKey(hKeyExtension)
                 IF loc:szRoot
                    szIniFile = loc:szRoot & '\bin\c60edt.ini'
                 END
              END
           END

        OF CWVERSION_C80
           !no ini file for c8
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              !use clarion7 settings
              loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
              IF ~EXISTS(loc:szXMLFileName)
                 loc:szXMLFileName = ''
                 !use clarion6 settings
                 szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
                 RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
                 IF RetVal = ERROR_SUCCESS
                    szValueName = 'root'
                    pType = REG_SZ
                    pData = SIZE(loc:szRoot)
                    RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                    RetVal = RegCloseKey(hKeyExtension)
                    IF loc:szRoot
                       szIniFile = loc:szRoot & '\bin\c60edt.ini'
                    END
                 END
              END
           END

        OF CWVERSION_C90
           !no ini file for c9
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              !use clarion8 settings
              loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
              IF ~EXISTS(loc:szXMLFileName)
                 !use clarion7 settings
                 loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
                 IF ~EXISTS(loc:szXMLFileName)
                    loc:szXMLFileName = ''
                    !use clarion6 settings
                    szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
                    RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
                    IF RetVal = ERROR_SUCCESS
                       szValueName = 'root'
                       pType = REG_SZ
                       pData = SIZE(loc:szRoot)
                       RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                       RetVal = RegCloseKey(hKeyExtension)
                       IF loc:szRoot
                          szIniFile = loc:szRoot & '\bin\c60edt.ini'
                       END
                    END
                 END
              END
           END

        OF CWVERSION_C100
           !no ini file for c10
           RetVal = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
           loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
           IF ~EXISTS(loc:szXMLFileName)
              !use clarion9 settings
              loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
              IF ~EXISTS(loc:szXMLFileName)
                 !use clarion8 settings
                 loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
                 IF ~EXISTS(loc:szXMLFileName)
                    !use clarion7 settings
                    loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\modes\CWBinding.Resources.Clarion-Mode.xshd'
                    IF ~EXISTS(loc:szXMLFileName)
                       loc:szXMLFileName = ''
                       !use clarion6 settings
                       szSubKey = 'SOFTWARE\SoftVelocity\Clarion6'
                       RetVal = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szSubKey,0,KEY_QUERY_VALUE,hKeyExtension)
                       IF RetVal = ERROR_SUCCESS
                          szValueName = 'root'
                          pType = REG_SZ
                          pData = SIZE(loc:szRoot)
                          RegQueryValueEx(hKeyExtension,szValueName,0,pType,ADDRESS(loc:szRoot),pData)
                          RetVal = RegCloseKey(hKeyExtension)
                          IF loc:szRoot
                             szIniFile = loc:szRoot & '\bin\c60edt.ini'
                          END
                       END
                    END
                 END
              END
           END

      END

      IF ((glo:bClarionVersion < CWVERSION_C70) OR ((glo:bClarionVersion >= CWVERSION_C70) AND (loc:szXMLFileName = '')))
         OPEN(IniFile,ReadOnly+DenyNone)
         SET(IniFile)
         NEXT(IniFile)
         LOOP UNTIL ERRORCODE()
            CASE UPPER(CLIP(IniFile.IniRecord.IniBuffer))
            OF '[COLOR_GROUPS]'
               DO ProcessColorGroups
            OF '[COLOR_MAP]'
               DO ProcessColorMap
            OF '[DEFAULT_COLORS]'
               DO ProcessDefaults
            ELSE
               NEXT(IniFile)
            END
         END
         CLOSE(IniFile)

      ELSIF glo:bClarionVersion >= CWVERSION_C70
         DO InitializeColorGroups

         SORT(color_groups,+color_groups.color_group)

         xml:SetProgressWindow(-1)
         IF ~xml:LoadFromFile(loc:szXMLFileName,FALSE)
            IF ~xml:FindNextNode('Environment')
               savePointer = xml:GetPointer()
            END

            IF ~xml:FindNextNode('Custom')
               count = xml:LoadQueue(MyQueue,FALSE,TRUE)
               IF count
                  !xml:DebugMyQueue(MyQueue,'Environment')
                  LOOP M = 1 TO count
                     GET(MyQueue,M)
                     CASE UPPER(CLIP(MyQueue.Name))
                       OF 'LABEL'
                          color_groups.color_group = 'Label'
                          GET(color_groups,+color_groups.color_group)
                          DO AddMappedColor

                       OF 'OMITTEDCODE'
                          color_groups.color_group = 'Comment'
                          GET(color_groups,+color_groups.color_group)
                          DO AddMappedColor
                     END
                  END
                  FREE(MyQueue)
               END
            END

            IF ~xml:SetPointer(savePointer)
               IF ~xml:FindNextNode('Default')
                  count = xml:LoadQueue(MyQueue,FALSE,FALSE)
                  IF count
                     !xml:DebugMyQueue(MyQueue,'Default')
                     color_groups.color_group = 'Normal Text'
                     GET(color_groups,+color_groups.color_group)
                     DO AddMappedColor

                     color_groups.color_group = 'Normal Background'
                     GET(color_groups,+color_groups.color_group)
                     MyQueue.Color = CLIP(MyQueue.bgColor)
                     DO AddMappedColor

                     FREE(MyQueue)
                  END
               END
            END

            IF ~xml:SetPointer(savePointer)
               IF ~xml:FindNextNode('InvalidLines')
                  count = xml:LoadQueue(MyQueue,FALSE,FALSE)
                  IF count
                     !xml:DebugMyQueue(MyQueue,'InvalidLines')
                     color_groups.color_group = 'Error Line Text'
                     GET(color_groups,+color_groups.color_group)
                     DO AddMappedColor
                     FREE(MyQueue)
                  END
               END
            END

            IF ~xml:FindNextNode('RuleSet','MarkPrevious')
               count = xml:LoadQueue(MyQueue,FALSE,FALSE)
               !xml:DebugMyQueue(MyQueue,'MarkPrevious')
               IF count
                  color_groups.color_group = 'Built-in Procedures & Functions'
                  GET(color_groups,+color_groups.color_group)
                  DO AddMappedColor
                  FREE(MyQueue)
               END
            END

            IF ~xml:FindNextNode('RuleSet','Keywords')
               count = xml:LoadQueue(MyQueue,FALSE,TRUE)
               !xml:DebugMyQueue(MyQueue,'Keywords')
               DO ParseBindingResource

            END

            xml:Free()

         END

         SORT(color_groups,+color_groups.color_num)
      END

      loc:ViewerStyles = ColorGroup

      LOOP M = 1 TO 15
         CASE M
         OF 1  !?DefaultTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT + 1]
            color_groups.color_group = 'Normal Text'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_DEFAULT + 1] = loc:StyleGroup

         OF 2  !?LabelTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_LABEL + 1]
            color_groups.color_group = 'Label'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_LABEL + 1] = loc:StyleGroup

         OF 3  !?CommentTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_COMMENT + 1]
            color_groups.color_group = 'Comment'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_COMMENT + 1] = loc:StyleGroup

         OF 4  !?StringTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_STRING + 1]
            color_groups.color_group = 'String'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_STRING + 1] = loc:StyleGroup

         OF 5  !?IdentifierTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_USER_IDENTIFIER + 1]
            color_groups.color_group = 'User Identifier'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_USER_IDENTIFIER + 1] = loc:StyleGroup

         OF 6  !?IntegerTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_INTEGER_CONSTANT + 1]
            color_groups.color_group = 'Integer Constant'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_INTEGER_CONSTANT + 1] = loc:StyleGroup

         OF 7  !?RealTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_REAL_CONSTANT + 1]
            color_groups.color_group = 'Real constant'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_REAL_CONSTANT + 1] = loc:StyleGroup

         OF 8  !?PictureTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_PICTURE_STRING + 1]
            color_groups.color_group = 'Picture string'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_PICTURE_STRING + 1] = loc:StyleGroup

         OF 9  !?KeywordTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_KEYWORD + 1]
            color_groups.color_group = 'Clarion Keywords'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_KEYWORD + 1] = loc:StyleGroup

         OF 10 !?CompilerTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_COMPILER_DIRECTIVE + 1]
            color_groups.color_group = 'Compiler Directives'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_COMPILER_DIRECTIVE + 1] = loc:StyleGroup

         OF 11 !?BuiltInTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_BUILTIN_PROCEDURES_FUNCTION + 1]
            color_groups.color_group = 'Built-in Procedures & Functions'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_BUILTIN_PROCEDURES_FUNCTION + 1] = loc:StyleGroup

         OF 12 !?StructureTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_STRUCTURE_DATA_TYPE + 1]
            color_groups.color_group = 'Structures and Data types'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_STRUCTURE_DATA_TYPE + 1] = loc:StyleGroup

         OF 13 !?AttributeTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_ATTRIBUTE + 1]
            color_groups.color_group = 'Attributes'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_ATTRIBUTE + 1] = loc:StyleGroup

         OF 14 !?EquateTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_STANDARD_EQUATE + 1]
            color_groups.color_group = 'Standard Equates'
            DO SetForeColor
            color_groups.color_group = 'Normal Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_STANDARD_EQUATE + 1] = loc:StyleGroup

         OF 15 !?ErrorTab
            loc:StyleGroup = loc:ViewerStyles.StyleGroup[SCE_CLW_ERROR + 1]
            color_groups.color_group = 'Error Line Text'
            DO SetForeColor
            color_groups.color_group = 'Error Line Background'
            DO SetBackColor
            loc:ViewerStyles.StyleGroup[SCE_CLW_ERROR + 1] = loc:StyleGroup
         END
      END

      ColorGroup = loc:ViewerStyles

      RETURN
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
ProcessColorGroups  ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       color_groups.color_num   = IniFile.IniRecord.IniBuffer[1 : I-1]
       color_groups.color_group = IniFile.IniRecord.IniBuffer[I+1 : J]
       ADD(color_groups,+color_groups.color_group)
    END
    NEXT(IniFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
ProcessColorMap     ROUTINE
  DATA
I   LONG
J   LONG
R   LONG
G   LONG
B   LONG
RGB LONG

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       color_map.color_num      = IniFile.IniRecord.IniBuffer[1 : I-1]
       color_map.color_value    = IniFile.IniRecord.IniBuffer[I+1 : J]
       IF color_map.color_value <> '-1'
          R = 0
          G = 0
          B = 0
          I = INSTRING(',',color_map.color_value)
          IF I
             R = color_map.color_value[1 : I-1]
             J = INSTRING(',',color_map.color_value,1,I+1)
             IF J
                G = color_map.color_value[I+1 : J]
                B = color_map.color_value[J+1 : LEN(CLIP(color_map.color_value))]
             END
          END
          RGB = R + BSHIFT(G,8) + BSHIFT(B,16)
          color_map.color_value = RGB
       END
       ADD(color_map,+color_map.color_num)
    END
    NEXT(IniFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
ProcessDefaults     ROUTINE
  DATA
I   LONG
J   LONG
R   LONG
G   LONG
B   LONG
RGB LONG

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       default_colors.color_num      = IniFile.IniRecord.IniBuffer[1 : I-1]
       default_colors.color_value    = IniFile.IniRecord.IniBuffer[I+1 : J]
       IF default_colors.color_value <> '-1'
          R = 0
          G = 0
          B = 0
          I = INSTRING(',',default_colors.color_value)
          IF I
             R = default_colors.color_value[1 : I-1]
             J = INSTRING(',',default_colors.color_value,1,I+1)
             IF J
                G = default_colors.color_value[I+1 : J]
                B = default_colors.color_value[J+1 : LEN(CLIP(default_colors.color_value))]
             END
          END
          RGB = R + BSHIFT(G,8) + BSHIFT(B,16)
          default_colors.color_value = RGB
       END
       ADD(default_colors,+default_colors.color_num)
    END
    NEXT(IniFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
InitializeColorGroups   ROUTINE
  DATA
I   LONG

  CODE
      LOOP I = 1 TO 26
         color_groups.color_num = I-1
         EXECUTE I
            color_groups.color_group = 'Normal Text'
            color_groups.color_group = 'Normal Background'
            color_groups.color_group = 'Block Text'
            color_groups.color_group = 'Block Background'
            color_groups.color_group = 'Line Highlight Text'
            color_groups.color_group = 'Line Highlight Background'
            color_groups.color_group = 'Error Line Text'
            color_groups.color_group = 'Error Line Background'
            color_groups.color_group = 'Label'
            color_groups.color_group = 'Comment'
            color_groups.color_group = 'String'
            color_groups.color_group = 'User Identifier'
            color_groups.color_group = 'Integer Constant'
            color_groups.color_group = 'Real constant'
            color_groups.color_group = 'Picture string'
            color_groups.color_group = 'Disabled Text'
            color_groups.color_group = 'Disabled Background'
            color_groups.color_group = 'Clarion Keywords'
            color_groups.color_group = 'Compiler Directives'
            color_groups.color_group = 'Built-in Procedures & Functions'
            color_groups.color_group = 'Structures and Data types'
            color_groups.color_group = 'Attributes'
            color_groups.color_group = 'Standard Equates'
         END
         ADD(color_groups,+color_groups.color_num)
      END
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
ParseBindingResource    ROUTINE
      LOOP M = 1 TO count
         GET(MyQueue,M)
         CASE UPPER(MyQueue.Name)
           OF 'HARDRESERVEDKEYWORDS'
              color_groups.color_group = 'Clarion Keywords'
              GET(color_groups,+color_groups.color_group)
              DO AddMappedColor

           OF 'DIRECTIVES'
              color_groups.color_group = 'Compiler Directives'
              GET(color_groups,+color_groups.color_group)
              DO AddMappedColor

           OF 'BASETYPES'
              color_groups.color_group = 'Structures and Data types'
              GET(color_groups,+color_groups.color_group)
              DO AddMappedColor

           OF 'ATTRIBUTES'
              color_groups.color_group = 'Attributes'
              GET(color_groups,+color_groups.color_group)
              DO AddMappedColor

           OF 'BUILTINS'
              color_groups.color_group = 'Standard Equates'
              GET(color_groups,+color_groups.color_group)
              DO AddMappedColor

         END
      END
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
AddMappedColor    ROUTINE
   DATA
R     LONG
G     LONG
B     LONG
RGB   LONG

   CODE
      color_map.color_num = color_groups.color_num
      color_map.color_value = CLIP(MyQueue.Color)
      IF color_map.color_value[1] <> '#'
         color_map.color_value = srcColorFromName(color_map.color_value)
      END
      R = EVALUATE('0' & color_map.color_value[2 : 3] & 'H')
      G = EVALUATE('0' & color_map.color_value[4 : 5] & 'H')
      B = EVALUATE('0' & color_map.color_value[6 : 7] & 'H')
      RGB = R + BSHIFT(G,8) + BSHIFT(B,16)
      color_map.color_value = RGB
      ADD(color_map,+color_map.color_num)
      EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
SetForeColor    ROUTINE
  GET(color_groups,+color_groups.color_group)
  IF LoadDefault = FALSE
     color_map.color_num = color_groups.color_num
     GET(color_map,+color_map.color_num)
     IF ~ERRORCODE()
        IF color_map.color_value = '-1'
           !default_colors.color_num = color_groups.color_num+1
           default_colors.color_num = 1
           GET(default_colors,+default_colors.color_num)
           loc:StyleGroup.Fore = default_colors.color_value
        ELSE
           loc:StyleGroup.Fore = color_map.color_value
        END
     ELSE
        loc:StyleGroup.Fore = COLOR:BLACK
     END
  ELSE
     default_colors.color_num = color_groups.color_num+1
     GET(default_colors,+default_colors.color_num)
     loc:StyleGroup.Fore = default_colors.color_value
  END
  !IF loc:StyleGroup.Fore = -1
  !   loc:StyleGroup.Fore = COLOR:BLACK
  !END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
SetBackColor    ROUTINE
  GET(color_groups,+color_groups.color_group)
  IF LoadDefault = FALSE
     color_map.color_num = color_groups.color_num
     GET(color_map,+color_map.color_num)
     IF ~ERRORCODE()
        IF color_map.color_value = '-1'
           !default_colors.color_num = color_groups.color_num+1
           !default_colors.color_num = 2
           !GET(default_colors,+default_colors.color_num)
           !loc:StyleGroup.Back = default_colors.color_value
           loc:StyleGroup.Back = COLOR:WHITE
        ELSE
           loc:StyleGroup.Back = color_map.color_value
        END
     ELSE
        loc:StyleGroup.Back = COLOR:WHITE
     END
  ELSE
     default_colors.color_num = color_groups.color_num+1
     GET(default_colors,+default_colors.color_num)
     loc:StyleGroup.Back = default_colors.color_value
  END
  !IF loc:StyleGroup.Back = -1
  !   loc:StyleGroup.Back = COLOR:WHITE
  !END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcColorFromName
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winShowStatistics
[COMMON]
FROM ABC Window
MODIFIED '2008/12/22' '10:32:33'
[DATA]
[SCREENCONTROLS]
! PROMPT('Modules:'),USE(?Modules:Prompt),TRN
! STRING(@n6),USE(Modules),TRN
[REPORTCONTROLS]
! STRING(@n6),USE(Modules)
Modules                  LONG
!!> GUID('cbc6d91e-8ece-41db-ba69-8cbeef61f5c6'),PROMPT('Modules:'),HEADER('Modules'),PICTURE(@n6)
[SCREENCONTROLS]
! PROMPT('Classes:'),USE(?Classes:Prompt),TRN
! STRING(@n6),USE(Classes),TRN
[REPORTCONTROLS]
! STRING(@n6),USE(Classes)
Classes                  LONG
!!> GUID('9b9cc778-f883-42c2-947b-7ae2493b1bec'),PROMPT('Classes:'),HEADER('Classes'),PICTURE(@n6)
[SCREENCONTROLS]
! PROMPT('Interfaces:'),USE(?Interfaces:Prompt),TRN
! STRING(@n6),USE(Interfaces)
[REPORTCONTROLS]
! STRING(@n6),USE(Interfaces)
Interfaces               LONG
!!> GUID('d1efdf82-1e98-4d3c-a19d-35b4d86d5371'),PROMPT('Interfaces:'),HEADER('Interfaces'),PICTURE(@n6)
[SCREENCONTROLS]
! PROMPT('Methods:'),USE(?Methods:Prompt),TRN
! STRING(@n13),USE(Methods),TRN
[REPORTCONTROLS]
! STRING(@n13),USE(Methods)
Methods                  LONG
!!> GUID('d4e4ebf0-ae2f-4b46-ab68-dfcdb8637c28'),PROMPT('Methods:'),HEADER('Methods'),PICTURE(@n13)
[SCREENCONTROLS]
! PROMPT('Structures:'),USE(?Structures:Prompt),TRN
! STRING(@n13),USE(Structures),TRN
[REPORTCONTROLS]
! STRING(@n13),USE(Structures)
Structures               LONG
!!> GUID('209ab1d0-15b2-420a-bb7c-04fd6ae2bc8c'),PROMPT('Structures:'),HEADER('Structures'),PICTURE(@n13)
[SCREENCONTROLS]
! PROMPT('Equates:'),USE(?Equates:Prompt),TRN
! STRING(@n13),USE(Equates),TRN
[REPORTCONTROLS]
! STRING(@n13),USE(Equates)
Equates                  LONG
!!> GUID('71cea5b1-88ac-4dee-9556-f61bf6abb781'),PROMPT('Equates:'),HEADER('Equates'),PICTURE(@n13)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOBlob')
WHEN  ('WindowToolbar') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('No Special Action')
WHEN  ('?Classes') ('No Special Action')
WHEN  ('?Equates') ('No Special Action')
WHEN  ('?Interfaces') ('No Special Action')
WHEN  ('?Methods') ('No Special Action')
WHEN  ('?Modules') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')
WHEN  ('?Panel1') ('No Special Action')
WHEN  ('?Structures') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OkButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OkButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?OkButton') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?OkButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('25000')
WHEN  ('?Classes') ('25000')
WHEN  ('?Equates') ('25000')
WHEN  ('?Interfaces') ('25000')
WHEN  ('?Methods') ('25000')
WHEN  ('?Modules') ('25000')
WHEN  ('?OkButton') ('25000')
WHEN  ('?Panel1') ('25000')
WHEN  ('?Structures') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OkButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OkButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?OkButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('None')
WHEN  ('?Classes') ('None')
WHEN  ('?Equates') ('None')
WHEN  ('?Interfaces') ('None')
WHEN  ('?Methods') ('None')
WHEN  ('?Modules') ('None')
WHEN  ('?OkButton') ('None')
WHEN  ('?Panel1') ('None')
WHEN  ('?Structures') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?OkButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?OkButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 9
WHEN  ('') (1)
WHEN  ('?Classes') (1)
WHEN  ('?Equates') (1)
WHEN  ('?Interfaces') (1)
WHEN  ('?Methods') (1)
WHEN  ('?Modules') (1)
WHEN  ('?OkButton') (1)
WHEN  ('?Panel1') (1)
WHEN  ('?Structures') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?Classes')TIMES 0
WHEN  ('?Equates')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Modules')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Structures')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?Classes')TIMES 0
WHEN  ('?Equates')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Modules')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Structures')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?Classes')TIMES 0
WHEN  ('?Equates')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Modules')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Structures')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 9
WHEN  ('')TIMES 0
WHEN  ('?Classes')TIMES 0
WHEN  ('?Equates')TIMES 0
WHEN  ('?Interfaces')TIMES 0
WHEN  ('?Methods')TIMES 0
WHEN  ('?Modules')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?Panel1')TIMES 0
WHEN  ('?Structures')TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Panel1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
Modules = RECORDS(ModuleQ)
Classes = 0
Interfaces = 0
J = RECORDS(ClassQ)
LOOP I = 1 TO J
   GET(ClassQ,I)
   IF ClassQ.bInterface = TRUE
      Interfaces += 1
   ELSE
      Classes += 1
   END
END
Methods = RECORDS(MethodQ)
Structures = RECORDS(StructureQ)
Equates = RECORDS(EnumQ)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8030
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I   LONG,AUTO
J   LONG,AUTO
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[WINDOW]
Window  WINDOW('Class Viewer Statistics'),AT(,,86,94),FONT(,,COLOR:Black,,CHARSET:ANSI),DOUBLE, |
          CENTER,GRAY,PALETTE(256)
          PANEL,AT(4,4,78,68),USE(?Panel1),#ORIG(?Panel1)
          PROMPT('Modules:'),AT(8,8),USE(?Modules:Prompt),TRN,#LINK(?Modules),#ORIG(?Modules:Prompt)
          STRING(@n6),AT(48,8),USE(Modules),RIGHT,TRN,#LINK(?Modules:Prompt),#ORIG(Modules)
          PROMPT('Classes:'),AT(8,18),USE(?Classes:Prompt),TRN,#LINK(?Classes),#ORIG(?Classes:Prompt)
          STRING(@n6),AT(48,18),USE(Classes),RIGHT,TRN,#LINK(?Classes:Prompt),#ORIG(Classes)
          PROMPT('Interfaces:'),AT(8,28),USE(?Interfaces:Prompt),TRN,#LINK(?Interfaces),#ORIG(?Interfaces:Prompt)
          STRING(@n6),AT(48,28),USE(Interfaces),RIGHT,TRN,#LINK(?Interfaces:Prompt),#ORIG(Interfaces)
          PROMPT('Methods:'),AT(8,38),USE(?Methods:Prompt),TRN,#LINK(?Methods),#ORIG(?Methods:Prompt)
          STRING(@n6),AT(48,38),USE(Methods),RIGHT,TRN,#LINK(?Methods:Prompt),#ORIG(Methods)
          PROMPT('Structures:'),AT(8,48),USE(?Structures:Prompt),TRN,#LINK(?Structures),#ORIG(?Structures:Prompt)
          STRING(@n6),AT(48,48),USE(Structures),RIGHT,TRN,#LINK(?Structures:Prompt),#ORIG(Structures)
          PROMPT('Equates:'),AT(8,58),USE(?Equates:Prompt),TRN,#LINK(?Equates),#ORIG(?Equates:Prompt)
          STRING(@n6),AT(48,58),USE(Equates),RIGHT,TRN,#LINK(?Equates:Prompt),#ORIG(Equates)
          BUTTON('&OK'),AT(21,76,45,14),USE(?OkButton),DEFAULT,STD(STD:Close)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcAddToUserMenu
PROTOTYPE '(BYTE bMode),BYTE,PROC'
PARAMETERS '(BYTE bMode)'
[COMMON]
DESCRIPTION 'Add ClassViewer to the Clarion Menu'
FROM ABC Source
CATEGORY 'Utility'
MODIFIED '2015/03/04' '17:48:24'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
szIniFile           CSTRING(256),STATIC
IniFile             FILE,DRIVER('ASCII'),NAME(szIniFile)
IniRecord             RECORD
IniBuffer               STRING(256)
                      END
                    END

UserMenus           QUEUE,PRE(UserMenus)
MenuNumber            BYTE
MenuText              CSTRING(256)
                    END

bKCRCV              BYTE(FALSE)
UserApplications    QUEUE,PRE(UserApplications)
AppToken              CSTRING(33)
AppPath               CSTRING(256)
                    END

IniManager          INIClass

cc                  LONG
loc:szXMLFilename   CSTRING(261)
MyQueue             QUEUE
InitialDirectory       CSTRING(261)
Arguments              CSTRING(261)
Command                CSTRING(261)
MenuCommand            CSTRING(81)
PromptForArguments     CSTRING(6)
UseOutputPad           CSTRING(6)
                    END
Recs                LONG
I                   LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  CASE glo:bClarionVersion
    OF CWVERSION_C2
       szIniFile = szRoot & '\bin\c2.ini'
    OF CWVERSION_C4
       szIniFile = szRoot & '\bin\c4.ini'
    OF CWVERSION_C5
       szIniFile = szRoot & '\bin\c5pe.ini'
    OF CWVERSION_C5EE
       szIniFile = szRoot & '\bin\c5ee.ini'
    OF CWVERSION_C55
       szIniFile = szRoot & '\bin\c55pe.ini'
    OF CWVERSION_C55EE
       szIniFile = szRoot & '\bin\c55ee.ini'
    OF CWVERSION_C60
       szIniFile = szRoot & '\bin\c60pe.ini'
    OF CWVERSION_C60EE
       szIniFile = szRoot & '\bin\c60ee.ini'
    OF CWVERSION_C70
       !no ini file for c7
  END
  IF glo:bClarionVersion < CWVERSION_C70
     OPEN(IniFile,ReadOnly+DenyNone)
     SET(IniFile)
     NEXT(IniFile)
     LOOP UNTIL ERRORCODE()
        CASE UPPER(CLIP(IniFile.IniRecord.IniBuffer))
        OF '[USER MENUS]'
           DO ProcessUserMenus
        OF '[USER APPLICATIONS]'
           DO ProcessUserApplications
        ELSE
           NEXT(IniFile)
        END
     END
     CLOSE(IniFile)

     IF bMode = 0
        IF bKCRCV = TRUE
           MESSAGE('Class Viewer is already installed on the Accessories Menu','Class Viewer',ICON:EXCLAMATION)
        ELSE
           IniManager.Init(szIniFile)
           GET(UserMenus,RECORDS(UserMenus))
           UserMenus.MenuNumber += 1
           IniFile.IniRecord.IniBuffer = 'A&ccessories/&Class Viewer|KCRCV'
           IniManager.Update('User Menus',UserMenus.MenuNumber,IniFile.IniRecord.IniBuffer)
           IniManager.Update('User Applications','KCRCV',LONGPATH() & '\abcview.exe')

           !delete the .dat file
           szIniFile = szIniFile[1 : LEN(szIniFile)-3] & 'dat'
           _Remove(szIniFile)

           MESSAGE('Class Viewer has been added to the Accessories Menu.','Class Viewer',ICON:EXCLAMATION)
        END
     END

  ELSE
     !CSIDL_APPDATA   EQUATE(01ah)
     cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
     CASE glo:bClarionVersion
       OF CWVERSION_C70
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\Clarion-tools.xml'
       OF CWVERSION_C80
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\8.0\Clarion-tools.xml'
       OF CWVERSION_C90
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\9.0\Clarion-tools.xml'
       OF CWVERSION_C100
          loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\10.0\Clarion-tools.xml'
     END
     IF ~Xml:LoadFromFile(loc:szXMLFileName,FALSE,FALSE)
        IF NOT Xml:FindNextNode('TOOLS','TOOL')
           Recs = Xml:loadQueue(MyQueue,TRUE,TRUE)
           LOOP I = 1 TO Recs
              GET(MyQueue,I)
              IF MyQueue.MenuCommand = 'Class Viewer'
                 bKCRCV = TRUE
                 BREAK
              END
           END

           IF bMode = 0
              IF bKCRCV = TRUE
                 MESSAGE('Class Viewer is already installed on the Tools Menu','Class Viewer',ICON:EXCLAMATION)
              ELSE
                 CLEAR(MyQueue)
                 MyQueue.InitialDirectory   = ''
                 MyQueue.Arguments          = ''
                 MyQueue.Command            = LONGPATH() & '\abcview.exe'
                 MyQueue.MenuCommand        = 'Class Viewer'
                 MyQueue.PromptForArguments = 'False'
                 MyQueue.UseOutputPad       = 'False'
                 ADD(MyQueue)
              END

              !cc = kcr_SHGetFolderPath(0,01ah,0,0,loc:szXMLFileName)
              !loc:szXMLFileName = loc:szXMLFileName & '\SoftVelocity\Clarion\7.0\Clarion-tools2.xml'
              REMOVE(loc:szXMLFileName & '.bak')
              RENAME(loc:szXMLFileName,loc:szXMLFileName & '.bak')
              IF ~Xml:CreateXMLFile(loc:szXMLFileName)
                 Xml:CreateParent('TOOLS')
                 Xml:CreateAttribute('VERSION','1')
                 Xml:AddParent()
                 Xml:AddFromQueue(MyQueue,'TOOL')
                 Xml:CloseParent()
                 Xml:CloseXMLFile()
                 MESSAGE('Class Viewer has been added to the Tools Menu.','Class Viewer',ICON:EXCLAMATION)
              END
           END
           !Xml:DebugMyQueue(MyQueue,'MyQueue Contents')
        END
        Xml:Free()
     END
  END
  RETURN(bKCRCV)
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ProcessUserMenus  ROUTINE
  DATA
I   LONG
J   LONG
szWork  CSTRING(256)

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       UserMenus.MenuNumber = IniFile.IniRecord.IniBuffer[1 : I-1]
       UserMenus.MenuText   = IniFile.IniRecord.IniBuffer[I+1 : J]
       ADD(UserMenus,+UserMenus.MenuNumber)
    END
    NEXT(IniFile)
  END
  EXIT

ProcessUserApplications  ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  NEXT(IniFile)
  LOOP UNTIL ERRORCODE() OR IniFile.IniRecord.IniBuffer[1] = '['
    J = LEN(CLIP(IniFile.IniRecord.IniBuffer))
    I = INSTRING('=',IniFile.IniRecord.IniBuffer)
    IF I > 1
       UserApplications.AppToken = IniFile.IniRecord.IniBuffer[1 : I-1]
       UserApplications.AppPath  = IniFile.IniRecord.IniBuffer[I+1 : J]
       ADD(UserApplications)
       IF UPPER(UserApplications.AppToken) = 'KCRCV'
          bKCRCV = TRUE
       END
    END
    NEXT(IniFile)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2006/11/28' '17:31:43'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
EMBED %ModuleDataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
                     MAP
EnumWindowProc         PROCEDURE(HWND HWnd, LPARAM lParam),BOOL,PASCAL
                     END

hwndClarion          LONG
[END]
[END]
[PROCEDURE]
NAME srcFindWindow
PROTOTYPE '(STRING sWindowText),LONG'
PARAMETERS '(STRING sWindowText)'
[COMMON]
FROM ABC Source
MODIFIED '2006/11/28' '17:32:06'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  szSearchText = UPPER(CLIP(sWindowText))
  hWndClarion = 0
  EnumWindows(EnumWindowProc,ADDRESS(szSearchText))
  RETURN(hwndClarion)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5200
PROPERTY:END
EnumWindowProc        PROCEDURE(HWND hWnd,LPARAM lParam)
szText  CSTRING(61)
szSearchText &CSTRING
  CODE
  szSearchText &= (lParam)
  GetWindowText(hWnd,szText,SIZE(szText))
  !IF UPPER(SUB(szText,1,7)) = 'CLARION'
  IF UPPER(SUB(szText,1,LEN(szSearchText))) = szSearchText  !'CLARION'
     hWndClarion = hWnd
  END
  RETURN TRUE
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
szSearchText    CSTRING(256)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME Calculator
[COMMON]
DESCRIPTION 'Calculator'
FROM ABC Source
MODIFIED '2006/12/13' '12:01:19'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Number     STRING(20)           !The current number displayed
Operand    REAL                 !The first operand for +,-,*,/,^ operations
Memory     REAL                 !The value contained in memory
Operation  REAL                 !The field number of the operation key
NewNumber  BYTE                 !True following = or %
Decimal    BYTE                 !True after pressing decimal point key
Digit      BYTE                 !Numeric digit represented by number key
Calculator WINDOW('Calculator'),AT(80,7,110,146),ICON('ABCVIEW.ICO'),SYSTEM,GRAY,DOUBLE,AUTO
       BUTTON('&0'),AT(29,127,14,12),FONT('Arial',12,,),KEY(KeyPad0),USE(?Zero)
       BUTTON('&1'),AT(29,111,14,12),FONT('Arial',12,,),KEY(KeyPad1),USE(?One)
       BUTTON('&2'),AT(47,111,14,12),FONT('Arial',12,,),KEY(KeyPad2),USE(?Two)
       BUTTON('&3'),AT(65,111,14,12),FONT('Arial',12,,),KEY(KeyPad3),USE(?Three)
       BUTTON('&4'),AT(29,97,14,12),FONT('Arial',12,,),KEY(KeyPad4),USE(?Four)
       BUTTON('&5'),AT(47,97,14,12),FONT('Arial',12,,),KEY(KeyPad5),USE(?Five)
       BUTTON('&6'),AT(65,97,14,12),FONT('Arial',12,,),KEY(KeyPad6),USE(?Six)
       BUTTON('&7'),AT(29,83,14,12),FONT('Arial',12,,),KEY(KeyPad7),USE(?Seven)
       BUTTON('&8'),AT(47,83,14,12),FONT('Arial',12,,),KEY(KeyPad8),USE(?Eight)
       BUTTON('&9'),AT(65,83,14,12),FONT('Arial',12,,),KEY(KeyPad9),USE(?Nine)
       BUTTON('.'),AT(47,127,14,12),FONT('Arial',12,,),KEY(DecimalKey),USE(?Decimal)
       BUTTON('CE'),AT(10,127,14,12),FONT('Arial',10,,),TIP('Clear Entry'),USE(?Clear)
       BUTTON('p'),AT(10,97,14,12),FONT('Symbol',12,,),TIP('Pi'),USE(?Pi)
       BUTTON('+/-'),AT(10,111,14,12),FONT('Arial',10,,),TIP('Reverse Sign'),USE(?Sign)
       BUTTON('x<178>'),AT(47,68,14,12),FONT('Arial',10,,),TIP('Squared'),USE(?Square)
       BUTTON('Ö'),AT(29,68,14,12),FONT('Symbol',12,,),TIP('Square Root'),USE(?Root)
       BUTTON('1/x'),AT(84,68,14,12),FONT('Arial',10,,),TIP('Reciprical'),USE(?Reciprical)
       BUTTON('10X'),AT(10,68,14,12),FONT('Ariel',10,,),TIP('Multiply by Ten'),USE(?TenTimes)
       BUTTON('%'),AT(10,83,14,12),FONT('Arial',12,,),TIP('Percent'),USE(?Percent)
       BUTTON('CM'),AT(29,53,14,12),FONT('Arial',11,,),TIP('Clear Memory'),USE(?MemClear)
       BUTTON(' C'),AT(10,53,14,12),FONT('Arial',11,,),TIP('Clear All'),USE(?ClearAll)
       BUTTON('RM'),AT(47,53,14,12),FONT('Arial',10,,),TIP('Recall Memory'),USE(?MemRecall)
       BUTTON(' M -'),AT(65,53,14,12),FONT('Arial',10,,),TIP('Subtract from Memory'),USE(?MemMinus)
       BUTTON(' M+'),AT(84,53,14,12),FONT('Arial',10,,),TIP('Add to Memory'),USE(?MemPlus)
       BUTTON('+'),AT(84,127,14,12),FONT('Arial',12,,),TIP('Add'),KEY(PlusKey),USE(?Add)
       BUTTON('-'),AT(84,111,14,12),FONT('Arial',12,,),TIP('Subtract'),KEY(MinusKey),USE(?Subtract)
       BUTTON('x'),AT(84,97,14,12),FONT('Arial',12,,),TIP('Multiple'),KEY(AstKey),USE(?Multiply)
       BUTTON('/'),AT(84,83,14,12),FONT('Arial',12,,),TIP('Divide'),KEY(SlashKey),USE(?Divide)
       BUTTON('Exp'),AT(65,68,14,12),FONT('Arial',8,,),TIP('Exponential'),USE(?Power)
       BUTTON('='),AT(65,127,14,12),FONT('Arial',12,,),TIP('Equal'),KEY(EnterKey),USE(?Equal)
       STRING('Memory:'),AT(4,36,30,10),LEFT
       STRING(@S20),AT(32,36,65,10),FONT(,8,,),USE(Memory),RIGHT
       ENTRY(@s20),AT(9,12,90,16),USE(Number),RIGHT(3),INS
     END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
  OPEN(Calculator)                      !Open the calculator window
  NewNumber = True                      !Start with a new number
  Decimal = False                       !No decimal point has been entered
  Operation = ?Equal                    !No outstanding operation
!-----------------------------------------------------------------------------
!
!     ACCEPT...END is a control structure that processes the events
!     posted by the open window.  These events may be related to control
!     fields (e.g. a button was pressed or a text field was entered).
!     or they may be related to the window (e.g. a non-modal window is
!     about to lose focus or the window is about be be closed by the
!     system menu).  When an ACCEPT loop cycles, these functions supply
!     information about the event that is to be processed:
!
!     EVENT()    returns the event number that occurred.  EQUATES.CLW
!                contains labels for these events.
!     FIELD()    returns the field number that currently has focus.
!                Field numbers are referenced with field equate labels.
!     SELECTED() returns the field number that is to receive focus
!                during a "new field selected" event.  For any other
!                event, SELECTED() returns 0.
!     ACCEPTED() returns the field number for any control field event.
!                For other events, ACCEPTED() returns 0.
!
!-----------------------------------------------------------------------------
  ACCEPT                                !Enable windows and wait for an event
    DISPLAY
    If NewNumber
      First# = 0
    End
    IF ACCEPTED()                         ! user has caused accepted event
      CASE ACCEPTED()                     ! Jump to the accepted field
      OF ?Zero TO ?Nine                   ! For a numeric key
        Digit = ACCEPTED() - ?Zero        !  The digit is the field number
        IF NewNumber                      !  For the first digit
          If Decimal
            Number = '.' & Digit
            NewNumber = False             !   Turn NewNumber flag off
            First# = 1
          Else
            Number = Digit                !   Set the number to the digit
            NewNumber = False             !   Turn NewNumber flag off
            Decimal = False               !   Turn decimal point flag off
          End
        ELSE                              !   For any other digit
          IF Decimal                      !    For a fractional digit
            If First# = 0
              Number = CLIP(Number) & '.' & Digit !     Concatenate the digit
              First# = 1
            ELSE
              Number = CLIP(Number) & Digit !     Concatenate the digit
            End
          ELSE                            !    For an integer digit
            Number = Number * 10 + Digit  !     Multipy by 10 and add the digit
          END                             !    End the IF
        END                               !   End the IF
        CYCLE                             !   Continue number entry
      OF ?Decimal                         ! For the decimal point key
        Decimal = True                    !  Turn decimal point flag on
        CYCLE                             !  Continue number entry
      OF ?Pi                              ! For the Pi key
        Number = 3.141592654              !  Set number to Pi
        NewNumber = TRUE                  !  Start new number
        Decimal = False
        CYCLE                             !  Continue
      OF ?Clear                           ! For the ClearEntry/Clear key
        IF NewNumber THEN                 !  completed number entry
          Operation = ?Equal              !   so Clear current calculation
        END                               !  End IF
        Number = 0                        !  Clear number
        NewNumber = 0                     !  Start new number
        Decimal = False
      END                                 ! End CASE
      IF Operation <> ?Equal              ! Complete outstanding operations
        IF ACCEPTED() = ?Percent          !  For the percent key
          Number = Number * Operand / 100 ! Calculate % value
          IF  (Operation <> ?Add )     |  !  Check not adding
          AND (Operation <> ?Subtract )   !  or subtractiong percentage
            Operation = ?Equal            !   Finished operation
          END                             !  End IF
        END                               ! End IF
        CASE Operation                    !  Jump to saved operation key
        OF ?Add                           ! For Add key
          Number += Operand               !   Add number to operand
        OF ?Subtract                      !  For Subtract key
          Number = Operand - Number       !   Subtract number from operand
        OF ?Multiply                      !  For Multiply key
          Number *= Operand               !   Multiply operand by number
        OF ?Divide                        !  For Divide key
          IF Number <> 0 THEN             !  Check for divide by zero
            Number = Operand / Number     !   Divide operand by number
          END                             !  End IF
        OF ?Power                         !  For Raise to a Power key
          Number = Operand ^ Number       !   Raise operand to number power
        END                               !  End CASE
        Decimal = False
        Operation = ?Equal                !  Operation done
      END;                                ! End IF
      CASE ACCEPTED()                     ! Jump to the accepted field
      OF ?Sign                            ! For the Change Sign key
        Number *= -1                      !  Multiply by -1
      OF ?Square                          ! For the Square key
        Number *= Number                  !  Multilpy by itself
      OF ?Root                            ! For the Square Root key
        Number = SQRT(Number)             !  Find the square root
      OF ?TenTimes                        ! For the 10X key
        Number *= 10                      !  Multiply by 10
      OF ?Reciprical                      ! For the Reciprical key
        IF Number <> 0 THEN               ! Check for divide by zero
          Number = 1/Number               !  Find the reciprical
        END                               ! End IF
      OF ?ClearAll                        ! For clear all key
        Number = 0                        !  Set number to zero
        Memory = 0                        !  Set memory to zero
      OF ?MemClear                        ! For clear memory key
        Memory = 0                        !  Set memory to zero
      OF ?MemRecall                       ! For the Recall Memory key
        Number = Memory                   !  Set number to memory
      OF ?MemMinus                        ! For subtract from memory key
        Memory -= Number                  !  Subtract number from memory
      OF ?MemPlus                         ! For the Add to Memory key
        Memory += Number                  !  Add number to memory
      OF ?Add TO ?Power                   ! For two operand operation keys
        Operation = ACCEPTED()            !  Save the operator
        Operand = Number                  !  Save the first operand
      END                                 ! End CASE
      SELECT(?Zero)                       ! Set focus to the Zero key
      NewNumber = TRUE                    ! ready for next number
      Decimal = False
    END                                   !End CASE
  END                                   !End ACCEPT
  CLOSE(Calculator)                     !Close the calculater window
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winGenerateTemplate
PROTOTYPE '(*CSTRING szClassName),LONG,PROC'
PARAMETERS '(*CSTRING szClassName) !,LONG,PROC'
[COMMON]
DESCRIPTION 'Class Wrapper Template Generator'
FROM ABC Window
MODIFIED '2017/07/02' ' 8:47:33'
[DATA]
[SCREENCONTROLS]
! PROMPT('l Return Value:'),USE(?lReturnValue:Prompt)
! ENTRY(@n-14),USE(lReturnValue),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(lReturnValue),RIGHT(1)
lReturnValue             LONG
!!> GUID('f7e6b3cf-ad24-4bf6-888e-e1972fa7b881'),PROMPT('l Return Value:'),HEADER('l Return Value'),PICTURE(@n-14),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! TEXT,USE(TemplateFileName)
[REPORTCONTROLS]
! TEXT,USE(TemplateFileName)
TemplateFileName         CSTRING(256),STATIC
!!> GUID('ffdecdf7-6458-4502-bad4-6fc22a1966f0'),PICTURE(@s255)
[SCREENCONTROLS]
! TEXT,USE(WizardFileName)
[REPORTCONTROLS]
! TEXT,USE(WizardFileName)
WizardFileName           CSTRING(256),STATIC
!!> GUID('19ef0c52-c1b5-47e6-9c58-c31893da3c73'),PICTURE(@s255)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (lReturnValue)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (0)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOBlob')
WHEN  ('WindowToolbar') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ButtonAction DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?EditTplTemplate:Button') ('No Special Action')
WHEN  ('?LookupFile') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')
WHEN  ('?TitleString') ('No Special Action')
WHEN  ('?WizardFileName') ('No Special Action')
WHEN  ('?szClassName') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CancelButton') ('')
WHEN  ('?EditTplTemplate:Button') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?OkButton') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CancelButton') ('')
WHEN  ('?EditTplTemplate:Button') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?OkButton') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 4
WHEN  ('?CancelButton') ()
WHEN  ('?EditTplTemplate:Button') ()
WHEN  ('?LookupFile') ()
WHEN  ('?OkButton') ()

%ButtonThread DEPEND %Control LONG TIMES 4
WHEN  ('?CancelButton') (0)
WHEN  ('?EditTplTemplate:Button') (0)
WHEN  ('?LookupFile') (0)
WHEN  ('?OkButton') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?EditTplTemplate:Button') ('25000')
WHEN  ('?LookupFile') ('25000')
WHEN  ('?OkButton') ('25000')
WHEN  ('?TitleString') ('25000')
WHEN  ('?WizardFileName') ('25000')
WHEN  ('?szClassName') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CancelButton') ('')
WHEN  ('?EditTplTemplate:Button') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?OkButton') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 4
WHEN  ('?CancelButton') ()
WHEN  ('?EditTplTemplate:Button') ()
WHEN  ('?LookupFile') ()
WHEN  ('?OkButton') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 4
WHEN  ('?CancelButton') (0)
WHEN  ('?EditTplTemplate:Button') (0)
WHEN  ('?LookupFile') (0)
WHEN  ('?OkButton') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 8
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?EditTplTemplate:Button') ('None')
WHEN  ('?LookupFile') ('None')
WHEN  ('?OkButton') ('None')
WHEN  ('?TitleString') ('None')
WHEN  ('?WizardFileName') ('None')
WHEN  ('?szClassName') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 4
WHEN  ('?CancelButton') ('')
WHEN  ('?EditTplTemplate:Button') ('')
WHEN  ('?LookupFile') ('')
WHEN  ('?OkButton') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 4
WHEN  ('?CancelButton') ()
WHEN  ('?EditTplTemplate:Button') ()
WHEN  ('?LookupFile') ()
WHEN  ('?OkButton') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 9
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?EditTplTemplate:Button') (1)
WHEN  ('?LookupFile') (1)
WHEN  ('?OkButton') (1)
WHEN  ('?TemplateFileName') (1)
WHEN  ('?TitleString') (1)
WHEN  ('?WizardFileName') (1)
WHEN  ('?szClassName') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?EditTplTemplate:Button')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?TitleString')TIMES 0
WHEN  ('?WizardFileName')TIMES 0
WHEN  ('?szClassName')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?EditTplTemplate:Button')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?TitleString')TIMES 0
WHEN  ('?WizardFileName')TIMES 0
WHEN  ('?szClassName')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?EditTplTemplate:Button')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?TitleString')TIMES 0
WHEN  ('?WizardFileName')TIMES 0
WHEN  ('?szClassName')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 8
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?EditTplTemplate:Button')TIMES 0
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?OkButton')TIMES 0
WHEN  ('?TitleString')TIMES 0
WHEN  ('?WizardFileName')TIMES 0
WHEN  ('?szClassName')TIMES 0

%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabDisableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?Panel1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?Panel1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?Panel1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?Panel1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Panel1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?OkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO LoadWizardTemplate
DO WriteTemplate
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?EditTplTemplate:Button'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO EditSource
[END]
[END]
WHEN '?TemplateFileName'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?LookupFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
SELF.Reset()
[END]
[END]
WHEN '?WizardFileName'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
INIMgr.Fetch('Options','TplWizardOutput',TemplateFileName)
IF TemplateFileName = ''
   TemplateFileName = szClassName & '.tpl'
END
TemplateFileLookup.DefaultFile = TemplateFileName
TemplateFileName = ''                                 !Force user to select

CategoryQ.szClassName = ClassNameQ.szClassName
GET(CategoryQ,+CategoryQ.szClassName)
IF ERRORCODE() OR CategoryQ.szCategory = ''
   CategoryQ.szCategory = 'ABC'
END

ClassQ.szClassSort = ClassNameQ.szSortName
GET(ClassQ,+ClassQ.szClassSort)
IF ERRORCODE()
   CLEAR(ClassQ)
END

ModuleQ.lModuleId = ClassQ.lIncludeId
GET(ModuleQ,+ModuleQ.lModuleId)
IF ERRORCODE()
   CLEAR(ModuleQ)
END

IF ~RECORDS(tplTemplateQ)
   tplTemplateQ.szPath = PATH() & '\' & 'TplWizard.txt'
   IF EXISTS(tplTemplateQ.szPath)
      tplTemplateQ.szName = 'Sample Wrapper Template'
      ADD(tplTemplateQ)
   END
END

GET(tplTemplateQ,1)
?WizardFileName{PROP:Selected} = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
CASE glo:Background
OF 1  !Color
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = glo:Color2
OF 2  !Wallpaper
   window{PROP:Wallpaper} = glo:szWallpaper2
   window{PROP:Tiled} = glo:Tiled2
   window{PROP:Color} = COLOR:NONE
OF 3  !None
   window{PROP:Wallpaper} = ''
   window{PROP:Color} = COLOR:NONE
END
J = LASTFIELD()
LOOP I = 1 TO J
   SETFONT(I,glo:Typeface,glo:FontSize,glo:FontColor,glo:FontStyle,0)
END
?szClassName{PROP:FontStyle} = FONT:BOLD
IF glo:bUseHTMLHelp
   IF oHH &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
   ELSE
      oHH.SetHelpFile( 'ABCVIEW.CHM' )
   END
END
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
GET(tplTemplateQ,CHOICE(?WizardFileName))
IF ERRORCODE()
   DISABLE(?OKButton)
ELSE
   IF tplTemplateQ.szName <> '' AND TemplateFileName <> ''
      ENABLE(?OKButton)
   ELSE
      DISABLE(?OKButton)
   END
END
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
LoadWizardTemplate ROUTINE
  szAsciiFileName = tplTemplateQ.szPath   !WizardFileName
  IF szAsciiFileName = ''
     szAsciiFileName = 'TplWizard.txt'
     INIMgr.Fetch('Options','TplWizardTemplate',szAsciiFileName)
  END
  INIMgr.Update('Options','TplWizardTemplate',szAsciiFileName)
  DO LoadTemplate
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 510
PROPERTY:END
LoadTemplate ROUTINE

  DATA
I           LONG
J           LONG
K           LONG
upperText   CSTRING(SIZE(SourceFile.sText)+1)

  CODE
  OPEN(SourceFile)
  IF ERRORCODE()
     MESSAGE('Template File (' & szAsciiFileName & ')',ERROR(),ICON:EXCLAMATION)
  ELSE
     SET(SourceFile)
     LOOP
        NEXT(SourceFile)
        IF ERRORCODE()
           BREAK
        ELSE
           !parse classname
           tplQ.Text = ''
           upperText = UPPER(CLIP(SourceFile.sText))
           I = 1
           K = LEN(upperText)
           J = INSTRING('{{CLASSNAME}',upperText,1,1)
           LOOP WHILE J <> 0
              tplQ.Text = tplQ.Text & SourceFile.sText[I : J-1] & szClassName
              I = J + 11
              J = INSTRING('{{CLASSNAME}',upperText,1,I)
           END
           IF I < K
              tplQ.Text = tplQ.Text & SourceFile.sText[I : K]
           END

           !parse class category
           SourceFile.sText = tplQ.Text
           upperText = UPPER(CLIP(SourceFile.sText))
           tplQ.Text = ''
           I = 1
           K = LEN(upperText)
           J = INSTRING('{{CATEGORY}',upperText,1,1)
           LOOP WHILE J <> 0
              tplQ.Text = tplQ.Text & SourceFile.sText[I : J-1] & CategoryQ.szCategory
              I = J + 10
              J = INSTRING('{{CATEGORY}',upperText,1,I)
           END
           IF I < K
              tplQ.Text = tplQ.Text & SourceFile.sText[I : K]
           END



           !parse Add Class Group
           upperText = UPPER(CLIP(tplQ.Text))
           IF upperText[1 : 15] = '{{ADDCLASSGROUP}'
              DO WriteAddClassGroup
           ELSE
              ADD(tplQ)
           END
        END
     END
     CLOSE(SourceFile)
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 520
PROPERTY:END
WriteTemplate   ROUTINE

  DATA
I           LONG
J           LONG

  CODE
  szAsciiFileName = TemplateFileName
  IF szAsciiFileName = ''
     szAsciiFileName = szClassName & '.tpl'
  END

  CREATE(SourceFile)
  IF ERRORCODE()
     MESSAGE('Template File (' & szAsciiFileName & ')',ERROR(),ICON:EXCLAMATION)
  ELSE
     OPEN(SourceFile)
     IF ERRORCODE()
        MESSAGE('Template File (' & szAsciiFileName & ')',ERROR(),ICON:EXCLAMATION)
     ELSE
        J = RECORDS(tplQ)
        LOOP I = 1 TO J
          GET(tplQ,I)
          SourceFile.sText = tplQ.Text
          ADD(SourceFile)
        END
        DO WriteAddClassGroup
        CLOSE(SourceFile)
        INIMgr.Update('Options','TplWizardOutput',szAsciiFileName)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 530
PROPERTY:END
WriteAddClassGroup  ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  SETCURSOR(CURSOR:WAIT)
  tplQ.Text = '#! ======================================================================================='
  ADD(tplQ)
  tplQ.Text = '#! %AddClass - Add the Class to the ABC variables'
  ADD(tplQ)
  tplQ.Text = '#! ======================================================================================='
  ADD(tplQ)
  tplQ.Text = '#GROUP(%AddClass)'
  ADD(tplQ)
  DO AddClass
  SETCURSOR()
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 540
PROPERTY:END
AddClass    ROUTINE
  IF UPPER(ModuleQ.szModulePath) = UPPER(szRoot & '\Libsrc\') & CHOOSE(glo:bClarionVersion > CWVERSION_C60EE,'win\','')
     tplQ.Text = '  #RETURN          #! Not Required - Class defined in ' & ModuleQ.szModulePath & ModuleQ:szModuleName
     ADD(tplQ)
  ELSE
     tplQ.Text = '  #FIX(%pClassName,''' & szClassName & ''')'
     ADD(tplQ)
     tplQ.Text= '  #IF(%pClassName = ''' & szClassName & ''')'
     ADD(tplQ)
     tplQ.Text = '    #RETURN'
     ADD(tplQ)
     tplQ.Text = '  #ENDIF'
     ADD(tplQ)

     tplQ.Text = '  #ADD(%pClassName,''' & szClassName & ''')'
     ADD(tplQ)
     tplQ.Text = '  #SET(%pClassCategory,''' & CategoryQ.szCategory & ''')'
     ADD(tplQ)
     tplQ.Text = '  #SET(%pClassIncFile,''' & ModuleQ.szModulePath & ModuleQ.szModuleName & ''')'
     ADD(tplQ)
     tplQ.Text = '  #SET(%pClassParent,''' & ClassQ.szParentClassName & ''')'
     ADD(tplQ)

     bInherited = FALSE
     szDefined = szClassName
     DO AddClassInterfaces
     DO AddClassMethods
     DO AddClassProperties

     LOOP WHILE ClassQ.szParentClassName
        ClassQ.szClassSort = UPPER(ClassQ.szParentClassName)
        GET(ClassQ,+ClassQ.szClassSort)
        IF ERRORCODE()
           CLEAR(ClassQ)
        END

        ModuleQ.lModuleId = ClassQ.lIncludeId
        GET(ModuleQ,+ModuleQ.lModuleId)
        IF ERRORCODE()
           CLEAR(ModuleQ)
        END

        bInherited = TRUE
        szDefined = ClassQ.szClassName
        DO AddClassInterfaces
        DO AddClassMethods
        DO AddClassProperties
     END
  END

  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 550
PROPERTY:END
AddClassInterfaces  ROUTINE
  DATA
lSourceLine     LONG
szImplements    CSTRING(1025)
I               LONG
J               LONG
K               LONG

  CODE
  lSourceLine = srcGetImplements(ClassQ.lClassID,szImplements)
  IF szImplements
     I = 1
     J = LEN(szImplements)
     K = INSTRING(',',szImplements,1,I)
     LOOP WHILE K
        tplQ.Text = '  #ADD(%pClassImplements,''' & szImplements[I : K-1] & ''')'
        ADD(tplQ)
        I = K+1
        K = INSTRING(',',szImplements,1,I)
     END
     IF I < J
        tplQ.Text = '  #ADD(%pClassImplements,''' & szImplements[I : J] & ''')'
        ADD(tplQ)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 560
PROPERTY:END
AddClassMethods ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  MethodQ.lClassID = ClassQ.lClassID
  GET(MethodQ,+MethodQ.lClassID)
  IF ~ERRORCODE()
     J = RECORDS(MethodQ)
     I = POINTER(MethodQ)
     LOOP I = I TO J
        GET(MethodQ,I)
        IF MethodQ.lClassID = ClassQ.lClassID
           DO AddMethod
        ELSE
           BREAK
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 570
PROPERTY:END
AddMethod   ROUTINE
  DATA
szPrototype    CSTRING(1025)

  CODE
  IF ~(bInherited AND MethodQ.bPrivate)
     IF ~MethodQ.bModule
        tplQ.Text = '  #!'
        ADD(tplQ)
        tplQ.Text = '  #ADD(%pClassMethod,''' & MethodQ.szMethodName & ''')'
        ADD(tplQ)

        IF MethodQ.szReturnType
           szPrototype = MethodQ.szPrototype & ',' & MethodQ.szReturnType
        ELSE
           szPrototype = MethodQ.szPrototype
        END
        tplQ.Text = '  #FIX(%pClassMethodPrototype,''' & szPrototype & ''')'
        ADD(tplQ)
        tplQ.Text = '  #IF(%pClassMethodPrototype <> ''' & szPrototype & ''')'
        ADD(tplQ)
        tplQ.Text = '    #ADD(%pClassMethodPrototype,''' & szPrototype & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodFinal,' & MethodQ.bFinal & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodPrivate,' & MethodQ.bPrivate & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodVirtual,' & MethodQ.bVirtual & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodProtected,' & MethodQ.bProtected & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodProcAttribute,' & MethodQ.bProc & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodInherited,' & bInherited & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodDefined,''' & szDefined & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodReturnType,''' & MethodQ.szReturnType & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodParentCall,''PARENT.' & MethodQ.szMethodName & srcGetParameters(MethodQ.szPrototype) & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodDll,''' & MethodQ.szDll & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodExtName,''' & MethodQ.szExtName & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodCallConv,''' & MethodQ.szCallConv & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassMethodExtends,' & MethodQ.bExtends & ')'
        ADD(tplQ)
        tplQ.Text = '  #ENDIF'
        ADD(tplQ)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 580
PROPERTY:END
AddClassProperties ROUTINE
  DATA
I   LONG
J   LONG

  CODE
  PropertyQ.lClassID = ClassQ.lClassID
  GET(PropertyQ,+PropertyQ.lClassID)
  IF ~ERRORCODE()
     J = RECORDS(PropertyQ)
     I = POINTER(PropertyQ)
     LOOP I = I TO J
        GET(PropertyQ,I)
        IF PropertyQ.lClassID = ClassQ.lClassID
           DO AddProperty
        ELSE
           BREAK
        END
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 590
PROPERTY:END
AddProperty ROUTINE
  IF ~(bInherited AND PropertyQ.bPrivate)
     IF ~PropertyQ.bModule
        tplQ.Text = '  #!'
        ADD(tplQ)
        tplQ.Text = '  #FIX(%pClassProperty,''' & PropertyQ.szPropertyName & ''')'
        ADD(tplQ)
        tplQ.Text = '  #IF(%pClassProperty = ''' & PropertyQ.szPropertyName & ''')'
        ADD(tplQ)
        tplQ.Text = '    #ADD(%pClassProperty,''' & PropertyQ.szPropertyName & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassPropertyPrototype,''' & PropertyQ:szDataType & ''')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassPropertyPrivate,' & PropertyQ.bPrivate & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassPropertyProtected,' & PropertyQ.bProtected & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassPropertyInherited,' & bInherited & ')'
        ADD(tplQ)
        tplQ.Text = '    #SET(%pClassPropertyDefined,''' & szDefined & ''')'
        ADD(tplQ)
        tplQ.Text = '  #ENDIF'
        ADD(tplQ)
     END
  END
  EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 600
PROPERTY:END
EditSource  ROUTINE
  DATA
I               LONG,AUTO
J               LONG,AUTO
lSearchLine     LONG(1)
szCommandLine   CSTRING(256)

  CODE
  szCommandline = 'Notepad.exe ' & tplTemplateQ.szPath
  IF glo:szEditorCommand
     szCommandLine = glo:szEditorCommand
     I = INSTRING('.EXE ',UPPER(szCommandLine),1)
     IF I
        szCommandLine = SHORTPATH(szCommandLine[1 : I+3]) & szCommandLine[I+4 : LEN(szCommandLine)]
     END
     !look for filename parameter token
     I = INSTRING('%1',szCommandLine,1)
     IF I
        szCommandLine = SUB(szCommandLine,1,I-1) & |
                        tplTemplateQ.szPath & |
                        SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
     END
     !look for line number parameter token
     I = INSTRING('%2',szCommandLine,1)
     IF I
        szCommandLine = SUB(szCommandLine,1,I-1) & |
                        lSearchLine & |
                        SUB(szCommandLine,I+2,LEN(szCommandLine)-(I+1))
     END
  END
  RUN(szCommandLine)
  IF RUNCODE() = -4   !Failed to execute
    CASE MESSAGE('An error occurred trying to execute the following command:||' & szCommandLine & |
            '||Do you want to use Notepad?',ERROR(),ICON:EXCLAMATION, |
            BUTTON:YES+BUTTON:NO,BUTTON:YES)
    OF BUTTON:YES
       RUN('Notepad.exe ' & tplTemplateQ.szPath)
    END
  END
  EXIT
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
tplQ        QUEUE
Text          CSTRING(SIZE(SourceFile.sText)+1)
            END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
bInherited      BYTE
szDefined       LIKE(ClassQ.szClassName)
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                    LONG,AUTO
J                    LONG,AUTO
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[ADDITION]
NAME ABC DOSFileLookup
[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Template Filename...')
%DOSFileField FIELD  (TemplateFileName)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (0)
%DefaultOnCancel LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Template Files (*.tpl)')
%DOSMask DEFAULT  ('*.tpl')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('TemplateFileLookup')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
srcGetImplements
srcGetParameters
srcGetReturnType
srcGetSourceLine
[WINDOW]
Window  WINDOW('Generate Wrapper'),AT(,,182,104),DOUBLE,CENTER,GRAY
          PANEL,AT(4,4,174,78),USE(?Panel1),#ORIG(?Panel1)
          STRING('Press OK to Generate a Wrapper Template for:'),AT(10,8),USE(?TitleString), |
            TRN,#ORIG(?String1)
          STRING(@s63),AT(10,18,160,10),USE(szClassName),FONT(,,,FONT:bold),CENTER
          PROMPT('Wrapper Generator Template:'),AT(10,28),USE(?tplTemplateName:Prompt),TRN, |
            #ORIG(?Prompt7)
          LIST,AT(10,38,148,10),USE(WizardFileName),VSCROLL,COLOR(COLOR:White),DROP(10),FORMAT('90L(2)@s60@'), |
            FROM(tplTemplateQ),TIP('Select the template to be used for<0DH,0AH>creating' & |
            ' the wrapper template.'),#FIELDS(incTemplateQ),#ORIG(?List3)
          BUTTON('...'),AT(162,38,10,10),USE(?EditTplTemplate:Button),SKIP,TIP('Edit the s' & |
            'elected Wrapper Generator Template.'),#ORIG(?Button6)
          PROMPT('Generated Template File:'),AT(10,52),USE(?TemplateFileName:Prompt),TRN,#LINK(?TemplateFileName), |
            #ORIG(?TemplateFileName:Prompt)
          ENTRY(@s255),AT(10,62,148,10),USE(TemplateFileName),COLOR(COLOR:White),REQ,TIP('Select the' & |
            ' filename for the <0DH,0AH>generated template (tpl) file.'),#LINK(?TemplateFileName:Prompt), |
            #ORIG(TemplateFileName)
          BUTTON('...'),AT(162,62,10,10),USE(?LookupFile),#ORIG(?LookupFile),#SEQ(3)
          BUTTON('&OK'),AT(83,86,45,14),USE(?OkButton),DEFAULT,DISABLE
          BUTTON('Cancel'),AT(133,86,45,14),USE(?CancelButton)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetPrototypeAttr
PROTOTYPE '(STRING sAttribute, STRING sString),STRING'
PARAMETERS '(STRING sAttribute, STRING sString) !,STRING'
[COMMON]
DESCRIPTION 'extract prototype attribute from passed string'
FROM ABC Source
MODIFIED '2004/12/14' '10:41:34'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I           LONG,AUTO
J           LONG,AUTO
szReturn    CSTRING(1024)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  CASE(sAttribute)
    OF 'DLL'
       I = INSTRING(',DLL(',sString,1,1)
       IF I
          I += 5
          J = INSTRING(')',sString,1,I)-1
          szReturn = sString[I : J]
       ELSE
          szReturn = ''
       END
    OF 'NAME'
       I = INSTRING(',NAME(''',sString,1,1)
       IF I
          I += 7
          J = INSTRING('''',sString,1,I)-1
          szReturn = sString[I : J]
       ELSE
          szReturn = ''
       END
    OF 'CALLCONV'
       IF INSTRING(',PASCAL,',sString,1,1) OR (SUB(CLIP(sString),-7,7) = ',PASCAL')
          szReturn = 'PASCAL'
       ELSIF INSTRING(',C,',sString,1,1) OR (SUB(CLIP(sString),-2,2) = ',C')
          szReturn = 'C'
       ELSE
          szReturn = ''
       END
    OF 'RETURN'
       szReturn = CLIP(sString)
       szReturn = srcGetReturnType(szReturn)
  END
  RETURN(szReturn)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetReturnType
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetImplements
PROTOTYPE '(LONG lClassId, *CSTRING Buffer),LONG'
PARAMETERS '(LONG lClassId, *CSTRING Buffer) !,LONG'
[COMMON]
DESCRIPTION 'Get Class Interface Implementations'
FROM ABC Source
MODIFIED '2004/12/14' '18:08:50'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  !SORT(ClassQ,+ClassQ.lClassId)
  ClassQ.lClassId = lClassId
  GET(ClassQ,+ClassQ.lClassId)
  ModuleQ.lModuleId = ClassQ:lIncludeId
  GET(ModuleQ,+ModuleQ.lModuleId)
  IF ~ERRORCODE()
     FileNameQ.sFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
     GET(FileNameQ,+FileNameQ.sFileName)
     IF ERRORCODE()                           !file has not been scanned
        DO ScanFile
     END
     I = INSTRING('IMPLEMENTS(',UPPER(A1:TextLine),1,1)
     IF I
        I += 11
        J = INSTRING(')',UPPER(A1:TextLine),1,I)-1
        Buffer = A1:TextLine[I : J]
     ELSE
        Buffer = ''
     END
     RETURN(ClassQ:lLineNum)
  ELSE
     RETURN(0)
  END

ScanFile    ROUTINE
  FileNameQ.sFileName = ModuleQ.szModulePath & ModuleQ.szModuleName
  ADD(FileNameQ,+FileNameQ.sFileName)
  lLineNum = 0
  AsciiFilename1 = FileNameQ.sFileName
  OPEN(AsciiFile1,040h)   !Read-Only
  IF ~ERRORCODE()
     SET(AsciiFile1)
     LOOP
        NEXT(AsciiFile1)
        IF ERRORCODE()
           BREAK
        ELSE
           lLineNum += 1
           IF lLineNum = ClassQ:lLineNum
              BREAK
           END
        END
     END
     CLOSE(AsciiFile1)
  END
  EXIT
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                    LONG
J                    LONG
lLineNum             LONG
AsciiFilename1       STRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
AsciiFile1           FILE,DRIVER('ASCII'),NAME(AsciiFilename1),PRE(A1),THREAD
RECORD                RECORD,PRE()
TextLine                STRING(1024)
                      END
                     END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcEqual
srcFindComment
srcGetPrototype
srcRemoveLabels
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetLineComments
PROTOTYPE '(STRING sFilename, LONG lLineNum),STRING'
PARAMETERS '(STRING sFilename, LONG lLineNum)'
[COMMON]
DESCRIPTION 'Get Method Definition Start Line'
FROM ABC Source
MODIFIED '2005/01/13' '17:43:08'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  LineCommentQ.sFileName = sFileName
  GET(LineCommentQ,+LineCommentQ.sFileName)
  IF ERRORCODE()
     DO ScanFile
  END
  LineCommentQ.sFileName = sFileName
  LineCommentQ.lSourceLine = lLineNum
  GET(LineCommentQ,+LineCommentQ.sFileName,+LineCommentQ.lSourceLine)
  IF ~ERRORCODE()
     szText = LineCommentQ.szComment
  ELSE
     szText = ''
  END
  RETURN(szText)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
I                    LONG
J                    LONG
K                    LONG
thisLineNum          LONG
AsciiFilename1       STRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
AsciiFile1           FILE,DRIVER('ASCII'),NAME(AsciiFilename1),PRE(A1),THREAD
RECORD                RECORD,PRE()
TextLine                STRING(1024)
                      END
                     END
szText               CSTRING(1025)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ScanFile    ROUTINE
  DATA
X               LONG
bProcessingMap  BYTE

  CODE
  thisLineNum = 0
  AsciiFilename1 = sFileName
  OPEN(AsciiFile1,040h)   !Read-Only
  IF ~ERRORCODE()
     SET(AsciiFile1)
     LOOP
        NEXT(AsciiFile1)
        IF ERRORCODE()
           BREAK
        ELSE
           thisLineNum += 1
           X = srcFindComment(AsciiFile1.record.TextLine)
           IF X
              LineCommentQ.sFileName = sFileName
              LineCommentQ.lSourceLine = thisLineNum
              LineCommentQ.szComment = SUB(AsciiFile1.record.TextLine,X,LEN(CLIP(AsciiFile1.record.TextLine)))
              ADD(LineCommentQ,+LineCommentQ.sFileName,+LineCommentQ.lSourceLine)
           END
        END
     END
     CLOSE(AsciiFile1)
  END
  EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcEqual
srcFindComment
srcGetPrototype
srcRemoveLabels
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcFindModule
PROTOTYPE '(*CSTRING szModulePath, *CSTRING szModuleName)'
PARAMETERS '(*CSTRING szModulePath, *CSTRING szModuleName)'
[COMMON]
DESCRIPTION 'Find location of included file'
FROM ABC Source
MODIFIED '2017/07/02' ' 8:50:55'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleRedirectionMacros ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO
N       LONG,AUTO

  CODE
    N = RECORDS(RedirectionQueue)
    LOOP I = 1 TO N
       GET(RedirectionQueue,I)
       LOOP
          J = INSTRING(RedirectionQueue.Token,UPPER(SearchQ.szPath),1)
          IF J
             SearchQ.szPath = SUB(SearchQ.szPath,1,J-1) & RedirectionQueue.Path & SUB(SearchQ.szPath,J+LEN(RedirectionQueue.Token),LEN(SearchQ.szPath)-J+LEN(RedirectionQueue.Token)-1)
          ELSE
             BREAK
          END
       END
    END
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
N           LONG,AUTO
P           LONG,AUTO
SearchQ     QUEUE(SEARCHQTYPE),PRE(SQ)
            END
FileQ       QUEUE(File:queue),PRE(Q)
            END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    P = INSTRING('\',szModuleName,-1,LEN(szModuleName))
    IF P > 0
       szModulePath = UPPER(szModuleName[1 : P])
       szModuleName = UPPER(szModuleName[P+1 : LEN(szModuleName)])
    END
    RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[CALLS]
srcGetSearchFoldersFromRedFile
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcReadClarionProps
PROTOTYPE '(*CSTRING szXmlFilename)'
PARAMETERS '(*CSTRING szXmlFilename)'
[COMMON]
FROM ABC Source
MODIFIED '2017/07/02' ' 8:52:23'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
MyQueue                 QUEUE,PRE(QUE)
ElementName                STRING(35)
                        END
MyData                  CSTRING(128)
lCnt                    LONG
lSkipToNextVersion      LONG(false)
szTestString            CSTRING(1024)
cc                      LONG  !completion code
i                       LONG

szVersionNameKey        CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,NAME,')
szPathKey               CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,PATH,VALUE,')
szIsWindowsVersionKey   CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,ISWINDOWSVERSION,VALUE,')
szIniFileKey            CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,INI,VALUE,')
szLibsrcKey             CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,LIBSRC,VALUE,')
szRedFileKey            CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,NAME,VALUE,')
szSupportsIncludeKey    CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,SUPPORTSINCLUDE,VALUE,')

szPropertiesKey         CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES')

szRootKey               CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,ROOT,VALUE,')
szRedDirKey             CSTRING('CLARIONPROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,PROPERTIES,REDDIR,VALUE,')
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CLEAR(glo:VersionQ)
      IF ~Xml:LoadFromFile(szXmlFilename)
         Xml:GotoTop()
         IF ~Xml:FindNextContent('Clarion.Versions',FALSE,FALSE)
            cc = Xml:ReadCurrentRecord(MyQueue,MyData)
            IF UPPER(MyData) = 'CLARION.VERSIONS'
               LOOP
                  IF ~Xml:ReadNextRecord(MyQueue,MyData)
                     IF lSkipToNextVersion AND Records(MyQueue) > 4 !Skip all elements until the specIFic version is over
                        CYCLE
                     ELSE
                        lSkipToNextVersion = FALSE
                     END
                     CLEAR(szTestString)
                     LOOP lCnt = 1 TO RECORDS(MyQueue)
                        GET(MyQueue,lCnt)
                        szTestString = szTestString & CLIP(MyQueue.ElementName) & ','
                     END
                     IF UPPER(szTestString) = szVersionNameKey
                        glo:VersionQ.VersionName = MyData
                        glo:VersionQ.RedirectionMacros &= NULL
                        ADD(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szPathKey
                        glo:VersionQ.Path = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szIsWindowsVersionKey
                        glo:VersionQ.IsWindowsVersion = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szIniFileKey
                        glo:VersionQ.IniFile = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szLibsrcKey
                        glo:VersionQ.Libsrc = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szRedFileKey
                        glo:VersionQ.RedFile = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szSupportsIncludeKey
                        glo:VersionQ.SupportsInclude = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString[1 : LEN(szPropertiesKey)]) = szPropertiesKey AND UPPER(MyData) = 'MACROS'
                        IF glo:VersionQ.RedirectionMacros &= NULL
                           glo:VersionQ.RedirectionMacros &= NEW RedirectionQueueType
                           glo:VersionQ.RedirectionMacros.Token = '%REDNAME%'
                           glo:VersionQ.RedirectionMacros.Path  = glo:VersionQ.RedFile
                           ADD(glo:VersionQ.RedirectionMacros)
                        END

                        LOOP WHILE lSkipToNextVersion = FALSE
                          IF ~Xml:ReadNextRecord(MyQueue,MyData)

                             CLEAR(szTestString)
                             LOOP lCnt = 1 TO RECORDS(MyQueue)
                                GET(MyQueue,lCnt)
                                szTestString = szTestString & CLIP(MyQueue.ElementName) & ','
                             END

                             i = INSTRING(',',szTestString,1,LEN(szPropertiesKey)+2)
                             IF i
                                IF MyData <> ''
                                   glo:VersionQ.RedirectionMacros.Token = '%' & UPPER(szTestString[LEN(szPropertiesKey)+2 : i-1]) & '%'
                                   glo:VersionQ.RedirectionMacros.Path  = MyData
                                   ADD(glo:VersionQ.RedirectionMacros)
                                   PUT(glo:VersionQ)
                                END
                             ELSE
                                lSkipToNextVersion = true
                             END

                             IF UPPER(szTestString) = szRootKey
                                glo:VersionQ.root = MyData
                                PUT(glo:VersionQ)
                             ELSIF UPPER(szTestString) = szRedDirKey
                                glo:VersionQ.RedDir = MyData
                                PUT(glo:VersionQ)
                             END

                          END
                        END



                     ELSIF UPPER(szTestString) = szRootKey
                        glo:VersionQ.root = MyData
                        PUT(glo:VersionQ)

                     ELSIF UPPER(szTestString) = szRedDirKey
                        glo:VersionQ.RedDir = MyData
                        PUT(glo:VersionQ)
                        lSkipToNextVersion = true

                     ELSIF RECORDS(MyQueue) < 3  !At the END of the Clarion Versions section
                        BREAK
                     END
                  ELSE
                     BREAK
                  END
               END
            END
         END
         Xml:Free()
         !Xml:DebugMyQueue(glo:VersionQ,'Versions')
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcColorFromName
PROTOTYPE '(STRING KnownColorName),STRING'
PARAMETERS '(STRING KnownColorName)'
[COMMON]
DESCRIPTION 'Returns RGB value for named color'
FROM ABC Source
MODIFIED '2008/12/26' ' 9:28:28'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
KnownColor     QUEUE,STATIC
Name              CSTRING(21)
Value             CSTRING(8)
               END
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
InitializeKnownColorQueue  ROUTINE
      KnownColor.Name = 'AliceBlue'
      KnownColor.Value = '#F0F8FF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'AntiqueWhite'
      KnownColor.Value = '#FAEBD7'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Aqua'
      KnownColor.Value = '#00FFFF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Aquamarine'
      KnownColor.Value = '#7FFFD4'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Azure'
      KnownColor.Value = '#F0FFFF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Beige'
      KnownColor.Value = '#F5F5DC'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Bisque'
      KnownColor.Value = '#FFE4C4'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Black'
      KnownColor.Value = '#000000'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'BlanchedAlmond'
      KnownColor.Value = '#FFEBCD'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Blue'
      KnownColor.Value = '#0000FF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'BlueViolet'
      KnownColor.Value = '#8A2BE2'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Brown'
      KnownColor.Value = '#A52A2A'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'BurlyWood'
      KnownColor.Value = '#DEB887'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'CadetBlue'
      KnownColor.Value = '#5F9EA0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Chartreuse'
      KnownColor.Value = '#7FFF00'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Chocolate'
      KnownColor.Value = '#D2691E'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Coral'
      KnownColor.Value = '#FF7F50'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'CornflowerBlue'
      KnownColor.Value = '#6495ED'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Cornsilk'
      KnownColor.Value = '#FFF8DC'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Crimson'
      KnownColor.Value = '#DC143C'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Cyan'
      KnownColor.Value = '#00FFFF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkBlue'
      KnownColor.Value = '#00008B'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkCyan'
      KnownColor.Value = '#008B8B'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkGoldenrod'
      KnownColor.Value = '#B8860B'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkGray'
      KnownColor.Value = '#A9A9A9'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkGreen'
      KnownColor.Value = '#006400'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkKhaki'
      KnownColor.Value = '#BDB76B'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkMagenta'
      KnownColor.Value = '#8B008B'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkOliveGreen'
      KnownColor.Value = '#556B2F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkOrange'
      KnownColor.Value = '#FF8C00'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkOrchid'
      KnownColor.Value = '#9932CC'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkRed'
      KnownColor.Value = '#8B0000'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkSalmon'
      KnownColor.Value = '#E9967A'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkSeaGreen'
      KnownColor.Value = '#8FBC8F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkSlateBlue'
      KnownColor.Value = '#483D8B'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkSlateGray'
      KnownColor.Value = '#2F4F4F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkTurquoise'
      KnownColor.Value = '#00CED1'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DarkViolet'
      KnownColor.Value = '#9400D3'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DeepPink'
      KnownColor.Value = '#FF1493'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DeepSkyBlue'
      KnownColor.Value = '#00BFFF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DimGray'
      KnownColor.Value = '#696969'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'DodgerBlue'
      KnownColor.Value = '#1E90FF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Firebrick'
      KnownColor.Value = '#B22222'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'FloralWhite'
      KnownColor.Value = '#FFFAF0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'ForestGreen'
      KnownColor.Value = '#228B22'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Fuchsia'
      KnownColor.Value = '#FF00FF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Gainsboro'
      KnownColor.Value = '#DCDCDC'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'GhostWhite'
      KnownColor.Value = '#F8F8FF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Gold'
      KnownColor.Value = '#FFD700'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Goldenrod'
      KnownColor.Value = '#DAA520'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Gray'
      KnownColor.Value = '#808080'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Green'
      KnownColor.Value = '#008000'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'GreenYellow'
      KnownColor.Value = '#ADFF2F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Honeydew'
      KnownColor.Value = '#F0FFF0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'HotPink'
      KnownColor.Value = '#FF69B4'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'IndianRed'
      KnownColor.Value = '#CD5C5C'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Indigo'
      KnownColor.Value = '#4B0082'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Ivory'
      KnownColor.Value = '#FFFFF0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Khaki'
      KnownColor.Value = '#F0E68C'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Lavender'
      KnownColor.Value = '#E6E6FA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LavenderBlush'
      KnownColor.Value = '#FFF0F5'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LawnGreen'
      KnownColor.Value = '#7CFC00'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LemonChiffon'
      KnownColor.Value = '#FFFACD'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightBlue'
      KnownColor.Value = '#ADD8E6'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightCoral'
      KnownColor.Value = '#F08080'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightCyan'
      KnownColor.Value = '#E0FFFF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightGoldenrodYellow'
      KnownColor.Value = '#FAFAD2'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightGray'
      KnownColor.Value = '#D3D3D3'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightGreen'
      KnownColor.Value = '#90EE90'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightPink'
      KnownColor.Value = '#FFB6C1'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightSalmon'
      KnownColor.Value = '#FFA07A'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightSeaGreen'
      KnownColor.Value = '#20B2AA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightSkyBlue'
      KnownColor.Value = '#87CEFA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightSlateGray'
      KnownColor.Value = '#778899'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightSteelBlue'
      KnownColor.Value = '#B0C4DE'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LightYellow'
      KnownColor.Value = '#FFFFE0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Lime'
      KnownColor.Value = '#00FF00'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'LimeGreen'
      KnownColor.Value = '#32CD32'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Linen'
      KnownColor.Value = '#FAF0E6'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Magenta'
      KnownColor.Value = '#FF00FF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Maroon'
      KnownColor.Value = '#800000'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumAquamarine'
      KnownColor.Value = '#66CDAA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumBlue'
      KnownColor.Value = '#0000CD'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumOrchid'
      KnownColor.Value = '#BA55D3'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumPurple'
      KnownColor.Value = '#9370DB'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumSeaGreen'
      KnownColor.Value = '#3CB371'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumSlateBlue'
      KnownColor.Value = '#7B68EE'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumSpringGreen'
      KnownColor.Value = '#00FA9A'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumTurquoise'
      KnownColor.Value = '#48D1CC'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MediumVioletRed'
      KnownColor.Value = '#C71585'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MidnightBlue'
      KnownColor.Value = '#191970'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MintCream'
      KnownColor.Value = '#F5FFFA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'MistyRose'
      KnownColor.Value = '#FFE4E1'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Moccasin'
      KnownColor.Value = '#FFE4B5'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'NavajoWhite'
      KnownColor.Value = '#FFDEAD'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Navy'
      KnownColor.Value = '#000080'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'OldLace'
      KnownColor.Value = '#FDF5E6'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Olive'
      KnownColor.Value = '#808000'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'OliveDrab'
      KnownColor.Value = '#6B8E23'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Orange'
      KnownColor.Value = '#FFA500'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'OrangeRed'
      KnownColor.Value = '#FF4500'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Orchid'
      KnownColor.Value = '#DA70D6'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PaleGoldenrod'
      KnownColor.Value = '#EEE8AA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PaleGreen'
      KnownColor.Value = '#98FB98'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PaleTurquoise'
      KnownColor.Value = '#AFEEEE'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PaleVioletRed'
      KnownColor.Value = '#DB7093'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PapayaWhip'
      KnownColor.Value = '#FFEFD5'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PeachPuff'
      KnownColor.Value = '#FFDAB9'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Peru'
      KnownColor.Value = '#CD853F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Pink'
      KnownColor.Value = '#FFC0CB'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Plum'
      KnownColor.Value = '#DDA0DD'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'PowderBlue'
      KnownColor.Value = '#B0E0E6'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Purple'
      KnownColor.Value = '#800080'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Red'
      KnownColor.Value = '#FF0000'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'RosyBrown'
      KnownColor.Value = '#BC8F8F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'RoyalBlue'
      KnownColor.Value = '#4169E1'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SaddleBrown'
      KnownColor.Value = '#8B4513'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Salmon'
      KnownColor.Value = '#FA8072'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SandyBrown'
      KnownColor.Value = '#F4A460'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SeaGreen'
      KnownColor.Value = '#2E8B57'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SeaShell'
      KnownColor.Value = '#FFF5EE'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Sienna'
      KnownColor.Value = '#A0522D'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Silver'
      KnownColor.Value = '#C0C0C0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SkyBlue'
      KnownColor.Value = '#87CEEB'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SlateBlue'
      KnownColor.Value = '#6A5ACD'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SlateGray'
      KnownColor.Value = '#708090'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Snow'
      KnownColor.Value = '#FFFAFA'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SpringGreen'
      KnownColor.Value = '#00FF7F'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'SteelBlue'
      KnownColor.Value = '#4682B4'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Tan'
      KnownColor.Value = '#D2B48C'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Teal'
      KnownColor.Value = '#008080'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Thistle'
      KnownColor.Value = '#D8BFD8'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Tomato'
      KnownColor.Value = '#FF6347'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Turquoise'
      KnownColor.Value = '#40E0D0'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Violet'
      KnownColor.Value = '#EE82EE'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Wheat'
      KnownColor.Value = '#F5DEB3'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'White'
      KnownColor.Value = '#FFFFFF'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'WhiteSmoke'
      KnownColor.Value = '#F5F5F5'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'Yellow'
      KnownColor.Value = '#FFFF00'
      ADD(KnownColor,+KnownColor.Name)
      KnownColor.Name = 'YellowGreen'
      KnownColor.Value = '#9ACD32'
      ADD(KnownColor,+KnownColor.Name)
      EXIT
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      IF RECORDS(KnownColor) = 0
         DO InitializeKnownColorQueue
      END
      KnownColor.Name = KnownColorName
      GET(KnownColor,+KnownColor.Name)
      IF ~ERRORCODE()
         RETURN KnownColor.Value
      ELSE
         RETURN 0
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/10/27' '17:37:24'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME srcGetSearchFoldersFromRedFile
PROTOTYPE '(*SEARCHQTYPE pSearchQueue, *CSTRING pRedFilename)'
PARAMETERS '(*SEARCHQTYPE pSearchQueue, *CSTRING pRedFilename)'
[COMMON]
FROM ABC Source
MODIFIED '2017/07/02' ' 9:42:17'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under LGPLv3 (http://www.gnu.org/licenses/lgpl.html)
!
!    This file is part of Devuna-ClassViewer (https://github.com/Devuna/Devuna-ClassViewer)
!
!    Devuna-ClassViewer is free software: you can redistribute it and/or modify
!    it under the terms of the GNU General Public License as published by
!    the Free Software Foundation, either version 3 of the License, or
!    (at your option) any later version.
!
!    Devuna-ClassViewer is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with Devuna-ClassViewer.  If not, see <http://www.gnu.org/licenses/>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
szSearchPath      CSTRING(1025)
szText            CSTRING(1025)
InCommonSection   BYTE(FALSE)
szRedFilename     CSTRING(261)
pDelimiter        LONG
savPosition       STRING(4)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      szAsciiFilename = pRedFilename
      OPEN(SourceFile,ReadOnly+DenyNone)
      SET(SourceFile)
      NEXT(SourceFile)
      LOOP UNTIL ERRORCODE()
         szText = UPPER(CLIP(LEFT(SourceFile.sText)))
         IF InCommonSection
            IF szText[1] = '['
               InCommonSection = FALSE
               BREAK
            ELSIF szText[1 : 8] = '{{INCLUDE'
               pDelimiter = INSTRING('}',szText)
               pSearchQueue.szPath =  CLIP(LEFT(szText[10 : pDelimiter-1]))
               DO HandleRedirectionMacros
               szRedFilename = pSearchQueue.szPath

               savPosition = POSITION(SourceFile)
               CLOSE(SourceFile)
               srcGetSearchFoldersFromRedFile(pSearchQueue,szRedFilename)
               szAsciiFilename = pRedFilename
               OPEN(SourceFile,ReadOnly+DenyNone)
               SET(SourceFile)
               RESET(SourceFile,savPosition)
               NEXT(SourceFile)
            ELSIF szText[1 : 5] = '*.INC'
               DO AddFoldersToQueue
            ELSIF szText[1 : 3] = '*.*'
               DO AddFoldersToQueue
            END
         ELSE
            IF szText[1 : 8] = '[COMMON]'
               InCommonSection = TRUE
            END
         END
         NEXT(SourceFile)
      END
      CLOSE(SourceFile)
      RETURN
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
AddFoldersToQueue ROUTINE
   DATA
cc             LONG,AUTO
I              LONG,AUTO
pszFilePart    LONG,AUTO
szFullPath     CSTRING(260),AUTO
szSavePath     CSTRING(256),AUTO

   CODE
      I = INSTRING('=',szText)
      szSearchPath = CLIP(LEFT(szText[I+1 : LEN(szText)]))
      LOOP WHILE szSearchPath
         I = INSTRING(';',szSearchPath)
         IF I
            pSearchQueue.szPath = CLIP(LEFT(SUB(szSearchPath,1,I-1)))
            IF pSearchQueue.szPath[1] = '"'
               pSearchQueue.szPath = pSearchQueue.szPath[2 : LEN(pSearchQueue.szPath)-1]
            END
            IF pSearchQueue.szPath[LEN(pSearchQueue.szPath)] = '\'
               pSearchQueue.szPath[LEN(pSearchQueue.szPath)] = '<0>'
            END
            DO HandleRedirectionMacros
            IF pSearchQueue.szPath = '.'
               pSearchQueue.szPath = glo:szCurrentDir
            ELSIF pSearchQueue.szPath[1] = '.'
               cc = GetFullPathName(pSearchQueue.szPath,SIZE(szFullPath),szFullPath,pszFilePart)
               pSearchQueue.szPath = szFullPath
            END
            szSearchPath = SUB(szSearchPath,I+1,LEN(szSearchPath)-I)
         ELSE
            pSearchQueue.szPath = CLIP(LEFT(szSearchPath))
            IF pSearchQueue.szPath[1] = '"'
               pSearchQueue.szPath = pSearchQueue.szPath[2 : LEN(pSearchQueue.szPath)-1]
            END
            IF pSearchQueue.szPath[LEN(pSearchQueue.szPath)] = '\'
               pSearchQueue.szPath[LEN(pSearchQueue.szPath)] = '<0>'
            END
            DO HandleRedirectionMacros
            IF pSearchQueue.szPath = '.'
               pSearchQueue.szPath = glo:szCurrentDir
            ELSIF pSearchQueue.szPath[1] = '.'
               cc = GetFullPathName(pSearchQueue.szPath,SIZE(szFullPath),szFullPath,pszFilePart)
               pSearchQueue.szPath = szFullPath
            END
            szSearchPath = ''
         END
         IF pSearchQueue.szPath[LEN(pSearchQueue.szPath)] <> '\'
            szSavePath = CLIP(pSearchQueue.szPath) & '\'
         END
         pSearchQueue.szPath = UPPER(szSavePath)

         GET(pSearchQueue,+pSearchQueue.szPath)
         IF ERRORCODE()
            pSearchQueue.szPath = UPPER(szSavePath)
            ADD(pSearchQueue,+pSearchQueue.szPath)
         END
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
HandleRedirectionMacros ROUTINE
  DATA
I       LONG,AUTO
J       LONG,AUTO
N       LONG,AUTO

  CODE
    N = RECORDS(RedirectionQueue)
    LOOP I = 1 TO N
       GET(RedirectionQueue,I)
       LOOP
          J = INSTRING(RedirectionQueue.Token,UPPER(pSearchQueue.szPath),1)
          IF J
             pSearchQueue.szPath = SUB(pSearchQueue.szPath,1,J-1) & RedirectionQueue.Path & SUB(pSearchQueue.szPath,J+LEN(RedirectionQueue.Token),LEN(pSearchQueue.szPath)-J+LEN(RedirectionQueue.Token)-1)
          ELSE
             BREAK
          END
       END
    END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 5
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_SetWindowHelp
[INSTANCE]
INSTANCE 1
OWNER 4
[PROMPTS]
%TplName DEFAULT  ('KCR_SetWindowHelp (Devuna)')
%TplDescription DEFAULT  ('Set Window Help Property')
[END]
